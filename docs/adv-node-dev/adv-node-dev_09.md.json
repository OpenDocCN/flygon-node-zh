["```js\n[{\n  id: '/#12hjwjhwfcydg',\n\n}]\n```", "```js\n[{\n  id: '/#12hjwjhwfcydg',\n  name: 'Andrew',\n  room: 'The Office Fans'\n}]\n```", "```js\nvar users = [];\n\nvar addUser = (id, name, room) => {\n\n}\n```", "```js\nvar users = [];\n\nvar addUser = (id, name, room) => {\n  users.push({});\n}\n\nmodules.export = {addUsers};\n```", "```js\nclass Person {\n\n}\n```", "```js\nclass Person {\n\n}\nvar me = new Person();\n```", "```js\nclass Person {\n  constructor () {\n\n  }\n}\n```", "```js\nclass Person { \n   constructor (name, age){ \n\n   } \n} \n\nvar me = new Person('Andrew', 25); \n```", "```js\nclass Person { \n  constructor (name, age){ \n    console.log(name, age); \n  } \n} \n\nvar me = new Person('Andrew', 25); \n```", "```js\n**node server/utiles/users.js** \n```", "```js\nclass Person {\n  constructor (name, age) {\n    this.name = name;\n  }\n}\n```", "```js\nclass Person {\n  constructor (name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n```", "```js\nvar me = new Person('Andrew', 25);\n  console.log('this.name', me.name);\n  console.log('this.age', me.age);\n```", "```js\ngetUserDescription () {\n\n}\n```", "```js\ngetUserDescription () {\n  return `Jen is 1 year(s) old`;\n}\n```", "```js\ngetUserDescription () {\n  return `${this.name} is ${this.age} year(s) old`;\n}\n```", "```js\nclass Person {\n  constructor (name, age){\n    this.name = name;\n    this.age = age;\n  }\n  getUserDescription() {\n    return `${this.name} is ${this.age} year(s) old`;\n  }\n}\n\nvar me = new Person('Andrew', 25);\nvar description = me.getUserDescription();\nconsole.log(description);\n```", "```js\nclass Users {\n  constructor () {\n\n  }\n}\n```", "```js\nclass Users {\n  constructor () {\n    this.users = [];\n  }\n}\n```", "```js\nclass Users {\n  constructor () {\n    this.users = [];\n  }\n  addUser () {\n\n  }\n}\n```", "```js\n  addUser (id, name, room) {\n    var user = {id, name, room};\n  }\n}\n```", "```js\naddUser (id, name, room) {\n  var user = {id, name, room};\n  this.users.push(user);\n}\n```", "```js\naddUser (id, name, room) {\n  var user = {id, name, room};\n  this.users.push(user);\n  return user;\n}\n```", "```js\n  addUser (id, name, room) {\n    var user = {id, name, room};\n    this.users.push(user);\n    return user;\n  }\n}\nmodule.exports = {Users};\n```", "```js\nconst expect = require('expect'); \n\nconst {Users} = require('./users'); \n```", "```js\ndescribe('Users', () => {\n  it('should add new user', ()=> {\n    var users = new Users();\n  });\n});\n```", "```js\nit('should add new user', ()=> {\n  var users = new Users();\n  var user = {\n\n  }\n});\n```", "```js\ndescribe('Users', () => {\n  it('should add new user', ()=> {\n    var users = new Users();\n    var user = {\n      id: '123',\n      name: 'Andrew', \n      room: 'The office fans'\n    };\n  });\n});\n```", "```js\ndescribe('Users', () => {\n  it('should add new user', ()=> {\n    var users = new Users();\n    var user = {\n      id: '123',\n      name: 'Andrew',\n      room: 'The office fans'\n    };\n    var resUser = users.addUser(user.id, user.name, user.room);\n  });\n});\n```", "```js\nvar resUser = users.addUser(user.id, user.name, user.room);\n\nexpect(users.users).toEqual([user]);\n```", "```js\nremoveUser (id) { \n  //return user that was removed \n} \n```", "```js\ngetUser (id) { \n\n} \n```", "```js\ngetUserList (room){ \n\n} \n```", "```js\ngetUserList (room) {\n  ['Mike', 'Jen', 'Caleb']\n}\n```", "```js\ndescribe('Users', () => {\n  var users;\n\n  beforeEach(() => {\n\n  });\n```", "```js\nbeforeEach(() => {\n  users = new Users();\n  users.users = [{\n\n  }]\n});\n```", "```js\nvar users;\n\nbeforeEach(() => {\n  users = new Users();\n  users.users = [{\n    id: '1',\n    name: 'Mike',\n    room: 'Node Course'\n  }]\n});\n```", "```js\nbeforeEach(() => { \n  users = new Users(); \n  users.users = [{ \n    id: '1', \n    name: 'Mike', \n    room: 'Node Course' \n  },{ \n    id: '2', \n    name: 'Jen', \n    room: 'React Course' \n  },{ \n    id: '3', \n    name: 'Julie', \n    room: 'Node Course' \n  }] \n}); \n```", "```js\ngetUserList (room) {\n  var users = this.users.filter((user) => {\n\n  })\n}\n```", "```js\ngetUserList (room) {\n  var users = this.users.filter((user) => {\n    return user.room === room;\n  })\n}\n```", "```js\ngetUserList (room){\n  var users = this.users.filter((user) => user.room === room)\n}\n```", "```js\ngetUserList (room){\n  var users = this.users.filter((user) => user.room === room);\n  var namesArray = users.map\n}\n```", "```js\nvar users = this.users.filter((user) => user.room === room); \nvar namesArray = users.map((user) => user.name); \n```", "```js\ngetUserList (room){\n  var users = this.users.filter((user) => user.room === room);\n  var namesArray = users.map((user) => user.name);\n\n  return namesArray;\n}\n```", "```js\nit('should return names for node course', () => {\n  var userList = users\n});\n```", "```js\nit('should return names for node course', () => {\n  var userList = users.getUserList('Node Course');\n});\n```", "```js\nit('should return names for node course', () => {\n  var userList = users.getUserList('Node Course');\n\n  expect(userList).toEqual(['Mike', 'Julie']);\n});\n```", "```js\nit('should return names for react course', () => {\n  var userList = users.getUserList('React Course');\n\n  expect(userList).toEqual(['Jen']);\n});\n```", "```js\nit('should remove a user', () => {\n\n});\n```", "```js\nit ('should not remove user', () => {\n\n});\n```", "```js\ngetUser (id){\n  return this.users.filter((user) => user.id === id)[0]\n}\n```", "```js\nit('should find user', () => {\n  var userId = '2';\n});\n```", "```js\nit('should find user', () => {\n  var userId = '2';\n  var user = users.getUser(userId);\n});\n```", "```js\nit ('should find user', () => {\n   var userId = '2';\n   var user = users.getUser(userId);\n   expect(user.id).toBe(userId);\n});\n```", "```js\nit('should not find user', () => {\n  var userId = '99';\n});\n```", "```js\nit('should not find user', () => {\n  var userId = '99';\n  var user = users.getUser(userId);\n});\n```", "```js\n**>[][0]** \n```", "```js\nit ('should not find user', () => {\n  var userId = '99';\n  var user = users.getUser(userId);\n\n  expect(user).toNotExist();\n});\n```", "```js\nreturn this.users.filter((user) => user.id === id) [0]\n```", "```js\nremoveUser (id) {\n  var user = this.getUser(id);\n}\n```", "```js\nremoveUser (id) {\n  var user = this.getUser(id);\n\n  if (user) {\n\n  }\n\n  return user;\n}\n```", "```js\nif (user) {\n  this.users = this.users.filter((user) => user.id !== id);\n}\n```", "```js\nit('should remove a user', () => {\n  var userId = '1';\n  var user = users.removeUser(userId); \n});\n```", "```js\nit('should remove a user', () => {\n  var userId = '1';\n  var user = users.removeUser(userId);\n\n  expect(user.id).toBe(userId);\n});\n```", "```js\nit('should remove a user', () => {\n  var userId = '1';\n  var user = users.removeUser(userId);\n\n  expect(user.id).toBe(userId);\n  expect(users.users.length).toBe(2);\n});\n```", "```js\nit ('should not remove user', () => {\n  var userId = '99';\n  var user = users.removeUser(userId);\n\n  expect(user).toBe(userId);\n  expect(users.users.length).toBe(3);\n});\n```", "```js\n**nodemon server/server.js** \n```", "```js\nsocket.on('disconnect', function() {\n  console.log('Disconnected from server');\n});\n\nsocket.on('updateUserList')\n```", "```js\nsocket.on('updateUserList', function(users){\n  console.log('Users list', users);\n});\n```", "```js\nconst {Users} = require('./utils/users');\n```", "```js\nvar users = new Users();\n```", "```js\nsocket.join(params.room);\nusers.addUser(socket.id, params.name, params.room);\n```", "```js\nsocket.on('join', (params, callback) => {\n  if(!isRealString(params.name) || !isRealString(params.room)){\n    return callback('Name and room name are required.');\n  }\n});\n```", "```js\nsocket.join(params.room);\nusers.removeUser(socket.id);\nusers.addUser(socket.id, params.name, params.room);\n```", "```js\nsocket.join(params.room);\nusers.removeUser(socket.id);\nusers.addUser(socket.id, params.name, params.room);\n\nio.to(params.room).emit('updateUserList', users.getUserList(params.room));\n```", "```js\nsocket.io('disconnect', () => {\n  var user = users.removeUser(socket.id);\n});\n```", "```js\nsocket.io('disconnect', () => {\n  var user = users.removeUser(socket.id);\n\n  if (user){\n    io.to().emit();\n    io.to().emit();\n  }\n});\n```", "```js\nif (user){\n  io.to(user.room).emit('updateUserList', users.getUserList(user.room));\n  io.to(user.room).emit();\n}\n```", "```js\nio.to(user.room).emit('updateUserList', users.getUserList(user.room)); \nio.to(user.room).emit('newMessage', generateMessage('Admin', `${user.name} has left.`)); \n```", "```js\nsocket.on('updateUserList', function(users){\n  var ol = jQuery('<ol></ol>');\n});\n```", "```js\nsocket.on('updateUserList', function(users){\n  var ol = jQuery('<ol></ol>');\n\n  users.forEach(function () {\n\n  });\n});\n```", "```js\nsocket.on('updateUserList', function(users){\n  var ol = jQuery('<ol></ol>');\n\n  users.forEach(function () {\n    ol.append();\n  });\n});\n```", "```js\nsocket.on('updateUserList', function(users){\n  var ol = jQuery('<ol></ol>');\n\n  users.forEach(function (user) {\n    ol.append(jQuery('<li></li>').text(user));\n  });\n});\n```", "```js\nsocket.on('updateUserList', function(users){\n  var ol = jQuery('<ol></ol>');\n\n  users.forEach(function (user) {\n    ol.append(jQuery('<li></li>').text(user));\n  });\n\n  jQuery('#users').html(ol);\n});\n```", "```js\ngit commit -m 'Add Users class and updateUserList event'\n```", "```js\nsocket.emit('createMessage', {\n  from: 'User',\n  text: messageTextbox.val('')\n}, function() {\n  messageTextbox.val('')\n});\n```", "```js\nsocket.emit('createMessage', {\n  text: messageTextbox.val('')\n}, function() {\n  messageTextbox.val('')\n});\n```", "```js\nsocket.on('createMessage', (message, callback) => {\n  var user = users.getUser(socket.id);\n\n  io.emit('newMessage', generateMessage(message.from, message.text));\n  callback();\n});\n```", "```js\nsocket.on('createMessage', (message, callback) => {\n  var user = users.getUser(socket.io);\n\n  if(user && isRealString(message.text)){\n\n  }\n\n  io.emit('newMessage', generateMessage(message.from, message.text));\n  callback();\n});\n```", "```js\nif(user && isRealString(message.text)){\n  io.emit('newMessage', generateMessage(message.from, message.text));\n}\n```", "```js\nio.to(user.room).emit('newMessage', generateMessage(user.name, message.text)); \n```", "```js\nif(user){\n  io.emit('newLocationMessage', generateLocationMessage('Admin', coords.latitude, coords.longitude));\n}\n```", "```js\nio.to(user.room).emit('newLocationMessage', generateLocationMessage(user.name, coords.latitude, coords.longitude));\n```", "```js\n**git commit -am 'Send messages to only people in same room'** \n```"]