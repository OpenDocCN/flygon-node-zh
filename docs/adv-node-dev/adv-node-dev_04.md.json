["```js\nconst {mongoose} = require('./../server/db/mongoose');\n```", "```js\nconst {Todo} = require('./../server/models/todo');\n```", "```js\nvar id = '5a87f714abd1eb05704c92c9';\n\nTodo.find({\n   _id: id\n}).then((todos) => {\n   console.log('Todos', todos);\n});\n```", "```js\nTodo.findOne({\n   _id: id\n}).then((todo) => {\n   console.log('Todo', todo);\n});\n```", "```js\n**nodemon playground/mongoose-queries.js**\n\n```", "```js\nTodo.findById(id).then((todo) => {\n   console.log('Todo By Id', todo);\n});\n```", "```js\nTodo.findById(id).then((todo) => {\n   if(!todo) {\n         return console.log('Id not found');\n   }\n   console.log('Todo By Id', todo);\n});\n```", "```js\nTodo.findById(id).then((todo) => { \n  if(!todo) { \n    return console.log('Id not found'); \n  } \n  console.log('Todo By Id', todo); \n}).catch((e) => console.log(e));\n```", "```js\nconst {ObjectID} = require('mongodb');\n```", "```js\nif(!ObjectID.isValid(id)) {\n   console.log('ID not valid');\n}\n```", "```js\nconst {User} = require('./../server/models/user');\n```", "```js\nUser,findById('57bdb0fcdedf88450bfa2d66').then((user) => {\n   if(!user) {\n         return console.log('Unable to find user');\n   }\n}, (e) => {\n   console.log(e);\n});\n```", "```js\nUser.findById('5a8708e0e40b324268c5206c').then((user) => {\n   if(!user) {\n        return console.log('Unable to find user');\n   }\n   console.log(JSON.stringify(user, undefined, 2));\n}, (e) => {\n   console.log(e);\n});\n```", "```js\n**git commit -m 'Add queries playground file'** \n```", "```js\n//GET /todos/12345\napp.get('/todos/:id', (req, res) => {\n   res.send(req.params);\n});\n```", "```js\n**nodemon server/server.js** \n```", "```js\n//GET /todos/12345\napp.get('/todos/:id', (req, res) => {\n   var id = req.params.id;\n\n   if(!ObjectID.isValid(id)) {\n         return res.status(404).send();\n   }\n});\n```", "```js\nTodo.findById(id).then((todo) => {\n\n}).catch((e) => {\n   res.status(400).send();\n});\n```", "```js\nTodo.findById(id).then((todo) => {\n   if(!todo) {\n         return res.status(404).send();\n   }\n}).catch((e) => {\n   res.status(400).send();\n});\n```", "```js\nres.send({todo: todo});\n```", "```js\nTodo.findById(id).then((todo) => {\n   if(!todo) {\n         return res.status(404).send();\n   }\n   res.send({todo});\n}).catch((e) => {\n   res.status(400).send();\n});\n```", "```js\n**git commit -am 'Add GET /todos/:id'** \n```", "```js\ndescribe('GET /todos/:id', () => {\n   it('should return todo doc', (done) => {\n\n   });\n});\n```", "```js\nconst {ObjectID} = require('mongodb');\n```", "```js\nconst todos = [{\n   _id: new ObjectID(),\n   text: 'First test todo'\n},{\n   _id: new ObjectID(),\n   text: 'Second test todo'\n}];\n```", "```js\ndescribe('GET /todos/:id', () => {\n   it('should return todo doc', (done) => {\n         request(app)\n         .get(`/todos/${todos[0]._id.toHexString()}`)\n   });\n});\n```", "```js\ndescribe('GET /todos/:id', () => {\n   it('should return todo doc', (done) => {\n         request(app)\n         .get(`/todos/${todos[0]._id.toHexString()}`)\n         .expect((res) => {\n               expect(res.body.todo.text).toBe(todos[0].text);\n         })\n         .end(done);\n   });\n});\n```", "```js\nit('should return 404 if todo not found', (done) => {\n   var hexId = new ObjectID().toHexString();\n\n   request(app)\n   .get(`/todos/${hexId}`)\n   .expect(404)\n   .end(done);\n});\n\nit('should return 404 for non-object ids', (done) => {\n   // /todos/123\n});\n```", "```js\nit('should return 404 for non-object ids', (done) => {\n   request(app)\n   .get('/todos/123abc')\n   .expect(404)\n   .end(done);\n});\n```", "```js\n**git commit -am 'Add test cases for GET /todos/:id'** \n```", "```js\nvar app = express();\nconst port = process.env.PORT || 3000;\n```", "```js\napp.listen(port, () => {\n   console.log(`Started on port ${port}`);\n});\n```", "```js\n\"scripts\": {\n  \"start\": \"node server/server.js\",\n  \"test\":\"mocha server/**/*.test.js\",\n  \"test-watch\":\"nodemon --exec 'npm test'\"\n}\n```", "```js\n\"engines\": {\n  \"node\": \"9.3.0\"\n},\n```", "```js\n**heroku addons:create**\n```", "```js\n**heroku addons:create mongolab:sandbox** \n```", "```js\nmongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/TodoApp');\n```", "```js\n**git commit -am 'Setup app for heroku'**\n```", "```js\n**git push heroku master** \n```", "```js\nconst {ObjectID} = require('mongodb');\n\nconst {mongoose} = require('./../server/db/mongoose');\nconst {Todo} = require('./../server/models/todo');\nconst {User} = require('./../server/models/user');\n```", "```js\nTodo.remove({}).then((result) => { \n   console.log(result); \n});\n```", "```js\n**node playground/mongoose-remove.js**\n```", "```js\nTodo.findByIdAndRemove('asdf').then((todo) => {\n\n});\n```", "```js\n//Todo.remove({}).then((result) => {\n// console.log(result);\n//});\nTodo.findByIdAndRemove('5aa8b74c3ceb31adb8043dbb').then((todo) => {\n   console.log(todo);\n});\n```", "```js\nTodo.findOneAndRemove({_id: '57c4670dbb35fcbf6fda1154'}).then((todo) => {\n\n});\n```", "```js\napp.delete('/todos/:id', (req, res) => {\n   var id = req.params.id;\n\n   if(!ObjectID.isValid(id)) {\n         return res.status(404).send();\n   }\n\n   Todo.findByIdAndRemove(id).then((todo) => {\n         if(!todo) {\n               return res.status(404).send();\n         }\n         res.send(todo);\n   }).catch((e) => {\n         res.status(400).send();\n   });\n});\n```", "```js\n**node server/server.js** \n```", "```js\n**git commit -m 'Add DELETE /todos/:id route'** \n```", "```js\n**git push heroku master** \n```", "```js\nTodo.findByIdAndRemove(id).then((todo) => {\n   if(!todo) {\n         return res.status(404).send();\n   }\n   res.send({todo});\n}).catch((e) => {\n   res.status(400).send();\n});\n```", "```js\ndescribe('DELETE /todos/:id', () => {\n   it('should remove a todo', (done) => {\n\n   });\n});\n```", "```js\ndescribe('DELETE /todos/:id', () => {\n   it('should remove a todo', (done) => {\n\n   }); \n   it('should return 404 if todo not found', (done) => {\n\n   });\n});\n```", "```js\ndescribe('DELETE /todos/:id', () => {\n   it('should remove a todo', (done) => {\n\n   }); \n   it('should return 404 if todo not found', (done) => {\n\n   });\n   it('should return 404 if object id is invalid', (done) => {\n\n   });\n});\n```", "```js\nvar hexId = todos[1]._id.toHexString();\n```", "```js\nrequest(app)\n.delete(`/todos/${hexId}`)\n.expect(200)\n.expect((res) => {\n   expect(res.body.todo._id).toBe(hexId);\n})\n```", "```js\n.end((err, res) => {\n   if(err){\n         return done(err);\n   }\n\n   Todo.findById(hexId).then((todo) => {\n         expect(todo).toBeFalsy();\n         done();\n   }).catch((e) => done(e));\n});\n```", "```js\n**npm run test-watch**  \n```", "```js\n**git commit -am 'Test the DELETE /todos/:id route'** \n```", "```js\n**npm i --save lodash@4.17.5** \n```", "```js\nconst _ = require('lodash');\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst {ObjectID} = require('mongodb');\n```", "```js\napp.patch('/todos/:id',(req, res) => {\n   var id = req.params.id;\n   var body = _.pick(req.body, ['text', 'completed']);\n});\n```", "```js\nif(!ObjectID.isValid(id)){\n   return res.status(404).send();\n}\n```", "```js\nif(_.isBoolean(body.completed) && body.completed) {\n   body.completedAt = new Date().getTime();\n} else {\n\n}\n```", "```js\nif(_.isBoolean(body.completed) && body.completed) {\n  body.completedAt = new Date().getTime();\n} else {\n  body.completed = false;\n  body.completedAt = null;\n}\n```", "```js\n$set: {\n   completed:true\n}\n```", "```js\nTodo.findByIdAndUpdate(id, {$set: body}, {new: true}).then((todo) => {\n\n}).catch((e) => {\n   res.status(400).send();\n})\n```", "```js\nTodo.findByIdAndUpdate(id, {$set: body}, {new: true}).then((todo) => {\n\nif(!todo)\n{\n   return res.status(404).send();\n}\nres.send({todo});\n}).catch((e) => {\n   res.status(400).send();\n})\n```", "```js\n**git commit -am 'Add PATCH /todos/:id'** \n```", "```js\n**git push heroku master** \n```", "```js\nconst todos = [{\n   _id: new ObjectID(),\n   text: 'First test todo'\n},{\n   _id: new ObjectID(),\n   text: 'Second test todo',\n   completed: true,\n   completedAt: 333\n}];\n```", "```js\ndescribe('PATCH /todos/:id', () => {\n\n});\n```", "```js\nit('should update the todo', (done) => {\n   var hexId = todos[0]._id.toHexString();\n   var text = 'This should be the new text';\n\n   request(app)\n   .patch(`/todos/${hexId}`)\n   .send({\n         completed: true,\n         text\n   })\n});\n```", "```js\nit('should update the todo', (done) => {\n   var hexId = todos[0]._id.toHexString();\n   var text = 'This should be the new text';\n\n   request(app)\n   .patch(`/todos/${hexId}`)\n   .send({\n         completed: true,\n         text\n   })\n   .expect(200)\n   .expect((res) => {\n         expect(res.body.todo.text).toBe(text);\n         expect(res.body.todo.completed).toBe(true);\n         expect(res.body.todo.completedAt).toBeA('number');\n   })\n   .end(done);\n});\n```", "```js\nit('should clear completedAt when todo is not completed', (done) => {\n   var hexId = todos[1]._id.toHexString();\n   var text = 'This should be the new text!!';\n\n   request(app)\n   .patch(`/todos/${hexId}`)\n   .send({\n         completed: false,\n         text\n   })\n   .expect(200)\n   .expect((res) => {\n         expect(res.body.todo.text).toBe(text);\n         expect(res.body.todo.completed).toBe(false);\n         expect(res.body.todo.completedAt).toNotExist();\n   })\n   .end(done);\n});\n```", "```js\n**git commit -am 'Add tests for PATCH /todos/:id'**  \n```", "```js\nvar env = process.env.NODE_ENV;\n```", "```js\n\"scripts\": {\n   \"start\": \"node server/server.js\",\n   \"test\": \"export NODE_ENV = test mocha server/**/*.test.js\",\n   \"test-watch\": \"nodemon --exec 'npm test'\"\n}\n```", "```js\n\"scripts\": {\n   \"start\": \"node server/server.js\",\n   \"test\": \"export NODE_ENV = test || SET NODE_ENV = test && mocha server/**/*.test.js\",\n   \"test-watch\": \"nodemon --exec 'npm test'\"\n}\n```", "```js\nif(env === 'development') {\n\n} else if(env === 'test') {\n\n}\n```", "```js\nmongoose.connect(process.env.MONGODB_URI);\n```", "```js\nif(env === 'development') {\n  process.env.PORT = 3000;\n  process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoApp';\n} else if(env === 'test') {\n  process.env.PORT = 3000;\n  process.env.MONGODB_URI = 'mongodb://localhost:27017/TodoAppTest';\n}\n```", "```js\nconsole.log('env *****', env);\n```", "```js\n**node server/server.js** \n```", "```js\nrequire('./config/config');\n```", "```js\n**git commit -m 'Setup separate test and development envs'**\n```", "```js\n**git push heroku master**\n```"]