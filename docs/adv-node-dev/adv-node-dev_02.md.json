["```js\nnpm install mongodb@3.0.2 --save\n```", "```js\nconst MongoClient = require('mongodb').MongoClient; \n```", "```js\nMongoClient.connect('mongodb://')\n```", "```js\nMongoClient.connect('mongodb://localhost:27017/TodoApp'); \n```", "```js\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => { \n\n});\n```", "```js\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => {\n  if(err){\n    console.log('Unable to connect to MongoDB server');\n  }\n  console.log('Connected to MongoDB server');\n});\n```", "```js\nif(err) { \n    return console.log('Unable to connect to MongoDB server'); \n  } \n```", "```js\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => {\n  if(err) { \n    return console.log('Unable to connect to MongoDB server'); \n  } \n  console.log('Connected to MongoDB server');\n  const db = client.db('TodoApp');\n  client.close(); \n}); \n```", "```js\nnode playground/mongodb-connect.js\n```", "```js\ndb.collection('Todos')\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => {\n  if(err){\n    console.log('Unable to connect to MongoDB server');\n  }\n  console.log('Connected to MongoDB server');\n  const db = client.db('TodoApp');\n  db.collection('Todos').insertOne({\n    text: 'Something to do',\n    completed: false\n  }, (err, result) => {\n\n  });\n  client.close();\n});\n```", "```js\ndb.collection('Todos').insertOne({ \n  text: 'Something to do', \n  completed: false \n}, (err, result) => { \n  if(err){ \n    return console.log('Unable to insert todo', err); \n  }\n```", "```js\ndb.collection('Todos').insertOne({ \n  text: 'Something to do', \n  completed: false \n}, (err, result) => { \n  if(err){ \n    return console.log('Unable to insert todo', err); \n  }\n\n  console.log(JSON.stringify(result.ops, undefined, 2)); \n}); \n```", "```js\nnode playground/ mongodb-connect.js\n```", "```js\n//Insert new doc into Users(name, age, location)\ndb.collection('Users')\n```", "```js\n//Insert new doc into Users(name, age, location)\ndb.collection('Users').insertOne({\n  name: 'Andrew',\n  age: 25,\n  location: 'Philadelphia'\n}\n```", "```js\n//Insert new doc into Users(name, age, location)\ndb.collection('Users').insertOne({\n  name: 'Andrew',\n  age: 25,\n  location: 'Philadelphia'\n}, (err, result) => {\n  if(err) {\n    return console.log('Unable to insert user', err);\n  }\n  console.log(result.ops);\n});\n```", "```js\nnode playground/mongodb-connect.js\n```", "```js\ndb.collection('Users').insertOne({\n  _id: 123,\n  name: 'Andrew',\n  age: 25,\n  location: 'Philadelphia'\n}\n```", "```js\ndb.collection('Users').insertOne({\n  name: 'Andrew',\n  age: 25,\n  location: 'Philadelphia'\n}, (err, result) => {\n  if(err) {\n    return console.log('Unable to insert user', err);\n  }\n\n  console.log(result.ops);\n});\n```", "```js\nconsole.log(result.ops[0]._id);\n```", "```js\nconsole.log(result.ops[0]._id.getTimestamp()); \n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n\nvar user = {name: 'andrew', age: 25};\n```", "```js\nvar user = {name: 'andrew', age: 25};\nvar {name} = user;\n```", "```js\nvar user = {name: 'andrew', age: 25};\nvar {name} = user;\nconsole.log(name);\n```", "```js\n// const MongoClient = require('mongodb').MongoClient;\nconst MongoClient = require('mongodb').MongoClient;\n```", "```js\nconst {MongoClient} = require('mongodb');\n```", "```js\nconst {MongoClient, ObjectID} = require('mongodb');\n```", "```js\nconst {MongoClient, ObjectID} = require('mongodb');\n\nvar obj = new ObjectID(); \n```", "```js\nconsole.log(obj); \n```", "```js\nvar obj = new ObjectID();\nconsole.log(obj);\n```", "```js\n{\n  text : \"Walk the dog\",\n  completed : false\n}\n```", "```js\ndb.collection('Todos').find();\n```", "```js\ndb.collection('Todos').find().toArray().then((docs) => {\n\n});\n```", "```js\ndb.collection('Todos').find().toArray().then((docs) => {\n\n}, (err) => { \n  console.log('Unable to fetch todos', err); \n}); \n```", "```js\n  db.collection('Todos').find().toArray().then((docs) => {\n    console.log('Todos');\n    console.log(JSON.stringify(docs, undefined, 2));\n  }, (err) => {\n    console.log('Unable to fetch todos', err);\n  });\n```", "```js\n//const MongoClient = require('mongodb').MongoClient;\nconst {MongoClient, ObjectID} = require('mongodb');\n\nMongoClient.connect('mongodb://localhost:27017/TodoApp', (err, client) => {\n  if(err){ \n    console.log('Unable to connect to MongoDB server');\n  } \n  console.log('Connected to MongoDB server');\n  const db = client.db('TodoApp');\n\n  db.collection('Todos').find().toArray().then((docs) => {\n    console.log('Todos');\n    console.log(JSON.stringify(docs, undefined, 2));\n  }, (err) => {\n    console.log('Unable to fetch todos', err);\n  });\n  //client.close();\n});\n```", "```js\nnode playground/mongodb-find.js\n```", "```js\ndb.collection('Todos').find({completed: false}).toArray().then((docs) => {\n```", "```js\ndb.collection('Todos').find({_id: ''}).toArray().then((docs) => {\n```", "```js\ndb.collection('Todos').find({\n  _id: '5a867e78c3a2d60bef433b06'\n}).toArray().then((docs) => {\n```", "```js\ndb.collection('Todos').find({\n  _id: new ObjectID('5a867e78c3a2d60bef433b06');\n})\n```", "```js\ndb.collection('Todos').find({}).count().then((count) => {\n```", "```js\ndb.collection('Todos').find({}).count().then((count) => {\n   console.log('Todos count:');\n}, (err) => {\n   console.log('Unable to fetch todos', err);\n});\n```", "```js\ndb.collection('Todos').find({}).count().then((count) => {\n   console.log(`Todos count: ${count}`);\n}, (err) => {\n   console.log('Unable to fetch todos', err);\n});\n```", "```js\ndb.collection('Users').find({name: 'Andrew'})\n```", "```js\ndb.collection('Users').find({name: 'Andrew'}).toArray().then((docs) => {\n  console.log(JSON.stringify(docs, undefined, 2));\n});\n```", "```js\nnode_modules/\n```", "```js\ngit add .\ngit commit -m 'Init commit'\n```", "```js\ngit remote add origin https://github.com/garygreig/node-course-2-todo-api.git\ngit push -u origin master\n```", "```js\n{\n   text: 'Eat lunch',\n   completed: false\n}\n```", "```js\n//deleteMany \ndb.collection('Todos').deleteMany({text: 'Eat lunch'});\n```", "```js\n//deleteMany \ndb.collection('Todos').deleteMany({text: 'Eat lunch'}).then((result) => {\n  console.log(result); \n});\n```", "```js\nnode playground/mongodb-delete.js\n```", "```js\n//deleteOne \ndb.collection('Todos').deleteOne({text: 'Eat lunch'}).then((result) => {\n  console.log(result); \n});\n```", "```js\n//findOneAndDelete\ndb.collection('Todos').findOneAndDelete({completed: false}).then((result) => {\n  console.log(result);\n});\n```", "```js\ndb.collection('Users').deleteMany({name: 'Andrew'});\n```", "```js\ndb.collection('Users').deleteMany({name: 'Andrew'});\n\ndb.collection('Users').findOneAndDelete({\n  _id: new ObjectID(\"5a86978929ed740ca87e5c31\")\n})\n```", "```js\ndb.collection('Users').deleteMany({name: 'Andrew'});\n\ndb.collection('Users').findOneAndDelete({\n  _id: new ObjectID(\"5a86978929ed740ca87e5c31\")\n}).then((results) => {\n  console.log(JSON.stringify(results, undefined, 2));\n});\n```", "```js\ngit commit -m 'Add delete script'\n```", "```js\ndb.collection('Todos').findOneAndUpdate({ \n  _id: new ObjectID('5a86c378baa6685dd161da6e') \n}, { \n  $set: { \n    completed:true \n  } \n}, { \n  returnOriginal: false \n}).then((result) => { \n  console.log(result); \n}); \n```", "```js\nnode playground/mongodb-update.js\n```", "```js\ndb.collection('Todos').findOneAndUpdate({\n  _id: new ObjectID('57bc4b15b3b6a3801d8c47a2')\n}, {\n  $set: {\n    completed:true\n  }\n}, {\n  returnOriginal: false\n}).then((result) => {\n  console.log(result);\n});\n```", "```js\ndb.collection('Users').findOneAndUpdate({ \n  _id: new ObjectID('57abbcf4fd13a094e481cf2c') \n}, { \n  $set: { \n    name: 'Andrew' \n  }, \n  $inc: { \n    age: 1 \n  } \n}, { \n  returnOriginal: false \n}).then((result) => { \n  console.log(result); \n}); \n```", "```js\ngit add .\ngit commit -m 'Add update script'\n```", "```js\ngit push\n```", "```js\n**npm i mongoose@5.0.6 --save**\n```", "```js\nvar mongoose = require('mongoose');\n```", "```js\nvar mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n```", "```js\nvar mongoose = require('mongoose');\n\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n```", "```js\nmongoose.connect('mongodb://localhost:27017/TodoApp');\nvar Todo = mongoose.model('Todo', {\n\n});\n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n\n  },\n  completed: {\n\n  },\n  completedAt: {\n\n  }\n});\n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n    type: String\n  },\n```", "```js\n  completed: {\n    type: Boolean\n  },\n```", "```js\n  completedAt: {\n    type: Number\n  }\n});\n```", "```js\nvar newTodo = new Todo({\n  text: 'Cook dinner'\n});\n```", "```js\nnewTodo.save().then((doc) => {\n\n}, (e) => {\n\n});\n```", "```js\nnewTodo.save().then((doc) => {\n  console.log('Saved todo', doc);\n}, (e) => {\n  console.log('Unable to save todo');\n});\n```", "```js\n**node server/server.js** \n```", "```js\nvar otherTodo = new Todo ({\n\n});\n```", "```js\nvar otherTodo = new Todo ({\n  text: 'Feed the cat',\n  completed: true,\n  completedAt: 123\n});\n```", "```js\nvar otherTodo = new Todo ({\n  text: 'Feed the cat',\n  completed: true,\n  completedAt: 123\n});\n\notherTodo.save().then((doc) => {\n  console.log(JSON.stringify(doc, undefined, 2));\n})\n```", "```js\notherTodo.save().then((doc) => {\n  console.log(JSON.stringify(doc, undefined, 2));\n}, (e) => {\n  console.log('Unable to save', e);\n});\n```", "```js\n**node server/server.js** \n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n    type: String,\n    required: true\n  },\n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n    type: String,\n    required: true,\n    minlength: 1\n  },\n```", "```js\nvar otherTodo = new Todo ({\n  text: ''\n});\n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n    type: String,\n    required: true,\n    minlength: 1,\n    trim: true\n  },\n```", "```js\nvar otherTodo = new Todo ({\n  text: '      '\n});\n```", "```js\nvar otherTodo = new Todo ({\n  text: '    Edit this video    '\n});\n```", "```js\n  completed: {\n    type: Boolean,\n    default: false\n  },\n```", "```js\n  completed: {\n    type: Boolean,\n    default: false\n  },\n  completedAt: {\n    type: Number,\n    default: null\n  }\n```", "```js\nvar otherTodo = new Todo ({\n  text: 23\n});\n```", "```js\nvar otherTodo = new Todo ({\n  text: true\n});\n```", "```js\nvar otherTodo = new Todo ({\n  text: 'Something to do'\n});\n```", "```js\nvar User = mongoose.model('User', {\n\n});\n```", "```js\nvar User = mongoose.model('User', {\n  email: {\n    type: String,\n\n  }\n});\n```", "```js\nvar User = mongoose.model('User', {\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 1\n  }\n});\n```", "```js\nvar User = mongoose.model('User', {\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 1\n  }\n});\n\nvar user = new User({\n\n});\n```", "```js\nvar user = new User({\n\n});\n\nuser.save().then((doc) => {\n  console.log('User saved', doc);\n}, (e) => {\n  console.log('Unable to save user', e);\n});\n```", "```js\nvar user = new User({\n  email: 'andrew@example.com '\n});\n```", "```js\nvar mongoose = require('mongoose');\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n```", "```js\nmongoose.connect('mongodb://localhost:27017/TodoApp');\n\nmodule.exports = {\n  mongoose: mongoose\n};\n```", "```js\nmodule.exports = {mongoose};\n```", "```js\nvar mongoose = require('./db/mongoose');\n```", "```js\nvar Todo = mongoose.model('Todo', {\n  text: {\n    type: String,\n    required: true,\n    minlength: 1,\n    trim: true\n  },\n  completed: {\n    type: Boolean,\n    default: false\n  },\n  completedAt: {\n    type: Number,\n    default: null\n  }\n});\n```", "```js\nvar User = mongoose.model('User', {\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 1\n  }\n});\n```", "```js\nvar mongoose = require('mongoose');\n\nvar Todo = mongoose.model('Todo', {\n```", "```js\nmodule.exports = {Todo};\n```", "```js\nVar mongoose = require('mongoose');\n\nvar User = mongoose.model('User', {\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    minlength: 1\n  }\n});\n\nmodule.exports = {User};\n```", "```js\nvar {mongoose} = require('./db/mongoose');\nvar {Todo} = require('./models/todo');\nvar {User} = require('./models/user');\n```", "```js\n**npm i express@4.16.2 body-parser@1.18.2 --save** \n```", "```js\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar {mongoose} = require('./db/mongoose');\nvar {Todo} = require('./models/todo');\nvar {User} = require('./models/user');\n```", "```js\nvar {User} = require('./models/user');\n\nvar app = express();\n```", "```js\nvar app = express();\n\napp.listen(3000, () => {\n  console.log('Started on port 3000');\n});\n```", "```js\napp.post('/todos', (req, res) => {\n\n});\n```", "```js\nvar app = express();\n\napp.use(bodyParser.json());\n```", "```js\napp.use(bodyParser.json());\n\napp.post('/todos', (req, res) => {\n  console.log(req.body);\n});\n```", "```js\n**node server/server.js** \n```", "```js\n{\n  \"text\": \"This is from postman\"\n}\n```", "```js\napp.post('/todos', (req, res) => {\n  var todo = new Todo({\n    text: req.body.text\n  });\n```", "```js\napp.post('/todos', (req, res) => {\n  var todo = new Todo({\n    text: req.body.text\n  });\n\ntodo.save().then((doc) => {\n\n}, (e) => {\n\n});\n```", "```js\ntodo.save().then((doc) => {\n  res.send(doc);\n}, (e) => {\n  res.send(e);\n});\n```", "```js\ntodo.save().then((doc) => {\n  res.send(doc);\n}, (e) => {\n  res.status(400).send(e);\n});\n```", "```js\n**nodemon server/server.js** \n```", "```js\n**git commit -m 'Add POST /todos route and refractor mongoose'** \n```", "```js\n**npm i expect@22.3.0 mocha@5.0.1 nodemon@1.15.0 supertest@3.0.0 --save-dev** \n```", "```js\nconst expect = require('expect');\nconst request = require('supertest');\n```", "```js\nmodule.exports = {app};\n```", "```js\nconst expect = require('expect');\nconst request = require('supertest');\n\nconst {app} = require('./../server');\nconst {Todo} = require('./../models/todo');\n```", "```js\nconst {Todo} = require('./../models/todo');\n\ndescribe('POST /todos', () => {\n  it('should create a new todo')\n});\n```", "```js\ndescribe('POST /todos', () => {\n  it('should create a new todo',(done) => {\n    var text = 'Test todo text';\n  });\n});\n```", "```js\ndescribe('POST /todos', () => {\n  it('should create a new todo',(done) => {\n    var text = 'Test todo text';\n\n    request(app)\n    .post('/todos')\n    .send({text})\n  })\n});\n```", "```js\n    request(app)\n    .post('/todos')\n    .send({text})\n    .expect(200)\n    .expect((res) => {\n      expect(res.body.text).toBe(text);\n    })\n```", "```js\n  request(app)\n  .post('/todos')\n  .send({text})\n  .expect(200)\n  .expect((res) => {\n    expect(res.body.text).toBe(text);\n  })\n  .end((err, res) => {\n\n});\n```", "```js\n.end((err, res) => {\n  if(err) {\n    return done(err);\n  }\n});\n```", "```js\n.end((err, res) => {\n  if(err) {\n    return done(err);\n  }\n\nTodo.find().then((todos) => {\n\n})\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(1);\n  expect(todos[0].text).toBe(text);\n})\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(1);\n  expect(todos[0].text).toBe(text);\n  done();\n})\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(1);\n  expect(todos[0].text).toBe(text);\n  done();\n}).catch((e) => done(e));\n```", "```js\n\"scripts\": {\n  \"test\": \"mocha server/**/*.test.js\",\n  \"test-watch\":\n},\n```", "```js\n\"scripts\": {\n  \"test\": \"mocha server/**/*.test.js\",\n  \"test-watch\": \"nodemon --exec 'npm test'\"\n},\n```", "```js\nconst {Todo} = require('./../models/todo');    \n\nbeforeEach((done) => {\n\n});\n```", "```js\nbeforeEach((done) => {\n  Todo.remove({}).then(() => {\n    done();\n  })\n});\n```", "```js\nbeforeEach((done) => {\n  Todo.remove({}).then(() => done());\n});\n```", "```js\n**npm run test-watch** \n```", "```js\nrequest(app)\n  .post('/todos')\n  .send({text})\n  .expect(200)\n  .expect((res) => {\n    expect(res.body.text).toBe(text + '1');\n})\n```", "```js\nexpect(todos.length).toBe(3); \n```", "```js\nit('should not create todo with invalid body data', (done) => {\n\n});\n```", "```js\n.expect((res) => {\n  expect(res.body.text).toBe(text);\n})\n```", "```js\nit('should not create todo with invalid body data', (done) => {\n  request(app)\n  .post('/todos')\n  .send({})\n  .expect(400)\n  .end((err, res) => {\n\n  });\n});\n```", "```js\n.end((err, res) => {\n  if(err) {\n    return done(err);\n  }\n});\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(0);\n});\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(0);\n  done();\n}).catch((e) => done(e));\n```", "```js\n**git commit -m 'Test POST /todos route'** \n```", "```js\napp.get('/todos', (req, res) => {\n\n});\n```", "```js\napp.get('/todos', (req, res) => {\n  Todo.find()\n});\n```", "```js\napp.get('/todos', (req, res) => {\n  Todo.find().then((todos) => {\n    res.send()\n  }, (e) => {\n\n  })\n});\n```", "```js\napp.get('/todos', (req, res) => {\n  Todo.find().then((todos) => {\n    res.send({todos});\n  }, (e) => {\n\n  })\n});\n```", "```js\napp.get('/todos', (req, res) => {\n  Todo.find().then((todos) => {\n    res.send({todos});\n  }, (e) => {\n    res.status(400).send(e);\n  });\n});\n```", "```js\n**node server/server.js** \n```", "```js\n{ \n  \"text\": \"Something to do from postman\"\n}\n```", "```js\n**git commit -a -m 'Add GET /todos route'** \n```", "```js\nconst todos = [{\n  text: 'First test todo'\n},{\n  text: 'Second test todo'\n}];\n```", "```js\nbeforeEach((done) => {\n  Todo.remove({}).then(() => {\n    return Todo.insertMany(todos);\n  }).then(() => done());\n});\n```", "```js\n**npm run test-watch** \n```", "```js\nTodo.find({text}).then((todos) => {\n  expect(todos.length).toBe(1);\n  expect(todos[0].text).toBe(text);\n  done();\n}).catch((e) => done(e));\n```", "```js\nTodo.find().then((todos) => {\n  expect(todos.length).toBe(2);\n  done();\n}).catch((e) => done(e));\n```", "```js\ndescribe('GET /todos', () => { \n  it('should get all todos', (done) => { \n    request(app) \n    .get('/todos') \n  )}; \n});\n```", "```js\ndescribe('GET /todos', () => {\n  it('should get all todos', (done) => {\n    request(app)\n    .get('/todos')\n    .expect(200)\n    .expect((res) => {\n      expect(res.body.todos.length).toBe(2);\n    })\n    .end(done);\n  )};\n});\n```", "```js\n**git commit -a -m 'Add tests for GET /todos'**\n```"]