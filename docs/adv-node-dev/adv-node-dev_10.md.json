["```js\nconst users = [];\nconst grades = [];\n```", "```js\nconst users = [{\n  id: 1,\n\n}];\n\nconst grades = [];\n```", "```js\nconst users = [{\n  id: 1,\n  name: 'Andrew',\n  schoolId: 101\n}];\n\nconst grades = [];\n```", "```js\nconst users = [{\n  id: 1,\n  name: 'Andrew',\n  schoolId: 101\n}, {\n  id: 2,\n  name: 'Jessica',\n  schoolId: 999\n}];\n\nconst grades = [];\n```", "```js\nconst grades = [];\n\nconst getUser = [id] => {\n};\n```", "```js\nconst users = [{\n  id: 1,\n  name: 'Andrew',\n  schoolId: 101\n}, \n```", "```js\n{\n  id: 2,\n  name: 'Jessica',\n  schoolId: 999\n}];\n```", "```js\nconst getUser = (id) => {\n  return new Promise((resolve, reject) => { \n\n });\n};\n```", "```js\nconst getUser = (id) => {\n return new Promise((resolve, reject) => { \n  const user = user.find(() = { \n\n  }); \n });\n};\n```", "```js\nconst getUser = (id) => {\n  return new Promise((resolve, reject) => { \n    const user = user.find((user) => {\n   return user.id === id;\n  });\n });\n};\n```", "```js\nconst getUser = (id) => {\n return new Promise((resolve, reject) => { \n   const user = user.find((user) => user.id === id); \n```", "```js\nconst getUser = (id) => {\n return new Promise((resolve, reject) => { \n   const user = user.find((user) => user.id === id); \n\n   if (user) {\n     resolve();\n   } else {\n     reject();\n   } \n });\n};\n```", "```js\nconst getUser = (id) => {\n  return new Promise((resolve, reject) => { \n    const user = user.find((user) => user.id === id); \n\n    if (user) {\n      resolve(user);\n    } else {\n      reject('Unable to find user with id of ${id}.');\n    } \n  });\n};\n```", "```js\ngetUser(2).then().catch((e) => {\n  console.log(e);\n});\n```", "```js\ngetUser(2).then((user) => {\n  console.log(user);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\ngetUser(2).then((user) => {\n  console.log(user);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\ngetUser(21).then((user) => {\n  console.log(user);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nconst getGrades = () => {\n\n};\n```", "```js\nconst grades = [{\n  id: 1,\n  schoolId: 101,\n  grade: 86\n}];\n```", "```js\nconst grades = [{\n  id: 1,\n  schoolId: 101,\n  grade: 86\n}, {\n  id: 2,\n  schoolId: 999,\n  grade: 100\n}, {\n  id: 3,\n  schoolId: 101,\n  grade: 80\n}];\n```", "```js\nconst getGrades = (schoolId) => {\n  return new Promise((resolve, reject) => {\n\n  });\n};\n```", "```js\nconst getGrades = (schoolId) => {\n  return new Promise((resolve, reject) => {\n    resolve(grades.filter((grade) => grade.schoolId === schoolId));\n  });\n};\n```", "```js\ngetGrades(101).then((grades) => {\n  console.log(grades);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\ngetGrades(12).then((grades) => {\n  console.log(grades);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nconst getGrades = (schoolId) => {\n  return new Promise((resolve, reject) => {\n    resolve(grades.filter((grade) => grade.schoolId === schoolId));\n  });\n};\n\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n\n};\n```", "```js\ngetStatus(1).then((status) => {\n  console.log(status);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n  return getUser(userId).then((tempUser) => {\n    return getGrades(user.schoolId);\n  })\n};\n```", "```js\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n  return getUser(userId).then((tempUser) => {\n    return getGrades(user.schoolId);\n  }).then((grades) => {\n    // average\n    // return our string \n  });\n};\n```", "```js\nconst getStatus = (userId) => {\n  var user;\n```", "```js\nconst getStatus = (userId) => {\n  var user;\n  return getUser(userId).then((user) => {\n    user = user;\n```", "```js\nconst getStatus = (userId) => {\n  var user;\n  return getUser(userId).then((tempUser) => {\n    user = tempUser;\n```", "```js\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n  var user;\n  return getUser(userId).then((tempUser) => {\n    user = tempUser;\n    return getGrades(user.schoolId);\n  }).then((grades) => {\n    var average = 0;\n\n    // average\n    // return our string\n  });\n};\n```", "```js\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n  let user;\n  return getUser(userId).then((tempUser) => {\n    user = tempUser;\n    return getGrades(user.schoolId);\n  }).then((grades) => {\n    let average = 0;\n\n    // average\n    // return our string\n  });\n};\n```", "```js\n }).then((grades) => {\n   let average = 0;\n\n   if (grades.length > 0) {\n\n   }\n   // average\n   // return our string\n});\n```", "```js\n  if (grades.length > 0) {\n    average = grades_map((grade) => grade.grade)\n  }\n```", "```js\nif (grades.length > 0) {\n  average = grades.map((grade) => grade.grade).reduce((a, b) => {\n\n  });\n};\n```", "```js\nif (grades.length > 0) {\n  average = grades.map((grade) => grade.grade).reduce((a, b) => a + b); \n}\n```", "```js\n  if (grades.length > 0) {\n    average = grades.map((grade) => grade.grade).reduce((a, b) => a + b) / grades.length; \n  }\n\n  console.log(average);\n});\n```", "```js\nreturn `${user.name} has a ${average}% in the class.`;\n```", "```js\n// Andrew has a 83% in the class\nconst getStatus = (userId) => {\n  let user;\n  return getUser(userId).then((tempUser) => {\n    user = tempUser;\n    return getGrades(user.schoolId);\n  }).then((grades) => {\n    let average = 0;\n\n    if (grades.length > 0) {\n      average = grades.map((grade) => grade.grade).reduce((a, b) => a + b) / grades.length;\n    }\n\n    return `${user.name} has a ${average}% in the class.`;\n  });\n};\n```", "```js\nconst getStatusAlt = (userId) => {\n\n};\n```", "```js\nconst getStatusAlt = (userId) => {\n  return 'Mike';\n};\n```", "```js\nconst getStatusAlt = (userId) => {\n  return 'Mike';\n};\n\nconsole.log(getStatusAlt());\n```", "```js\nconst getStatusAlt = async (userId) => {\n  return 'Mike';\n};\n```", "```js\n() => {\n  return new Promise((resolve, reject) => {\n  resolve('Mike')\n  })\n}\n```", "```js\nconst getStatusAlt = async (userId) => {\n  return 'Mike';\n};\n\ngetStatusAlt().then((name) => {\n  console.log(name);\n});\n```", "```js\nconst getStatusAlt = async (userId) => {\n  throw new Error('This is an error');\n  return 'Mike';\n};\n```", "```js\ngetStatusAlt().then((name) => {\n  console.log(name);\n}).catch(e) => {\n  console.log(e);\n});\n```", "```js\n const getStatusAlt = async (userId) => {\n   const user = await getUser(userId);\n};\n```", "```js\nconst getStatusAlt = async (userId) => {\n  const user = await getUser(userId);\n  const grades = await getGrades(user.schoolId);\n\n  console.log(user, grades);\n};\n```", "```js\ngetStatusAlt(123).then((name) => {\n  console.log(name);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nlet average = 0;\n\nif (grades.length > 0) {\n  average = grades.map((grade) => grade.grade).reduce((a, b) => a + b) / grades.length;\n}\n\nreturn `${user.name} has a ${average}% in the class.`;\n```", "```js\nconst getStatusAlt = async (userId) => {\n  const user = await getUser(userId);\n  const grades = await getGrades(user.schoolId);\n  let average = 0;\n\n  if (grades.length > 0) {\n    average = grades.map((grade) => grade.grade).reduce((a, b) => a + b) / grades.length;\n  }\n\n  return `${user.name} has a ${average}% in the class.`;\n};\n```", "```js\ngetStatusAlt(2).then((status) => {\n  console.log(status);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nconst getStatusAlt = async function (userId) {\n  const user = await getUser(userId);\n  const grades = await getGrades(user.schoolId);\n  let average = 0;\n```", "```js\n// USD CAD 23\n```", "```js\n// USD CAD 23\n// 23 USD is worth 28 CAD. You can spend these in the following countries:\n```", "```js\nnpm install axios@0.18.0 --save\n```", "```js\n// USD CAD 23\n// 23 USD is worth 28 CAD. You can spend these in the following countries:\n\nconst axios = require('axios');\n\nconst getExchangeRate = (from, to)\n```", "```js\n// USD CAD 23\n// 23 USD is worth 28 CAD. You can spend these in the following countries:\n\nconst axios = require('axios');\n\nconst getExchangeRate = (from, to) => {\n  axios.get(`http://api.fixer.io/latest?base=USD)\n}\n```", "```js\n// USD CAD 23\n// 23 USD is worth 28 CAD. You can spend these in the following countries:\n\nconst axios = require('axios');\n\nconst getExchangeRate = (from, to) => {\n  axios.get(`http://api.fixer.io/latest?base=USD).then((response) => {\n    return response.data.rates[to]\n  });\n}\n```", "```js\n// USD CAD 23\n// 23 USD is worth 28 CAD. You can spend these in the following countries:\n\nconst axios = require('axios');\n\nconst getExchangeRate = (from, to) => {\n  return axios.get(`http://api.fixer.io/latest?base=USD).then((response) => {\n    return response.data.rates[to]\n  });\n};\n\ngetExchangeRate('USD', 'CAD').then((rate) => {\n  console.log(rate);\n});\n```", "```js\ngetExchangeRate('USD', 'EUR').then((rate) => {\n  console.log(rate); \n});\n```", "```js\nconst getCountries = (currencyCode) => {\n\n};\n```", "```js\nconst getCountries = (currencyCode) => {\n  return axios.get(`https://restcountries.eu/rest/v2/currency/${currencyCode}`)\n};\n```", "```js\nconst getCountries = (currencyCode) => {\n  return axios.get(`https://restcountries.eu/rest/v2/currency/${currencyCode}`).then((response) => {\n\n  });\n};\n```", "```js\nconst getCountries = (currencyCode) => {\n  return axios.get(`https://restcountries.eu/rest/v2/currency/${currencyCode}`).then((response) => {\n    return response.data.map((country) => country.name);\n  });\n};\n\ngetCountries('USD').then((countries) => {\n  console.log(countries);\n});\n```", "```js\ngetCountries('EUR').then((countries) => {\n  console.log(countries);\n});\n```", "```js\ngetCountries('CAD').then((countries) => {\n  console.log(countries);\n});\n```", "```js\nconst getCountries = (currencyCode) => {\n  return axios.get(`https://restcountries.eu/rest/v2/currency/${currencyCode}`).then((response) => {\n    return response.data.map((country) => country.name);\n  });\n};\n\nconst convertCurrency = (from, to, amount) => {\n\n};\n```", "```js\nconst convertCurrency = (from, to, amount) => {\n  return getCountries(to).then((tempCountries) => {\n    return getExchangeRate(from, to);\n  }).then((rate) => {\n\n  });\n};\n```", "```js\nconst convertCurrency = (from, to, amount) => {\n  return getCountries(to).then((countries) => {\n    return getExchangeRate(from, to);\n  }).then((rate) => {\n    const exchangedAmount = amount * rate;\n\n    return `${amount} ${from} is worth ${exchangedAmount} ${to}`;\n });\n};\n```", "```js\nconst convertCurrency = (from, to, amount) => {\n  return getCountries(to).then((countries) => {\n  return getExchangeRate(from, to);\n}).then((rate) => {\n  const exchangedAmount = amount * rate;\n\n  return `${amount} ${from} is worth ${exchangedAmount} ${to}`;\n });\n};\n\nconvertCurrency('CAD', 'USD', 100).then((status) => {\n  console.log(status);\n});\n```", "```js\nconst convertCurrency = (from, to, amount) => {\n  let countries;\n  return getCountries(to).then((tempCountries) => {\n    countries = tempCountries;\n    return getExchangeRate(from, to);\n  }).then((rate) => {\n    const exchangedAmount = amount * rate;\n\n    return `${amount} ${from} is worth ${exchangedAmount} ${to}.`;\n  });\n};\n```", "```js\nconst convertCurrency = (from, to, amount) => {\n  let countries;\n  return getCountries(to).then((tempCountries) => {\n    countries = tempCountries;\n    return getExchangeRate(from, to);\n  }).then((rate) => {\n    const exchangedAmount = amount * rate;\n\n    return `${amount} ${from} is worth ${exchangedAmount} ${to}. ${to} can be used in the following countries: ${countries.join(', ')}`;\n  });\n};\n```", "```js\nconvertCurrencyAlt('USD', 'CAD', 100).then((status) => {\n  console.log(status);\n});\n```", "```js\nconst exchangedAmount = amount * rate;\n\nreturn `${amount} ${from} is worth ${exchangedAmount} ${to}. ${to} can be used in the following countries: ${countries.join(', ')}`;\n });\n```", "```js\nconst convertCurrencyAlt = async (from, to, amount) => {\n\n});\n```", "```js\nconst convertCurrencyAlt = async (from, to, amount) => {\n  const countries = await getCountries(to);\n  const rate = await getExchangeRate(from, to);\n};\n```", "```js\nconst convertCurrencyAlt = async (from, to, amount) => {\n  const countries = await getCountries(to);\n  const rate = await getExchangeRate(from, to);\n  const exchangedAmount = amount * rate;\n\n  return `${amount} ${from} is worth ${exchangedAmount} ${to}. ${to} can be used in the following countries: ${countries.join(', ')}`;\n};\n```", "```js\nconvertCurrencyAlt('USD', 'CAD', 100).then((status) => {\n  console.log(status);\n});\n```", "```js\nconst getExchangeRate = async (from, to) => {\n  const response = await axios.get(`http://api.fixer.io/latest?base=${from}`);\n  return response.data.rates[to];\n}\n```", "```js\nconst getCountries = async (CurrencyCode) => {\n```", "```js\naxios.get(`https://restcountries.eu/rest/v2/currency/${currencyCode}`);\n```", "```js\nreturn response.data.map((country) => country.name);\n```", "```js\nconvertCurrencyAlt('USD', 'CAD', 100).then((status) => {\n  console.log(status);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nconvertCurrencyAlt('USD', 'MMM', 100).then((status) => {\n  console.log(status);\n}).catch((e) => {\n  console.log(e);\n});\n```", "```js\nconst getCountries = async (CurrencyCode) => {\n  try{\n\n  } catch (e){\n\n  }\n```", "```js\nconst getCountries = async (currencyCode) => {\n  try {\n    const response = await axios.get(`https://restcountries.eu/rest/v2/current/${currencyCode}`);\n    return response.data.map((country) => country.name);\n  } catch(e){\n\n  }\n};\n```", "```js\nconst getCountries = async (currencyCode) => {\n  try {\n    const response = await axios.get(`https://restcountries.eu/rest/v2/current/${currencyCode}`);\n    return response.data.map((country) => country.name);\n  } catch(e){\n    throw new Error(`Unable to get countries that use\n${currencyCOde}.`);\n  }\n};\n```", "```js\nconvertCurrencyAlt('USD', 'MMM', 100).then((status) =>{\n  console.log(status);\n}).catch((e) => {\n  console.log(e.message);\n});\n```", "```js\nconst convertCurrencyAlt = async (from, to, amount) => {\n  //const countries = await getCountries(to);\n  const rate = await getExchangeRate(from, to);\n  //const exchangedAmount = amount * rate;\n  //\n  //return `${amount} ${from} is worth ${exchangedAmount} ${to}. ${to} can be used in the following`;\n};\n```", "```js\nconst response = await axios.get(`http://api.fixer.io/latest?base=${from}`);\nreturn response.data.rates[to];\n```", "```js\nconst getExchangeRate = async(from, to) =>{\n  try{\n    const response = await axios.get(`http://api.fixer.io/latest?base=${from}`);\n    return response.data.rates[to];\n  } catch(e){\n    throw new Error(`Unable to get exchange rate for ${from} and ${to}.`);\n  }\n};\n```", "```js\nconst getExchangeRate = async(from, to) =>{\n  try{\n    const response = await axios.get(`http://api.fixer.io/latest?base=${from}`);\n    const rate = response.data.rates[to];\n\n    if(rate){\n      return rate;\n    } else{\n      throw new Error();\n    }\n  } catch(e){\n    throw new Error(`Unable to get exchange rate for ${from} and ${to}.`);\n  }\n};\n```"]