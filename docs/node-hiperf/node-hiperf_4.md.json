["```js\nvar http   = require(\"http\");\nvar server = http.createServer();\n\nserver.on(\"request\", function (req, res) {\n  var f = fibonacci(40);\n\n  return res.end(\"\" + f);\n});\n\nserver.listen(3000);\n\nfunction fibonacci(n) {\n  return (n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2));\n}\n```", "```js\n$ node --prof fib.js\n\n```", "```js\n$ ab \u2013n 10 \u2013c 2 http://localhost:3000/\nThis is ApacheBench, Version 2.3 <$Revision: 1604373 $>\n(...)\nConcurrency Level:      2\nTime taken for tests:   18.851 seconds\nComplete requests:      10\nFailed requests:        0\n(...)\nRequests per second:    0.52 [#/sec] (mean)\nTime per request:       3822.383 [ms] (mean)\n(...)\n\n```", "```js\nStatistical profiling result from null, (...).\n\n(...)\n\n [JavaScript]:\n   ticks  total  nonlib   name \n  14267   89.1%  100.0%  LazyCompile: *fibonacci fib.js:15:19\n      1    0.0%    0.0%  Stub: reinitialize\n\n(...)\n\n [Bottom up (heavy) profile]:\n(...)\n   ticks parent  name\n  14267   89.1%  LazyCompile: *fibonacci fib.js:15:19\n  14267  100.0%    LazyCompile: *fibonacci fib.js:15:19\n  14267  100.0%      LazyCompile: *fibonacci fib.js:15:19\n  14267  100.0%        LazyCompile: *fibonacci fib.js:15:19\n  14267  100.0%          LazyCompile: *fibonacci fib.js:15:19\n```", "```js\nvar http   = require(\"http\");\nvar server = http.createServer();\n\nfibonacci = memoize(fibonacci);\n\nserver.on(\"request\", function (req, res) {\n  var f = fibonacci(40);\n\n  return res.end(\"\" + f);\n});\n\nserver.listen(3000);\n\nfunction fibonacci(n) {\n  return (n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2));\n}\n\nfunction memoize(f) {\n  var cache = {};\n\n  return function memoized(n) {\n    return cache[n] || (cache[n] = f[n]);\n  };\n}\n```", "```js\n$ ab -n 10 -c 2 http://localhost:3000/\nThis is ApacheBench, Version 2.3 <$Revision: 1604373 $>\n(...)\nConcurrency Level:      2\nTime taken for tests:   0.038 seconds\nComplete requests:      10\nFailed requests:        0\n(...)\nRequests per second:    263.86 [#/sec] (mean)\nTime per request:       7.580 [ms] (mean)\n(...)\n\n```", "```js\n(...)\n[JavaScript]:\nticks  total  nonlib   name\n 1    0.1%   12.5%  Stub: ToBooleanStub(Null,SpecObject)\n 1    0.1%   12.5%  LoadMegamorphic: args_count: 0\n 1    0.1%   12.5%  LazyCompile: ~httpSocketSetup _http_common...\n 1    0.1%   12.5%  LazyCompile: ~exec native regexp.js:98:20\n 1    0.1%   12.5%  LazyCompile: ~UseSparseVariant native array...\n 1    0.1%   12.5%  LazyCompile: ADD native runtime.js:99:13\n(...)\n\n```", "```js\n$ sudo apt-get update\n$ sudo apt-get install linux-tools-common linux-tools-`uname \u2013r`\n\n```", "```js\n$ node \u2013-perf-basic-prof fib.js &\n[1] 30462\n\n```", "```js\n$ perf record -F 99 -p 30462 -g -- sleep 60\n# on another console..\n$ ab \u2013n 1000 http://localhost:3000/\n\n```", "```js\n$ perf script > stack01.trace\n\n```", "```js\n$ git clone --depth 1 http://github.com/brendangregg/FlameGraph\n$ ./FlameGraph/stackcollapse-perf.pl < stack01.trace | ./FlameGraph/flamegraph.pl > stack01.svg\n\n```", "```js\n$ node \u2013-perf-basic-prof fib.js &\n[1] 30611\n$ perf record -F 99 -p 30611 -g -- sleep 60\n# on another console..\n$ ab \u2013n 10000 http://localhost:3000/\n$ perf script > stack02.trace\n$ ./FlameGraph/stackcollapse-perf.pl < stack02.trace | ./FlameGraph/flamegraph.pl > stack02.svg\n\n```"]