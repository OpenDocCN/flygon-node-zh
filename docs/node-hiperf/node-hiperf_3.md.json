["```js\nvar net    = require(\"net\");\nvar server = net.createServer();\n\nserver.on(\"connection\", function (socket) {\n  socket.pipe(socket);\n});\nserver.listen(7, \"0.0.0.0\");\n```", "```js\nfunction foo() {\n  var bar = { x: 1 }, baz = bar.x;\n\n  return bar; // baz is unreferenced but bar isn't\n}\n```", "```js\nfunction foo() {\n  var bar = { x: 1 };\n\n  doSomething(bar);\n\n  return bar;\n}\n```", "```js\nfunction foo() {\n  var bar = { x: 1 };\n\n  doSomething(bar);\n\n  bar = null;\n}\n```", "```js\n$ sudo npm install -g node-inspector\n\n```", "```js\n$ node-inspector\n\n```", "```js\n$ node-inspector\nNode Inspector v0.10.0\nVisit http://127.0.0.1:8080/debug?ws=127.0.0.1:8080&port=5858 to start debugging.\n\n```", "```js\n$ mkdir leaky\n$ cd leaky\n$ npm install v8-profiler\n\n```", "```js\nrequire(\"v8-profiler\");\nvar leakObject   = null;\nfunction MemoryLeak() {\n  var originalObject = leakObject;\n\n  leakObject = {\n    longString : new Array(1000000).join(\"*\"),\n    someMethod : function () {\n      console.log(originalObject);\n    }\n  };\n};\n\nsetInterval(MemoryLeak, 1000);\n```", "```js\n$ node --debug leaky.js\n\n```", "```js\nvar profiler   = require(\"v8-profiler\");\nvar leakObject = null;\n\nfunction MemoryLeak() {\n  var originalObject = leakObject;\n  leakObject = {\n    longString : new Array(1000000).join(\"*\"),\n    someMethod : function () {\n      console.log(originalObject);\n    }\n  };\n};\n\nsetInterval(MemoryLeak, 1000);\nsetInterval(function () {\n  console.log(\"mem. nodes: %d\", profiler.takeSnapshot().nodesCount);\n}, 1000);\n```", "```js\n$ node --debug leaky.js\nDebugger listening on port 5858\nmem. nodes: 37293\nmem. nodes: 37645\nmem. nodes: 37951\nmem. nodes: 37991\nmem. nodes: 38004\nmem. nodes: 38012\n\n```", "```js\n$ npm install heapdump\n\n```", "```js\nvar heapdump = require(\"heapdump\");\n\nsetInterval(function () {\n  heapdump.writeSnapshot(\"\" + Date.now() + \".heapsnapshot\");\n}, 60000);\n```", "```js\n$ node --trace_gc leaky.js\n[26503]        8 ms: Scavenge 1.9 (37.5) -> 1.8 (37.5) MB, 0.8 ms \n[26503]        9 ms: Scavenge 1.9 (37.5) -> 1.9 (38.5) MB, 0.9 ms \n[26503]       53 ms: Scavenge 3.6 (39.5) -> 3.2 (39.5) MB, 0.7 ms \n[26503]      116 ms: Scavenge 5.1 (40.5) -> 4.1 (41.5) MB, 1.9 ms \n[26503]      155 ms: Scavenge 5.9 (41.5) -> 4.4 (41.5) MB, 1.1 ms \n[26503]     1227 ms: Scavenge 14.3 (50.1) -> 14.5 (50.1) MB, 0.8 ms (+ 1.6 ms in 1 steps since last GC) [allocation failure].\n[26503]     1235 ms: Mark-sweep 14.6 (50.1) -> 5.4 (43.5) MB, 6.7 ms (+ 1.6 ms in 1 steps since start of marking, biggest step 1.6 ms) [HeapSnapshotGenerator::GenerateSnapshot] [GC in old space requested].\n\n```", "```js\n$ npm install memwatch-next\n\n```", "```js\nvar memwatch   = require(\"memwatch-next\");\nvar leakObject = null;\n\nfunction MemoryLeak() {\n  var originalObject = leakObject;\n\n  leakObject = {\n    longString : new Array(1000000).join(\"*\"),\n    someMethod : function () {\n      console.log(originalObject);\n    }\n  };\n};\n\nsetInterval(MemoryLeak, 1000);\n\nmemwatch.on(\"leak\", function (info) {\nconsole.log(\"GC leak detected: %d bytes growth\", info.growth);\n});\n\nmemwatch.on(\"stats\", function (stats) {\n  console.log(\"GC stats: %d cycles, %s bytes\", stats.num_full_gc, stats.current_base);\n});\n```", "```js\n$ node leaky.js\nGC stats: 1 cycles, 13228416 bytes\nGC stats: 2 cycles, 7509080 bytes\nGC stats: 3 cycles, 7508408 bytes\nGC stats: 4 cycles, 17317456 bytes\nGC stats: 5 cycles, 23199080 bytes\nGC stats: 6 cycles, 32201264 bytes\nGC stats: 7 cycles, 45582232 bytes\nGC leak detected: 40142200 bytes growth\n\n```", "```js\nvar memwatch   = require(\"memwatch-next\");\nvar heapdiff   = new memwatch.HeapDiff();\nvar leakObject = null;\n\nfunction MemoryLeak() {\n  var originalObject = leakObject;\n\n  leakObject = {\n    longString : new Array(1000000).join(\"*\"),\n    someMethod : function () {\n      console.log(originalObject);\n    }\n  };\n};\n\nsetInterval(MemoryLeak, 1000);\n\nsetTimeout(function () {\n  console.log(heapdiff.end());\n}, 10000);\n```", "```js\n$ node leaky.js\n{ before: { nodes: 19524, size_bytes: 3131984, size: '2.99 mb' },\n  after: { nodes: 21311, size_bytes: 12246992, size: '11.68 mb' },\n  change:\n   { size_bytes: 9115008,\n     size: '8.69 mb',\n     freed_nodes: 2201,\n     allocated_nodes: 3988,\n     details:\n      [ [Object],\n        [Object],\n        [Object],\n        [Object],\n        \u2026\n        [Object],\n        [Object],\n        [Object] ] } }\n```"]