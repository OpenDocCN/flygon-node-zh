["```js\nuser.should.be.an.Object.and.have.property('name', 'tj');\n```", "```js\nrequest(app).get('/user')\n  .set('Accept', 'application/json')\n  .expect('Content-Type', /json/)\n  .expect(200, done);\n```", "```js\n$ npm install \u2013g mocha\n\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.10\",\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"app\": \"node server\",\n    \"start\": \"concurrently \\\"npm run tsc:w\\\" \\\"npm run app\\\" \",\n    \"postinstall\": \"typings install\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.1.1\",\n    \"@angular/compiler\": \"2.1.1\",\n    \"@angular/core\": \"2.1.1\",\n    \"@angular/forms\": \"2.1.1\",\n    \"@angular/http\": \"2.1.1\",\n    \"@angular/platform-browser\": \"2.1.1\",\n    \"@angular/platform-browser-dynamic\": \"2.1.1\",\n    \"@angular/router\": \"3.1.1\",\n    \"body-parser\": \"1.15.2\",\n    \"core-js\": \"2.4.1\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"connect-mongo\": \"1.3.2\",\n    \"cookie-parser\": \"1.4.3\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",\n    \"passport-google-oauth\": \"1.0.0\",\n    \"passport-local\": \"1.0.0\",\n    \"passport-twitter\": \"1.0.4\",\n    \"reflect-metadata\": \"0.1.8\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"socket.io\": \"1.4.5\",\n    \"systemjs\": \"0.19.39\",\n    \"zone.js\": \"0.6.26\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"3.1.0\",\n \"should\": \"11.1.1\",\n \"supertest\": \"2.0.1\",\n    \"traceur\": \"0.0.111\",\n    \"typescript\": \"2.0.3\",\n    \"typings\": \"1.4.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nmodule.exports = {\n db: 'mongodb://localhost/mean-book-test',\n  sessionSecret: 'Your Application Session Secret',\n  viewEngine: 'ejs',\n  facebook: {\n    clientID: 'APP_ID',\n    clientSecret: 'APP_SECRET',\n    callbackURL: 'http://localhost:3000/oauth/facebook/callback'\n  },\n  twitter: \n  {\n    clientID: 'APP_ID',\n    clientSecret: 'APP_SECRET',\n    callbackURL: 'http://localhost:3000/oauth/twitter/callback'\n  },\n  google: {\n    clientID: 'APP_ID',\n    clientSecret: 'APP_SECRET',\n    callbackURL: 'http://localhost:3000/oauth/google/callback'\n  }\n};\n```", "```js\nconst app = require('../../server.js');\nconst should = require('should');\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\nconst Article = mongoose.model('Article');\n\nlet user, article;\n\ndescribe('Article Model Unit Tests:', () => {\n  beforeEach((done) => {\n    user = new User({\n      firstName: 'Full',\n      lastName: 'Name',\n      displayName: 'Full Name',\n      email: 'test@test.com',\n      username: 'username',\n      password: 'password'\n    });\n\n    user.save(() => {\n      article = new Article({\n        title: 'Article Title',\n        content: 'Article Content',\n        user: user\n      });\n\n      done();\n    });\n  });\n\n  describe('Testing the save method', () => {\n it('Should be able to save without problems', () => {\n article.save((err) => {\n should.not.exist(err);\n });\n });\n\n it('Should not be able to save an article without a title', () => {\n article.title = '';\n\n article.save((err) => {\n should.exist(err);\n });\n });\n });\n\n  afterEach((done) => {\n    Article.remove(() => {\n      User.remove(() => {\n        done();\n      });\n    });\n  });\n});\n```", "```js\nconst app = require('../../server');\nconst request = require('supertest');\nconst should = require('should');\nconst mongoose = require('mongoose');\nconst User = mongoose.model('User');\nconst Article = mongoose.model('Article');\n\nlet user, article;\n\ndescribe('Articles Controller Unit Tests:', () => {\n  beforeEach((done) => {\n    user = new User({\n      firstName: 'Full',\n      lastName: 'Name',\n      displayName: 'Full Name',\n      email: 'test@test.com',\n      username: 'username',\n      password: 'password'\n    });\n\n    user.save(() => {\n      article = new Article({\n        title: 'Article Title',\n        content: 'Article Content',\n        user: user\n      });\n\n      article.save((err) => {\n        done();\n      });\n    });\n  });\n\n  describe('Testing the GET methods', () => {\n it('Should be able to get the list of articles', (done) => {\n request(app).get('/api/articles/')\n .set('Accept', 'application/json')\n .expect('Content-Type', /json/)\n .expect(200)\n .end((err, res) => {\n res.body.should.be.an.Array().and.have.lengthOf(1);\n res.body[0].should.have.property('title', article.title);\n res.body[0].should.have.property('content',article.content);\n\n done();\n });\n });\n\n it('Should be able to get the specific article', (done) => {\n request(app).get('/api/articles/' + article.id)\n .set('Accept', 'application/json')\n .expect('Content-Type', /json/)\n .expect(200)\n .end((err, res) => {\n res.body.should.be.an.Object().and.have.property('title',article.title);\n res.body.should.have.property('content', article.content);\n\n done();\n });\n });\n  });\n\n  afterEach((done) => {\n    Article.remove().exec();\n    User.remove().exec();\n\n    done();\n  });\n});\n```", "```js\n$ NODE_ENV=test mocha --reporter spec app/tests\n\n```", "```js\n> set NODE_ENV=test\n\n```", "```js\n> mocha --reporter spec app/tests\n\n```", "```js\ndescribe('Matchers Example', function() {\n  it('Should present the toBe matcher example', function() {\n    var a = 1;\n    var b = a;\n\n    expect(a).toBe(b);\n    expect(a).not.toBe(null);\n  });\n});\n```", "```js\n$ npm install -g karma-cli\n\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.10\",\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"app\": \"node server\",\n    \"start\": \"concurrently \\\"npm run tsc:w\\\" \\\"npm run app\\\" \",\n    \"postinstall\": \"typings install\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.1.1\",\n    \"@angular/compiler\": \"2.1.1\",\n    \"@angular/core\": \"2.1.1\",\n    \"@angular/forms\": \"2.1.1\",\n    \"@angular/http\": \"2.1.1\",\n    \"@angular/platform-browser\": \"2.1.1\",\n    \"@angular/platform-browser-dynamic\": \"2.1.1\",\n    \"@angular/router\": \"3.1.1\",\n    \"body-parser\": \"1.15.2\",\n    \"core-js\": \"2.4.1\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"connect-mongo\": \"1.3.2\",\n    \"cookie-parser\": \"1.4.3\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",\n    \"passport-google-oauth\": \"1.0.0\",\n    \"passport-local\": \"1.0.0\",\n    \"passport-twitter\": \"1.0.4\",\n    \"reflect-metadata\": \"0.1.8\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"socket.io\": \"1.4.5\",\n    \"systemjs\": \"0.19.39\",\n    \"zone.js\": \"0.6.26\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"3.1.0\",\n \"jasmine\": \"2.5.2\",\n \"jasmine-core\": \"2.5.2\",\n \"karma\": \"1.3.0\",\n \"karma-jasmine\": \"1.0.2\",\n \"karma-phantomjs-launcher\": \"1.0.2\",\n    \"should\": \"11.1.1\",\n    \"supertest\": \"2.0.1\",\n    \"traceur\": \"0.0.111\",\n    \"typescript\": \"2.0.3\",\n    \"typings\": \"1.4.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nmodule.exports = function(config) {\n  config.set({\n    basePath: '',\n    frameworks: ['jasmine'],\n    files: [\n      'node_modules/systemjs/dist/system.js',\n      'node_modules/systemjs/dist/system-polyfills.js',\n      'node_modules/core-js/client/shim.min.js',\n      'node_modules/reflect-metadata/Reflect.js',\n      'node_modules/zone.js/dist/zone.js',\n      'node_modules/zone.js/dist/long-stack-trace-zone.js',\n      'node_modules/zone.js/dist/proxy.js',\n      'node_modules/zone.js/dist/sync-test.js',\n      'node_modules/zone.js/dist/jasmine-patch.js',\n      'node_modules/zone.js/dist/async-test.js',\n      'node_modules/zone.js/dist/fake-async-test.js',\n\n      { pattern: 'public/systemjs.config.js', served: true,included: false, watched: false },\n      { pattern: 'public/app/**/*.*', served: true, included:false, watched: false },\n      { pattern: 'node_modules/rxjs/**/*.js', served: true,included: false, watched: false },\n      { pattern: 'node_modules/@angular/**/*.js', served:true,included: false, watched: false },\n\n      'karma.shim.js',\n    ],\n    proxies: {\n      '/lib/': '/base/node_modules/',\n      '/app/': '/base/public/app/',\n    },\n    reporters: ['progress'],\n    browsers: ['PhantomJS'],\n    captureTimeout: 60000,\n    singleRun: true\n  });\n};\n```", "```js\n(function(global) {\n  var packages = {\n    app: {\n        main: './bootstrap.js',\n        defaultExtension: 'js'\n      }\n  };\n\n  var map = {\n    '@angular': 'lib/@angular',\n      'rxjs': 'lib/rxjs'\n  };\n\n  var ngPackageNames = [\n    'common',\n    'compiler',\n    'core',\n    'forms',\n    'http',\n    'router',\n    'platform-browser',\n    'platform-browser-dynamic',\n  ];\n\n  ngPackageNames.forEach(function(pkgName) {\n    packages['@angular/' + pkgName] = { main: '/bundles/' +pkgName + '.umd.js', defaultExtension: 'js' };\n map['@angular/' + pkgName + '/testing'] = 'lib/@angular/' + pkgName + '/bundles/' + pkgName + '-testing.umd.js';\n  });\n\n  System.config({\n    defaultJSExtensions: true,\n    transpiler: null,\n    packages: packages,\n    map: map\n  });\n})(this);\n```", "```js\n__karma__.loaded = function () { };\n\nSystem.import('/base/public/systemjs.config.js').then(loadTests);\n\nfunction loadTests() {\n  Promise.all([\n    System.import('app/bootstrap.spec'),\n    System.import('app/articles/articles.service.spec'),\n    System.import('app/articles/list/list.component.spec'),\n    System.import('app/app.routes.spec'),\n    System.import('app/directive.spec'),\n    System.import('app/pipe.spec')\n  ]).then(__karma__.start, __karma__.error);\n}\n```", "```js\nimport { Observable } from \"rxjs/Rx\";\nimport { Directive, Input }   from '@angular/core';\nimport { ComponentFixture, TestBed, async, fakeAsync } from '@angular/core/testing';\nimport { ArticlesService } from '../articles.service';\nimport { ListComponent } from './list.component';\n\nclass MockArticlesService {\n  articles = [{\n    _id: '12345678',\n    title: 'An Article about MEAN',\n    content: 'MEAN rocks!',\n    created: new Date(),\n    creator: {\n      fullName: 'John Doe'\n    }\n  }];\n\n  public list() {\n    return Observable.of(this.articles);\n  }\n};\n\n@Directive({\n  selector: '[routerLink]',\n  host: {\n    '(click)': 'onClick()'\n  }\n})\nexport class RouterLinkStubDirective {\n  @Input('routerLink') linkParams: any;\n  navigatedTo: any = null;\n\n  onClick() {\n    this.navigatedTo = this.linkParams;\n  }\n}\n\ndescribe('List component tests', () => {\n  let componentFixture: ComponentFixture<ListComponent>;\n\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      declarations: [ ListComponent, RouterLinkStubDirective ],\n      providers:    [ {provide: ArticlesService, useClass: MockArticlesService } ]\n    }).compileComponents();\n  }));\n\n    beforeEach(fakeAsync(() => {\n        componentFixture = TestBed.createComponent(ListComponent);\n    }));\n\n it('Should render list', () => {\n componentFixture.detectChanges();\n\n const mockArticleService = new MockArticlesService();\n const listComponentElement = componentFixture.nativeElement;\n\n const articleElements = listComponentElement.querySelectorAll('li');\n const articleElement = articleElements[0];\n const articleTitleElement = articleElement.querySelector('a');\n const articleContentElement = articleElement.querySelector('p');\n\n const mockArticleList = mockArticleService.articles;\n const mockArticle = mockArticleList[0];\n const mockArticleTitle = mockArticle.title;\n const mockArticleContent = mockArticle.content;\n\n expect(articleElements.length).toBe(mockArticleList.length);\n\n expect(articleTitleElement.innerHTML).toBe(mockArticleTitle);\n\n expect(articleContentElement.innerHTML).toBe(mockArticleContent);\n });\n});\n```", "```js\nimport { async, inject, TestBed } from '@angular/core/testing';\nimport { MockBackend, MockConnection } from '@angular/http/testing';\nimport { HttpModule, Http, XHRBackend, Response, ResponseOptions } from '@angular/http';\nimport { ArticlesService } from './articles.service';\n\nlet backend: MockBackend;\nlet service: ArticlesService;\n\nconst mockArticle = {\n  title: 'An Article about MEAN',\n  content: 'MEAN rocks!',\n  creator: {\n    fullName: 'John Doe'\n  }\n};\n\ndescribe('Articles service tests', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ HttpModule ],\n      providers: [\n        ArticlesService,\n { provide: XHRBackend, useClass: MockBackend }\n      ]\n    })\n    .compileComponents();\n  }));\n\n beforeEach(inject([Http, XHRBackend], (_http: Http, _mockBackend: MockBackend) => {\n backend = _mockBackend;\n service = new ArticlesService(_http);\n }));\n\n it('Should create a single article', done => {\n const options = new ResponseOptions({ status: 200, body: mockArticle });\n const response = new Response(options);\n\n backend.connections.subscribe((connection: MockConnection) => connection.mockRespond(response));\n\n service.create(mockArticle).do(article => {\n expect(article).toBeDefined();\n\n expect(article.title).toEqual(mockArticle.title);\n expect(article.content).toEqual(mockArticle.content);\n\n done();\n }).toPromise();\n }); \n});\n```", "```js\nimport { async, fakeAsync, TestBed } from '@angular/core/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { SpyLocation } from '@angular/common/testing';\nimport { Location } from '@angular/common';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\n\nlet router: Router;\nlet location: SpyLocation;\n\ndescribe('AppComponent Routing', () => {\n  beforeEach(async(() => {\n    TestBed.configureTestingModule({\n      imports: [ AppModule, RouterTestingModule ]\n    }).compileComponents();\n  }));\n\n  beforeEach(fakeAsync(() => {\n    const injector = TestBed.createComponent(AppComponent).debugElement.injector;\n    location = injector.get(Location); \n  }));\n\n it('Should navigate to home', fakeAsync(() => {\n location.go('/');\n expect(location.path()).toEqual('/');\n }));\n\n it('Should navigate to signin', fakeAsync(() => {\n location.go('/authentication/signin');\n expect(location.path()).toEqual('/authentication/signin');\n }));\n\n it('Should navigate to signup', fakeAsync(() => {\n location.go('/authentication/signup');\n expect(location.path()).toEqual('/authentication/signup');\n }));\n});\n```", "```js\nimport { Component }   from '@angular/core';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\n\n@Component({ \n  template: \n  `<ul>\n    <li *ngIf=\"shouldShow\" name=\"One\">1</li>\n    <li *ngIf=\"!shouldShow\" name=\"Two\">2</li>\n  </ul>`\n})\nclass TestComponent {  \n  shouldShow = true\n}\n\ndescribe('ngIf tests', () => {\n  let componentFixture: ComponentFixture<TestComponent>;\n\n  beforeEach(() => {\n    componentFixture = TestBed.configureTestingModule({\n      declarations: [TestComponent]\n    }).createComponent(TestComponent);\n  });  \n\n it('It should render the list properly', () => {\n componentFixture.detectChanges(); \n\n let listItems = componentFixture.debugElement.queryAll(By.css('li'));\n expect(listItems.length).toBe(1);\n expect(listItems[0].attributes['name']).toBe('One');\n });\n\n it('It should rerender the list properly', () => {\n componentFixture.componentInstance.shouldShow = false;\n componentFixture.detectChanges();\n\n let listItems = componentFixture.debugElement.queryAll(By.css('li'));\n expect(listItems.length).toBe(1);\n expect(listItems[0].attributes['name']).toBe('Two');\n });\n});\n```", "```js\nimport { LowerCasePipe } from '@angular/common';\n\ndescribe('LowerCasePipe tests', () => {\n  let pipe = new LowerCasePipe();\n\n it('should capitalise', () => {\n expect(pipe.transform('MEAN')).toEqual('mean');\n });\n});\n```", "```js\nimport { TestBed } from '@angular/core/testing';\nimport { BrowserDynamicTestingModule, platformBrowserDynamicTesting } from '@angular/platform-browser-dynamic/testing';\n\nTestBed.initTestEnvironment(\n  BrowserDynamicTestingModule,\n  platformBrowserDynamicTesting()\n);\n```", "```js\n$ npm run tsc\n\n```", "```js\n$ NODE_ENV=test karma start\n\n```", "```js\n> set NODE_ENV=test\n\n```", "```js\n> karma start\n\n```", "```js\n$ npm install -g protractor\n\n```", "```js\n$ webdriver-manager update\n\n```", "```js\nexports.config = {\n  specs: ['public/tests/**/e2e/*.js'],\n  useAllAngular2AppRoots: true\n}\n```", "```js\ndescribe('Articles E2E Tests:', function() {\n  describe('New Article Page', function() {\n    it('Should not be able to create a new article', function() {\n      browser.get('http://localhost:3000/#!/articles/create');\n      element(by.css('input[type=submit]')).click();\n      element(by.id('error')).getText().then(function(errorText) {\n        expect(errorText).toBe('User is not logged in');\n      });\n    });\n  });\n});\n```", "```js\n$ NODE_ENV=test npm start\n\n```", "```js\n> set NODE_ENV=test\n\n```", "```js\n> npm start\n\n```", "```js\n$ protractor\n\n```"]