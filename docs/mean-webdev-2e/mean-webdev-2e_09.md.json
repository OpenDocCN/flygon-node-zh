["```js\nconst io = require('socket.io')();\nio.on('connection', function(socket){ /* ... */ });\nio.listen(3000);\n```", "```js\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\nio.on('connection', (socket) =>  { /* ... */ });\nserver.listen(3000);\n```", "```js\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\nio.on('connection', (socket) => { \n socket.on('disconnect', () => {\n console.log('user has disconnected');\n });\n});\nserver.listen(3000); \n```", "```js\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\nio.use((socket, next) => {\n /* ... */\n next(null, true);\n});\nio.on('connection', (socket) => { \n  socket.on('disconnect', () => {\n    console.log('user has disconnected');\n  });\n});\nserver.listen(3000); \n```", "```js\n<script src=\"img/socket.io.js\"></script>\n<script>\n  var socket = io();\n  socket.on('connect', function() {\n      /* ... */\n  });\n</script>\n```", "```js\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\nio.on('connection', function(socket){ \n socket.on('customEvent', (customEventData) => {\n /* ... */\n });\n});\nserver.listen(3000); \n```", "```js\n<script src=\"img/socket.io.js\"></script>\n<script>\n  var socket = io();\n socket.on('customEvent', function(customEventData) {\n /* ... */\n });\n</script>\n```", "```js\nio.on('connection', (socket) => { \n  socket.emit('customEvent', customEventData);\n});\n```", "```js\nio.on('connection', (socket) => { \n  io.emit('customEvent', customEventData);\n});\n```", "```js\nio.on('connection', (socket) => { \n  socket.broadcast.emit('customEvent', customEventData);\n});\n```", "```js\nconst socket = io();\nsocket.emit('customEvent', customEventData);\n```", "```js\nconst app = require('express')();\nconst server = require('http').Server(app);\nconst io = require('socket.io')(server);\n\nio.of('/someNamespace').on('connection', (socket) => { \n  socket.on('customEvent', (customEventData) => {\n    /* ... */\n  });\n});\n\nio.of('/someOtherNamespace').on('connection', (socket) => { \n  socket.on('customEvent', (customEventData) => {\n    /* ... */\n  });\n});\nserver.listen(3000);\n```", "```js\nio.on('connection', (socket) => { \n/* ... */\n});\n```", "```js\nio.of('').on('connection', (socket) => { \n/* ... */\n});\n```", "```js\n<script src=\"img/socket.io.js\"></script>\n<script>\n  var someSocket = io('/someNamespace');\n  someSocket.on('customEvent', function(customEventData) {\n    /* ... */\n  });\n var someOtherSocket = io('/someOtherNamespace');\n  someOtherSocket.on('customEvent', function(customEventData) {\n    /* ... */\n  });\n</script>\n```", "```js\nio.on('connection', (socket) => {\n    socket.on('join', (roomData) => {\n socket.join(roomData.roomName);\n    })\n    socket.on('leave', (roomData) => {\n socket.leave(roomData.roomName);\n    })\n});\n```", "```js\nio.on('connection', (socket) => { \n  io.in('someRoom').emit('customEvent', customEventData);\n});\n```", "```js\nio.on('connection', (socket) => { \n  socket.broadcast.to('someRoom').emit('customEvent', customEventData);\n});\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.9\",\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"app\": \"node server\",\n    \"start\": \"concurrently \\\"npm run tsc:w\\\" \\\"npm run app\\\" \",\n    \"postinstall\": \"typings install\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.1.1\",\n    \"@angular/compiler\": \"2.1.1\",\n    \"@angular/core\": \"2.1.1\",\n    \"@angular/forms\": \"2.1.1\",\n    \"@angular/http\": \"2.1.1\",\n    \"@angular/platform-browser\": \"2.1.1\",\n    \"@angular/platform-browser-dynamic\": \"2.1.1\",\n    \"@angular/router\": \"3.1.1\",\n    \"body-parser\": \"1.15.2\",\n    \"core-js\": \"2.4.1\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",\n    \"passport-google-oauth\": \"1.0.0\",\n    \"passport-local\": \"1.0.0\",\n    \"passport-twitter\": \"1.0.4\",\n    \"reflect-metadata\": \"0.1.8\",\n    \"rxjs\": \"5.0.0-beta.12\",\n \"socket.io\": \"1.4.5\",\n    \"systemjs\": \"0.19.39\",\n    \"zone.js\": \"0.6.26\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"3.1.0\",\n    \"traceur\": \"0.0.111\",\n    \"typescript\": \"2.0.3\",\n    \"typings\": \"1.4.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nconst path = require('path');\nconst config = require('./config');\nconst http = require('http');\nconst socketio = require('socket.io');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst flash = require('connect-flash');\nconst passport = require('passport');\n\nmodule.exports = function() {\n  const app = express();\n const server = http.createServer(app);\n const io = socketio.listen(server);\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret\n  }));\n\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n  app.use(flash());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use('/', express.static(path.resolve('./public')));\n  app.use('/lib', express.static(path.resolve('./node_modules')));\n\n  require('../app/routes/users.server.routes.js')(app);\n  require('../app/routes/articles.server.routes.js')(app);\n  require('../app/routes/index.server.routes.js')(app);\n\n return server;\n};\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.9\",\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"app\": \"node server\",\n    \"start\": \"concurrently \\\"npm run tsc:w\\\" \\\"npm run app\\\" \",\n    \"postinstall\": \"typings install\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"2.1.1\",\n    \"@angular/compiler\": \"2.1.1\",\n    \"@angular/core\": \"2.1.1\",\n    \"@angular/forms\": \"2.1.1\",\n    \"@angular/http\": \"2.1.1\",\n    \"@angular/platform-browser\": \"2.1.1\",\n    \"@angular/platform-browser-dynamic\": \"2.1.1\",\n    \"@angular/router\": \"3.1.1\",\n    \"body-parser\": \"1.15.2\",\n    \"core-js\": \"2.4.1\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n \"connect-mongo\": \"1.3.2\",\n \"cookie-parser\": \"1.4.3\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",\n    \"passport-google-oauth\": \"1.0.0\",\n    \"passport-local\": \"1.0.0\",\n    \"passport-twitter\": \"1.0.4\",\n    \"reflect-metadata\": \"0.1.8\",\n    \"rxjs\": \"5.0.0-beta.12\",\n    \"socket.io\": \"1.4.5\",\n    \"systemjs\": \"0.19.39\",\n    \"zone.js\": \"0.6.26\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"3.1.0\",\n    \"traceur\": \"0.0.111\",\n    \"typescript\": \"2.0.3\",\n    \"typings\": \"1.4.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nconst path = require('path');\nconst config = require('./config');\nconst http = require('http');\nconst socketio = require('socket.io');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst flash = require('connect-flash');\nconst passport = require('passport');\n\nmodule.exports = function(db) {\n  const app = express();\n  const server = http.createServer(app);\n  const io = socketio.listen(server);\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  const mongoStore = new MongoStore({\n mongooseConnection: db.connection\n });\n\n app.use(session({\n saveUninitialized: true,\n resave: true,\n secret: config.sessionSecret,\n store: mongoStore\n }));\n\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n  app.use(flash());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use('/', express.static(path.resolve('./public')));\n  app.use('/lib', express.static(path.resolve('./node_modules')));\n\n  require('../app/routes/users.server.routes.js')(app);\n  require('../app/routes/articles.server.routes.js')(app);\n  require('../app/routes/index.server.routes.js')(app);\n\n  return server;\n};\n```", "```js\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\nconst configureMongoose = require('./config/mongoose');\nconst configureExpress = require('./config/express');\nconst configurePassport = require('./config/passport');\n\nconst db = configureMongoose();\nconst app = configureExpress(db);\nconst passport = configurePassport();\napp.listen(3000);\n\nmodule.exports = app;\n\nconsole.log('Server running at http://localhost:3000/'); \n```", "```js\nconst config = require('./config');\nconst cookieParser = require('cookie-parser');\nconst passport = require('passport');\n\nmodule.exports = function(server, io, mongoStore) {\n  io.use((socket, next) => {\n    cookieParser(config.sessionSecret)(socket.request, {}, (err) => {\n      const sessionId = socket.request.signedCookies['connect.sid'];\n\n      mongoStore.get(sessionId, (err, session) => {\n        socket.request.session = session;\n\n        passport.initialize()(socket.request, {}, () => {\n          passport.session()(socket.request, {}, () => {\n            if (socket.request.user) {\n              next(null, true);\n            } else {\n              next(new Error('User is not authenticated'), false);\n            }\n          })\n        });\n      });\n    });\n  });\n  io.on('connection', (socket) => {\n    /* ... */\n  });\n};\n```", "```js\nconst path = require('path');\nconst config = require('./config');\nconst http = require('http');\nconst socketio = require('socket.io');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst MongoStore = require('connect-mongo')(session);\nconst flash = require('connect-flash');\nconst passport = require('passport');\nconst configureSocket = require('./socketio');\n\nmodule.exports = function(db) {\n  const app = express();\n  const server = http.createServer(app);\n  const io = socketio.listen(server);\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  const mongoStore = new MongoStore({\n    mongooseConnection: db.connection\n  });\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret,\n    store: mongoStore\n  }));\n\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n  app.use(flash());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use('/', express.static(path.resolve('./public')));\n  app.use('/lib', express.static(path.resolve('./node_modules')));\n\n  require('../app/routes/users.server.routes.js')(app);\n  require('../app/routes/articles.server.routes.js')(app);\n  require('../app/routes/index.server.routes.js')(app);\n\n configureSocket(server, io, mongoStore);\n\n  return server;\n};\n```", "```js\nmodule.exports = function(io, socket) {\n  io.emit('chatMessage', {\n    type: 'status',\n    text: 'connected',\n    created: Date.now(),\n    username: socket.request.user.username\n  });\n\n  socket.on('chatMessage', (message) => {\n    message.type = 'message';\n    message.created = Date.now();\n    message.username = socket.request.user.username;\n\n    io.emit('chatMessage', message);\n  });\n\n  socket.on('disconnect', () => {\n    io.emit('chatMessage', {\n    type: 'status',\n    text: 'disconnected',\n    created: Date.now(),\n    username: socket.request.user.username\n    });\n  });\n};\n```", "```js\nconst config = require('./config');\nconst cookieParser = require('cookie-parser');\nconst passport = require('passport');\nconst configureChat = require('../app/controllers/chat.server.controller');\n\nmodule.exports = function(server, io, mongoStore) {\n  io.use((socket, next) => {\n    cookieParser(config.sessionSecret)(socket.request, {}, (err) => {\n      const sessionId = socket.request.signedCookies['connect.sid'];\n\n      mongoStore.get(sessionId, (err, session) => {\n        socket.request.session = session;\n\n        passport.initialize()(socket.request, {}, () => {\n          passport.session()(socket.request, {}, () => {\n            if (socket.request.user) {\n              next(null, true);\n            } else {\n              next(new Error('User is not authenticated'), false);\n            }\n          })\n        });\n      });\n    });\n  });\n\n  io.on('connection', (socket) => {\n configureChat(io, socket);\n  });\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title><%= title %></title>\n  <base href=\"/\">\n</head>\n<body>\n  <mean-app>\n    <h1>Loading...</h1>\n  </mean-app>\n\n  <script type=\"text/javascript\">\n    window.user = <%- user || 'null' %>;\n  </script>\n\n  <script src=\"img/socket.io.js\"></script>\n  <script src=\"img/shim.min.js\"></script>\n  <script src=\"img/zone.js\"></script>\n  <script src=\"img/Reflect.js\"></script>\n  <script src=\"img/system.js\"></script>\n\n  <script src=\"img/systemjs.config.js\"></script>\n\n  <script>\n    System.import('app').catch(function(err){ console.error(err); });\n  </script>\n</body>\n</html>\n```", "```js\nimport { NgModule }       from '@angular/core';\nimport { CommonModule }   from '@angular/common';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ChatRoutes } from './chat.routes';\nimport { ChatService } from './chat.service';\nimport { ChatComponent } from './chat.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(ChatRoutes),\n  ],\n  declarations: [\n    ChatComponent,\n  ],\n  providers: [\n    ChatService\n  ]\n})\nexport class ChatModule {}\n```", "```js\nimport 'rxjs/Rx';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthenticationService } from '../authentication/authentication.service';\n\n@Injectable()\nexport class ChatService {\n  private socket: any;\n\n  constructor(private _router:Router, private _authenticationService: AuthenticationService) {\n    if (this._authenticationService.isLoggedIn()) {\n      this.socket = io();\n    } else {\n      this._router.navigate(['Home']);\n    }\n  }\n\n  on(eventName, callback) {\n    if (this.socket) {\n      this.socket.on(eventName, function(data) {\n        callback(data);\n      });\n    }\n  };\n\n  emit(eventName, data) {\n    if (this.socket) {\n      this.socket.emit(eventName, data);\n    }\n  };\n\n  removeListener(eventName) {\n    if (this.socket) {\n      this.socket.removeListener(eventName);\n    }\n  };\n}\n```", "```js\nimport { Component } from '@angular/core';\nimport { ChatService } from './chat.service';\n\n@Component({\n  selector: 'chat',\n  templateUrl: 'app/chat/chat.template.html',\n  providers: [ChatService]\n})\nexport class ChatComponent {\n  messageText: string;\n  messages: Array<any>;\n\n  constructor(private _chatService: ChatService) {}\n\n  ngOnInit() {\n    this.messages = new Array();\n\n    this._chatService.on('chatMessage', (msg) => {\n this.messages.push(msg);\n });\n  }\n\n  sendMessage() {\n    const message = {\n      text: this.messageText,\n    };\n\n this._chatService.emit('chatMessage', message);\n    this.messageText = ''\n  }\n\n  ngOnDestroy() {\n this._chatService.removeListener('chatMessage');\n  }\n}\n```", "```js\n<div *ngFor=\"let message of messages\" [ngSwitch]=\"message.type\">\n    <strong *ngSwitchCase=\"'status'\">\n      <span>{{message.created}}</span>\n      <span>{{message.username}}</span>\n      <span>is</span>\n      <span>{{message.text}}</span>\n    </strong>\n    <span *ngSwitchDefault>\n      <span>{{message.created}}</span>\n      <span>{{message.username}}:</span>\n      <span>{{message.text}}</span>\n    </span>\n</div>\n<form (ngSubmit)=\"sendMessage()\">\n    <input type=\"text\" name= \"messageText\" [(ngModel)]=\"messageText\">\n    <input type=\"submit\">\n</form>\n```", "```js\nimport { Routes } from '@angular/router';\nimport { ChatComponent } from './chat.component';\n\nexport const ChatRoutes: Routes = [{\n  path: 'chat',\n  component: ChatComponent\n}];\n```", "```js\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule }   from '@angular/router';\nimport { HttpModule, RequestOptions } from '@angular/http';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutes } from './app.routes';\n\nimport { HomeModule } from './home/home.module';\nimport { AuthenticationService } from './authentication/authentication.service';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { ArticlesModule } from './articles/articles.module';\nimport { ChatModule } from './chat/chat.module';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    AuthenticationModule,\n    HomeModule,\n    ArticlesModule,\n ChatModule,\n    RouterModule.forRoot(AppRoutes),\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    AuthenticationService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\n<div *ngIf=\"user\">\n  <h1>Hello {{user.firstName}}</h1>\n  <a href=\"/api/auth/signout\">Signout</a>\n  <ul>\n    <li><a [routerLink]=\"['/articles']\">List Articles</a></li>\n    <li><a [routerLink]=\"['/articles/create']\">Create Article</a></li>\n <li><a [routerLink]=\"['/chat']\">Chat</a></li>\n  </ul>\n</div>\n\n<div *ngIf=\"!user\">\n  <a [routerLink]=\"['/authentication/signup']\">Signup</a>\n  <a [routerLink]=\"['/authentication/signin']\">Signin</a>\n</div>\n```", "```js\n$ npm start\n\n```"]