["```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n \"passport\": \"0.3.2\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst configureMongoose = require('./config/mongoose');\nconst configureExpress = require('./config/express');\nconst configurePassport = require('./config/passport');\n\nconst db = configureMongoose();\nconst app = configureExpress();\nconst passport = configurePassport();\napp.listen(3000);\n\nmodule.exports = app;\n\nconsole.log('Server running at http://localhost:3000/');\n```", "```js\nconst config = require('./config');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst passport = require('passport');\n\nmodule.exports = function() {\n  const app = express();\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret\n  }));\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n app.use(passport.initialize());\n app.use(passport.session());\n\n  require('../app/routes/index.server.routes.js')(app);\n  require('../app/routes/users.server.routes.js')(app);\n\n  app.use(express.static('./public'));\n\n  return app;\n};\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n \"passport-local\": \"1.0.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst User = require('mongoose').model('User');\n\nmodule.exports = function() {\n  passport.use(new LocalStrategy((username, password, done) => {\n    User.findOne({\n      username: username\n    }, (err, user) => {\n      if (err) {\n        return done(err);\n      }\n\n      if (!user) {\n        return done(null, false, {\n          message: 'Unknown user'\n        });\n      }\n\n      if (!user.authenticate(password)) {\n        return done(null, false, {\n          message: 'Invalid password'\n        });\n      }\n\n      return done(null, user);\n      });\n  }));\n};\n```", "```js\nconst passport = require('passport');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const User = mongoose.model('User');\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser((id, done) => {\n    User.findOne({\n      _id: id\n    }, '-password -salt', (err, user) => {\n      done(err, user);\n    });\n  });\n\n  require('./strategies/local.js')();\n};\n```", "```js\nconst mongoose = require('mongoose');\nconst crypto = require('crypto');\nconst Schema = mongoose.Schema;\nconst UserSchema = new Schema({\n    firstName: String,\n    lastName: String,\n    email: {\n        type: String,\n        match: [/.+\\@.+\\..+/, \"Please fill a valid e-mail address\"]\n    },\n    username: {\n        type: String,\n        unique: true,\n        required: 'Username is required',\n        trim: true\n    },\n    password: {\n        type: String,\n        validate: [(password) => {\n            return password && password.length > 6;\n        }, 'Password should be longer']\n    },\n salt: {\n type: String\n },\n provider: {\n type: String,\n required: 'Provider is required'\n },\n providerId: String,\n providerData: {},\n    created: {\n        type: Date,\n        default: Date.now\n    }\n});\n\nUserSchema.virtual('fullName').get(function() {\n    return this.firstName + ' ' + this.lastName;\n}).set(function(fullName) {\n    const splitName = fullName.split(' ');\n    this.firstName = splitName[0] || '';\n    this.lastName = splitName[1] || '';\n});\n\nUserSchema.pre('save', function(next) {\n if (this.password) {\n this.salt = new\n Buffer(crypto.randomBytes(16).toString('base64'), 'base64');\n this.password = this.hashPassword(this.password);\n }\n next();\n});\n\nUserSchema.methods.hashPassword = function(password) {\n return crypto.pbkdf2Sync(password, this.salt, 10000,\n 64).toString('base64');\n};\n\nUserSchema.methods.authenticate = function(password) {\n return this.password === this.hashPassword(password);\n};\n\nUserSchema.statics.findUniqueUsername = function(username, suffix,\n callback) {\n var possibleUsername = username + (suffix || '');\n this.findOne({\n username: possibleUsername\n }, (err, user) => {\n if (!err) {\n if (!user) {\n callback(possibleUsername);\n } else {\n return this.findUniqueUsername(username, (suffix || 0) +\n 1, callback);\n }\n } else {\n callback(null);\n }\n });\n};\nUserSchema.set('toJSON', {\n    getters: true,\n    virtuals: true\n});\n\nmongoose.model('User', UserSchema);\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title>\n    <%=title %>\n  </title>\n</head>\n<body>\n  <% for(var i in messages) { %>\n    <div class=\"flash\"><%= messages[i] %></div>\n  <% } %>\n  <form action=\"/signup\" method=\"post\">\n    <div>\n      <label>First Name:</label>\n      <input type=\"text\" name=\"firstName\" />\n    </div>\n    <div>\n      <label>Last Name:</label>\n      <input type=\"text\" name=\"lastName\" />\n    </div>\n    <div>\n      <label>Email:</label>\n      <input type=\"text\" name=\"email\" />\n    </div>\n    <div>\n      <label>Username:</label>\n      <input type=\"text\" name=\"username\" />\n    </div>\n    <div>\n      <label>Password:</label>\n      <input type=\"password\" name=\"password\" />\n    </div>\n    <div>\n      <input type=\"submit\" value=\"Sign up\" />\n    </div>\n  </form>\n</body>\n</html>\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n  <title>\n    <%=title %>\n  </title>\n</head>\n<body>\n  <% for(var i in messages) { %>\n    <div class=\"flash\"><%= messages[i] %></div>\n  <% } %>\n  <form action=\"/signin\" method=\"post\">\n    <div>\n      <label>Username:</label>\n      <input type=\"text\" name=\"username\" />\n    </div>\n    <div>\n      <label>Password:</label>\n      <input type=\"password\" name=\"password\" />\n    </div>\n    <div>\n      <input type=\"submit\" value=\"Sign In\" />\n    </div>\n  </form>\n</body>\n</html>\n```", "```js\nconst User = require('mongoose').model('User');\nconst passport = require('passport');\n\nfunction getErrorMessage(err) {\n  let message = '';\n\n  if (err.code) {\n    switch (err.code) {\n      case 11000:\n      case 11001:\n        message = 'Username already exists';\n        break;\n      default:\n        message = 'Something went wrong';\n    }\n  } else {\n    for (var errName in err.errors) {\n      if (err.errors[errName].message) message = err.errors[errName].message;\n    }\n  }\n\n  return message;\n};\n\nexports.renderSignin = function(req, res, next) {\n  if (!req.user) {\n    res.render('signin', {\n      title: 'Sign-in Form',\n      messages: req.flash('error') || req.flash('info')\n    });\n  } else {\n    return res.redirect('/');\n  }\n};\n\nexports.renderSignup = function(req, res, next) {\n  if (!req.user) {\n    res.render('signup', {\n      title: 'Sign-up Form',\n      messages: req.flash('error')\n    });\n  } else {\n    return res.redirect('/');\n  }\n};\n\nexports.signup = function(req, res, next) {\n  if (!req.user) {\n    const user = new User(req.body);\n    user.provider = 'local';\n\n    user.save((err) => {\n      if (err) {\n        const message = getErrorMessage(err);\n\n        req.flash('error', message);\n        return res.redirect('/signup');\n      }\n      req.login(user, (err) => {\n        if (err) return next(err);\n        return res.redirect('/');\n      });\n    });\n  } else {\n    return res.redirect('/');\n  }\n};\n\nexports.signout = function(req, res) {\n  req.logout();\n  res.redirect('/');\n};\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n \"connect-flash\": \"0.1.1\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-local\": \"1.0.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nconst config = require('./config');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst flash = require('connect-flash');\nconst passport = require('passport');\n\nmodule.exports = function() {\n  const app = express();\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret\n  }));\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n app.use(flash());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  require('../app/routes/index.server.routes.js')(app);\n  require('../app/routes/users.server.routes.js')(app);\n\n  app.use(express.static('./public'));\n\n  return app;\n\n};\n```", "```js\nexports.renderSignin = function(req, res, next) {\n  if (!req.user) {\n    res.render('signin', {\n      title: 'Sign-in Form',\n messages: req.flash('error') || req.flash('info')\n    });\n  } else {\n    return res.redirect('/');\n  }\n};\n\nexports.renderSignup = function(req, res, next) {\n  if (!req.user) {\n    res.render('signup', {\n      title: 'Sign-up Form',\n messages: req.flash('error')\n    });\n  } else {\n    return res.redirect('/');\n  }\n};\u2029\n```", "```js\nreq.flash('error', message);\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\nconst passport = require('passport');\n\nmodule.exports = function(app) {\n  app.route('/signup')\n     .get(users.renderSignup)\n     .post(users.signup);\n\n  app.route('/signin')\n     .get(users.renderSignin)\n     .post(passport.authenticate('local', {\n       successRedirect: '/',\n       failureRedirect: '/signin',\n       failureFlash: true\n     }));\n\n  app.get('/signout', users.signout);\n};\n```", "```js\nexports.render = function(req, res) {\n  res.render('index', {\n    title: 'Hello World',\n    userFullName: req.user ? req.user.fullName : ''\n  });\n};\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n      <title><%= title %></title>\n    </head>\n    <body>\n      <% if ( userFullName ) { %>\n        <h2>Hello <%=userFullName%> </h2> \n        <a href=\"/signout\">Sign out</a>\n      <% } else { %>\n        <a href=\"/signup\">Signup</a>\n        <a href=\"/signin\">Signin</a>\n    <% } %>\n    <br>\n      <img src=\"img/logo.png\" alt=\"Logo\">\n    </body>\n</html>\n```", "```js\n$ node server\n\n```", "```js\nexports.saveOAuthUserProfile = function(req, profile, done) {\n  User.findOne({\n    provider: profile.provider,\n    providerId: profile.providerId\n  }, (err, user) => {\n    if (err) {\n      return done(err);\n    } else {\n      if (!user) {\n        const possibleUsername = profile.username || ((profile.email) ? profile.email.split(@''@')[0] : '');\n\n        User.findUniqueUsername(possibleUsername, null, (availableUsername) => {\n          const newUser = new User(profile);\n          newUser.username = availableUsername;\n\n          newUser.save((err) => {\n\n            return done(err, newUser);\n          });\n        });\n      } else {\n        return done(err, user);\n      }\n    }\n  });\n};\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n \"passport-facebook\": \"2.1.1\",\n    \"passport-local\": \"1.0.0\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nmodule.exports = {\n  db: 'mongodb://localhost/mean-book',\n  sessionSecret: 'developmentSessionSecret',\n facebook: {\n clientID: 'Application Id',\n clientSecret: 'Application Secret',\n callbackURL: 'http://localhost:3000/oauth/facebook/callback'\n  }\n};\n```", "```js\nconst passport = require('passport');\nconst url = require('url');\nconst FacebookStrategy = require('passport-facebook').Strategy;\nconst config = require('../config');\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function() {\n  passport.use(new FacebookStrategy({\n    clientID: config.facebook.clientID,\n    clientSecret: config.facebook.clientSecret,\n    callbackURL: config.facebook.callbackURL,\n    profileFields: ['id', 'name', 'displayName', 'emails'],\n    passReqToCallback: true\n  }, (req, accessToken, refreshToken, profile, done) => {\n    const providerData = profile._json;\n    providerData.accessToken = accessToken;\n    providerData.refreshToken = refreshToken;\n\n    const providerUserProfile = {\n      firstName: profile.name.givenName,\n      lastName: profile.name.familyName,\n      fullName: profile.displayName,\n      email: profile.emails[0].value,\n      username: profile.name.givenName + profile.name.familyName,\n      provider: 'facebook',\n      providerId: profile.id,\n      providerData: providerData\n    };\n\n    users.saveOAuthUserProfile(req, providerUserProfile, done);\n  }));\n};\n```", "```js\nconst passport = require('passport');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const User = mongoose.model('User');\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser((id, done) => {\n    User.findOne({\n      _id: id\n    }, '-password -salt', (err, user) => {\n      done(err, user);\n    });\n  });\n\n  require('./strategies/local.js')();\n require('./strategies/facebook.js')();\n};\n```", "```js\napp.get('/oauth/facebook', passport.authenticate('facebook', {\n  failureRedirect: '/signin'\n}));\n\napp.get('/oauth/facebook/callback', passport.authenticate('facebook', {\n  failureRedirect: '/signin',\n  successRedirect: '/'\n}));\n```", "```js\n<a href=\"/oauth/facebook\">Sign in with Facebook</a>\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",\n    \"passport-local\": \"1.0.0\",\n \"passport-twitter\": \"1.0.4\"\n  }\n}\n```", "```js\n$ npm install\n\n```", "```js\nmodule.exports = {\n  db: 'mongodb://localhost/mean-book',\n  sessionSecret: 'developmentSessionSecret',\n  facebook: {\n    clientID: 'Application Id',\n    clientSecret: 'Application Secret',\n    callbackURL: 'http://localhost:3000/oauth/facebook/callback'\n  },\n twitter: {\n clientID: 'Application Id',\n clientSecret: 'Application Secret',\n callbackURL: 'http://localhost:3000/oauth/twitter/callback'\n }\n};\n```", "```js\nconst passport = require('passport');\nconst url = require('url');\nconst TwitterStrategy = require('passport-twitter').Strategy;\nconst config = require('../config');\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function() {\n  passport.use(new TwitterStrategy({\n    consumerKey: config.twitter.clientID,\n    consumerSecret: config.twitter.clientSecret,\n    callbackURL: config.twitter.callbackURL,\n    passReqToCallback: true\n  }, (req, token, tokenSecret, profile, done) => {\n    const providerData = profile._json;\n    providerData.token = token;\n    providerData.tokenSecret = tokenSecret;\n\n    const providerUserProfile = {\n      fullName: profile.displayName,\n      username: profile.username,\n      provider: 'twitter',\n      providerId: profile.id,\n      providerData: providerData\n    };\n\n    users.saveOAuthUserProfile(req, providerUserProfile, done);\n  }));\n};\n```", "```js\nconst passport = require('passport');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const User = mongoose.model('User');\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser((id, done) => {\n    User.findOne({\n      _id: id\n    }, '-password -salt, ', (err, user) => {\n      done(err, user);\n    });\n  });\n\n  require('./strategies/local.js')();\n  require('./strategies/facebook.js')();\n require('./strategies/twitter.js')();\n};\n```", "```js\napp.get('/oauth/twitter', passport.authenticate('twitter', {\n  failureRedirect: '/signin'\n}));\n\napp.get('/oauth/twitter/callback', passport.authenticate('twitter', {\n  failureRedirect: '/signin',\n  successRedirect: '/'\n}));\n```", "```js\n<a href=\"/oauth/twitter\">Sign in with Twitter</a>\n```", "```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.6\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"connect-flash\": \"0.1.1\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n    \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\",\n    \"passport\": \"0.3.2\",\n    \"passport-facebook\": \"2.1.1\",    \n \"passport-google-oauth\": \"1.0.0\",\n    \"passport-local\": \"1.0.0\",\n    \"passport-twitter\": \"1.0.4\"\n  }\n}\n\n```", "```js\n$ npm install\n\n```", "```js\nmodule.exports = {\n  db: 'mongodb://localhost/mean-book',\n  sessionSecret: 'developmentSessionSecret',\n  facebook: {\n    clientID: 'Application Id',\n    clientSecret: 'Application Secret',\n    callbackURL: 'http://localhost:3000/oauth/facebook/callback'\n  },\n  twitter: {\n    clientID: 'Application Id',\n    clientSecret: 'Application Secret',\n    callbackURL: 'http://localhost:3000/oauth/twitter/callback'\n  },\n google: {\n clientID: 'Application Id',\n clientSecret: 'Application Secret',\n callbackURL: 'http://localhost:3000/oauth/google/callback'\n }\n};\n```", "```js\nconst passport = require('passport');\nconst url = require('url');,\nconst GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;\nconst config = require(../config');\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function() {\n  passport.use(new GoogleStrategy({\n    clientID: config.google.clientID,\n    clientSecret: config.google.clientSecret,\n    callbackURL: config.google.callbackURL,\n    passReqToCallback: true\n  }, (req, accessToken, refreshToken, profile, done) => {\n    const providerData = profile._json;\n    providerData.accessToken = accessToken;\n    providerData.refreshToken = refreshToken;\n\n    const providerUserProfile = {\n      firstName: profile.name.givenName,\n      lastName: profile.name.familyName,\n      fullName: profile.displayName,\n      email: profile.emails[0].value,\n      username: profile.username,\n      provider: 'google''google',\n      providerId: profile.id,\n      providerData: providerData\n    };\n\n    users.saveOAuthUserProfile(req, providerUserProfile, done);\n  }));\n};\n```", "```js\nconst passport = require('passport');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const User = mongoose.model('User');\n\n  passport.serializeUser((user, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser((id, done) => {\n    User.findOne({\n      _id: id\n    }, '-password -salt', function(err, user) => {\n      done(err, user);\n    });\n  });\n\n  require('./strategies/local.js')();\n  require('./strategies/facebook.js')();\n  require('./strategies/twitter.js')();\n require('./strategies/google.js')();\n};\n```", "```js\napp.get('/oauth/google', passport.authenticate('google', {\n  failureRedirect: '/signin',\n  scope: [\n    'https://www.googleapis.com/auth/userinfo.profile',\n    'https://www.googleapis.com/auth/userinfo.email'\n  ],\n}));\n\napp.get('/oauth/google/callback', passport.authenticate('google', {\n  failureRedirect: '/signin',\n  successRedirect: '/'\n}));\n```", "```js\n<a href=\"/oauth/google\">Sign in with Google</a>\n```", "```js\n$ node server\n\n```"]