["```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst ArticleSchema = new Schema({\n  created: {\n    type: Date,\n    default: Date.now\n  },\n  title: {\n    type: String,\n    default: '',\n    trim: true,\n    required: 'Title cannot be blank'\n  },\n  content: {\n    type: String,\n    default: '',\n    trim: true\n  },\n  creator: {\n    type: Schema.ObjectId,\n    ref: 'User'\n  }\n});\n\nmongoose.model('Article', ArticleSchema);\n```", "```js\nconst config = require('./config');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const db = mongoose.connect(config.db);\n\n  require('../app/models/user.server.model');\n  require('../app/models/article.server.model');\n\n  return db;\n};\n```", "```js\nconst mongoose = require('mongoose');\nconst Article = mongoose.model('Article');\n```", "```js\nfunction getErrorMessage (err) {\n  if (err.errors) {\n    for (let errName in err.errors) {\n      if (err.errors[errName].message) return err.errors[errName].message;\n    }\n  } else {\n    return 'Unknown server error';\n  }\n};\n```", "```js\nexports.create = function(req, res) {\n  const article = new Article(req.body);\n  article.creator = req.user;\n\n  article.save((err) => {\n    if (err) {\n      return res.status(400).send({\n        message: getErrorMessage(err)\n      });\n    } else {\n      res.status(200).json(article);\n    }\n  });\n};\n```", "```js\nexports.list = function(req, res) {\n  Article.find().sort('-created').populate('creator', 'firstName lastName fullName').exec((err, articles) => {\n    if (err) {\n      return res.status(400).send({\n        message: getErrorMessage(err)\n      });\n    } else {\n      res.status(200).json(articles);\n    }\n  });\n};\n```", "```js\nexports.articleByID = function(req, res, next, id) {\n  Article.findById(id).populate('creator', 'firstName lastName fullName').exec((err, article) => {\n    if (err) return next(err);\n    if (!article) return next(new Error('Failed to load article ' + id));\n\n    req.article = article;\n    next();\n  });\n};\n```", "```js\nexports.read = function(req, res) {\n  res.status(200).json(req.article);\n};\n```", "```js\nexports.update = function(req, res) {\n  const article = req.article;\n\n  article.title = req.body.title;\n  article.content = req.body.content;\n\n  article.save((err) => {\n    if (err) {\n      return res.status(400).send({\n        message: getErrorMessage(err)\n      });\n    } else {\n      res.status(200).json(article);\n    }\n  });\n};\n```", "```js\nexports.delete = function(req, res) {\n  const article = req.article;\n\n  article.remove((err) => {\n    if (err) {\n      return res.status(400).send({\n        message: getErrorMessage(err)\n      });\n    } else {\n      res.status(200).json(article);\n    }\n  });\n};\n```", "```js\nexports.requiresLogin = function(req, res, next) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).send({\n      message: 'User is not logged in'\n    });\n  }\n\n  next();\n};\n```", "```js\nexports.hasAuthorization = function(req, res, next) {\n    if (req.article.creator.id !== req.user.id) {\n        return res.status(403).send({\n            message: 'User is not authorized'\n        });\n    }\n\n    next();\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\nconst articles = require('../../app/controllers/articles.server.controller');\n\nmodule.exports = function(app) {\n  app.route('/api/articles')\n     .get(articles.list)\n     .post(users.requiresLogin, articles.create);\n\n  app.route('/api/articles/:articleId')\n     .get(articles.read)\n     .put(users.requiresLogin, articles.hasAuthorization, articles.update)\n     .delete(users.requiresLogin, articles.hasAuthorization, articles.delete);\n\n  app.param('articleId', articles.articleByID);\n};\n```", "```js\nconst path = require('path');\nconst config = require('./config');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\nconst flash = require('connect-flash');\nconst passport = require('passport');\n\nmodule.exports = function() {\n  const app = express();\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret\n  }));\n\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n  app.use(flash());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.use('/', express.static(path.resolve('./public')));\n  app.use('/lib', express.static(path.resolve('./node_modules')));\n\n  require('../app/routes/users.server.routes.js')(app);  \n  require('../app/routes/articles.server.routes.js')(app);\n  require('../app/routes/index.server.routes.js')(app);\n\n  return app;\n}; \n```", "```js\n...\n\"rxjs\": \"5.0.0-beta.12\",\n...\n\n```", "```js\n...\nimport 'rxjs/Rx';\n\n```", "```js\nsignin(credentials: any): Observable<any> {\n      let body = JSON.stringify(credentials);\n      let headers = new Headers({ 'Content-Type': 'application/json' });\n      let options = new RequestOptions({ headers: headers });\n\n  return this.http.post(this._signinURL, body, options)\n                        .map(res => this.user = res.json())\n                        .catch(this.handleError)\n  }\n\n```", "```js\nsignin() {\n    this._authenticationService.signin(this.credentials).subscribe(\n    result  => this._router.navigate(['/']), \n    error =>  this.errorMessage = error );\n  }\n}\n\n```", "```js\nimport { NgModule }       from '@angular/core';\nimport { CommonModule }   from '@angular/common';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ArticlesRoutes } from './articles.routes';\nimport { ArticlesComponent } from './articles.component';\nimport { CreateComponent } from './create/create.component';\nimport { ListComponent } from './list/list.component';\nimport { ViewComponent } from './view/view.component';\nimport { EditComponent } from './edit/edit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule.forChild(ArticlesRoutes),\n  ],\n  declarations: [\n    ArticlesComponent,\n    CreateComponent,\n    ListComponent,\n    ViewComponent,\n    EditComponent,\n  ]\n})\nexport class ArticlesModule {}\n```", "```js\nimport { ArticlesService } from './articles.service';\n\n@Component({\n  selector: 'articles',\n  template: '<router-outlet></router-outlet>',\n  providers: [ArticlesService]\n})\nexport class ArticlesComponent {}\n\n```", "```js\nimport { Routes } from '@angular/router';\n\nimport { ArticlesComponent } from './articles.component';\nimport { CreateComponent } from './create/create.component';\nimport { ListComponent } from './list/list.component';\nimport { ViewComponent } from './view/view.component';\nimport { EditComponent } from './edit/edit.component';\n\nexport const ArticlesRoutes: Routes = [{\n  path: 'articles',\n  component: ArticlesComponent,\n  children: [\n    {path: '', component: ListComponent},\n    {path: 'create', component: CreateComponent},\n    {path: ':articleId', component: ViewComponent},\n    {path: ':articleId/edit', component: EditComponent}\n  ],\n}];\n\n```", "```js\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule }   from '@angular/router';\nimport { HttpModule, RequestOptions } from '@angular/http';\nimport { LocationStrategy, HashLocationStrategy } from '@angular/common';\n\nimport { AppComponent }       from './app.component';\nimport { AppRoutes }       from './app.routes';\n\nimport { HomeModule } from './home/home.module';\nimport { AuthenticationService } from './authentication/authentication.service';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { ArticlesModule } from './articles/articles.module';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    FormsModule,\n    AuthenticationModule,\n    HomeModule,\n    ArticlesModule,\n    RouterModule.forRoot(AppRoutes),\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    AuthenticationService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```", "```js\nimport 'rxjs/Rx';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Injectable} from '@angular/core';\nimport {Http, Headers, Request, RequestMethod, Response} from '@angular/http';\n\n@Injectable()\nexport class ArticlesService {\n  private _baseURL = 'api/articles';\n\n  constructor (private _http: Http) {}\n\n  create(article: any): Observable<any> {\n    return this._http\n      .post(this._baseURL, article)\n      .map((res: Response) => res.json())\n      .catch(this.handleError);\n    }\n\n  read(articleId: string): Observable<any> {\n    return this._http\n      .get(`${this._baseURL}/${articleId}`)\n      .map((res: Response) => res.json())\n      .catch(this.handleError);\n  }\n\n  update(article: any): Observable<any> {\n    return this._http\n      .put(`${this._baseURL}/${article._id}`, article)\n      .map((res: Response) => res.json())\n      .catch(this.handleError);\n    }\n\n  delete(articleId: any): Observable<any> {\n    return this._http\n      .delete(`${this._baseURL}/${articleId}`)\n      .map((res: Response) => res.json())\n      .catch(this.handleError);\n  }  \n\n  list(): Observable<any> {\n    return this._http\n      .get(this._baseURL)\n      .map((res: Response) => res.json())\n      .catch(this.handleError);\n  }\n\n  private handleError(error: Response) {\n    return Observable.throw(error.json().message || 'Server error');\n  }\n}\n```", "```js\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { ArticlesService } from '../articles.service';\n\n@Component({\n  selector: 'create',\n  templateUrl: 'app/articles/create/create.template.html'\n})\nexport class CreateComponent {\n  article: any = {};\n  errorMessage: string;\n\n  constructor(private _router:Router,\n        private _articlesService: ArticlesService) {}\n\n  create() {\n    this._articlesService\n      .create(this.article)\n      .subscribe(createdArticle => this._router.navigate(['/articles', createdArticle._id]),\n               error =>  this.errorMessage = error);\n  }\n}\n\n```", "```js\n<h1>New Article</h1>\n<form (ngSubmit)=\"create()\" novalidate>\n  <div>\n    <label for=\"title\">Title</label>\n    <div>\n      <input type=\"text\" required [(ngModel)]=\"article.title\" name=\"title\" placeholder=\"Title\">\n    </div>\n  </div>\n  <div>\n    <label for=\"content\">Content</label>\n    <div>\n      <textarea type=\"text\" required cols=\"30\" rows=\"10\" [(ngModel)]=\"article.content\" name=\"content\" placeholder=\"Content\"></textarea>\n    </div>\n  </div>\n  <div>\n    <input type=\"submit\">\n  </div>\n\n  <strong id=\"error\">{{errorMessage}}</strong>\n</form>\n\n```", "```js\nimport { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthenticationService } from '../../authentication/authentication.service';\nimport { ArticlesService } from '../articles.service';\n\n@Component({\n  selector: 'view',\n  templateUrl: 'app/articles/view/view.template.html',\n})\nexport class ViewComponent {\n  user: any;\n  article: any;\n  paramsObserver: any;\n  errorMessage: string;\n  allowEdit: boolean = false;\n\n  constructor(private _router:Router, \n        private _route: ActivatedRoute, \n        private _authenticationService: AuthenticationService, \n        private _articlesService: ArticlesService) {}\n\n  ngOnInit() {\n    this.user = this._authenticationService.user\n\n    this.paramsObserver = this._route.params.subscribe(params => {\n      let articleId = params['articleId'];\n\n      this._articlesService\n        .read(articleId)\n        .subscribe(\n          article => {\n            this.article = article;\n            this.allowEdit = (this.user && this.user._id === this.article.creator._id);\n           },\n          error => this._router.navigate(['/articles'])\n        );\n    });\n  }\n\n  ngOnDestroy() {\n    this.paramsObserver.unsubscribe();\n  }\n\n  delete() {\n    this._articlesService.delete(this.article._id).subscribe(deletedArticle => this._router.navigate(['/articles']),\n                                 error => this.errorMessage = error);\n  }\n}\n```", "```js\n<section *ngIf=\"article && article.creator\">\n  <h1>{{article.title}}</h1>\n\n  <div *ngIf=\"allowEdit\">\n      <a [routerLink]=\"['/articles', article._id, 'edit']\">edit</a>\n      <button (click)=\"delete()\">delete</button>\n  </div>\n  <small>\n      <em>Posted on {{article.created}} by {{article.creator.fullName}}</em>\n  </small>\n\n  <p>{{article.content}}</p>\n</section>\n```", "```js\nimport { Component } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { ArticlesService } from '../articles.service';\n\n@Component({\n  selector: 'edit',\n  templateUrl: 'app/articles/edit/edit.template.html'\n})\nexport class EditComponent {\n  article: any = {};\n  errorMessage: string;\n  paramsObserver: any;\n\n  constructor(private _router:Router, \n        private _route: ActivatedRoute, \n        private _articlesService: ArticlesService) {}\n\n  ngOnInit() {\n    this.paramsObserver = this._route.params.subscribe(params => {\n      let articleId = params['articleId'];\n\n      this._articlesService.read(articleId).subscribe(article => {\n                                this.article = article;\n                               },\n                              error => this._router.navigate(['/articles']));\n    });\n  }\n\n  ngOnDestroy() {\n    this.paramsObserver.unsubscribe();\n  }\n\n  update() {\n    this._articlesService.update(this.article).subscribe(savedArticle => this._router.navigate(['/articles', savedArticle._id]),\n                                  error =>  this.errorMessage = error);\n  }\n}\n```", "```js\n<h1>Edit Article</h1>\n<form (ngSubmit)=\"update()\" novalidate>\n    <div>\n        <label for=\"title\">Title</label>\n        <div>\n            <input type=\"text\" required [(ngModel)]=\"article.title\" name=\"title\" placeholder=\"Title\">\n        </div>\n    </div>\n    <div>\n        <label for=\"content\">Content</label>\n        <div>\n            <textarea type=\"text\" required cols=\"30\" rows=\"10\" [(ngModel)]=\"article.content\" name=\"content\" placeholder=\"Content\"></textarea>\n        </div>\n    </div>\n    <div>\n        <input type=\"submit\" value=\"Update\">\n    </div>\n\n    <strong>{{errorMessage}}</strong>\n</form>\n```", "```js\nimport { Component } from '@angular/core';\nimport { ArticlesService } from '../articles.service';\n\n@Component({\n  selector: 'list',\n  templateUrl: 'app/articles/list/list.template.html'\n})\nexport class ListComponent{\n  articles: any;\n  errorMessage: string;\n\n  constructor(private _articlesService: ArticlesService) {}\n\n  ngOnInit() {\n    this._articlesService.list().subscribe(articles  => this.articles = articles);\n  }\n}\n```", "```js\n<h1>Articles</h1>\n<ul>\n  <li *ngFor=\"let article of articles\">\n    <a [routerLink]=\"['/articles', article._id]\">{{article.title}}</a>\n    <br>\n    <small>{{article.created}}/{{article.creator.fullName}}</small>\n    <p>{{article.content}}</p>\n  </li>\n</ul>\n\n<div *ngIf=\"articles && articles.length === 0\">\n  No articles yet, why don't you <a [routerLink]=\"['/articles/create']\">create one</a>? \n</div>\n```", "```js\n<div *ngIf=\"user\">\n  <h1>Hello {{user.firstName}}</h1>\n  <a href=\"/api/auth/signout\">Signout</a>\n  <ul>\n    <li><a [routerLink]=\"['/articles']\">List Articles</a></li>\n <li><a [routerLink]=\"['/articles/create']\">Create Article</a></li>\n </ul>\n</div>\n\n<div *ngIf=\"!user\">\n  <a [routerLink]=\"['/authentication/signup']\">Signup</a>\n  <a [routerLink]=\"['/authentication/signin']\">Signin</a>\n</div>\n\n```", "```js\n$ npm start\n\n```"]