["```js\n{\n  \"name\": \"MEAN\",\n  \"version\": \"0.0.5\",\n  \"dependencies\": {\n    \"body-parser\": \"1.15.2\",\n    \"compression\": \"1.6.0\",\n    \"ejs\": \"2.5.2\",\n    \"express\": \"4.14.0\",\n    \"express-session\": \"1.14.1\",\n    \"method-override\": \"2.3.6\",\n \"mongoose\": \"4.6.5\",\n    \"morgan\": \"1.7.0\"\n}\n```", "```js\n$ npm install\n\n```", "```js\nmongodb://username:password@hostname:port/database\n\n```", "```js\nmongodb://localhost/mean-book\n\n```", "```js\nconst uri = 'mongodb://localhost/mean-book';\nconst db = require('mongoose').connect(uri);\n```", "```js\nmodule.exports = {\n db: 'mongodb://localhost/mean-book',\n  sessionSecret: 'developmentSessionSecret'\n};\n```", "```js\nconst config = require('./config');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n const db = mongoose.connect(config.db);\n\n  return db;\n};\n```", "```js\nprocess.env.NODE_ENV = process.env.NODE_ENV || 'development';\n\nconst configureMongoose = require('./config/mongoose');\nconst configureExpress = require('./config/express');\n\nconst db = configureMongoose();\nconst app = configureExpress();\napp.listen(3000);\n\nmodule.exports = app;\nconsole.log('Server running at http://localhost:3000/');\n```", "```js\n$ node server\n\n```", "```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  firstName: String,\n  lastName: String,\n  email: String,\n  username: String,\n  password: String\n});\n\nmongoose.model('User', UserSchema);\n```", "```js\nconst config = require('./config');\nconst mongoose = require('mongoose');\n\nmodule.exports = function() {\n  const db = mongoose.connect(config.db);\n\n require('../app/models/user.server.model');\n\n  return db;\n};\n```", "```js\nconst User = require('mongoose').model('User');\n\nexports.create = function(req, res, next) {\n  const user = new User(req.body);\n\n  user.save((err) => {\n    if (err) {\n      return next(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function(app) {\n  app.route('/users').post(users.create);\n};\n```", "```js\nconst config = require('./config');\nconst express = require('express');\nconst morgan = require('morgan');\nconst compress = require('compression');\nconst bodyParser = require('body-parser');\nconst methodOverride = require('method-override');\nconst session = require('express-session');\n\nmodule.exports = function() {\n  const app = express();\n\n  if (process.env.NODE_ENV === 'development') {\n    app.use(morgan('dev'));\n  } else if (process.env.NODE_ENV === 'production') {\n    app.use(compress());\n  }\n\n  app.use(bodyParser.urlencoded({\n    extended: true\n  }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n\n  app.use(session({\n    saveUninitialized: true,\n    resave: true,\n    secret: config.sessionSecret\n  }));\n\n  app.set('views', './app/views');\n  app.set('view engine', 'ejs');\n\n  require('../app/routes/index.server.routes.js')(app);\n  require('../app/routes/users.server.routes.js')(app);\n\n  app.use(express.static('./public'));\n\n  return app;\n};\n```", "```js\n$ node server\n\n```", "```js\n{\n  \"firstName\": \"First\",\n  \"lastName\": \"Last\",\n  \"email\": \"user@example.com\",\n  \"username\": \"username\",\n  \"password\": \"password\"\n}\n```", "```js\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"firstName\":\"First\", \"lastName\":\"Last\",\"email\":\"user@example.com\",\"username\":\"username\",\"password\":\"password\"}' localhost:3000/users\n\n```", "```js\nexports.list = function(req, res, next) {\n  User.find({}, (err, users) => {\n    if (err) {\n      return next(err);\n    } else {\n      res.status(200).json(users);\n    }\n  });\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function(app) {\n  app.route('/users')\n    .post(users.create)\n    .get(users.list);\n};\n```", "```js\n$ node server\n\n```", "```js\nUser.find({}, 'username email', (err, users) => {\n  \u2026\n});\n```", "```js\nUser.find({}, 'username email', {\n  skip: 10,\n  limit: 10\n}, (err, users) => {\n  ...\n});\n```", "```js\nexports.read = function(req, res) {\n  res.json(req.user);\n};\n\nexports.userByID = function(req, res, next, id) {\n  User.findOne({\n    _id: id\n  }, (err, user) => {\n    if (err) {\n      return next(err);\n    } else {\n      req.user = user;\n      next();\n    }\n  });\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function(app) {\n  app.route('/users')\n     .post(users.create)\n     .get(users.list);\n\n app.route('/users/:userId')\n .get(users.read);\n\n app.param('userId', users.userByID);\n};\n```", "```js\n$ node server\n\n```", "```js\nexports.update = function(req, res, next) {\n  User.findByIdAndUpdate(req.user.id, req.body, {\n    'new': true\n  }, (err, user) => {\n    if (err) {\n      return next(err);\n    } else {\n      res.status(200).json(user);\n    }\n  });\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function(app) {\n  app.route('/users')\n     .post(users.create)\n     .get(users.list);\n\n  app.route('/users/:userId')\n     .get(users.read)\n     .put(users.update);\n\n  app.param('userId', users.userByID);\n};\n```", "```js\n$ node server\n\n```", "```js\n$ curl -X PUT -H \"Content-Type: application/json\" -d '{\"lastName\": \"Updated\"}' localhost:3000/users/[id]\n\n```", "```js\nexports.delete = function(req, res, next) {\n  req.user.remove(err => {\n    if (err) {\n      return next(err);\n    } else {\n      res.status(200).json(req.user);\n    }\n  })\n};\n```", "```js\nconst users = require('../../app/controllers/users.server.controller');\n\nmodule.exports = function(app) { \n  app.route('/users')\n    .post(users.create)\n    .get(users.list);\n\n  app.route('/users/:userId')\n    .get(users.read)\n    .put(users.update)\n    .delete(users.delete);\n\n  app.param('userId', users.userByID);\n};\n```", "```js\n$ node server\n\n```", "```js\n$ curl -X DELETE localhost:3000/users/[id]\n\n```", "```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  firstName: String,\n  lastName: String,\n  email: String,\n  username: String,\n  password: String,\n  created: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmongoose.model('User', UserSchema);\n```", "```js\n$ node server\n\n```", "```js\n$ curl -X POST -H \"Content-Type: application/json\" -d '{\"firstName\":\"First\", \"lastName\":\"Last\",\"email\":\"user@example.com\",\"username\":\"username\",\"password\":\"password\"}' localhost:3000/users\n\n```", "```js\nconst mongoose = require('mongoose');\nconst Schema = mongoose.Schema;\n\nconst UserSchema = new Schema({\n  firstName: String,\n  lastName: String,\n  email: String,\n  username: {\n    type: String,\n    trim: true\n  },\n  password: String,\n  created: {\n    type: Date,\n    default: Date.now\n  }\n});\n\nmongoose.model('User', UserSchema);\n```", "```js\nconst UserSchema = new Schema({\n  \u2026\n  website: {\n    type: String,\n    set: function(url) {\n      if (!url) {\n        return url;\n      } else {\n        if (url.indexOf('http://') !== 0   &&           url.indexOf('https://') !== 0) {\n          url = 'http://' + url;\n        }\n\n        return url;\n        }\n    }\n  },\n  \u2026\n});\n```", "```js\nconst UserSchema = new Schema({\n  ...\n  website: {\n    type: String,\n    get: function(url) {\n      if (!url) {\n        return url;\n      } else {\n        if (url.indexOf('http://') !== 0 &&           url.indexOf('https://') !== 0) {\n            url = 'http://' + url;\n          }\n\n        return url;\n     }\n    }\n  },\n  \u2026\n});\n\nUserSchema.set('toJSON', { getters: true });\n\n```", "```js\nUserSchema.virtual('fullName').get(function(){\n  return this.firstName + ' ' + this.lastName;\n});\n\nUserSchema.set('toJSON', { getters: true, virtuals: true });\n```", "```js\nUserSchema.virtual('fullName').get(function() {\n  return this.firstName + ' ' + this.lastName;\n}).set(function(fullName) {\n const splitName = fullName.split(' '); \n this.firstName = splitName[0] || ''; \n this.lastName = splitName[1] || ''; \n});\n\n```", "```js\nconst UserSchema = new Schema({\n  ...\n  username: {\n    type: String,\n    trim: true,\n    unique: true\n  },\n  ...\n});\n```", "```js\nconst UserSchema = new Schema({\n  \u2026\n  email: {\n    type: String,\n    index: true\n  },\n  \u2026\n});\n```", "```js\nUserSchema.statics.findOneByUsername = function(username, callback) {\n    this.findOne({ username: new RegExp(username, 'i') }, \n  callback);\n};\n```", "```js\nUser.findOneByUsername('username', (err, user) => {\n  \u2026\n});\n```", "```js\nUserSchema.methods.authenticate = function(password) {\n  return this.password === password;\n};\n```", "```js\nuser.authenticate('password');\n```", "```js\nconst UserSchema = new Schema({\n  ...\n  username: {\n    type: String,\n    trim: true,\n    unique: true,\n    required: true\n  },\n  ...\n});\n```", "```js\nconst UserSchema = new Schema({\n  \u2026\n  email: {\n    type: String,\n    index: true,\n    match: /.+\\@.+\\..+/\n  },\n  \u2026\n});\n```", "```js\nconst UserSchema = new Schema({\n  ...\n  role: {\n    type: String,\n    enum: ['Admin', 'Owner', 'User']\n  },\n  ...\n});\n```", "```js\nconst UserSchema = new Schema({\n  ...\n  password: {\n    type: String,\n    validate: [\n      function(password) {\n        return password.length >= 6;\n      },\n      'Password should be longer'\n    ]\n  },\n  ...\n});\n```", "```js\nUserSchema.pre('save', function(next){\n  if (...) {\n    next()\n  } else {\n    next(new Error('An Error Occurred'));\n  }\n});\n```", "```js\nUserSchema.post('save', function(next){\n    console.log('The user \"' + this.username +  '\" details were saved.');\n});\n```", "```js\nconst PostSchema = new Schema({\n  title: {\n    type: String,\n    required: true\n  },\n  content: {\n    type: String,\n    required: true\n  },\n  author: {\n    type: Schema.ObjectId,\n    ref: 'User'\n  }\n});\n\nmongoose.model('Post', PostSchema);\n```", "```js\nconst user = new User();\nuser.save();\n\nconst post = new Post();\npost.author = user;\npost.save();\n```", "```js\nPost.find().populate('author').exec((err, posts) => {\n  ...\n});\n```"]