["```js\nvar assert  = require('assert'),\n    Browser = require('zombie'),\n    app     = require('../app')\n    ;\n\ndescribe('Users', function() {\n\n  before(function(done) {\n    app.start(3000, done);\n  });\n\n  after(function(done) {\n    app.server.close(done);\n  });\n\n  describe('Signup Form', function() {\n\n    it('should load the signup form', function(done) {\n      var browser = new Browser();\n      browser.visit(\"http://localhost:3000/users/new\", function() {\n        assert.ok(browser.success, 'page loaded');\n        done();\n      });\n    });\n\n  });\n});\n```", "```js\nvar browser = new Browser();\n```", "```js\nbrowser.visit(\"http://localhost:3000/users/new\");\n```", "```js\nbrowser.visit(\"http://localhost:3000/users/new\");\nbrowser.wait(function() {\n  console.log('browser page loaded');\n});\n```", "```js\nbrowser.visit(\"http://localhost:3000/users/new\",\n  function(err, browser) {\n    if (err) throw err;\n    assert.ok(browser.success, 'page loaded');\n    done();\n  }\n);\n```", "```js\nbrowser.visit(\"http://localhost:3000/users/new\",\n  function(err) {\n    if (err) throw err;\n    assert.ok(browser.success, 'page loaded');\n    done();\n  }\n);\n```", "```js\nvar Browser = require('zombie');\n\nBrowser.visit((\"http://localhost:3000/users/new\",\n  function(err, browser) {\n    if (err) throw err;\n    assert.ok(browser.success, 'page loaded');\n    done();\n  }\n);\n```", "```js\n    <script>\n      $(function() {\n        $.get('/users/new', function() {\n          console.log('LOADED NEW');\n        });\n      });\n    </script>\n```", "```js\nit('should load the signup form', function(done) {\n  Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n    if (err) throw err;\n    console.log('VISIT IS DONE');\n    assert.ok(browser.success, 'page loaded');\n    done();\n  });\n});\n```", "```js\n$ DEBUG=true node_modules/.bin/mocha test/users.js\n```", "```js\nZombie: GET http://localhost:3000/users/new => 200\nZombie: GET http://localhost:3000/js/jquery.min.js => 200\nZombie: GET http://localhost:3000/js/jquery-ui-1.8.23.custom.min.js => 200\nZombie: GET http://localhost:3000/js/bootstrap.min.js => 200\nZombie: GET http://localhost:3000/js/todos.js => 200\nZombie: GET http://localhost:3000/users/new => 200\nLOADED NEW\nVISIT IS DONE\n.\n\n  \u2714 1 test complete (315ms)\n```", "```js\n$ SET DEBUG=true\n```", "```js\n$ node_modules\\.bin\\mocha test\\users.js\n```", "```js\nBrowser.visit(<url>, <options>, <callback>);\n```", "```js\nBrowser.visit(url, {debug: true}, callback);\n```", "```js\nvar options = {\n  headers: {\n    'x-test': 'Test 123',\n    'x-test-2': 'Test 234'\n  }\n};\nBrowser.visit(url, options, callback);\n```", "```js\nBrowser.visit(url, {maxWait: '10s'}, callback);\n```", "```js\nit('should load the signup form', function(done) {\n  Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n    if (err) throw err;\n    assert.ok(browser.success, 'page loaded');\n assert.equal(browser.text('h1'), 'New User');\n\n var form = browser.query('form');\n assert(form, 'form exists');\n assert.equal(form.method, 'POST', 'uses POST method');\n assert.equal(form.action, '/users', 'posts to /users');\n\n assert(browser.query('input[type=email]#email', form),\n 'has email input');\n assert(browser.query('input[type=password]#password', form),\n 'has password input');\n assert(browser.query('input[type=submit]', form),\n 'has submit button');\n\n    done();\n  });\n});\n```", "```js\nassert.equal(browser.text('h1'), 'New User');\n```", "```js\nvar form = browser.query('form');\nassert(form, 'form exists');\n```", "```js\nassert.equal(form.method, 'POST', 'uses POST method');\nassert.equal(form.action, '/users', 'posts to /users');\n```", "```js\nassert(browser.query('input[type=email]#email', form),\n  'has email input');\nassert(browser.query('input[type=password]#password', form),\n  'has password input');\nassert(browser.query('input[type=submit]', form),\n  'has submit button');\n```", "```js\nit(\"should submit\", function(done) {\n  Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n    if (err) throw err;\n\n    browser\n      .fill('E-mail', 'me@email.com')\n      .fill('Password', 'mypassword')\n      .pressButton('Submit', function(err) {\n        if (err) throw err;\n        assert.equal(browser.text('h1'), 'Thank you!');\n        assert(browser.query('a[href=\"/session/new\"]'),\n          'has login link');\n        done();\n      });\n\n  });\n});\n```", "```js\n<form action=\"/users\" method=\"POST\">\n  <p>\n    <label for=\"email\">E-mail</label>\n    <input type=\"email\" name=\"email\" value=\"\" id=\"email\">\n  </p>\n  <p>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" value=\"\" required=\"\">\n  </p>\n  <input type=\"submit\" value=\"Submit\">\n</form>\n```", "```js\n    browser\n      .fill('#email', 'me@email.com')\n      .fill('#password', 'mypassword')\n```", "```js\n$ ./node_modules/.bin/mocha test/users.js\n```", "```js\n  ..\n\n  \u2714 2 tests complete (577ms)\n```", "```js\n  ..\n\n  \u2716 1 of 2 tests failed:\n\n  1) Users Signup Form should submit:\n     Error: Server returned status code 409\n...\n```", "```js\n{\n  \"user\" : {\n    \"email\": \"me@email.com\",\n    \"password\": \"mypassword\"\n  }\n}\n```", "```js\nvar fixtures = require('./fixtures');\n```", "```js\nvar couchdb = require('../lib/couchdb'),\n    dbName  = 'users',\n    db      = couchdb.use(dbName);\n```", "```js\nbefore(function(done) {\n  db.get(fixtures.user.email, function(err, doc) {\n    if (err && err.status_code === 404) return done();\n    if (err) throw err;\n    db.destroy(doc._id, doc._rev, done);\n  });\n});\n```", "```js\nit(\"should submit\", function(done) {\n\n  Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n    if (err) throw err;\n\n    browser\n      .fill('E-mail', fixtures.user.email)\n      .fill('Password', fixtures.user.password)\n      .pressButton('Submit', function(err) {\n        if (err) throw err;\n        assert.equal(browser.text('h1'), 'Thank you!');\n        assert(browser.query('a[href=\"/session/new\"]'),\n          'has login link');\n        done();\n      });\n\n  });\n});\n```", "```js\nvar assert  = require('assert'),\n    Browser = require('zombie'),\n    app     = require('../app'),\n    couchdb = require('../lib/couchdb'),\n    dbName  = 'users',\n    db      = couchdb.use(dbName),\n    fixtures = require('./fixtures');\n\ndescribe('Users', function() {\n\n  before(function(done) {\n    app.start(3000, done);\n  });\n\n  after(function(done) {\n    app.server.close(done);\n  });\n\n  describe('Signup Form', function() {\n\n    before(function(done) {\n      db.get(fixtures.user.email, function(err, doc) {\n        if (err && err.status_code === 404) return done();\n        if (err) throw err;\n        db.destroy(doc._id, doc._rev, done);\n      });\n    });\n\n    it('should load the signup form', function(done) {\n      Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n        if (err) throw err;\n        assert.ok(browser.success, 'page loaded');\n        assert.equal(browser.text('h1'), 'New User');\n\n        var form = browser.query('form');\n\n        assert(form, 'form exists');\n        assert.equal(form.method, 'POST', 'uses POST method');\n        assert.equal(form.action, '/users', 'posts to /users');\n\n        assert(browser.query('input[type=email]#email', form),\n          'has email input');\n        assert(browser.query('input[type=password]#password', form),\n          'has password input');\n        assert(browser.query('input[type=submit]', form),\n          'has submit button');\n\n        done();\n      });\n    });\n\n    it(\"should submit\", function(done) {\n\n      Browser.visit(\"http://localhost:3000/users/new\", function(err, browser) {\n        if (err) throw err;\n\n        browser\n          .fill('E-mail', fixtures.user.email)\n          .fill('Password', fixtures.user.password)\n          .pressButton('Submit', function(err) {\n            if (err) throw err;\n            assert.equal(browser.text('h1'), 'Thank you!');\n            assert(browser.query('a[href=\"/session/new\"]'),\n              'has login link');\n            done();\n          });\n\n      });\n    });\n\n  });\n});\n```", "```js\n    var assert  = require('assert'),\n        Browser = require('zombie'),\n        app     = require('../app'),\n        couchdb = require('../lib/couchdb'),\n        dbName  = 'users',\n        db      = couchdb.use(dbName),\n        fixtures = require('./fixtures');\n\n    describe('Session', function() {\n\n      before(function(done) {\n        app.start(3000, done);\n      });\n\n      after(function(done) {\n        app.server.close(done);\n      });\n    ```", "```js\n      describe('Log in form', function() {\n\n        before(function(done) {\n          db.get(fixtures.user.email, function(err, doc) {\n            if (err && err.status_code === 404) {\n     return db.insert(fixtures.user, fixtures.user.email, done);\n     }\n            if (err) throw err;\n            done();\n          });\n        });\n    ```", "```js\n\n        it('should load', function(done) {\n          Browser.visit(\"http://localhost:3000/session/new\",\n            function(err, browser) {\n              if (err) throw err;\n              assert.ok(browser.success, 'page loaded');\n              assert.equal(browser.text('h1'), 'Log in');\n\n              var form = browser.query('form');\n\n              assert(form, 'form exists');\n              assert.equal(form.method, 'POST', 'uses POST method');\n              assert.equal(form.action, '/session', 'posts to /session');\n\n              assert(browser.query('input[type=email]#email', form),\n                'has email input');\n              assert(browser.query('input[type=password]#password', form),\n                'has password input');\n              assert(browser.query('input[type=submit]', form),\n                'has submit button');\n\n              done();\n            });\n        });\n    ```", "```js\n        it(\"should allow you to log in\", function(done) {\n\n          Browser.visit(\"http://localhost:3000/session/new\",\n            function(err, browser) {\n              if (err) throw err;\n\n              browser\n                .fill('E-mail', fixtures.user.email)\n                .fill('Password', fixtures.user.password)\n                .pressButton('Log In', function(err) {\n                  if (err) throw err;\n\n                  assert.equal(browser.location.pathname, '/todos',\n                    'should be redirected to /todos');\n                  done();\n                });\n\n            });\n        });\n\n      });\n    });\n    ```", "```js\n    $ ./node_modules/.bin/mocha test/session.js\n      \u2024\u2024\n\n      \u2714 2 tests complete (750ms)\n    ```", "```js\n    it(\"should not allow you to log in with wrong password\", function(done) {\n\n      Browser.visit(\"http://localhost:3000/session/new\",\n        function(err, browser) {\n          if (err) throw err;\n\n          browser\n            .fill('E-mail', fixtures.user.email)\n            .fill('Password', fixtures.user.password +\n              'thisisnotmypassword')\n            .pressButton('Log In', function(err) {\n              assert(err, 'expected an error');\n              assert.equal(browser.statusCode, 403, \n                'replied with 403 status code');\n              assert.equal(browser.location.pathname, '/session');\n              assert.equal(browser.text('#messages .alert .message'),\n                'Invalid password');\n              done();\n            });\n        }\n      );\n    });\n    ```", "```js\nvar assert   = require('assert'),\n    Browser  = require('zombie'),\n    app      = require('../app'),\n    couchdb  = require('../lib/couchdb'),\n    dbName   = 'todos',\n    db       = couchdb.use(dbName),\n    fixtures = require('./fixtures'),\n    login    = require('./login');\n\ndescribe('Todos', function() {\n\n  before(function(done) {\n    app.start(3000, done);\n  });\n\n  after(function(done) {\n    app.server.close(done);\n  });\n\n  beforeEach(function(done) {\n    db.get(fixtures.user.email, function(err, doc) {\n      if (err && err.status_code === 404) return done();\n      if (err) throw err;\n      db.destroy(doc._id, doc._rev, done);\n    });\n  });\n});\n```", "```js\nvar Browser = require('zombie'),\n    fixtures = require('./fixtures'),\n    assert = require('assert'),\n    couchdb = require('../lib/couchdb'),\n    dbName  = 'users',\n    db      = couchdb.use(dbName);\n\nfunction ensureUserExists(next) {\n  db.get(fixtures.user.email, function(err, user) {\n    if (err && err.status_code === 404) {\n      db.insert(fixtures.user, fixtures.user.email, next);\n    }\n    if (err) throw err;\n    next();\n  });\n}\n\nmodule.exports = function(next) {\n  return function(done) {\n\n    ensureUserExists(function(err) {\n      if (err) throw err;\n      Browser.visit(\"http://localhost:3000/session/new\",\n        function(err, browser) {\n          if (err) throw err;\n\n          browser\n            .fill('E-mail', fixtures.user.email)\n            .fill('Password', fixtures.user.password)\n            .pressButton('Log In', function(err) {\n              if (err) throw err;\n              assert.equal(browser.location.pathname, '/todos');\n              next(browser, done);\n            });\n\n        });\n    });\n  };\n};\n```", "```js\n  describe('Todo list', function() {\n\n    it('should have core elements', login(function(browser, done) {\n      assert.equal(browser.text('h1'), 'Your To-Dos');\n      assert(browser.query('a[href=\"/todos/new\"]'),\n        'should have a link to create a new Todo');\n      assert.equal(browser.text('a[href=\"/todos/new\"]'), 'New To-Do');\n      done();\n    }));\n\n    it('should start with an empty list', login(function(browser, done) {\n      assert.equal(browser.queryAll('#todo-list tr').length, 0,\n        'To-do list length should be 0');\n      done();\n    }));\n\n    it('should not load when the user is not logged in', function(done) {\n      Browser.visit('http://localhost:3000/todos', function(err, browser) {\n        if (err) throw err;\n        assert.equal(browser.location.pathname, '/session/new',\n          'should be redirected to login screen');\n        done();\n      });\n    });\n\n  });\n```", "```js\n      describe('Todo creation form', function() {\n    ```", "```js\n        it('should not load when the user is not logged in', function(done) {\n          Browser.visit('http://localhost:3000/todos/new', function(err, browser) {\n            if (err) throw err;\n            assert.equal(browser.location.pathname, '/session/new',\n              'should be redirected to login screen');\n            done();\n          });\n        });\n    ```", "```js\n        it('should load with title and form', login(function(browser, done) {\n          browser.visit('http://localhost:3000/todos/new', function(err) {\n            if (err) throw err;\n            assert.equal(browser.text('h1'), 'New To-Do');\n\n            var form = browser.query('form');\n            assert(form, 'should have a form');\n            assert.equal(form.method, 'POST', 'form should use post');\n            assert.equal(form.action, '/todos', 'form should post to /todos');\n\n            assert(browser.query('textarea[name=what]', form),\n              'should have a what textarea input');\n            assert(browser.query('input[type=submit]', form),\n              'should have an input submit type');\n\n            done();\n          });\n        }));\n    ```", "```js\n        it('should allow to create a todo', login(function(browser, done) {\n          browser.visit('http://localhost:3000/todos/new', function(err) {\n            if (err) throw err;\n\n            browser\n              .fill('What', 'Laundry')\n              .pressButton('Create', function(err) {\n                if (err) throw err;\n\n                assert.equal(browser.location.pathname, '/todos',\n                  'should be redirected to /todos after creation');\n\n                var list = browser.queryAll('#todo-list tr.todo');\n                assert.equal(list.length, 1, 'To-do list length should be 1');\n                var todo = list[0];\n                assert.equal(browser.text('td.pos', todo), 1);\n                assert.equal(browser.text('td.what', todo), 'Laundry');\n\n                done();\n\n              });\n          });\n        }));\n    ```", "```js\ndescribe('Todo removal form', function() {\n\n  describe('When one todo item exists', function() {\n\n beforeEach(function(done) {\n // insert one todo item\n db.insert(fixtures.todo, fixtures.user.email, done);\n });\n\n    it(\"should allow you to remove\", login(function(browser, done) {\n\n      browser.visit('http://localhost:3000/todos', function(err, browser) {\n        if (err) throw err;\n\n        assert.equal(browser.queryAll('#todo-list tr.todo').length, 1);\n\n        browser.pressButton('#todo-list tr.todo .remove form input[type=submit]',\n          function(err) {\n            if (err) throw err;\n            assert.equal(browser.location.pathname, '/todos');\n            // assert that all todos have been removed\n            assert.equal(browser.queryAll('#todo-list tr').length, 0);\n            done();\n          }\n        );\n\n      });\n    }));\n\n  });\n```", "```js\n{\n  \"user\" : {\n    \"email\": \"me@email.com\",\n    \"password\": \"mypassword\"\n  },\n \"todo\": {\n \"todos\": [\n {\n \"what\": \"Do the laundry\",\n \"created_at\": 1346542066308\n }\n ]\n },\n  \"todos\": {\n    \"todos\": [\n      {\n        \"what\": \"Do the laundry\",\n        \"created_at\": 1346542066308\n      },\n      {\n        \"what\": \"Call mom\",\n        \"created_at\": 1346542066308\n      },\n      {\n        \"what\": \"Go to gym\",\n        \"created_at\": 1346542066308\n      }\n\n    ]\n  }\n\n}\n```", "```js\nassert.equal(browser.queryAll('#todo-list tr.todo').length, 1);\n```", "```js\nbrowser.pressButton('#todo-list tr.todo .remove form input[type=submit]', \u2026\n```", "```js\nassert.equal(browser.queryAll('#todo-list tr').length, 0);\n```", "```js\ndescribe('When more than one todo item exists', function() {\n\n  beforeEach(function(done) {\n    // insert one todo item\n    db.insert(fixtures.todos, fixtures.user.email, done);\n  });\n\n  it(\"should allow you to remove one todo item\", login(\n    function(browser, done) {\n\n      browser.visit('http://localhost:3000/todos', function(err, browser) {\n        if (err) throw err;\n\n        var expectedList = [\n          fixtures.todos.todos[0],\n          fixtures.todos.todos[1],\n          fixtures.todos.todos[2]\n        ];\n\n        var list = browser.queryAll('#todo-list tr');\n        assert.equal(list.length, 3);\n\n        list.forEach(function(todoRow, index) {\n          assert.equal(browser.text('.pos', todoRow), index + 1);\n          assert.equal(browser.text('.what', todoRow),\n            expectedList[index].what);\n        });\n\n            browser.pressButton(\n              '#todo-list tr:nth-child(2) .remove input[type=submit]',\n              function(err) {\n                if (err) throw err;\n\n                assert.equal(browser.location.pathname, '/todos');\n\n                // assert that the middle todo item has been removed\n                var list = browser.queryAll('#todo-list tr');\n                assert.equal(list.length, 2);\n\n                // remove the middle element from the expected list\n                expectedList.splice(1,1);\n\n                // test that the rendered list is the expected list\n                list.forEach(function(todoRow, index) {\n                  assert.equal(browser.text('.pos', todoRow), index + 1);\n                  assert.equal(browser.text('.what', todoRow),\n                    expectedList[index].what);\n                });\n\n                done();\n              }\n            );\n\n      });\n    }\n  ));\n\n});\n```", "```js\nlist.forEach(function(todoRow, index) {\n  assert.equal(browser.text('.pos', todoRow), index + 1);\n  assert.equal(browser.text('.what', todoRow),\n    expectedList[index].what);\n});\n```", "```js\nbrowser.pressButton(\n  '#todo-list tr:nth-child(2) .remove input[type=submit]', ...\n```", "```js\nvar list = browser.queryAll('#todo-list tr');\nassert.equal(list.length, 2);\nexpectedList.splice(1,1);\n\n// test that the rendered list is the expected list\nlist.forEach(function(todoRow, index) {\n  assert.equal(browser.text('.pos', todoRow), index + 1);\n  assert.equal(browser.text('.what', todoRow),\n    expectedList[index].what);\n});\n```", "```js\n$ ./node_modules/.bin/mocha test/users.js test/session.js test/todos.js\n```", "```js\n{\n  \"description\": \"To-do App\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"union\": \"0.3.0\",\n    \"flatiron\": \"0.2.8\",\n    \"plates\": \"0.4.x\",\n    \"node-static\": \"0.6.0\",\n    \"nano\": \"3.3.0\",\n    \"flatware-cookie-parser\": \"0.1.x\",\n    \"flatware-session\": \"0.1.x\"\n  },\n  \"devDependencies\": {\n    \"mocha\": \"1.4.x\",\n    \"zombie\": \"1.4.x\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha test/users.js test/session.js test/todos.js\",\n    \"start\": \"node app.js\"\n  },\n  \"name\": \"todo\",\n  \"author\": \"Pedro\",\n  \"homepage\": \"\"\n}\n```", "```js\n$ npm test\n  .............\n\n  \u2714 13 tests complete (3758ms)\n```"]