["```js\n    $ tar xvfz node-v0.8.7.tar.gz\n    ```", "```js\n    $ cd node-v0.8.7\n    ```", "```js\n    $ ./configure\n    ```", "```js\n    $ make\n    ```", "```js\n    $ make install\n    ```", "```js\n    $ sudo make install\n    ```", "```js\n    $ node -v\n    v0.8.7\n    ```", "```js\n    $ node\n    > console.log('Hello World!');\n    ```", "```js\n    ...\n    > Hello World!\n    ```", "```js\n    $ npm -v\n    1.1.48\n    ```", "```js\n    $ npm install -g flatiron\n    ```", "```js\n    $ flatiron create todo\n    ```", "```js\n    $ cd todo\n    ```", "```js\n    $ tree\n    .\n    \u251c\u2500\u2500 app.js\n    \u251c\u2500\u2500 config\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 config.json\n    \u251c\u2500\u2500 lib\n    \u251c\u2500\u2500 package.json\n    \u2514\u2500\u2500 test\n    ```", "```js\n    {\n      \"description\": \"To-do App\",\n      \"version\": \"0.0.0\",\n      \"private\": true,\n      \"dependencies\": {\n        \"union\": \"0.3.0\",\n        \"flatiron\": \"0.2.8\",\n        \"plates\": \"0.4.x\",\n        \"node-static\": \"0.6.0\"\n      },\n      \"scripts\": {\n        \"test\": \"vows --spec\",\n        \"start\": \"node app.js\"\n      },\n      \"name\": \"todo\",\n      \"author\": \"Pedro\",\n      \"homepage\": \"\"\n    }\n    ```", "```js\n    $ npm install\n    ```", "```js\n    union@0.3.0 node_modules/union\n    \u251c\u2500\u2500 qs@0.4.2\n    \u2514\u2500\u2500 pkginfo@0.2.3\n\n    flatiron@0.2.8 node_modules/flatiron\n    \u251c\u2500\u2500 pkginfo@0.2.3\n    \u251c\u2500\u2500 director@1.1.0\n    \u251c\u2500\u2500 optimist@0.3.4 (wordwrap@0.0.2)\n    \u251c\u2500\u2500 broadway@0.2.5 (eventemitter2@0.4.9, cliff@0.1.8, utile@0.1.2, nconf@0.6.4, winston@0.6.2)\n    \u2514\u2500\u2500 prompt@0.2.6 (revalidator@0.1.2, read@1.0.4, utile@0.1.3, winston@0.6.2)\n\n    plates@0.4.6 node_modules/plates\n\n    node-static@0.6.0 node_modules/node-static\n    ```", "```js\n    $ node app.js\n    ```", "```js\n    {\"hello\":\"world\"}\n    ```", "```js\n{\n  \"description\": \"To-do App\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"union\": \"0.3.0\",\n    \"flatiron\": \"0.2.8\",\n    \"plates\": \"0.4.6\",\n    \"node-static\": \"0.6.0\",\n \"nano\": \"3.3.0\"\n  },\n  \"scripts\": {\n    \"test\": \"vows --spec\",\n    \"start\": \"node app.js\"\n  },\n  \"name\": \"todo\",\n  \"author\": \"Pedro\",\n  \"homepage\": \"\"\n}\n```", "```js\n$ npm install\nnano@3.3.0 node_modules/nano\n\u251c\u2500\u2500 errs@0.2.3\n\u251c\u2500\u2500 request@2.9.203.8.0 (request@2.2.9request@2.2.9)\n```", "```js\n{\n  \"couchdb\": \"http://localhost:5984\"\n}\n```", "```js\nvar nano = require('nano'),\n    config = require('../config/config.json');\n\nmodule.exports = nano(config.couchdb);\n```", "```js\n$ tree public/\npublic/\n\u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap-responsive.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap-responsive.min.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap.css\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bootstrap.min.css\n\u251c\u2500\u2500 img\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 glyphicons-halflings-white.png\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 glyphicons-halflings.png\n\u2514\u2500\u2500 js\n    \u251c\u2500\u2500 bootstrap.js\n    \u2514\u2500\u2500 bootstrap.min.js\n```", "```js\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title id=\"title\"></title>\n    <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n\n    <section role=\"main\" class=\"container\">\n\n      <div id=\"messages\"></div>\n\n      <div id=\"main-body\"></div>\n\n    </section>\n\n    <script src=\"img/jquery.min.js\"></script> \n    <script src=\"img/bootstrap.min.js\"></script>\n\n  </body>\n</html>\n```", "```js\nvar Plates = require('plates'),\n    fs     = require('fs');\n\nvar templates = {\n  layout : fs.readFileSync(__dirname + '/layout.html', 'utf8'),\n  alert  : fs.readFileSync(__dirname + '/alert.html', 'utf8')\n};\n\nmodule.exports = function(main, title, options) {\n\n  if (! options) {\n    options = {};\n  }\n\n  var data = {\n    \"main-body\": main,\n    \"title\": title,\n    'messages': ''\n  };\n\n  ['error', 'info'].forEach(function(messageType) {\n    if (options[messageType]) {\n      data.messages += Plates.bind(templates.alert,\n        {message: options[messageType]});\n    }\n  });\n\n  return Plates.bind(templates.layout, data);\n};\n```", "```js\n<div class=\"alert\">\n  <a class=\"close\" data-dismiss=\"alert\">\u00d7</a>\n  <p class=\"message\"></p>\n</div>\n```", "```js\napp.router.get('/', function () {\n  this.res.json({ 'hello': 'world' })\n});\n```", "```js\nvar fs      = require('fs'),\n    couchdb = require('../lib/couchdb'),\n    dbName  = 'users',\n    db      = couchdb.use(dbName),\n    Plates  = require('plates'),\n    layout  = require('../templates/layout');\n\nvar templates = {\n  'new' : fs.readFileSync(__dirname +\n    '/../templates/users/new.html', 'utf8'),\n  'show': fs.readFileSync(__dirname +\n    '/../templates/users/show.html', 'utf8')\n};\n\nfunction insert(doc, key, callback) {\n  var tried = 0, lastError;\n\n  (function doInsert() {\n    tried ++;\n    if (tried >= 2) {\n      return callback(lastError);\n    }\n\n    db.insert(doc, key, function(err) {\n      if (err) {\n        lastError = err;\n        if (err.status_code === 404) {\n          couchdb.db.create(dbName, function(err) {\n            if (err) {\n              return callback(err);\n            }\n            doInsert();\n          });\n        } else {\n          return callback(err);\n        }\n      }\n      callback.apply({}, arguments);\n    });\n  }());\n}\n\nfunction render(user) {\n  var map = Plates.Map();\n  map.where('id').is('email').use('email').as('value');\n  map.where('id').is('password').use('password').as('value');\n  return Plates.bind(templates['new'], user || {}, map);\n}\n\nmodule.exports = function() {\n  this.get('/new', function() {\n    this.res.writeHead(200, {'Content-Type': 'text/html'});\n    this.res.end(layout(render(), 'New User'));\n  });\n\n  this.post('/', function() {\n\n    var res = this.res,\n        user = this.req.body;\n\n    if (! user.email || ! user.password) {\n      return this.res.end(layout(templates['new'],\n        'New User', {error: 'Incomplete User Data'}));\n    }\n\n    insert(user, this.req.body.email, function(err) {\n      if (err) {\n        if (err.status_code === 409) {\n          return res.end(layout(render(user), 'New User', {\n            error: 'We already have a user with that email address.'}));\n        }\n        console.error(err.trace);\n        res.writeHead(500, {'Content-Type': 'text/html'});\n        return res.end(err.message);\n      }\n      res.writeHead(200, {'Content-Type': 'text/html'});\n      res.end(layout(templates['show'], 'Registration Complete'));\n    });\n  });\n\n};\n```", "```js\n<h1>New User</h1>\n<form action=\"/users\" method=\"POST\">\n  <p>\n    <label for=\"email\">E-mail</label>\n    <input type=\"email\" name=\"email\" value=\"\" id=\"email\" />\n  </p>\n  <p>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" value=\"\" required/>\n  </p>\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n```", "```js\n<h1>Thank you!</h1>\n<p>Thank you for registering. You can now <a href=\"/session/new\">log in here</a></p>\n```", "```js\nvar flatiron = require('flatiron'),\n    path = require('path'),\n    nstatic = require('node-static'),\n    app = flatiron.app;\n\napp.config.file({ file: path.join(__dirname, 'config', 'config.json') });\n\nvar file = new nstatic.Server(__dirname + '/public/');\n\napp.use(flatiron.plugins.http, {\n  before: [\n    function(req, res) {\n      var found = app.router.dispatch(req, res);\n      if (! found) {\n        file.serve(req, res);\n      }\n    }\n  ]\n});\n\napp.router.path('/users', require('./routes/users'));\n\napp.start(3000);\n```", "```js\n$ node app\n```", "```js\n{\n  \"description\": \"To-do App\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"union\": \"0.3.0\",\n    \"flatiron\": \"0.2.8\",\n    \"plates\": \"0.4.x\",\n    \"node-static\": \"0.6.0\",\n    \"nano\": \"3.3.0\",\n \"flatware-cookie-parser\": \"0.1.x\",\n \"flatware-session\": \"0.1.x\"\n  },\n  \"scripts\": {\n    \"test\": \"vows --spec\",\n    \"start\": \"node app.js\"\n  },\n  \"name\": \"todo\",\n  \"author\": \"Pedro\",\n  \"homepage\": \"\"\n}\n```", "```js\n$ npm install\nflatware-cookie-parser@0.1.0 node_modules/flatware-cookie-parser\n\nflatware-session@0.1.0 node_modules/flatware-session\n```", "```js\nvar flatiron = require('flatiron'),\n    path = require('path'),\n    nstatic = require('node-static'),\n    app = flatiron.app;\n\napp.config.file({ file: path.join(__dirname, 'config', 'config.json') });\n\nvar file = new nstatic.Server(__dirname + '/public/');\n\napp.use(flatiron.plugins.http, {\n  before: [\n require('flatware-cookie-parser')(),\n require('flatware-session')(),\n    function(req, res) {\n      var found = app.router.dispatch(req, res);\n      if (! found) {\n        file.serve(req, res);\n      }\n    }\n  ]\n});\n\napp.router.path('/users', require('./routes/users'));\napp.router.path('/session', require('./routes/session'));\n\napp.start(3000);\n```", "```js\nvar plates  = require('plates'),\n    fs      = require('fs'),\n    couchdb = require('../lib/couchdb'),\n    dbName  = 'users',\n    db      = couchdb.use(dbName),\n    Plates  = require('plates'),\n    layout  = require('../templates/layout');\n\nvar templates = {\n  'new' : fs.readFileSync(__dirname +\n    '/../templates/session/new.html', 'utf8')\n};\n\nmodule.exports = function() {\n\n  this.get('/new', function() {\n    this.res.writeHead(200, {'Content-Type': 'text/html'});\n    this.res.end(layout(templates['new'], 'Log In'));\n  });\n\n  this.post('/', function() {\n\n    var res   = this.res,\n        req   = this.req,\n        login = this.req.body;\n\n    if (! login.email || ! login.password) {\n      return res.end(layout(templates['new'], 'Log In',\n        {error: 'Incomplete Login Data'}));\n    }\n\n    db.get(login.email, function(err, user) {\n      if (err) {\n        if (err.status_code === 404) {\n          // User was not found\n          return res.end(layout(templates['new'], 'Log In',\n            {error: 'No such user'}));\n        }\n        console.error(err.trace);\n        res.writeHead(500, {'Content-Type': 'text/html'});\n        return res.end(err.message);\n      }\n\n      if (user.password !== login.password) {\n        res.writeHead(403, {'Content-Type': 'text/html'});\n        return res.end(layout(templates['new'], 'Log In',\n            {error: 'Invalid password'}));\n      }\n\n      // store session\n      req.session.user = user;\n\n      // redirect user to TODO list\n      res.writeHead(302, {Location: '/todos'});\n      res.end();\n    });\n\n  });  \n\n};\n```", "```js\n<h1>Log in</h1>\n<form action=\"/session\" method=\"POST\">\n  <p>\n    <label for=\"email\">E-mail</label>\n    <input type=\"email\" name=\"email\" value=\"\" id=\"email\"/>\n  </p>\n  <p>\n    <label for=\"password\">Password</label>\n    <input type=\"password\" name=\"password\" id=\"password\" value=\"\" required/>\n  </p>\n  <input type=\"submit\" value=\"Log In\" />\n</form>\n```", "```js\n$ node app.js\n```", "```js\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <title id=\"title\"></title>\n    <link href=\"/css/bootstrap.min.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n\n    <section role=\"main\" class=\"container\">\n\n      <div id=\"messages\"></div>\n\n      <div id=\"main-body\"></div>\n\n    </section>\n\n    <script src=\"img/jquery.min.js\"></script> \n <script src=\"img/jquery-ui-1.8.23.custom.min.js\"></script> \n    <script src=\"img/bootstrap.min.js\"></script>\n <script src=\"img/todos.js\"></script>\n  </body>\n</html>\n```", "```js\nvar flatiron = require('flatiron'),\n    path = require('path'),\n    nstatic = require('node-static'),\n    app = flatiron.app;\n\napp.config.file({ file: path.join(__dirname, 'config', 'config.json') });\n\nvar file = new nstatic.Server(__dirname + '/public/');\n\napp.use(flatiron.plugins.http, {\n  before: [\n    require('flatware-cookie-parser')(),\n    require('flatware-session')(),\n    function(req, res) {\n      var found = app.router.dispatch(req, res);\n      if (! found) {\n        file.serve(req, res);\n      }\n    }\n  ]\n});\n\napp.router.path('/users', require('./routes/users'));\napp.router.path('/session', require('./routes/session'));\napp.router.path('/todos', require('./routes/todos'));\n\napp.start(3000);\n```", "```js\nvar fs      = require('fs'),\n    couchdb = require('../lib/couchdb'),\n    dbName  = 'todos',\n    db      = couchdb.use(dbName),\n    Plates  = require('plates'),\n    layout  = require('../templates/layout'),\n    loggedIn = require('../middleware/logged_in')();\n\nvar templates = {\n  index : fs.readFileSync(__dirname +\n    '/../templates/todos/index.html', 'utf8'),\n  'new' : fs.readFileSync(__dirname +\n    '/../templates/todos/new.html', 'utf8')\n};\n\nfunction insert(email, todo, callback) {\n  var tries = 0,\n      lastError;\n\n  (function doInsert() {\n    tries ++;\n    if (tries >= 3) return callback(lastError);\n\n    db.get(email, function(err, todos) {\n      if (err && err.status_code !== 404) return callback(err);\n\n      if (! todos) todos = {todos: []};\n      todos.todos.unshift(todo);\n\n      db.insert(todos, email, function(err) {\n        if (err) {\n          if (err.status_code === 404) {\n            lastError = err;\n            // database does not exist, need to create it\n            couchdb.db.create(dbName, function(err) {\n              if (err) {\n                return callback(err);\n              }\n              doInsert();\n            });\n            return;\n          }\n          return callback(err);\n        }\n        return callback();\n      });\n    });\n  })();\n\n}\n\nmodule.exports = function() {\n\n  this.get('/', [loggedIn, function() {\n\n    var res = this.res;\n\n    db.get(this.req.session.user.email, function(err, todos) {\n\n      if (err && err.status_code !== 404) {\n        res.writeHead(500);\n        return res.end(err.stack);\n      }\n\n      if (! todos) todos = {todos: []};\n      todos = todos.todos;\n\n      todos.forEach(function(todo, idx) {\n        if (todo) todo.pos = idx + 1;\n      });\n\n      var map = Plates.Map();\n      map.className('todo').to('todo');\n      map.className('pos').to('pos');\n      map.className('what').to('what');\n      map.where('name').is('pos').use('pos').as('value');\n\n      var main = Plates.bind(templates.index, {todo: todos}, map);\n      res.writeHead(200, {'Content-Type': 'text/html'});\n      res.end(layout(main, 'To-Dos'));\n\n    });\n\n  }]);\n\n  this.get('/new', [loggedIn, function() {\n\n    this.res.writeHead(200, {'Content-Type': 'text/html'});\n    this.res.end(layout(templates['new'], 'New To-Do'));\n  }]);\n\n  this.post('/', [loggedIn, function() {\n\n    var req  = this.req,\n        res  = this.res,\n        todo = this.req.body\n    ;\n\n    if (! todo.what) {\n      res.writeHead(200, {'Content-Type': 'text/html'});\n      return res.end(layout(templates['new'], 'New To-Do',\n        {error: 'Please fill in the To-Do description'}));\n    }\n\n    todo.created_at = Date.now();\n\n    insert(req.session.user.email, todo, function(err) {\n\n      if (err) {\n        res.writeHead(500);\n        return res.end(err.stack);\n      }\n\n      res.writeHead(303, {Location: '/todos'});\n      res.end();\n    });\n\n  }]);\n\n  this.post('/sort', [loggedIn, function() {\n\n    var res = this.res,\n        order = this.req.body.order && this.req.body.order.split(','),\n        newOrder = []\n        ;\n\n    db.get(this.req.session.user.email, function(err, todosDoc) {\n      if (err) {\n        res.writeHead(500);\n        return res.end(err.stack);\n      }\n\n      var todos = todosDoc.todos;\n\n      if (order.length !== todos.length) {\n        res.writeHead(409);\n        return res.end('Conflict');\n      }\n\n      order.forEach(function(order) {\n        newOrder.push(todos[parseInt(order, 10) - 1]);\n      });\n\n      todosDoc.todos = newOrder;\n\n      db.insert(todosDoc, function(err) {\n        if (err) {\n          res.writeHead(500);\n          return res.end(err.stack);\n        }\n        res.writeHead(200);\n        res.end();\n      });\n\n    });\n  }]);\n\n  this.post('/delete', [loggedIn, function() {\n\n    var req = this.req,\n        res = this.res,\n        pos = parseInt(req.body.pos, 10)\n        ;\n\n    db.get(this.req.session.user.email, function(err, todosDoc) {\n      if (err) {\n        res.writeHead(500);\n        return res.end(err.stack);\n      }\n\n      var todos = todosDoc.todos;\n      todosDoc.todos = todos.slice(0, pos - 1).concat(todos.slice(pos));\n\n      db.insert(todosDoc, function(err) {\n        if (err) {\n          res.writeHead(500);\n          return res.end(err.stack);\n        }\n        res.writeHead(303, {Location: '/todos'});\n        res.end();\n      });\n\n    });\n\n  }]);\n\n};\n```", "```js\n<h1>Your To-Dos</h1>\n\n<a class=\"btn\" href=\"/todos/new\">New To-Do</a>\n\n<table class=\"table\">\n  <thead>\n    <tr>\n      <th>#</th>\n      <th>What</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody id=\"todo-list\">\n    <tr class=\"todo\">\n      <td class=\"pos\"></td>\n      <td class=\"what\"></td>\n      <td class=\"remove\">\n        <form action=\"/todos/delete\" method=\"POST\">\n          <input type=\"hidden\" name=\"pos\" value=\"\" />\n          <input type=\"submit\" name=\"Delete\" value=\"Delete\" />\n        </form>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```", "```js\n<h1>New To-Do</h1>\n<form action=\"/todos\" method=\"POST\">\n  <p>\n    <label for=\"email\">What</label>\n    <textarea name=\"what\" id=\"what\" required></textarea>\n  </p>\n  <input type=\"submit\" value=\"Create\" />\n</form>\n```", "```js\n$(function() {\n  $('#todo-list').sortable({\n    update: function() {\n      var order = [];\n      $('.todo').each(function(idx, row) {\n        order.push($(row).find('.pos').text());\n      });\n\n      $.post('/todos/sort', {order: order.join(',')}, function() {\n        $('.todo').each(function(idx, row) {\n          $(row).find('.pos').text(idx + 1);\n        });\n      });\n\n    } \n  });\n});\n```", "```js\nfunction LoggedIn() {\n  return function(next) {\n    if (! this.req.session || ! this.req.session.user) {\n      this.res.writeHead(303, {Location: '/session/new'});\n      return this.res.end();\n    }\n    next();\n  };\n}\n\nmodule.exports = LoggedIn;\n```", "```js\n$ node app.js\n```", "```js\n$ tree\n.\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.json\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 couchdb.js\n\u251c\u2500\u2500 middleware\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 logged_in.js\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 public\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap-responsive.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap-responsive.min.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 bootstrap.css\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 bootstrap.min.css\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 img\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 glyphicons-halflings-white.png\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 glyphicons-halflings.png\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 js\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 bootstrap.js\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 bootstrap.min.js\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 jquery-ui-1.8.23.custom.min.js\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 jquery.min.js\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 todos.js\n\u251c\u2500\u2500 routes\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 session.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 todos.js\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users.js\n\u251c\u2500\u2500 templates\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 alert.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 layout.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 layout.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 session\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 new.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 todos\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 new.html\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 users\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 new.html\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 show.html\n\u2514\u2500\u2500 test\n\n13 directories, 27 files\n```"]