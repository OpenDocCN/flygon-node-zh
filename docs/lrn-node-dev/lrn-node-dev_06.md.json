["```js\nconst request = require('request');\nconst yargs = require('yargs');\n```", "```js\nconst request = require('request');\nconst yargs = require('yargs');\n\nconst argv = yargs\n```", "```js\nnode app.js --address\n```", "```js\nnode app.js --address '1301 lombard street'\n```", "```js\nconst argv = yargs\n  .options({\n\n})\n```", "```js\nconst argv = yargs   \n  .options({\n    a: {\n\n    }\n  })\n```", "```js\nconst argv = yargs\n  .options({\n    a: {\n       demand: true,\n    }\n  })\n```", "```js\nconst argv = yargs\n  .options({\n    a: {\n      demand: true,\n      alias: 'address',\n describe: 'Address to fetch weather for'\n    }\n  })\n```", "```js\nconst argv = yargs\n  .options({\n    a: {\n      demand: true,\n      alias: 'address',\n      describe: 'Address to fetch weather for',\n      string: true\n    }\n  })\n```", "```js\nconst argv = yargs\n  .options({\n    a: {\n      demand: true,\n      alias: 'address',\n      describe: 'Address to fetch weather for',\n      string: true\n    }\n  })\n  .help()\n .argv;\n```", "```js\n.help()\n.alias('help', 'h')\n.argv;\n```", "```js\n  .help()\n  .alias('help', 'h')\n  .argv;\nconsole.log(argv);\n```", "```js\nnode app.js -a '1301 lombard street'\n```", "```js\nnode\n```", "```js\nencodeURIComponent('1301 lombard street philadelphia')\n```", "```js\ndecodeURIComponent('Andrew%20Mead')\n```", "```js\n  .help()\n  .alias('help', 'h')\n  .argv;\nvar encodedAddress = encodeURIComponent(argv.address);\n```", "```js\nvar encodedAddress = encodeURIComponent(argv.address);\n\nrequest({\n  url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n```", "```js\nnode app.js -a '1614 south broad street philadelphia'\n```", "```js\nrequest({\n  url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n  json: true\n}, (error, response, body) => {\n  if (error) {\n\n }\n```", "```js\nif (error) {\n  console.log('Unable to connect Google servers.');\n}\n```", "```js\nif (error) {\n  console.log('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n\n}\n```", "```js\nif (error) {\n  console.log('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n  console.log('Unable to find that address.');\n}\n```", "```js\n  console.log(`Address: ${body.results[0].formatted_address}`);\n  console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n  console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n});\n```", "```js\nif (error) {\n  console.log('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n  console.log('Unable to find that address.');\n} else if (body.status === 'OK') {\n\n}\n```", "```js\nif (error) {\n  console.log('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n  console.log('Unable to find that address.');\n} else if (body.status === 'OK') {\n  console.log(`Address: ${body.results[0].formatted_address}`);\n console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n}\n```", "```js\nnode app.js -a 000000\n```", "```js\nrequest({\n  url: `https://mapgoogleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n  json: true\n}, (error, response, body) => {\n  if (error) {\n    console.log('Unable to connect Google servers.');\n  } else if (body.status === 'ZERO_RESULTS') {\n   console.log('Unable to find that address.');\n  } else if (body.status === 'OK') {\n    console.log(`Address: ${body.results[0].formatted_address}`);\n    console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n    console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n  }\n});\n```", "```js\nnode app.js --address 08822\n```", "```js\nrequest({\n  url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n  json: true\n}, (error, response, body) => {\n  if (error) {\n    console.log('Unable to connect Google servers.');\n  } else if (body.status === 'ZERO_RESULTS') {\n   console.log('Unable to find that address.');\n  } else if (body.status === 'OK') {\n    console.log(`Address: ${body.results[0].formatted_address}`);\n    console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n    console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n  }\n});\n```", "```js\nconst geocode = require('./geocode/geocode.js');\n```", "```js\ngeocode.geocodeAddress(argv.address);\n```", "```js\nvar encodedAddress = encodedURIComponent(argv.address);\n\nrequest({\n  url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n  json: true\n}, (error, response, body) => {\n  if (error) {\n    console.log('Unable to connect Google servers.');\n  } else if (body.status === 'ZERO_RESULTS') {\n   console.log('Unable to find that address.');\n  } else if (body.status === 'OK') {\n    console.log(`Address: ${body.results[0].formatted_address}`);\n    console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n    console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n  }\n});\n```", "```js\nconst request = require('request');\n```", "```js\nvar geocodeAddress = (address) => {\n\n};\n```", "```js\nvar geocodeAddress = (address) => {\n\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```", "```js\nvar geocodeAddress = (address) => {\n  var encodedAddress = encodedURIComponent(argv.address);\n\n  request({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n  }, (error, response, body) => {\n    if (error) {\n      console.log('Unable to connect Google servers.');\n    } else if (body.status === 'ZERO_RESULTS') {\n      console.log('Unable to find that address.');\n    } else if (body.status === 'OK') {\n      console.log(`Address: ${body.results[0].formatted_address}`);\n      console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n      console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n    }\n  });\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```", "```js\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n  var encodedAddress = encodedURIComponent(argv.address);\n\n  request({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n  }, (error, response, body) => {\n    if (error) {\n      console.log('Unable to connect Google servers.');\n    } else if (body.status === 'ZERO_RESULTS') {\n      console.log('Unable to find that address.');\n    } else if (body.status === 'OK') {\n      console.log(`Address: ${body.results[0].formatted_address}`);\n      console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n      console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n    }\n  });\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```", "```js\nconst yargs = require('yargs');\n\nconst geocode = require('./geocode/geocode');\n\nconst argv = yargs\n  .options({\n    a: {\n      demand: true,\n      alias: 'address',\n      describe: 'Address to fetch weather for',\n      string: true\n    }\n  })\n  .help()\n  .alias('help', 'h')\n  .argv;\n\ngeocode.geocodeAddress(argv.address);\n```", "```js\ngeocode.geocodeAddress(argv.address, () => {\n\n});\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n\n});\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  }\n});\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(JSON.stringify(results, undefined, 2));\n  }\n});\n```", "```js\nrequest({\n  url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n  json: true\n}, (error, response, body) => {\n  if (error) {\n    callback('Unable to connect to Google servers.');\n  }\n```", "```js\nif (error) {\n  callback('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n  callback('Unable to find that address.');\n}\n```", "```js\n} else if (body.status === 'OK') {\n  callback(undefined, {\n\n  })\n  console.log(`Address: ${body.results[0].formatted_address}`);\n  console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n  console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n}\n```", "```js\n} else if (body.status === 'OK') {\n  callback(undefined, {\n    address: body.results[0].formatted_address\n  })\n  console.log(`Address: ${body.results[0].formatted_address}`);\n  console.log(`Latitude: ${body.results[0].geometry.location.lat}`);\n  console.log(`Longitude: ${body.results[0].geometry.location.lng}`);\n}\n```", "```js\nif (error) {\n  callback('Unable to connect Google servers.');\n} else if (body.status === 'ZERO_RESULTS') {\n  callback('Unable to find that address.');\n} else if (body.status === 'OK') {\n  callback(undefined, {\n    address: body.results[0].formatted_address,\n    latitude: body.results[0].geometry.location.lat,\n    longitude: body.results[0].geometry.location.lng\n  });\n}\n```", "```js\nconst request = require('request');\n```", "```js\nconst request = require('request');\n\nrequest();\n```", "```js\nrequest({}, () => {\n\n});\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n\n}, () => {\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n json: true\n}, () => {\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n json: true\n}, (error, response, body) => {\n\n});\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n json: true\n}, (error, response, body) => {\n  console.log(body.currently.temperature);\n});\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n json: true\n}, (error, response, body) => {\n  if (error){\n    console.log('Unable to connect to Forecast.io server.');\n  }\n  console.log(body.currently.temperature);\n});\n```", "```js\nif (error){\n  console.log('Unable to connect to Forecast.io server.');\n} else if (response.statusCode === 400) {\n\n}\n```", "```js\nif (error){\n  console.log('Unable to connect to Forecast.io server.');\n} else if (response.statusCode === 400) {\n  console.log('Unable to fetch weather.');\n}\n```", "```js\n  if (error){\n    console.log('Unable to connect to Forecast.io server.');\n  } else if (response.statusCode === 400) {\n    console.log('Unable to fetch weather.');\n  } else if (response.statusCode === 200) {\n    console.log(body.currently.temparature);\n  }\n});\n```", "```js\nif (!error && response.statusCode === 200) {\n  console.log(body.currently.temperature);\n} else {\n  console.log('Unable to fetch weather.');\n}\n```", "```js\nrequest({\n url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284-75.18663959999999',\n json: true\n}, (error, response, body) => {\n  if (error){\n    console.log('Unable to connect to Forecast.io server.');\n  } else if (response.statusCode === 400) {\n    console.log('Unable to fetch weather.');\n  } else if (response.statusCode === 200) {\n    console.log(body.currently.temparature);\n  }\n});\n```", "```js\nrequest({\n url: 'https://api.forecastio/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n json: true\n}, (error, response, body) => {\n```", "```js\nconst request = require('request');\n\nrequest({\n  url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n  json: true\n}, (error, response, body) => {\n  if (error) {\n    console.log('Unable to connect to Forecast.io server.');\n  } else if (response.statusCode === 400) {\n    console.log('Unable to fetch weather.');\n  } else if (response.statusCode === 200) {\n    console.log(body.currently.temperature);\n  }\n});\n```", "```js\nconst request = require('request');\nvar getWeather = () => {\n\n};\n```", "```js\nconst request = require('request');\nvar getWeather = () => {\n  request({\n   url: 'https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/39.9396284,-75.18663959999999',\n   json: true\n}, (error, response, body) => {\n  if (error) {\n    console.log('Unable to connect to Forecast.io server.');\n  } else if (response.statusCode === 400) {\n    console.log('Unable to fetch weather.');\n  } else if (response.statusCode === 200) {\n    console.log(body.currently.temperature);\n  }\n});\n};\n```", "```js\nmodule.exports.getWeather = getWeather;\n```", "```js\nconst yargs = require('yargs');\n\nconst geocode = require('./geocode/geocode');\nconst weather = require('');\n```", "```js\nconst weather = require('./weather/weather');\n```", "```js\n// geocode.geocodeAddress(argv.address, (errorMessage, results) => {\n//  if (errorMessage) {\n//    console.log(errorMessage);\n//  } else {\n//    console.log(JSON.stringify(results, undefined, 2));\n//  }\n//});\n\nweather.getWeather();\n```", "```js\nnode app.js -a 08822\n```", "```js\n// lat, lng, callback\nweather.getWeather(39.9396284, -75.18663959999999);\n```", "```js\nweather.getWeather(39.9396284, -75.18663959999999, (errorMessage, weatherResults) => {\n\n});\n```", "```js\nweather.getWeather(39.9396284, -75.18663959999999, (errorMessage, weatherResults) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  }\n});\n```", "```js\nweather.getWeather(39.9396284, -75.18663959999999, (errorMessage, weatherResults) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(JSON.stringify());\n  }\n});\n```", "```js\nweather.getWeather(39.9396284, -75.18663959999999, (errorMessage, weatherResults) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(JSON.stringify(weatherResults, undefined, 2));\n  }\n});\n```", "```js\nvar getWeather = (lat, lng, callback) => {\n```", "```js\nvar getWeather = (lat, lng, callback) => {\n  request({\n    url: `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`,\n```", "```js\nif (error) {\n  callback('Unable to connect to Forecast.io server.');\n} else if (response.statusCode === 400) {\n  callback('Unable to fetch weather.');\n}\n```", "```js\nif (error) {\n  callback('Unable to connect to Forecast.io server.');\n} else if (response.statusCode === 400) {\n  callback('Unable to fetch weather.');\n} else if (response.statusCode === 200) {\n  callback(undefined, {\n\n  })\n  console.log(body.currently.temperature);\n}\n```", "```js\nelse if (response.statusCode === 200) {\n  callback(undefined, {\n    temperature: body.currently.temperature\n  })\n  console.log(body.currently.temperature);\n}\n```", "```js\nelse if (response.statusCode === 200) {\n  callback(undefined, {\n    temperature: body.currently.temperature,\n    apparentTemperature: body.currently.apparentTemperature\n  })\n  console.log(body.currently.temperature);\n}\n```", "```js\nconst request = require('request');\n\nvar getWeather = (lat, lng, callback) => {\n  request({\n    url: `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`,\n    json: true\n  }, (error, response, body) => {\n    if (error) {\n      callback('Unable to connect to Forecast.io server.');\n    } else if (response.statusCode === 400) {\n      callback('Unable to fetch weather.');\n    } else if (response.statusCode === 200) {\n      callback(undefined, {\n        temperature: body.currently.temperature,\n        apparentTemperature: body.currently.apparentTemperature\n      });\n    }\n  });\n};\n\nmodule.exports.getWeather = getWeather;\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(results.address);\n  }\n});\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(results.address);\n    weather.getWeather(39.9396284, -75.18663959999999, \n    (errorMessage, weatherResults) => {\n      if (errorMessage) {\n        console.log(errorMessage);\n      } else {\n        console.log(JSON.stringify(weatherResults, undefined, 2));\n      }\n    });\n  }\n});\n```", "```js\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(results.address);\n    weather.getWeather(results.latitude, results.longitude, \n    (errorMessage, weatherResults) => {\n      if (errorMessage) {\n        console.log(errorMessage);\n      } else {\n        console.log(JSON.stringify(weatherResults, undefined, 2));\n      }\n    });\n  }\n});\n```", "```js\nif (errorMessage) {\n  console.log(errorMessage);\n} else {\n  console.log();\n}\n```", "```js\nif (errorMessage) {\n  console.log(errorMessage);\n} else {\n  console.log(`It's currently ${weatherResults.temperature}. It feels like \n    ${weatherResults.apparentTemperature}`);\n}\n```", "```js\nnode app.js -a 08822\n```", "```js\nnode app.js -a 'Key West fl'\n```"]