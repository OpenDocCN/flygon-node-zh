["```js\nmkdir node-tests\n```", "```js\ncd node-tests\n\nnpm init\n```", "```js\nmodule.exports.add = () => {\n\n}\n```", "```js\nmodule.exports.add = () => {\n  return a + b;\n};\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n```", "```js\nnpm i mocha@3.0.0\n```", "```js\nnpm i mocha@5.0.0 --save-dev\n```", "```js\nit();\n```", "```js\nit('should add two numbers');\n```", "```js\nit('should add two numbers', () => {\n\n});\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n\n});\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n});\n```", "```js\n\"scripts\": {\n  \"test\": \"mocha **/utils.test.js\"\n},\n```", "```js\n\"scripts\": {\n  \"test\": \"mocha **/*.test.js\"\n},\n```", "```js\nnpm test\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n  throw new Error('Value not correct')\n});\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  if (res != 44){\n\n  }\n});\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  if (res != 44){\n    throw new Error(`Expected 44, but got ${res}.`);\n  }\n});\n```", "```js\nmodule.exports.add = (a, b) => a + b + 22;\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  if (res != 44){\n    throw new Error(`Expected 44, but got ${res}.`);\n  }\n});\n\nit();\n```", "```js\nit('should square a number', () => {\n\n});\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n});\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  if (res !== 9) {\n\n  }\n});\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  if (res !== 9) {\n    throw new Error(`Expected 9, but got ${res}`);\n  }\n});\n```", "```js\nnpm test\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x + 1;\n```", "```js\nnodemon app.js\n```", "```js\nnodemon --exec 'npm test'\n```", "```js\nmodule.exports.add = (a, b) => a + b + 4;\n\nmodule.exports.square = (x) => x * x;\n```", "```js\n\"scripts\": {\n  \"test\": \"mocha **/*.test.js\",\n  \"test-watch\": \"nodemon --exec 'npm test'\"\n},\n```", "```js\nnpm run test-watch\n```", "```js\nif (res !== 44)\n  throw new Error(`Expected 44, but got ${res}.`)\n}\n```", "```js\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n  if (res !== 44) {\n    throw new Error(`Expected 44, but got ${res}.`)\n  }\n});\n```", "```js\nexpect('something truthy').toExist()\n```", "```js\nnpm install expect@1.20.2 --save-dev\n```", "```js\nconst expect = require('expect');\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  // if(res !== 44) {\n  //   throw new Error(`Expected 44, but got ${res}.`)\n  //}\n});\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  expect(res)\n  // if(res !== 44) {\n  //   throw new Error(`Expected 44, but got ${res}.`)\n  //}\n});\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  expect(res).toBe(44);\n  // if(res !== 44) {\n  //   throw new Error(`Expected 44, but got ${res}.`)\n  //}\n});\n```", "```js\nnpm run test-watch\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  expect(res).toBe(40);\n  // if(res !== 44) {\n  //   throw new Error(`Expected 44, but got ${res}.`)\n  //}\n});\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  expect(res).toBe(44).toBeA('number');\n  // if(res !== 44) {\n  //   throw new Error(`Expected 44, but got ${res}.`)\n  //}\n});\n```", "```js\n expect(res).toBe(44).toBeA('string');\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  expect(res).toBe(9);\n});\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  expect(res).toBe(9).toBeA('number');\n});\n```", "```js\nit('should expect some values');\n```", "```js\nit('should expect some values', () => {\n\n});\n```", "```js\nit('should expect some values', () => {\n  expect(12).toNotBe(11);\n});\n```", "```js\nit('should expect some values', () => {\n  expect(12).toNotBe(12);\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  expect({name: 'Andrew'})\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  expect({name: 'Andrew'}).toBe({name: 'Andrew'});\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  expect({name: 'Andrew'}).toEqual({name: 'Andrew'});\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  expect([2,3,4]).toInclude(5);\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  expect([2,3,4]).toInclude(2);\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  expect([2,3,4]).toExclude(1);\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  // expect([2,3,4]).toExclude(1);\n  expect({\n\n  })\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  // expect([2,3,4]).toExclude(1);\n  expect({\n    name: 'Andrew',\n age: 25,\n location: 'Philadelphia'\n  })\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  // expect([2,3,4]).toExclude(1);\n  expect({\n    name: 'Andrew',\n    age: 25,\n    location: 'Philadelphia'\n  }).toInclude({\n\n })\n});\n```", "```js\nit('should expect some values', () => {\n  // expect(12).toNotBe(12);\n  // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n  // expect([2,3,4]).toExclude(1);\n  expect({\n    name: 'Andrew',\n    age: 25,\n    location: 'Philadelphia'\n  }).toInclude({\n    age: 25\n  })\n});\n```", "```js\n.toInclude({\n    age: 23\n  })\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.setName (user, fullName)\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.setName (user, fullName) => {\n  var names\n};\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.setName (user, fullName) => {\n  var names = fullName.split(' ');\n};\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.setName (user, fullName) => {\n  var names = fullName.split(' ');\n  user.firstName = names[0];\n  user.lastName = names[1];\n};\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.setName (user, fullName) => {\n  var names = fullName.split(' ');\n  user.firstName = names[0];\n  user.lastName = names[1];\n  return user;\n};\n```", "```js\nconst expect = require('expect');\n\nconst utils = require('./utils');\n\nit('should add two numbers', () => {\n  var res = utils.add(33, 11);\n\n  expect(res).toBe(44).toBeA('number');\n});\n\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  expect(res).toBe(9).toBeA('number');\n});\n\n// it('should expect some values', () => {\n//   // expect(12).toNotBe(12);\n//   // expect({name: 'andrew'}).toNotEqual({name: 'Andrew'});\n//   // expect([2,3,4]).toExclude(1);\n//   expect({\n//      name: 'Andrew',\n//      age: 25,\n//      location: 'Philadelphia'\n//    }).toExclude({\n//      age: 23\n//    })\n//  });\n```", "```js\nit('should set firstName and lastName')\n```", "```js\nit('should set firstName and lastName', () => {\n\n});\n```", "```js\nit('should set firstName and lastName', () => {\n  var user = {location: 'Philadelphia', age: 25};\n});\n```", "```js\nit('should set firstName and lastName', () => {\n  var user = {location: 'Philadelphia', age: 25};\n  var res = utils.setName(user, 'Andrew Mead');\n});\n```", "```js\nit('should set firstName and lastName', () => {\n  var user = {location: 'Philadelphia', age: 25};\n  var res = utils.setName(user, 'Andrew Mead');\n\n  expect(user).toEqual(res);\n});\n```", "```js\nit('should set firstName and lastName', () => {\n  var user = {location: 'Philadelphia', age: 25};\n  var res = utils.setName(user, 'Andrew Mead');\n\n  expect(res).toInclude({\n\n })\n});\n```", "```js\nit('should set firstName and lastName', () => {\n  var user = {location: 'Philadelphia', age: 25};\n  var res = utils.setName(user, 'Andrew Mead');\n\n  expect(res).toInclude({\n    firstName: 'Andrew',\n lastName: 'Mead'\n  })\n});\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.asyncAdd = ()\n```", "```js\nmodule.exports.add = (a, b) => a + b;\n\nmodule.exports.asyncAdd = (a, b, callback)\n```", "```js\nmodule.exports.asyncAdd = (a, b, callback) => {\n\n};\n```", "```js\nmodule.exports.asyncAdd = (a, b, callback) => {\n  setTimeout(() => {\n\n  }, 1000);\n};\n```", "```js\nmodule.exports.asyncAdd = (a, b, callback) => {\n  setTimeout(() => {\n    callback(a + b);\n  }, 1000);\n};\n```", "```js\nit('should async add two numbers', () => {\n\n});\n```", "```js\nit('should async add two numbers', () => {\n  utils.asyncAdd(4, 3, () => {\n\n  });\n});\n```", "```js\nit('should async add two numbers', () => {\n  utils.asyncAdd(4, 3, (sum) => {\n\n  });\n});\n```", "```js\nit('should async add two numbers', () => {\n  utils.asyncAdd(4, 3, (sum) => {\n    expect(sum).toBe(7).toBeA('number');\n  });\n});\n```", "```js\nnpm run test-watch\n```", "```js\nit('should async add two numbers', () => {\n  utils.asyncAdd(4, 3, (sum) => {\n    expect(sum).toBe(10).toBeA('number');\n  });\n});\n```", "```js\nit('should async add two numbers', (done) => {\n```", "```js\nit('should async add two numbers', (done) => {\n  utils.asyncAdd(4, 3, (sum) => {\n    expect(sum).toBe(10).toBeA('number');\n    done();\n  });\n});\n```", "```js\nit('should async add two numbers', (done) => {\n  utils.asyncAdd(4, 3, (sum) => {\n    expect(sum).toBe(7).toBeA('number');\n    done();\n  });\n});\n```", "```js\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.asyncSquare\n```", "```js\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.asyncSquare = (x, callback) => {\n\n};\n```", "```js\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.asyncSquare = (x, callback) => {\n  setTimeout(() => {\n\n  }, 1000);\n};\n```", "```js\nmodule.exports.square = (x) => x * x;\n\nmodule.exports.asyncSquare = (x, callback) => {\n  setTimeout(() => {\n    callback(x * x);\n  }, 1000);\n};\n```", "```js\nit('should square a number', () => {\n  var res = utils.square(3);\n\n  expect(res).toBe(9).toBeA('number');\n});\n\nit('should async square a number')\n```", "```js\nit('should async square a number', (done) => {\n\n});\n```", "```js\nit('should async square a number', (done) => {\n  utils.asyncSquare(5, () => {\n\n  })\n});\n```", "```js\n utils.asyncSquare(5, (res) => {\n\n  });\n```", "```js\nit('should async square a number', (done) => {\n  utils.asyncSquare(5, (res) => {\n    expect(res).toBe(25).toBeA('number');\n  });\n});\n```", "```js\nit('should async square a number', (done) => {\n  utils.asyncSquare(5, (res) => {\n    expect(res).toBe(25).toBeA('number');\n    done();\n  });\n});\n```"]