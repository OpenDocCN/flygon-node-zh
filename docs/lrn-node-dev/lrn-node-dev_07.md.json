["```js\nconst yargs = require('yargs');\n\nconst geocode = require('./geocode/geocode');\nconst weather = require('./weather/weather');\n\nconst argv = yargs\n  .options({\n    a: {\n      demand: true,\n      alias: 'address',\n      describe: 'Address to fetch weather for',\n      string: true\n    }\n  })\n  .help()\n  .alias('help', 'h')\n  .argv;\n\ngeocode.geocodeAddress(argv.address, (errorMessage, results) => {\n  if (errorMessage) {\n    console.log(errorMessage);\n  } else {\n    console.log(results.address);\n    weather.getWeather(results.latitude, results.longitude, (errorMessage, weatherResults) => {\n      if (errorMessage) {\n        console.log(errorMessage);\n      } else {\n        console.log(`It's currently ${weatherResults.temperature}. It feels like ${weatherResults.apparentTemperature}.`);\n      }\n    });\n  }\n});\n```", "```js\nvar somePromise = new Promise\n```", "```js\nvar somePromise = new Promise(() => {\n\n});\n```", "```js\nconst request = require('request');\n\nvar geocodeAddress = (address, callback) => {\n  var encodedAddress = encodeURIComponent(address);\n\n  request({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n  }, (error, response, body) => {\n    if (error) {\n      callback('Unable to connect to Google servers.');\n    } else if (body.status === 'ZERO_RESULTS') {\n      callback('Unable to find that address.');\n    } else if (body.status === 'OK') {\n      callback(undefined, {\n        address: body.results[0].formatted_address,\n        latitude: body.results[0].geometry.location.lat,\n        longitude: body.results[0].geometry.location.lng\n      });\n    }\n  });\n};\n\nmodule.exports.geocodeAddress = geocodeAddress;\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n\n});\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n     resolve('Hey. It worked!');\n});\n```", "```js\nsomePromise.then((message) => {\n\n})\n```", "```js\nsomePromise.then((message) => {\n  console.log('Success: ', message);\n})\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n setTimeout(() => {\n\n}, 2500);\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    // resolve('Hey. It worked!');\n    reject('Unable to fulfill promise');\n  }, 2500);\n});\n```", "```js\nsomePromise.then((message) => {\n  console.log('Success: ', message);\n}, (errorMessage) => {\n\n});\n```", "```js\n}, (errorMessage) => {\n  console.log('Error: ', errorMessage);\n});\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Hey. It worked!');\n    reject('Unable to fulfill promise');\n  }, 2500);\n});\n\nsomePromise.then((message) => {\n  console.log('Success: ', message);\n}, (errorMessage) => {\n  console.log('Error: ', errorMessage);\n});\n```", "```js\nconst request = require('request');\n\nvar geocodeAddress = (address, callback) => {\n  var encodedAddress = encodeURIComponent(address);\n\n  request({\n    url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n    json: true\n  }, (error, response, body) => {\n    if (error) {\n      callback('Unable to connect to Google servers.');\n      callback();\n```", "```js\nvar somePromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Hey. It worked!');\n    resolve();\n    reject('Unable to fulfill promise');\n  }, 2500);\n});\n```", "```js\nvar asyncAdd = () => {\n\n}\n```", "```js\nvar asyncAdd = (a, b) => {\n\n};\n```", "```js\nvar asyncAdd = (a, b) => {\n return new Promise((resolve, reject) => {\n\n });\n```", "```js\nreturn new Promise((resolve, reject) => {\n setTimeout(() => {\n\n }, 1500)\n });\n```", "```js\nsetTimeout(() => {\n  if (typeof a === 'number')\n }, 1500);\n```", "```js\n    if (typeof a === 'number' && typeof b === 'number') {}\n```", "```js\n return new Promise((resolve, reject) => {\n   setTimeout(() => {\n     if (typeof a === 'number' && typeof b === 'number') { \n       resolve(a + b);\n     }\n   }, 1500);\n```", "```js\n   if (typeof a === 'number' && typeof b === 'number') { \n     resolve(a + b);\n   } else {\n     reject('Argumets must be numbers');\n   }\n```", "```js\nasyncAdd(5, 7).then\n```", "```js\nouldasyncAdd(5, 7).then(() => {\n}, () => {\n\n});\n```", "```js\nasyncAdd(5, 7).then(() => {\n\n}, (errorMessage) => {\n console.log(errorMessage);\n});\n```", "```js\nasyncAdd(5, 7).then(() => {\n console.log('Result:', res);\n}, (errorMessage) => {\n console.log(errorMessage);\n});\n```", "```js\nasyncAdd(5, 7).then((res) => {\n console.log('Result:', res);\n return asyncAdd(res, 33);\n```", "```js\n asyncAdd(5, 7).then((res) => {\n   console.log('Result:', res);\n   return asyncAdd(res, 33);\n }, (errorMessage) => {\n   console.log(errorMessage);\n }).then(() => {\n\n }, () => {\n\n })\n```", "```js\n}).then((res) => {\n console.log('Should be 45', res);\n}, () => {\n});\n```", "```js\n}).then((res) => {\n console.log('Should be 45', res);\n}, (errorMessage) => {\n console.log(errorMessage);\n});\n```", "```js\n asyncAdd(5, 7).then((res) => {\n   console.log('Result:', res);\n   return asyncAdd(res, '33');\n }, (errorMessage) => {\n   console.log(errorMessage);\n }).then((res) => {\n   console.log('Should be 45', res);\n }, (errorMessage) => {\n   concole.log(errorMessage);\n })\n```", "```js\n asyncAdd(5, '7').then((res) => {\n   console.log('Result:', res);\n   return asyncAdd(res, 33);\n }, (errorMessage) => {\n   console.log(errorMessage);\n }).then((res) => {\n   console.log('Should be 45', res);\n }, (errorMessage) => {\n   concole.log(errorMessage);\n })\n```", "```js\nasyncAdd(5, '7').then((res) => {\n console.log('Result:', res);\n return asyncAdd(res, 33);\n}).then((res) => {\n console.log('Should be 45', res);\n}).catch;\n```", "```js\nasyncAdd(5, '7').then((res) => {\n console.log('Result:', res);\n return asyncAdd(res, 33);\n}).then((res) => {\n console.log('Should be 45', res);\n}).catch((errorMessage) => {\n console.log(errorMessage)\n});\n```", "```js\nvar geocodeAddress = (address) => {\n\n};\n```", "```js\ngeocodeAddress('19146').then(() => {\n\n}, () => {\n\n})\n```", "```js\ngeocodeAddress('19146').then((location) => {\n\n}, (errorMessage) => {\n\n})\n```", "```js\ngeocodeAddress('19146').then((location) => {\n console.log(JSON.stringify(location, undefined, 2));\n}, (errorMessage) => {\n console.log(errorMessage); \n});\n```", "```js\nvar geocodeAddress = (address) => {\n return new Promise(() => {\n\n });\n};\n```", "```js\n return new Promise((resolve, reject) => {\n });\n};\n```", "```js\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n```", "```js\nconst request = require('request');\nvar geocodeAddress = (address) => {\n return new Promise((resolve, reject) => {\n var encodedAddress = encodeURIComponent(address);\n\nrequest({\n url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n json: true\n }, (error, response, body) => {\n   if (error) {\n   callback('Unable to connect to Google servers.');\n } else if (body.status === 'ZERO_RESULTS') {\n   callback('Unable to find that address.');\n } else if (body.status === 'OK') {\n   callback(undefined, {\n     address: body.results[0].formatted_address,\n     latitude: body.results[0].geometry.location.lat,\n     longitude: body.results[0].geometry.location.lng\n     });\n    }\n   });\n });\n};\n```", "```js\nif (error) {\n   reject('Unable to connect to Google servers.');\n } else if (body.status === 'ZERO_RESULTS') {\n   reject('Unable to find that address.');\n```", "```js\nif (error) { \n  reject('Unable to connect to Google servers.');\n } else if (body.status === 'ZERO_RESULTS') {\n   reject('Unable to find that address.');\n } else if (body.status === 'OK') {\n   resolve(\n```", "```js\nnode playground/promise-2.js\n```", "```js\nconst request = require('request');\n\nvar geocodeAddress = (address) => {\n  return new Promise((resolve, reject) => {\n    var encodedAddress = encodeURIComponent(address);\n\n  request({\n   url: `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`,\n   json: true\n }, (error, response, body) => {\n   if (error) {\n     reject('Unable to connect to Google servers.');\n   } else if (body.status === 'ZERO_RESULTS') {\n     reject('Unable to find that address.');\n   } else if (body.status === 'OK') {\n     resolve({\n       address: body.results[0].formatted_address,\n       latitude: body.results[0].geometry.location.lat,\n       longitude: body.results[0].geometry.location.lng\n      });\n     }\n   });\n  });\n};\n```", "```js\nconst yargs = require('yargs');\n\nconst argv = yargs\n .options({\n   a: {\n     demand: true,\n     alias: 'address',\n     describe: 'Address to fetch weather for',\n     string: true\n   }\n })\n .help()\n .alias('help', 'h')\n .argv;\n```", "```js\nconst yargs = require('yargs');\nconst axios = require('axios');\n```", "```js\n  .argv;\n\nvar encodedAddress = encodeURIComponent(argv.address);\n```", "```js\nvar encodeAddress = encodeURIComponent(argv.address);\n```", "```js\nvar encodedAddress = encodeURIComponent(argv.address);\nvar geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;\n```", "```js\nvar geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodedAddress}`;\n\naxios.get\n```", "```js\naxios.get(geocodeUrl).then()\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n\n});\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n  console.log(response.data);\n});\n```", "```js\nnode app-promise.js -a '1301 lombard street philadelphia\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n console.log(response.data);\n});catch((e) => {\n\n});\n```", "```js\n}).catch((e) => {\n console.log(e)\n});\n```", "```js\nvar encodedAddress = encodeURIComponent(argv.address);\nvar geocodeUrl = `https://mapsgoogleapis.com/maps/api/geocode/json?address=${encodedAddress}`;\n\naxios.get(geocodeUrl).then((response) => {\n   console.log(response.data);\n}).catch((e) => {\n   console.log(e)\n});\n```", "```js\n}).catch((e) => {\n if (e.code === 'ENOTFOUND') {\n\n}\n```", "```js\n}).catch((e) => {\n  if (e.code === 'ENOTFOUND') {\n   console.log('Unable to connect to API servers.');\n  } \n  console.log(e);\n });\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n  console.log(response.data);\n}).catch((e) => {\n  if (e.code === 'ENOTFOUND') {\n    console.log('Unable to connect to API servers.');\n }\n});\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n  if (response.data.status === 'ZERO_RESULTS') {\n\n  }\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n  if (response.data.status === 'ZERO_RESULTS') {\n    throw new Error('Unable to find that address.');\n  }\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n if (response.data.status === 'ZERO_RESULTS') {\n   throw new Error('Unable to find that address.');\n }\n\n console.log(response.data);\n}).catch((e) => {\n if (e.code === 'ENOTFOUND') {\n   console.log('Unable to connect to API servers.');\n } else {\n\n }\n});\n```", "```js\naxios.get(geocodeUrl).then((response) => {\n if (response.data.status === 'ZERO_RESULTS') {\n   throw new Error('Unable to find that address.');\n }\n\n console.log(response.data);\n}).catch((e) => {\n  if (e.code === 'ENOTFOUND') {\n   console.log('Unable to connect to API servers.');\n } else {\n   console.log(e.message);\n }\n});\n```", "```js\nurl: `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`,\n```", "```js\nvar lat;\nvar lng;\nurl: `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`,\n```", "```js\nvar lat = response.data.results[0].geometry.location.lat;\n```", "```js\nvar lat = response.data.results[0].geometry.location.lat;\nvar lng = response.data.results[0].geometry.location.lng;\n```", "```js\nvar lat = response.data.results[0].geometry.location.lat;\nvar lng = response.data.results[0].geometry.location.lng;\nvar weatherUrl = `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`;\nconsole.log(response.data.results[0].formatted_address);\n```", "```js\n var lat = response.data.results[0].geometry.location.lat;\n var lng = response.data.results[0].geometry.location.lng;\n var weatherUrl = `https://api.forecast.io/forecast/4a04d1c42fd9d32c97a2c291a32d5e2d/${lat},${lng}`;\n console.log(response.data.results[0].formatted_address);\n return axios.get(weatherUrl);\n```", "```js\n return axios.get(weatherUrl);\n}).then(() => {\n\n}).catch((e) => {\n if (e.code === 'ENOTFOUND') {\n```", "```js\n}).then((response) => {\n```", "```js\n}).then((response) => {\n var temperature = response.data.currently.temperature;\n var apparentTemperature = response.data.currently.apparentTemperature;\n```", "```js\n}).then((response) => {\n var temperature = response.data.currently.temperature;\n var apparentTemperature = response.data.currently.apparentTemperature;\n console.log(`It's currently ${temperature}. It feels like ${apparentTemperature}.`);\n```"]