["```js\nBlockchain.prototype.createNewTransaction = function (amount, sender, recipient) {\n    const newTransaction = {\n        amount: amount,\n        sender: sender,\n        recipient: recipient,\n    };\n    this.newTransactions.push(newTransaction);\n    return.this.getlastBlock() ['index'] + 1;\n}\n```", "```js\nBlockchain.prototype.createNewTransaction = function (amount, sender, recipient) {\n    const newTransaction = {\n        amount: amount,\n        sender: sender,\n        recipient: recipient,\n        transactionId: uuid().split('-').join('')\n    };\n    return newTransaction;\n}\n```", "```js\nconst uuid = require('uuid/v1');\n```", "```js\ntransactionId: uuid().split('-').join('')\n```", "```js\nBlockchain.prototype.addTransactionToPendingTransactions = function(transactionObj) {\n};\n```", "```js\nBlockchain.prototype.addTransactionToPendingTransaction = function(transactionObj) {\n    this.pendingTransactions.push(transactionObj);\n\n};\n```", "```js\nBlockchain.prototype.addTransactionToPendingTransaction = function(transactionObj) {\n    this.pendingTransaction.push(transactionObj);\n    return this.getLastBlock()['index'] + 1;\n};\n```", "```js\napp.post('/transaction/broadcast', function(req, res) )  {\n\n});\n```", "```js\napp.post('/transaction/broadcast', function(req, res) )  {\n    const newTransaction = bitcoin.createNewTransaction();\n\n});\n```", "```js\napp.post('/transaction/broadcast', function(req, res) )  {\n    const newTransaction = bitcoin.createNewTransaction(req.body.amount, req.body.sender, req.body.recipient);\n\n});\n```", "```js\nbitcoin.addTransactionToPendingTransactions (newTransaction);\n```", "```js\nbitcoin.netowrkNodes.forEach(networkNodeUrl => {\n    //...\n});\n```", "```js\nconst requestOptions = {\n\n};\n```", "```js\nconst requestOptions = {\n    uri: networkNodeUrl + '/transaction',\n method: 'POST',\n body: newTransaction,\n json: true\n};\n```", "```js\nconst requestPromises = []; \n```", "```js\nrequestPromises.push(rp(requestOptions));\n```", "```js\npromise.all(requestPromises)\n```", "```js\n.then(data => {\n\n});\n```", "```js\n.then(data => {\n    res.json({ note: 'Transaction created and broadcast successfully.'})\n});\n```", "```js\napp.post('/transaction', function(req, res) {\n    const newTransaction = req.body;\n\n};\n```", "```js\nbitcoin.addTransactionToPendingTransactions();\n```", "```js\nbitcoin.addTransactionToPendingTransactions(newTransaction);\n```", "```js\nconst blockIndex = bitcoin.addTransactionToPendingTransactions(newTransaction);\n```", "```js\nres.json({ note: 'Transaction will be added in block ${blockIndex}.'});\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n\n }; \n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block',   \n    }; \n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block', method: 'POST',   \n    }; \n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block',method: 'POST',        body: { newBlock: newBlock }\n    }; \n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block',method: 'POST',       body: { newBlock: newBlock },\n        json: true\n    }; \n\n})\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block',method: 'POST',       body: { newBlock: newBlock },\n       json: true\n    }; \n    rp(requestOptions)\n})\n```", "```js\nconst requestPromises = [];\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/receive-new-block',method: 'POST',       body: { newBlock: newBlock },\n       json: true\n    }; \n    requestPromises.push(rp(requestOptions));\n});\n```", "```js\nPromise.all(requestPromises)\n.then(data => {\n    // ....\n})\n```", "```js\nPromise.all(requestPromises)\n.then(data => {\n    const requestOptions = {\n uri: bitcoin.currentNodeUrl + '/transaction/broadcast',\n method: 'POST',\n    };    \n\n})\n```", "```js\nPromise.all(requestPromises)\n.then(data => {\n    const requestOptions = {\n        uri: bitcoin.currentNodeUrl + '/transaction/broadcast',\n        method: 'POST',\n        body: {\n amount: 12.5, \n sender:\"00\", \n recipient: nodeAddress\n }\n    };    \n\n})\n```", "```js\njson: true\n```", "```js\nreturn rp(requestOptions);\n```", "```js\napp.post('/receive-new-block', function(req, res) {\n};\n```", "```js\napp.post('/receive-new-block', function(req, res) {\n    const newBlock = req.body.newBlock;\n\n};\n```", "```js\napp.post('/receive-new-block', function(req, res) {\n    const newBlock = req.body.newBlock;\n   const lastBlock = bitcoin.getLastBlock(); \n};\n```", "```js\n  lastBlock.hash === newBlock.previousBlockHash; \n```", "```js\nconst correctHash = lastBlock.hash === newBlock.previousBlockHash;\n```", "```js\nconst correctIndex = lastBlock['index'] + 1 === newBlock['index'];\n```", "```js\nif (correctHash && correctIndex) {\n    bitcoin.chain.push(newBlock);\n\n}\n```", "```js\nbitcoin.pendingTransaction = [];\n```", "```js\nres.json({\n    note: 'New block received and accepted.',\n    newBlock: newBlock\n})\n```", "```js\nelse{\n  res.json({\n      note:'New block rejected.',\n      newBlock: newBlock\n  });  \n}\n```"]