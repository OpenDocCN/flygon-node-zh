["```js\nvar express = require('express')\nvar app = express()\n\napp.get('/', function (req, res) {\n res.send('Hello World')\n})\n\napp.listen(3000)\n```", "```js\nnode dev/api.js\n```", "```js\nvar express = require('express')\nvar app = express()\n\napp.get('/', function (req, res) {\n res.send('Hello Coding JavaScript!')\n})\n\napp.listen(3000)\n```", "```js\nnode dev/api.js\n```", "```js\nconst express = require('express');\nconst app = express();\n\napp.get('/blockchain', function (req, res) {\n\n});\n\napp.post('/transaction', function(req, res) {\n\n});\n\napp.get('/mine', function(req, res) {\n\n});\n\napp,listen(3000);\n```", "```js\napp,listen(3000, function(){\n    console.log('listening on port 3000...'); \n\n});\n```", "```js\n{\n \"name\": \"javaScript-blockchain\",\n \"version\": \"1.0.0\",\n \"description\": \"\",\n \"main\": \"index.js\",\n \"scripts\": {\n     \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n     \"start\": \"nodemon --watch dev -e js dev/api.js\"\n }\n \"author\": \"\",\n \"license\": \"ISC\",\n \"dependencies\": {\n     \"express\": \"^4.16.3\",\n     \"nodemon\": \"^1.17.3\",\n     \"sha256\": \"^0.2.0\"\n }\n}\n```", "```js\napp.post('/transaction', function(req, res) {\n    res.send('It works!!!');\n});\n```", "```js\napp.post('/transaction', function(req, res) {\n    console.log(req.body);\n    res.send(`The amount of the transaction is ${req.body.amount}\n     bitcoin.`);\n});\n```", "```js\nconst express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n```", "```js\nconst Blockchain = require('./blockchain');\n```", "```js\nconst bitcoin = new Blockchain();\n```", "```js\napp.get('/blockchain', function(req, res) {\n    res.send(bitcoin);\n});\n```", "```js\nBlockchain.prototype.createNewTransaction = function(amount, sender, recipient) {\n  const newTransaction = {\n    amount: amount,\n    sender: sender,\n    recipient: recipient\n  };\n\n  this.pendingTransactions.push(newTransaction);\n\n  return this.getLastBlock()['index'] + 1;\n};\n```", "```js\napp.post('/transaction', function(req, res) {\n  const blockIndex = bitcoin.createNewTransaction(req.body.amount,\n   req.body.sender, req.body.recipient) \n});\n```", "```js\napp.post('/transaction', function(req, res) {\n  const blockIndex = bitcoin.createNewTransaction(req.body.amount,\n  req.body.sender, req.body.recipient) \n res.json({ note:`Transaction will be added in block\n    ${blockIndex}.`});\n});\n```", "```js\napp.get('/mine', function(req, res) {\n    const newBlock = bitcoin.createNewBlock();\n});\n```", "```js\nBlockchain.prototype.createNewBlock = function(nonce, previousBlockHash, hash) {\n  const newBlock = {\n    index: this.chain.length + 1,\n    timestamp: Date.now(),\n    transactions: this.pendingTransactions,\n    nonce: nonce,\n    hash: hash,\n    previousBlockHash: previousBlockHash\n  };\n\n  this.pendingTransactions = [];\n  this.chain.push(newBlock);\n\n  return newBlock;\n};\n```", "```js\napp.get('/mine', function(req, res) {\n  const lastBlock = bitcoin.getLastBlock();\n  const previousBlockHash = lastBlock['hash'];\n```", "```js\nBlockchain.prototype.proofOfWork = function(previousBlockHash, currentBlockData) {\n  let nonce = 0;\n  let hash = this.hashBlock(previousBlockHash, currentBlockData,\n  nonce);\n  while (hash.substring(0, 4) !== '0000') {\n    nonce++;\n    hash = this.hashBlock(previousBlockHash, currentBlockData,\n    nonce);\n  }\n\n  return nonce;\n};\n```", "```js\nconst nonce = bitcoin.proofOfWork(previousBlockHash, currentBlockData);\n```", "```js\nconst currentBlockData = {\n    transactions: bitcoin.pendingTransactions,\n    index: lastBlock['index'] + 1\n  };\n```", "```js\nconst blockHash = bitcoin.hashBlock(previousBlockHash, currentBlockData, nonce);\n```", "```js\nconst newBlock = bitcoin.createNewBlock(nonce, previousBlockHash, blockHash);\n```", "```js\nres.json({\n  note: \"New block mined successfully\",\n  block: newBlock\n});\n```", "```js\nbitcoin.createNewTransaction(12.5, \"00\", nodeAddress);\n```", "```js\nconst uuid = require('uuid/v1');\n```", "```js\nconst nodeAddress = uuid().split('-').join('');\n```"]