["```js\nfunction User() { \n\n}\n```", "```js\nvar user1 = new User('John','Smith',26,'male');\n```", "```js\nvar user200 = new User('Jill', 'Robinson', 25, 'female');\n```", "```js\nUser.prototype. \n```", "```js\nUser.prototype.emailDomain \n```", "```js\nUser.prototype.emailDomain = '@facebook.com';\n```", "```js\nuser200.emailDomain\n```", "```js\nUser.prototype.getEmailAddress = function () { \n}    \n```", "```js\nUser.prototype.getEmailAddress = function () { \n return this.firstName + this.lastName + this.emailDomain;\n} \n```", "```js\nfunction Blockchain () {\n}\n```", "```js\nfunction Blockchain () {\n    this.chain = [];\n    this.newTransactions = [];\n}\n```", "```js\nclass Blockchain {\n    constructor() {\n        this.chain = [];\n        this.newTransactions = [];\n    }\n\n    // Here you can build out all of the methods \n    // that we are going to write inside of this\n    // Blockchain class. \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function () { \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n\n }; \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,     \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),       \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransactions,          \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransactions, \n        nonce: nonce,         \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransactions, \n        nonce: nonce,\n        hash: hash,         \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransactions, \n        nonce: nonce,\n        hash: hash,\n        previousBlockHash: previousBlockHash,          \n    };   \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransactions, \n        nonce: nonce,\n        hash: hash,\n        previousBlockHash: previousBlockHash,          \n    };\n\n    this.newTransaction = [];  \n\n}\n```", "```js\nBlockchain.prototype.createNewBlock = function (nonce, previousBlockHash, hash) { \n    const newBlock = { \n        index: this.chain.length + 1,\n        timestamp: Date.now(),\n        transactions: this.newTransaction, \n        nonce: nonce,\n        hash: hash,\n        previousBlockHash: previousBlockHash,          \n    };\n\n    this.newTransaction = [];\n    this.chain.push(newBlock);    \n\n    return newBlock; \n}\n```", "```js\nmodule.exports = Blockchain;\n```", "```js\nconst Blockchain = require('./blockchain');\n```", "```js\nconst bitcoin = new Blockchain();\n```", "```js\nconsole.log(bitcoin); \n```", "```js\nnode dev/test.js\n```", "```js\nconst Blockchain = require('./blockchain');\n\nconst bitcoin = new Blockchain();\n\nbitcoin.createNewBlock();\n\nconsole.log(bitcoin); \n```", "```js\nbitcoin.createNewBlock(2389,'OIUOEREDHKHKD','78s97d4x6dsf');\n```", "```js\nbitcoin.createNewBlock(2389,'OIUOEREDHKHKD','78s97d4x6dsf');\n```", "```js\nBlockchain.prototype.getLastBlock = function () { \n\n}\n```", "```js\nBlockchain.prototype.getLastBlock = function () { \n    return this.chain[this.chain.length - 1];\n\n}\n```", "```js\nBlockchain.prototype.createNewTransaction = function () {\n\n}\n```", "```js\nBlockchain.prototype.createNewTransaction = function (amount, sender, recipient) {\n\n}\n```", "```js\nconst newTransaction = {\n\n}\n```", "```js\nBlockchain.prototype.createNewTransaction = function (amount, sender, recipient) {\n    const newTransaction = {\n        amount: amount,\n sender: sender,\n recipient: recipient,\n    };\n\n}\n```", "```js\nthis.newTransactions.push(newTransaction);\n```", "```js\nthis.newTransactions.push(newTransaction);\nreturn.this.getlastBlock()['index'] + 1;\n```", "```js\nbitcoin.createNewBlock(789457,'OIUOEDJETH8754DHKD','78SHNEG45DER56');\n```", "```js\nbitcoin.createNewTransaction(100,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n```", "```js\nconst Blockchain = require('./blockchain');\n\nconst bitcoin = new Blockchain();\n\nbitcoin.createNewBlock(789457,'OIUOEDJETH8754DHKD','78SHNEG45DER56');\n\nbitcoin.createNewTransaction(100,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n\nconsole.log(bitcoin); \n```", "```js\nnode dev/test.js \n```", "```js\nconst Blockchain = require('./blockchain');\n\nconst bitcoin = new Blockchain();\n\nbitcoin.createNewBlock(789457,'OIUOEDJETH8754DHKD','78SHNEG45DER56');\n\nbitcoin.createNewTransaction(100,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n\nbitcoin.createNewBlock(548764,'AKMC875E6S1RS9','WPLS214R7T6SJ3G2');\n\nconsole.log(bitcoin);\n```", "```js\nconst Blockchain = require('./blockchain');\n\nconst bitcoin = new Blockchain();\n\nbitcoin.createNewBlock(789457,'OIUOEDJETH8754DHKD','78SHNEG45DER56');\n\nbitcoin.createNewTransaction(100,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n\nbitcoin.createNewBlock(548764,'AKMC875E6S1RS9','WPLS214R7T6SJ3G2');\n\nconsole.log(bitcoin.chain[1]);\n```", "```js\nconst Blockchain = require('./blockchain');\n\nconst bitcoin = new Blockchain();\n\nbitcoin.createNewBlock(789457,'OIUOEDJETH8754DHKD','78SHNEG45DER56');\n\nbitcoin.createNewTransaction(100,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n\nbitcoin.createNewBlock(548764,'AKMC875E6S1RS9','WPLS214R7T6SJ3G2');\n\nbitcoin.createNewTransaction(50,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\nbitcoin.createNewTransaction(200,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\nbitcoin.createNewTransaction(300,'ALEXHT845SJ5TKCJ2','JENN5BG5DF6HT8NG9');\n\nconsole.log(bitcoin);\n```", "```js\nBlockchain.prototype.hashBlock = function(blockdata) {\n\n}\n```", "```js\nnpm i sha 256--save\n```", "```js\nconst sha256 = require('sha256');  \n```", "```js\nBlockchain.prototype.hashBlock = function(previousBlockHash, currentBlockData, nonce) {\n\n}\n```", "```js\nconst dataAsString = previousBlockHash + nonce.tostring()+ JSON.stringify( currentBlockData);\n```", "```js\nconst hash = sha256(dataAsString);\n```", "```js\nreturn hash;\n```", "```js\nconst Blockchain = require ('./blockchain'); \nconst bitcoin = new Blockchain (); \n\nbitcoin.hashBlock();\n```", "```js\nconst previousBlockHash = '87765DA6CCF0668238C1D27C35692E11';\n```", "```js\nconst currentBlockData = [\n    {\n        amount: 10,\n        sender: 'B4CEE9C0E5CD571',\n        recipient: '3A3F6E462D48E9',  \n    }  \n]\n```", "```js\nconst nonce = 100;\n```", "```js\nbitcoin.hashBlock(previousBlockHash, currentBlockData, nonce );\n```", "```js\nconsole.log(bitcoin.hashBlock(previousBlockHash, currentBlockData, nonce));\n```", "```js\nBlockchain.prototype.proofOfWork = function() {\n\n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n\n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n    let nonce = 0;\n\n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n    let nonce = 0;\n    let hash = this.hashBlock(previousBlockHash, currentBlockData,\n     nonce); \n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n    let nonce = 0;\n    let hash = this.hashBlock(previousBlockHash, currentBlockData,\n     nonce); \n    while (hash.substring(0, 4) !== '0000' {\n\n }  \n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n    let nonce = 0;\n    let hash = this.hashBlock(previousBlockHash, currentBlockData,\n    nonce); \n    while (hash.substring(0, 4) !== '0000' {\n        nonce++;\n hash = this.hashBlock(previousBlockHash, currentBlockData,\n        nonce);\n    }  \n}\n```", "```js\nBlockchain.prototype.proofOfWork = function( previousBlockHash, currentBlockData) { \n    let nonce = 0;\n    let hash = this.hashBlock(previousBlockHash, currentBlockData, nonce); \n    while (hash.substring(0, 4) !== '0000' {\n        nonce++;\n        hash = this.hashBlock(previousBlockHash, currentBlockData, nonce);\n    }  \n    return nonce;\n}\n```", "```js\nconsole.log(bitcoin.proofOfWork(previousBlockHash, currentBlockData));\n```", "```js\nwhile (hash.substring(0, 4) !== '0000' {\n    nonce++;\n    hash = this.hashBlock(previousBlockHash, currentBlockData,\n    nonce);\n    console.log(hash);\n}\n```", "```js\nconsole.log(bitcoin.hashBlock(previousBlockHash, currentBlockData, nonce));\n```", "```js\nfunction Blockchain () {\n    this.chain = [];\n    this.pendingTransactions =[];\n    this.createNewBlock();         \n}\n```", "```js\nfunction Blockchain () {\n    this.chain = [];\n    this.pendingTransactions =[];\n    this.createNewBlock(100, '0', '0');         \n}\n```", "```js\nconst Blockchain = require ('./blockchain');\nconst bitcoin = new Blockchain ();\n\nconsole.log(bitcoin);\n```"]