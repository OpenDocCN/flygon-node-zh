["```js\nconst port = process.argv[2]; \n```", "```js\n\"start\": \"nodemon --watch dev -e js dev/api.js 3001\"\n```", "```js\napp.listen(3000, function() {\n    console.log('Listening on port 3000...');\n});\n```", "```js\napp.listen(port, function() {\n    console.log(`Listening on port ${port}...`);\n});\n```", "```js\nconst currentNodeUrl = process.argv[3];\n```", "```js\nfunction Blockchain() {\n       this.chain = [];\n       this.pendingTransactions = [];\n\n       this.currentNodeUrl = currentNodeUrl;\n\n       this.createNewBlock();\n};\n```", "```js\nthis.networkNodes = [];\n```", "```js\napp.post('/register-and-broadcast-node', function (req, res) {\n\n});\n```", "```js\nconst newNodeUrl = req.body.newNodeUrl;\n```", "```js\napp.post('/register-node', function (req, res) {\n\n});\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n\n});\n```", "```js\napp.post('/register-and-broadcast-node', function(req, res) {\n       const newNodeUrl = req.body.newNodeUrl;\n```", "```js\napp.post('/register-and-broadcast-node', function(req, res) {\n       const newNodeUrl = req.body.newNodeUrl;\n      bitcoin.networkNodes.push(newNodeUrl); \n```", "```js\napp.post('/register-and-broadcast-node', function(req, res) {\n       const newNodeUrl = req.body.newNodeUrl;\n      if (bitcoin.networkNodes.indexOf(newNodeUrl) == -1) bitcoin.networkNodes.push(newNodeUrl);\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    //... '/register-node' \n\n}\n```", "```js\nnpm install request-promise --save \n```", "```js\nconst rp = require('request-promise');\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n\n }\n\n}\n```", "```js\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n    uri: networkNodeUrl + '/register-node', \n    }\n\n}\n```", "```js\nmethod: 'POST',\n```", "```js\nbody: { newNodeUrl: newNodeUrl }\n```", "```js\njson: true\n```", "```js\nrp(requestOptions)\n```", "```js\nconst regNodesPromises = [];\nbitcoin.networkNodes.forEach(networkNodeUrl => {\n    const requestOptions = {\n        uri: networkNodeUrl + '/transaction',\n        method: 'POST',\n        body: newTransaction,\n        json: true\n    };\n regNodesPromises.push(rp(requestOptions));\n});\n```", "```js\nPromise.all(regNodesPromises)\n.then(data => {\n    //use the data...\n});\n```", "```js\nPromise.all(regNodesPromises)\n.then(data => {\n   const bulkRegisterOptions = { \n        uri: newNodeUrl + '/register-nodes-bulk'  \n        method: 'POST',\n body: {allNetworkNodes: [...bitcoin.networkNodes,\n        bitcoin.currentNodeUrl]} \n json:true\n }; \n  });\n});\n```", "```js\nreturn rp(bulkRegisterOptions);\n```", "```js\n.then (data => {\n\n})\n```", "```js\n.then (data => {\n    res.json({ note: 'New Node registered with network successfully' });\n});\n```", "```js\n// register a node with the network\napp.post('/register-node', function(req, res) {\n       const newNodeUrl = req.body.newNodeUrl;\n});\n```", "```js\n// register a node with the network\napp.post('/register-node', function(req, res) {\n      const newNodeUrl = req.body.newNodeUrl; bitcoin.networkNodes.push(newNodeUrl);\n});\n```", "```js\n// register a node with the network\napp.post('/register-node', function(req, res) {\n      const newNodeUrl = req.body.newNodeUrl;bitcoin.networkNodes.push(newNodeUrl);\n      res.json({ note: 'New node registered successfully.' }); \n});\n```", "```js\n// register a node with the network\napp.post('/register-node', function(req, res) {\n      const newNodeUrl = req.body.newNodeUrl;\n const nodeNotAlreadyPresent = \n         bitcoin.networkNodes.indexOf(newNodeUrl) == -1; bitcoin.networkNodes.push(newNodeUrl);\n       res.json({ note: 'New node registered successfully.' }); \n});\n```", "```js\nif (nodeNotAlreadyPresent ) bitcoin.networkNodes.push(newNodeUrl);\n```", "```js\nconst notCurrentNode = bitcoin.currentNodeUrl !== newNodeUrl;\n```", "```js\nif (nodeNotAlreadyPresent && notCurrentNode ) bitcoin.networkNodes.push(newNodeUrl);\n```", "```js\nnpm install request --save\n```", "```js\n{\n    \"newNodeUrl\":\"\"\n}\n```", "```js\n{\n    \"newNodeUrl\":\"http://localhost:3002\"\n}\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n\n});\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n    allNetworkNodes.forEach(networkNodeUrl => { \n //...\n });\n\n});\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n    allNetworkNodes.forEach(networkNodeUrl => { \n        bitcoin.networkNodes.push(metworkNodeUrl);\n    });\n\n});\n```", "```js\nconst nodeNotAlreadyPresent = bitcoin.networkNodes.indexOf(networkNodeUrl) == -1;\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n    allNetworkNodes.forEach(networkNodeUrl => {\n    const nodeNotAlreadyPresent = \n      bitcoin.networkNodes.indexOf(networkNodeUrl) == -1; \n        if(nodeNotAlreadyPresent)bitcoin.networkNodes.push(networkNodeUrl);\n });\n\n});\n```", "```js\nconst notCurrentNode = bitcoin.currentNodeUrl !==networkNodeUrl\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n    allNetworkNodes.forEach(networkNodeUrl => {\n    const nodeNotAlreadyPresent = \n      bitcoin.networkNodes.indexOf(networkNodeUrl) == -1; \n        if(nodeNotAlreadyPresent && notCurrentNode)\n         bitcoin.networkNodes.push(networkNodeUrl);\n });\n\n});\n```", "```js\napp.post('/register-nodes-bulk', function (req, res) {\n    const allNetworkNodes = req.body.allNetowrkNodes;\n    allNetworkNodes.forEach(networkNodeUrl => {\n    const nodeNotAlreadyPresent = \n      bitcoin.networkNodes.indexOf(networkNodeUrl) == -1; \n        if(nodeNotAlreadyPresent && notCurrentNode)\n         bitcoin.networkNodes.push(networkNodeUrl);\n });\nres.json({note: 'Bulk registration successful.' });\n\n});\n```", "```js\n{\n    \"allNetworkNodes\": []\n}\n```", "```js\n{\n    \"allNetworkNodes\": [\n    \"http://localhost:3002\",\n    \"http://localhost:3003\",\n    \"http://localhost:3004\"\n    ]\n}\n```", "```js\n{\n    \"newNodeUrl\": \"\"\n}\n```", "```js\n{\n    \"newNodeUrl\": \"http://localhost:3002\"\n}\n```", "```js\n{\n    \"newNodeUrl\": \"http://localhost:3003\"\n}\n```"]