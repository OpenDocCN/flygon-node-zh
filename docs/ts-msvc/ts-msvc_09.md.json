["```ts\nFROM tutum/nginx\nRUN rm /etc/nginx/sites-enabled/default\nCOPY nginx.conf /etc/nginx.conf\nRUN mkdir /etc/nginx/ssl\nCOPY certs/server.key /etc/nginx/ssl/server.key\nCOPY certs/server.crt /etc/nginx/ssl/server.crt\nADD sites-enabled/ /etc/nginx/sites-enabled\n```", "```ts\nserver {\nlisten 80;\nserver_name product-catalog.org;\naccess_log /var/log/nginx/nodejs_project.log;\ncharset utf-8;\nlocation / {\nproxy_pass http://chapter9-app:8081;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}}\n```", "```ts\nhttp {...\ngzip on;\ngzip_comp_level 6;\ngzip_vary on;\ngzip_min_length 1000;\ngzip_proxied any;\ngzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\ngzip_buffers 16 8k;\n...\n}\n```", "```ts\nhttp {\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;\nproxy_temp_path /var/tmp;\n}\n```", "```ts\ninput { stdin { } }\noutput { elasticsearch { hosts => [\"localhost:9200\"] }\nstdout { codec => rubydebug }}\n```", "```ts\nrabbitmq-service.bat stop\nrabbitmq-service.bat install\nrabbitmq-service.bat start\n```", "```ts\nnpm install zipkin zipkin-context-cls zipkin-instrumentation-express zipkin-instrumentation-fetch zipkin-transport-http node-fetch --save\nnpm install @types/zipkin-context-cls --save-dev\n```", "```ts\njava -jar zipkin-server-2.7.1-exec.jar\n```", "```ts\nimport {Tracer} from 'zipkin';\nimport {BatchRecorder} from 'zipkin';\nimport {HttpLogger} from 'zipkin-transport-http';\nconst CLSContext = require('zipkin-context-cls');\n```", "```ts\nconst ctxImpl=new CLSContext();\nconst logRecorder=new BatchRecorder({\nlogger:new HttpLogger({\nendpoint:`http://loclhost:9411/api/v1/spans` }) })\nconst tracer=new Tracer({ctxImpl:ctxImpl,recorder:logRecorder})\n```", "```ts\nimport {expressMiddleware as zipkinMiddleware} from 'zipkin-instrumentation-express';\n...\nthis.app.use(zipkinMiddleware({tracer,serviceName:'products-service'}))\n```", "```ts\nimport * as wrapFetch from 'zipkin-instrumentation-fetch';\nthis.zipkinFetch = wrapFetch(fetch, {\ntracer,\nserviceName: 'products-service'\n});\n```", "```ts\nlet userRes= await this.zipkinFetch('http://localhost:3000/users/user-by-id/parthghiya');\n```", "```ts\npm2 link <your_private_key> <your_public_key>\ndocker run -p 80:80 -v my_app:/app keymetrics/pm2 -e \"KEYMETRICS_PUBLIC=<your_public_key>\" -e \"KEYMETRICS_SECRET=<your_secret_key>\" \n```", "```ts\npm2 install pm2-server-monit\n```", "```ts\nnpm install pm2 -g\n```", "```ts\npm2 link 7mv6isclla7z2d0 0rb928829xawx4r\n```", "```ts\n\"start\": \"npm run clean && npm run build && pm2 start ./dist/index.js\",\n```", "```ts\npmx.notify(new Error(\"Unexpected Exception\"));\n```", "```ts\nnpm install pm2 pmx -save\n```", "```ts\nconstructor(){\nthis.pmxVar=pmx.init({http:true,errors:true, custom_probes:true,network:true,ports:true});\nthis.probe=this.pmxVar.probe();\nthis.metric=this.probe.metric({ name:'Simple custom metric' });}\n```", "```ts\nthis.metric.set(new Date().toISOString());\n```", "```ts\nimport { ExpressMiddlewareInterface } from \"routing-controllers\";\n const \n pmx=require('pmx').init({http:true,errors:true, custom_probes:true,network:true,ports:true}); \n\nconst pmxProbe=pmx.probe();\n const pmxCounter=pmxProbe.counter({\n    name:'request counter for Hello World Controller',\n    agg_type:'sum'}) \n\nexport class CounterMiddleWare implements ExpressMiddlewareInterface {\n    use(request: any, response: any, next: (err?: any) => any ):any {\n        console.log(\"custom middle ware\");\n        pmxCounter.inc();\n      next();   }} \n```", "```ts\n@UseBefore(CounterMiddleWare)\n@Controller('/hello-world')\nexport class HelloWorld { ... }\n```", "```ts\nthis.pmxVar=pmx.init({http:true,errors:true,custom_probes:true,network:true,ports:true});\n  this.probe=this.pmxVar.probe();\n this.metric=this.probe.meter({\n name: 'averge per minute',\n samples:60,\n timeframe:3600 }) \n```", "```ts\nnpm install prom-client response-time --save\n```", "```ts\nimport * as promClient from 'prom-client';\n import * as responseTime from 'response-time';\n import { logger } from '../../common/logging'; \n\nexport const Register=promClient.register;\n const Counter=promClient.Counter;\n const Histogram=promClient.Histogram;\n const summary=promClient.Summary; \n```", "```ts\n//Function 1\n export var numOfRequests=new Counter({\n    name:'numOfRequests',\n    help:'Number of requests which are made through out the service',\n    labelNames:['method']\n }) \n/*Function 2  to start metric collection */\n export var startCollection=function(){\n    logger.info(\" Metrics can be checked out at /metrics\");\n    this.promInterval=promClient.collectDefaultMetrics(); } \n\n/*THis function 3 increments the counters executed */\n export var requestCounters=function(req:any,res:any,next:any){\n    if(req.path!='metrics'){\n        numOfRequests.inc({method:req.method});\n        totalPathsTakesn.inc({path:req.path});\n   }   next();} \n//Function 4: start collecting metrics \nexport var startCollection=function(){\n  logger.info(\" Metrics can be checked out at /metrics\");\n    this.promInterval=promClient.collectDefaultMetrics();} \n```", "```ts\n@Controller('/metrics')\n export class MetricsRoute{\n    @Get('/')\n    async getMetrics(@Req() req:any,@Res() res:any):Promise<any> {\n        res.set('Content-Type', Register.contentType);\n        res.end(Register.metrics());   };} \n```", "```ts\n..\nthis.app.use(requestCounters);\nthis.app.use(responseCounters)\n..\nstartCollection()\n```", "```ts\nScrape_configs:\n - job_name: 'prometheus-demo'\n   scrape_interval: 5s\n   Static_configs:\n     - targets: ['10.0.2.15:4200']\n       Labels:\n         service: 'demo-microservice'\n         group: 'production'\n```", "```ts\nsudo docker run -p 9090:9090 -v /home/parth/Desktop/prometheus-grafana/prometheus-data/prometheus.yml prom/prometheus\n```", "```ts\ndocker run -i -p 3000:3000 grafana/grafana\n```"]