["```ts\nconst source = Rx.Observable.interval(1000);\nconst example2 = source.throttle(val => Rx.Observable.interval(2000));\nconst subscribe2 = example2.subscribe(val => console.log(val));\n```", "```ts\nlet example3=Rx.Observable.race(\n Rx.Observable.interval(2000)\n            .mapTo(\"i am first obs\"),\n  Rx.Observable.of(1000)\n            .mapTo(\"i am second\"),\n Rx.Observable.interval(1500)\n            .mapTo(\"i am third\")\n  )\nlet subscribe3=example3.\n                  subscribe(val=>console.log(val));\n```", "```ts\nbaconService(productId: number){\n  return Bacon.constant(this.productMap[productId])\n}\n```", "```ts\n@Get('/:productId')\nasync get(@Req() req: Request,@Res() res: Response,@Param(\"productId\") productId: number) {\n  let resp: any;\n  this.baconService.baconService(productId)\n    .flatMap((x) => {\n      return x == null || undefined ? \"No Product Found\" : x;\n    })\n    .onValue((o: string) => {\n      resp = o;\n    })\n  return resp;\n} \n```", "```ts\nimport * as highland from \"highland\";\nimport { Stream } from \"stream\";\nimport * as fs from \"fs\";\n\nvar readFile = highland.wrapCallback(fs.readFile);\nconsole.log(\"started at\", new Date());\n\nvar filenames = highland(['file1.txt', 'file2.txt', 'file3.txt']);\nfilenames\n  .map(readFile)\n  .parallel(10) //reads up to 10 times at a time\n  .errors((err: any, rethrow: any) => {\n    console.log(err);\n    rethrow();\n  })\n  .each((x: Stream) => {\n    console.log(\"---\");\n    console.log(x.toString());\n    console.log(\"---\");\n  });\nconsole.log(\"finished at\", new Date());\n```"]