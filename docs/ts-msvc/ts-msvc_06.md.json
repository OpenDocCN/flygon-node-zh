["```ts\nmvn clean install\n```", "```ts\njava -jar demo-service-discovery-0.0.1-SNAPSHOT.jar\n```", "```ts\nnpm i eureka-js-client --save\n```", "```ts\nlet client = new Eureka(\n  {\n    instance: {\n      app: 'hello-world-chapter-6',\n      hostName: 'localhost',\n      ipAddr: '127.0.0.1',\n      statusPageUrl: `http://localhost:${port}`,\n      healthCheckUrl: `http://localhost:${port}/health`,\n      port: {\n        '$': port,\n        '@enabled': true\n      },\n      vipAddress: 'myvip',\n      dataCenterInfo: {\n        '@class': 'com.netflix.appinfo.InstanceInfo$DefaultDataCenterInfo',\n        'name': 'MyOwn',\n      },\n    }, eureka: {\n      host: 'localhost',\n      port: 9091,\n      servicePath: '/eureka/apps/'\n    }\n  })\n```", "```ts\nclient.start()\n```", "```ts\nprocess.on('SIGINT', function() {client.stop(); });\n```", "```ts\nstatic getClient(): Eureka{\n  if (!this._client) {\n    this._client = new Eureka({\n      instance: {}, //set instance specific parameters,\n      Eureka: {} //set Eureka parameters\n    })\n  }\n```", "```ts\nEurekaService.getClient().start();\n\u2026\nprocess.on('SIGINT', () => {\n  /*stop client*/\n EurekaService.getClient().stop();\n  this.server.close()\n });\n```", "```ts\nlet instances: any =\n  EurekaService.getClient().getInstancesByAppId(\"HELLO-WORLD-CHAPTER-6\");\nlet instance = null;\nlet msg = \"404 Not Available\";\nif (instances != null && instances.length > 0) {\n  instance = instances[0];\n  let protocol = instances[0].securePort[\"@enabled\"] == \"true\" ? \"https\" : \"http\";\n  let url = protocol + \"://\" + instance.ipAddr + \":\" + \n                       instances[0].port.$ + \"/\";\n  const { res, payload } = await Wreck.get(url);\n  msg = payload.toString();\n} \n```", "```ts\ncp consul /usr/local/bin/\n```", "```ts\nconsul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=<Your_IPV4_Address>\n```", "```ts\nnpm install consul  @types/consul --save\n```", "```ts\nimport * as Consul from 'consul';\nimport { ConsulOptions } from 'consul';\n\u2026\nlet consulOptions: ConsulOptions =\n  { host: '127.0.0.1', port: '8500', secure: false, promisify: false }\n\u2026.\nlet details =\n  {\n    name: 'typescript-microservices-consul-producer',\n    address: HOST,\n    check: { ttl: '10s', deregister_critical_service_after: '1m' },\n    port: appPort, id: CONSUL_ID\n  };\nlet consul = new Consul(consulOptions);\n```", "```ts\nconsul.agent.service.register(\n  details, err => {\n    if (err) {\n      throw new Error(err.toString());\n    }\n    console.log('registered with Consul');\n  }\n```", "```ts\n  setInterval(() => {\n   consul.agent.check.pass({id:`service:${CONSUL_ID}`}, \n   (err:any) => {\n        if (err) throw new Error(err); \n        console.log('Send out heartbeat to consul');\n        });\n   }, 5 * 1000);\n```", "```ts\nGET /agent/check/pass/service:<service_id>\n```", "```ts\n   process.on('SIGINT', () => {\n  console.log('Process Terminating. De-Registering...');\n  let details = { id: CONSUL_ID };\n  consul.agent.service.deregister(details,\n    (err) => {\n      console.log('de-registered.', err);\n      process.exit();\n    });\n```", "```ts\nlet watcher = consul.watch({\n  method: consul.health.service,\n  options: {\n    service: 'data',\n    passing: true\n  }\n});\n```", "```ts\nlet known_data_instances: string[];\n..\nwatcher.on('change', (data, res) => {\n  console.log('received discovery update:', data.length);\n  known_data_instances = [];\n  data.forEach((entry: any) => {\n    known_data_instances.push(`http://${entry.Service.Address}:\n    ${entry.Service.Port}/`);\n  });\n  console.log(known_data_instances);\n});\n```", "```ts\nwatcher.on('error', err => {\n  console.error('watch error', err);\n});\n```", "```ts\nreceived discovery update: 1\n [ 'http://parth-VirtualBox:8081/' ]\n```", "```ts\nconsul agent -server -bootstrap-expect=1 -data-dir=consul-data -ui -bind=<Your_IPV4_Address>\n```", "```ts\nsudo docker run -d \n --name=registrator\n --net=host \n --volume=/var/run/docker.sock:/tmp/docker.sock \n gliderlabs/registrator:latest \n consul://localhost:8500\n```", "```ts\nsudo  docker logs registrator\n```", "```ts\nsudo docker run -p 8080:3000 -d firsttypescriptms:latest\n```", "```ts\nsudo docker run -d -P --name=redis redis \n```", "```ts\nUsage of /bin/registrator:\n   /bin/registrator [options] <registry URI>\n   -cleanup=false: Remove dangling services\n   -deregister=\"always\": Deregister exited services \"always\" or \"on- \n    success\"\n   -internal=false: Use internal ports instead of published ones\n   -ip=\"\": IP for ports mapped to the host\n   -resync=0: Frequency with which services are resynchronized\n   -retry-attempts=0: Max retry attempts to establish a connection  \n    with the backend. Use -1 for infinite retries\n   -retry-interval=2000: Interval (in millisecond) between retry-\n    attempts.\n   -tags=\"\": Append tags for all registered services\n   -ttl=0: TTL for services (default is no expiry)\n   -ttl-refresh=0: Frequency with which service TTLs are refreshed\n```"]