["```ts\nnpm install spdy --save\n```", "```ts\n// this command generates server pass key.\nopenssl genrsa -des3 -passout pass:x -out server.pass.key 2048\n//we write our RSA key and let it generate a password\nopenssl rsa -passin pass:x -in server.pass.key -out server.key\nrm server.pass.key //this command removes the pass key, as we are just on dev env\n//following commands generates the csr file\nopenssl req -new -key server.key -out server.csr\n//following command generates server.crt file\nopenssl x509 -req -sha256 -days 365 -in server.csr -signkey server.key -out server.crt\n```", "```ts\nimport * as spdy from 'spdy';\n const certsPath = path.resolve('certs');\n const options={         \n     key:fs.readFileSync(certsPath+\"/server.key\"),\n     cert:fs.readFileSync(certsPath+\"/server.crt\")\n }...\nthis.server=spdy.createServer(options,this.express.app)\n                  .listen(port,(error:any)=>{                       \n                  if(error){\n                      logger.error(\"failed to start \n                      server with ssl\",error);\n                      return process.exit(1);}else{\n                      logger.info(`Server Started! Express:                 \n                      http://localhost:${port}`); }})\n```", "```ts\nnpm install  @creditkarma/dynamic-config  @creditkarma/thrift-client @creditkarma/thrift-server-core @creditkarma/thrift-server-express @creditkarma/thrift-typescript --save\n```", "```ts\nnamespace js com.popularity\nstruct Popularity {\n    1: required i32 id\n    2: required i32 totalStars\n    3: required string review\n    4: required i32 productId}\nexception PopularityServiceException {\n    1: required string message}\nservice PopularityService {\n    Popularity getPopularityByProduct(4: i32 productId) \n    throws (1: PopularityServiceException exp)}\n```", "```ts\n\"precodegen\": \"rimraf src/codegen\",\n\"codegen\": \"npm run precodegen && thrift-typescript --target thrift-server --sourceDir thrift --outDir src/codegen\"\n```", "```ts\nconst serviceHandler: PopularityService.IHandler<express.Request> = {\n    getPopularityByProduct(id: number, context?:  \n    express.Request): Popularity {\n        //find method which uses generated models and types.\n},\n```", "```ts\napp.use(serverConfig.path,bodyParser.raw(),\nThriftServerExpress({\n    serviceName: 'popularity-service',\n    handler: new PopularityService.Processor(serviceHandler),\n}), ) \napp.listen(serverConfig.port, () => {//server startup code)})\n```", "```ts\nconst popularityClientV1: PopularityService.Client = createHttpClient(PopularityService.Client, clientConfig)\nconst serviceHandler: ProductService.IHandler<express.Request> = {\n    getProduct(id: number, context?: express.Request):      \n    Promise<Product> {\n        console.log(`ContentService: getProduct[${id}]`)\n        const product: IMockProduct | undefined = findProduct(id)\n        if (product !== undefined) {\n            return       \n            popularityClientV1.getPopularityByProduct(product.id)\n            .then((popularity: Popularity) => {\n            return new Product({\n            id: product.id,\n            feedback:popularity,\n            productInfo: product.productInfo,\n            productType: product.productType,\n        })\n})} else {\nthrow new ProductServiceException({\n    message: `Unable to find product for id[${id}]`,\n})}},}\n```", "```ts\n /api/product/1234?v=1.5\n```", "```ts\neureka:\n  instance:\n    leaseRenewalIntervalInSeconds: 1         \n    leaseExpirationDurationInSeconds: 2\n  client:\n  serviceUrl:\n    defaultZone: http://127.0.0.1:8761/eureka/\n    registerWithEureka: false\n    fetchRegistry: true\n  healthcheck:\n    enabled: true\n  server:\n    port: 8761\n```", "```ts\nmvn clean install && java -jar target\\demo-service-discovery-0.0.1-SNAPSHOT.jar\n```", "```ts\n@SpringBootApplication\n@EnableDiscoveryClient\n@EnableZuulProxy\npublic class NetflixOsssApplication { ...}\n```", "```ts\nserver.port=8762\nspring.application.name=zuul-server\neureka.instance.preferIpAddress=true\neureka.client.registerWithEureka=true\neureka.client.fetchRegistry=true\neureka.serviceurl.defaultzone=http://localhost:9091/eureka/\n```", "```ts\n let client=new Eureka({\n     instance: {\n         instanceId:'hello-world-chapter-6',\n         app: 'hello-world-chapter-6',\n         //other attributes\n     }, vipAddress: 'hello-world-chapter-6',\n     eureka: {\n         host: 'localhost',\n         port: 8761,\n         servicePath: '/eureka/apps/',\n     }\n });\n```", "```ts\nprivate baseline:number;\nprivate delay:number;\nprivate circuitBreakerOptions = {\n    maxFailures: 5,\n    timeout: 5000,\n    resetTimeout: 10000, //there should be 5 failures\n    name: 'customName',\n    group: 'customGroupName'\n};\n```", "```ts\nthis.baseline=20;\n this.delay = this.baseline;\n```", "```ts\nimport * as circuitBreaker from 'opossum';\n    const circuit = circuitBreaker(this.flakeFunction,   \n    this.circuitBreakerOptions);\n    circuit.fallback(this.fallback);\n    this.app.use('/hystrix.stream', \n    hystrixStream(circuitBreaker));\n    this.app.use('/', (request:any, response:any) => {\n        circuit.fire().then((result:any) => {\n            response.send(result);\n        }).catch((err:any) => {\n            response.send(err);\n    });\n});\n```", "```ts\nflakeFunction= ()=> {\n    return new Promise((resolve, reject) => {\n        if (this.delay > 1000) {\n            return reject(new Error('Flakey Service is Flakey'));\n        }\n        setTimeout(() => {\n            console.log('replying with flakey response \n            after delay of ', this.delay);\n            resolve(`Sending flakey service. Current Delay at   \n              ${this.delay}`);\n            this.delay *= 2;\n        }, this.delay);\n    });\n }\n callingSetTimeOut(){\n     setInterval(() => {\n         if (this.delay !== this.baseline) {\n              this.delay = this.baseline;\n              console.log('resetting flakey service delay',    \n              this.delay);\n         }\n     }, 20000);\n }\n fallback () => { return 'Service Fallback'; }\n```", "```ts\nconst client = new kafka.Client(\"http://localhost:2181\", \"kakfka-client\", {\n     sessionTimeout: 300,\n     spinDelay: 100,\n     retries: 2\n });\n const producer = new kafka.HighLevelProducer(client);\n producer.on(\"ready\", function() {\n     console.log(\"Kafka Producer is ready.\");\n });\n // For this demo we just log producer errors\n producer.on(\"error\", function(error:any) {\n     console.error(error);\n });\n const KafkaService = {\n     sendRecord: ({ type, userId, sessionId, data }:any,  \n       callback = () => {}) => {\n         if (!userId) {\n             return callback(new Error(`A userId\n                has to be provided.`));\n         }\n         const event = {\n             id: uuid.v4(),\n             timestamp: Date.now(),\n             userId: userId,\n             sessionId: sessionId,\n             type: type,\n             data: data\n         };\n         const buffer:any = new    \n           Buffer.from(JSON.stringify(event));\n         // Create a new payload\n         const record = [\n         {\n             topic: \"offers\",\n             messages: buffer,\n             attributes: 1\n         }\n         ];\n         //Send record to Kafka and log result/error\n         producer.send(record, callback);\n     }\n };\n```", "```ts\nconst consumer = new kafka.HighLevelConsumer(client, topics, options);\n consumer.on(\"message\", function(message:any) {\n     // Read string into a buffer.\n     var buf = new Buffer(message.value, \"binary\");\n     var decodedMessage = JSON.parse(buf.toString());\n     //Events is a Sequelize Model Object.\n     return Events.create({\n         id: decodedMessage.id,\n         type: decodedMessage.type,\n         userId: decodedMessage.userId,\n         sessionId: decodedMessage.sessionId,\n         data: JSON.stringify(decodedMessage.data),\n         createdAt: new Date()\n     });\n });\n```", "```ts\nnpm install bit-bin -g\n```", "```ts\nbit add src/common/*\n```", "```ts\nbit import bit.envs/compilers/typescript -c\n```", "```ts\nbit untrack --all\n```", "```ts\nnpm install mocha chai @types/mocha @types/chai --save\n```", "```ts\nimport {expect} from 'chai';\ndescribe(\"hello world mocha test service\", function(){\n    it(\"should create the user with the correct name\",()=>{\n        let helloDef=()=>'hello world';\n        let helloRes=helloDef();\n        expect(helloRes).to.equal('hello world');\n    });});\n```", "```ts\nbit import bit.envs/testers/mocha --tester\nbit add src/common/cacheReader.ts  --tests 'src/tests/cacheReader.spec.ts'\nbit add src/common/logging.ts --tests 'src/tests/logging.spec.ts'\n```", "```ts\nbit tag --all 1.0.0\n```", "```ts\nbit export <username>.<scopename>\n```", "```ts\nnpm config set '@bit:registry' https://node.bitsrc.io\n```", "```ts\nnpm i @bit/parthghiya.tsms.common.logging\n```", "```ts\nredis.get(req.userSessionToken + '_cart', (err, cart) => { if (err) \n { \n    return next(err); \n } \n//cart will be array, return the response from cache }\n```"]