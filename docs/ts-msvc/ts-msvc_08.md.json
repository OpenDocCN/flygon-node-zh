["```ts\nimport test from 'ava';\nconst fn = async () => Promise.resolve('typescript-microservices');\ntest(\n  async (t) => {\n    t.is(await fn(), 'typescript-microservices');\n  });\n```", "```ts\nnpm install @pact-foundation/pact --save\n```", "```ts\nconst provider = new Pact({\n  consumer: \"ProfileService\",\n  provider: \"AnimalService\",\n  port: 8989,\n  log: path.resolve(process.cwd(), \"logs\", \"pact.log\"),\n  dir: path.resolve(process.cwd(), \"pacts\"),\n  logLevel: \"INFO\",\n  spec: 2\n});\n```", "```ts\nconst EXPECTED_BODY = [{..//JSON response here ...//\u2026..}]\n```", "```ts\ndescribe('and there is a valid listing', () => {\n     before((done) => {\n       // (2) Start the mock server\n       provider.setup()\n         // (3) add interactions to the Mock Server, \n                as many as required\n         .then(() => {\n           return provider.addInteraction({//define interactions here })\n                          .then(() => done())\n```", "```ts\n// write your test(s)\n     it('should give a list for all animals', () => {\n  // validate the interactions you've registered \n     and expected occurrance\n           // this will throw an error if it fails telling you \n              what went wrong\n});\n```", "```ts\nafter(() => {provider.finalize()})\n```", "```ts\nconst { Verifier } = require('pact');\nlet opts = { //pact verifier options};\nnew Verifier().verifyProvider(opts)\n              .then(function () {\n                 // verification complete.\n});\n```", "```ts\nexport class ProxyServer {\n  private proxy: any;\n  constructor() {\n    this.registerProxyServer();\n    this.proxy = httpProxy.createProxyServer({});\n    //we are passing zero server options, but we can pass lots of options such as buffer, target, agent, forward, ssl, etc. \n  }\n  registerProxyServer(): void {\n    http.createServer((req: IncomingMessage, res: ServerResponse) => {\n      console.log(\"===req.rawHeaders====\", req.rawHeaders);\n      this.proxy.web(req, res, {\n        target: 'http://127.0.0.1:3000/\n            hello-world'})\n        }).listen(4000)\n    }}\n  //after initializing make an object of this class\n  new ProxyServer();\n```", "```ts\nnpm install heapdump --save and npm install @types/heapdump --save-dev\n```", "```ts\nimport * as heapdump from 'heapdump';\nimport * as path from 'path';\nheapdump.writeSnapshot(path.join(__dirname, `${Date.now()}.heapsnapshot`),\n  (err, filename) => {\n    if (err) {\n      console.log(\"failed to create heap snapshot\");\n    } else {\n      console.log(\"dump written to\", filename);\n    }\n  }\n);\n```", "```ts\nprivate $alloc(){\n  Buffer.alloc(1e8, 'Z');\n}\n\nrouter.get('/check-mem',\n  (req, res, next) => {\n    let check = 100;\n    while (check--) {\n      this.$alloc()\n    }\n    res.status(200).send('I am Done');\n  }\n)\n```", "```ts\nDebugger listening on ws://127.0.0.1:9229/1309f374-d358-4d41-9878-8448b721ac5c\n```", "```ts\nnode inspect --port=xxxx <file>.js\n```", "```ts\nnpm install swagger-ui-express --save\n```", "```ts\nnpm install swagger-jsdoc --save\n```", "```ts\nexport class SwaggerSpec {\n  private static swaggerJSON: any;\n  constructor() { }\n  static setUpSwaggerJSDoc() {\n    let swaggerDefinition = {\n      info: {\n        title: 'Bottom up approach Product Catalog',\n        version: '1.0.0',\n        description: 'Demonstrating TypeScript microservice bottom up approach'\n      },\n      host: 'localhost:8081',\n      basePath: '/'\n    };\n    let options = {\n      swaggerDefinition: swaggerDefinition,\n      apis: ['./../service-layer/controllers/*.js']\n    }\n    this.swaggerJSON = swaggerJSDoc(options);\n  }\n\n  static getSwaggerJSON() {\n    return this.swaggerJSON;\n  }\n}\n```", "```ts\n@JsonController('/swagger')\nexport class SwaggerController {\n  constructor() { }\n  @Get('/swagger.json')\n  async swaggerDoc( @Req() req, @Res() res) {\n    return SwaggerSpec.getSwaggerJSON();\n  }\n}\n```", "```ts\n/**\n* @swagger\n* definitions:\n* Product:\n* properties:\n* name:\n* type:string\n* /products/products-listing:\n* get:\n* tags:\n* - Products\n* description: Gets all the products\n* produces:\n* - application/json\n* responses:\n* 200:\n* description: An array of products\n* schema:\n* $ref: '#/definitions/Product'\n*/\ngetProductsList() {\n //\n}\n```", "```ts\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));\napp.use('/api/v1', router);\n```", "```ts\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i  ..\\hello_world_swagger.yaml -l typescript-node -o ../typescript-nodejs\n```"]