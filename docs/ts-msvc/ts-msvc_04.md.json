["```ts\n{\"desc\":[{\"lang\":\"en\",\"val\":\"TypescriptMicroservicesByParthGhiya.\"}],\"name\":\"TypescriptMicroservices\",\"category\":\"Microservices\",\"brand\":\"PACKT\",\"shipping\":{\"dimensions\":{\"height\":\"13.0\",\"length\":\"1.8\",\"width\":\"26.8\"},\"weight\":\"1.75\"},\"attrs\":[{\"name\":\"microservices\",\"value\":\"exampleorientedbook\"},{\"name\":\"Author\",\"value\":\"ParthGhiya\"},{\"name\":\"language\",\"value\":\"Node.js\"},{\"name\":\"month\",\"value\":\"April\"}],\"feedbackEmail\":\"ghiya.parth@gmail.com\",\"ownerId\":\"parthghiya\",\"description\":\"thisistestdescription\"}\n```", "```ts\n\"deploy\": {\n    \"production\": {\n        \"key\": \"/path/to/key.pem\", // path to the private key to authenticate\n        \"user\": \"<server-user>\", // user used to authenticate, if its AWS than ec2-user\n        \"host\": \"<server-ip>\", // where to connect\n        \"ref\": \"origin/master\",\n        \"repo\": \"<git-repo-link>\",\n        \"path\": \"<place-where-to-check-out>\",\n        \"post-deploy\": \"pm2 startOrRestart ecosystem.config.js --env production\"\n    },\n}\n```", "```ts\npm2 deploy ecosystem.config.js production\n```", "```ts\n{ level: 'info', serviceId: 'hello world microservice' , \n  message: 'What time is the testing at?', \n  label: 'right meow!', timestamp: '2017-09-30T03:57:26.875Z' }\n```", "```ts\nimport * as config from 'config';\nconst port = config.get('express.port');\n```", "```ts\nimport * as health from 'express-ping';\nthis.app.use(health.ping());\n```", "```ts\napp.get('/ping', basicAuth('username', 'password'));\napp.use(health.ping('/ping'));\n```", "```ts\n{\n    \"express\": {\n        \"port\": 8081,\n        \"debug\": 5858,\n        \"host\": \"products-service\"\n    }\n }\n}\n```", "```ts\nexport class MongooseAccess {\n  static mongooseInstance: any;\n  static mongooseConnection: Mongoose.Connection;\n  constructor() {\n    MongooseAccess.connect();\n  }\n  static connect(): Mongoose.Connection {\n    if (this.mongooseInstance) {\n      return this.mongooseInstance;\n    }\n    let connectionString = config.get('mongo.urlClient').toString();\n    this.mongooseConnection = Mongoose.connection;\n    this.mongooseConnection.once('open', () => {\n      logger.info('Connect to an mongodb is opened.');\n    });\n    //other events\n  }\n```", "```ts\nsetUpControllers(){\n  const controllersPath = \n       path.resolve('dist', 'service-layer/controllers');\n  useContainer(Container);\n  useExpressServer(this.app,\n    {\n      controllers: [controllersPath + \"/*.js\"],\n      cors: true\n    }\n  );\n}\n```", "```ts\nbody: {//various product attributes}\n```", "```ts\nimport { ExpressMiddlewareInterface } from \"routing-controllers\";\nexport class MyMiddleware implements ExpressMiddlewareInterface {\n\n  use(request: any, response: any, next?: (err?: any) => any): any {\n    console.log(\"custom middleware gets called, here we can do anything.\");\n    next();\n  }\n}\n```", "```ts\n@JsonController('/products')\n@UseBefore(MyMiddleware)\nexport class ProductsController {\n  constructor() { }\n\n  @Put('/add-update-product')\n  async addUpdateProduct( @Body() request: IProductCreateRequest,\n    @Req() req: any, @Res() res: any): Promise<any> {\n    //API Logic for adding updating product\n  }\n}\n```", "```ts\nexport class ProductValidationSchema {\n  @Length(5, 50)\n  name: string;\n\n  @MinLength(2, { message: \"Title is too Short\" })\n\n  @MaxLength(500, { message: \"Title is too long\" })\n  description: string;\n\n  @Length(2, 15)\n  category: string;\n\n  @IsEmail()\n  feedbackEmail: string;\n  //add other attributes.\n}\n```", "```ts\nasync function validateProductRequest(productReqObj: any): Promise<any> {\n  let validProductData = new ProductValidationSchema(productReqObj);\n  let validationResults = await validate(validProductData);\n  let constraints = []\n  if (validationResults && validationResults.length > 0) {\n    forEach(validationResults,\n      (item) => {\n        constraints.push(pick(item, 'constraints', 'property'));\n      });\n  }\n  return constraints;\n}\n```", "```ts\nlet validationErrors: any[] = await validateProductRequest(request);\nlogger.info(\"total Validation Errors for product:-\", validationErrors.length);\nif (validationErrors.length > 0) {\n  throw {\n    thrown: true,\n    status: 401,\n    message: 'Incorrect Input',\n    data: validationErrors\n  }\n}\nlet result = await this.productDataAgent.createNewProduct(request);\n```", "```ts\n@Put('/add-update-product')\nasync addUpdateProduct(@Body() request: IProductCreateRequest,\n                       @Req() req: any, @Res() res: any): Promise < any > {\n  let validationErrors: any[] = await validateProductRequest(request);\n  logger.info(\"total Validation Errors for product:-\", validationErrors.length);\n  if(validationErrors.length> 0) {\n    throw {\n      thrown: true,\n      status: 401,\n      message: 'Incorrect Input',\n      data: validationErrors\n    }\n  }\n  let result = await this.productDataAgent.createNewProduct(request);\n  if(result.id) {\n    let newProduct = new ProductModel(result);\n    let newProductResult = Object.assign({ product: newProduct.getClientProductModel() });\n    return res.json(<IProductResponse>(newProductResult));\n  }else{\n    throw result;\n  }\n}\n```", "```ts\nasync createNewProduct(product: any): Promise < any > {\n  let newProduct = <IProductDocument>(product);\n  if(newProduct.id) {\n    let productObj = await ProductRepo.findOne({ productId: newProduct.id });\n    if (productObj && productObj.ownerId != newProduct.ownerId) {\n      return { thrown: true, success: false, status: 403, message: \"you are not the owner of Product\" }\n    }\n  }\n  let addUpdateProduct = await ProductRepo.create(newProduct);\n  console.log(addUpdateProduct);\n  if(addUpdateProduct.errors) {\n    return { thrown: true, success: false, status: 422, message: \"db is currently unable to process request\" }\n  }\n  return addUpdateProduct;\n}\n```", "```ts\n\"scripts\": {\n  \"start\": \"npm run clean && npm run build && node ./dist/index.js\",\n  \"clean\": \"node ./node_modules/rimraf/bin.js dist\",\n  \"build\": \"node ./node_modules/typescript/bin/tsc\"\n},\n```", "```ts\nnpm run start\n```", "```ts\n{\"desc\":[{\"lang\":\"en\",\"val\":\"TypescriptMicroservicesByParthGhiya.\"}],\"name\":\"TypescriptMicroservices\",\"category\":\"Microservices\",\"brand\":\"PACKT\",\"shipping\":{\"dimensions\":{\"height\":\"13.0\",\"length\":\"1.8\",\"width\":\"26.8\"},\"weight\":\"1.75\"},\"attrs\":[{\"name\":\"microservices\",\"value\":\"exampleorientedbook\"},{\"name\":\"Author\",\"value\":\"ParthGhiya\"},{\"name\":\"language\",\"value\":\"Node.js\"},{\"name\":\"month\",\"value\":\"April\"}],\"feedbackEmail\":\"ghiya.parth@gmail.com\",\"ownerId\":\"parthghiya\",\"description\":\"thisistestdescription\"}\n```", "```ts\nDockerfile\nDockerfile.dev\n./node_modules\n./dist\n```", "```ts\n#LATEST NODE Version -which node version u will use.\nFROM node:9.2.0\n# Create app directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n#install dependencies\nCOPY package.json /usr/src/app\nRUN npm install\n#bundle app src\nCOPY . /usr/src/app\n#3000 is the port which we want to expose for outside container world.\nEXPOSE 3000 \nCMD [ \"npm\" , \"start\" ]\n```", "```ts\nversion: \"2\"\nservices:\n  app:\n    container_name: app\n    build: ./ \n  restart: always\n    ports:\n      - \"3000:8081\"\n    links:\n      - mongo\n  mongo:\n    container_name: mongo\n    image: mongo\n    volumes:\n      - ./data:/data/db\n    ports:\n      - \"27017:27017\"\n```", "```ts\ndocker-compose up\n```", "```ts\n\"mongo\":{\"urlClient\": \"mongodb://127.0.0.1:27017/products\"}, to \n\"mongo\":{\"urlClient\": \"mongodb://mongo:27017/products\"}\n```"]