["```ts\nsudo dpkg -i <file>.deb\nsudo apt-get install -f # Install dependencies\n```", "```ts\nnpm install pm2 -g\n```", "```ts\nstart nginx\n```", "```ts\ntasklist /fi \"imagename eq nginx.exe\"\n```", "```ts\nps waux | grep nginx\n```", "```ts\nsudo docker run hello-world\n```", "```ts\ntsc --help \n```", "```ts\n{ \n   \"compilerOptions\":{ \n      \"target\":\"es6\",\n      \"moduleResolution\":\"node\",\n      \"module\":\"commonjs\",\n      \"declaration\":false,\n      \"noLib\":false,\n      \"emitDecoratorMetadata\":true,\n      \"experimentalDecorators\":true,\n      \"sourceMap\":true,\n      \"pretty\":true,\n      \"allowUnreachableCode\":true,\n      \"allowUnusedLabels\":true,\n      \"noImplicitAny\":true,\n      \"noImplicitReturns\":false,\n      \"noImplicitUseStrict\":false,\n      \"outDir\":\"dist/\",\n      \"baseUrl\":\"src/\",\n      \"listFiles\":false,\n      \"noEmitHelpers\":true\n   },\n   \"include\":[ \n      \"src/**/*\"\n   ],\n   \"exclude\":[ \n      \"node_modules\"\n   ],\n   \"compileOnSave\":false\n}\n```", "```ts\nnpm install --save-dev @types/express\n```", "```ts\nnpm install -g dts-gen\n```", "```ts\ndts-gen -m lusca\n```", "```ts\ndeclare module my-library\n```", "```ts\ndeclare function myFunction1(a: string): string; \ndeclare function myFunction2(a: number): number;\n```", "```ts\n\"compilerOptions\":{\n    \"sourceMap\": true  \n}\n```", "```ts\nprocess.nextTick(() => {\n  console.log('next Tick')\n})\n```", "```ts\nnpm install body-parser cookie-parser debug express typescript --save\n```", "```ts\nnpm install @types/debug @types/node @types/body-parser @types/express\n```", "```ts\nimport * as cluster from \"cluster\";\nimport { cpus } from \"os\";\nif (cluster.isMaster) {\n  /* create multiple workers here cpus().length will give me number of   cores available\n  */\n  cluster.on(\"online\", (worker) => { /*logic when worker becomes online*/ });\n  cluster.on(\"exit\", (worker) => { /*logic when worker becomes online*/ });\n} else {\n  //our app intialization logic \n}\n```", "```ts\nlet asyncReq1=await axios.get('https://jsonplaceholder.typicode.com/posts/1');\nconsole.log(asyncReq1.data);\nlet asyncReq2=await axios.get('https://jsonplaceholder.typicode.com/posts/1');\nconsole.log(asyncReq2.data);\n```", "```ts\nwait(timeout: number){\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve()\n    }, timeout)\n  })\n } \nasync requestWithRetry(url: string){\n  const MAX_RETRIES = 10;\n  for (let i = 0; i <= MAX_RETRIES; i++) {\n    try { return await axios.get(url); }\n    catch (err) {\n      const timeout = Math.pow(2, i);\n      console.log('Waiting', timeout, 'ms');\n      await this.wait(timeout);\n      console.log('Retrying', err.message, i);\n    }\n  }\n}\n```", "```ts\nasync function executeParallelAsyncTasks() {\n  const [valueA, valueB, valueC] = await\n    Promise.all([\n            await axios.get('https://jsonplaceholder.typicode.com/posts/1')\n            await axios.get('https://jsonplaceholder.typicode.com/posts/2'),\n            await axios.get('https://jsonplaceholder.typicode.com/posts/3')])\n            console.log(\"first response is \", valueA.data);\n            console.log(\" second response is \", valueB.data);\n            console.log(\"third response is \", valueC.data);\n      }\n```", "```ts\nnpm install @types/node --only=dev\n```", "```ts\nimport { Transform } from \"stream\";\nexport class FilterTransform extends Transform {\n  private filterProps: Array<String>;\n  constructor(filterprops: Array<String>, options?: any) {\n    if (!options) options = {};\n    options.objectMode = true;\n    super(options);\n    this.filterProps = filterprops;\n  }\n  _transform(chunk: any, encoding?: string, callback?: Function) {\n    let filteredKeys = Object.keys(chunk).filter((key) => {\n      return this.filterProps.indexOf(key) == -1;\n    });\n    let filteredObj = filteredKeys.reduce((accum: any, key: any) => {\n    accum[key] = chunk[key];\n      return accum;\n    }, {})\n    this.push(filteredObj);\n    callback();\n  }\n  _flush(cb: Function) {\n    console.log(\"this method is called at the end of all transformations\");\n  }\n}\n```", "```ts\nimport { FilterTransform } from \"./filter_stream\";\n//we create object of our custom transformation & pass phone and email as sensitive properties\nlet filter = new FilterTransform(['phone', 'email']);\n//create a readable stream that reads the transformed objects.\nfilter.on('readable', function () { console.log(\"Transformation:-\", filter.read()); });\n//create a writable stream that writes data to get it transformed\nfilter.write({ name: 'Parth', phone: 'xxxxx-xxxxx', email: 'ghiya.parth@gmail.com', id: 1 });\nfilter.write({ name: 'Dhruvil', phone: 'xxxxx-xxxxx', email: 'dhruvil.thaker@gmail.com', id: 2 });\nfilter.write({ name: 'Dhaval', phone: 'xxxxx-xxxxx', email: 'dhaval.marthak@gmail.com', id: 3 });\nfilter.write({ name: 'Shruti', phone: 'xxxxx-xxxxx', email: 'shruti.patel@gmail.com', id: 4 });\nfilter.end();\n```", "```ts\nnpm install body-parser config cookie-parser cors debug express reflect-metadata rimraf routing-controllers typescript winston --save\n```", "```ts\nnpm install @types/cors @types/config @types/debug @types/node @types/body-parser @types/express @types/winston --only=dev\n```", "```ts\nexport class ExpressConfig {\n  app: express.Express;\n  constructor() {\n    this.app = express();\n    this.app.use(cors());\n    this.app.use(bodyParser.json());\n    this.app.use(bodyParser.urlencoded({ extended: false }));\n    this.setUpControllers();\n  }\n  setUpControllers() {\n    const controllersPath = path.resolve('dist', 'controllers');\n    /*useExpressServer has lots of options, can be viewed at node_modules\\routing-controllers\\RoutingControllersOptions.d.ts*/\n    useExpressServer(this.app, {\n      controllers: [controllersPath + \"/*.js\"]\n    }\n    );\n  }\n}\n```", "```ts\nexport class Application {\n  server: any; express: ExpressConfig;\n  constructor() {\n  this.express = new ExpressConfig();\n    const port = 3000; this.server =\n      this.express.app.listen(port, () => {\n        logger.info(`Server Started! Express: http://localhost:${port}`);\n      });\n  }\n}\n```", "```ts\n@Controller('/hello-world')\nexport class HelloWorld {\n  constructor() { }\n  @Get('/')\n  async get(): Promise<any> {\n    return { \"msg\": \"This is first Typescript Microservice\" }\n  }\n}\n```", "```ts\n'use strict';\n/* reflect-metadata shim is required, requirement of routing-controllers module.*/\nimport 'reflect-metadata';\nimport { Application } from './config/Application';\nexport default new Application();\n```", "```ts\n\"clean\":\"node ./node_modules/rimraf/bin.js dist\",\n```", "```ts\n\"build\":\"node ./node_modules/typescript/bin/tsc\"\n```", "```ts\n\"start\": \"npm run clean && npm run build && node ./dist/index.js\".\n```", "```ts\n#LATEST NODE Version -which node version u will use.\nFROM node:9.2.0\n# Create app directory\nRUN mkdir -p /usr/src/app\nWORKDIR /usr/src/app\n#install depedencies\nCOPY package.json /usr/src/app\nRUN npm install\n#bundle app src\nCOPY . /usr/src/app\nCMD [ \"npm\" , \"start\" ]\n```", "```ts\nsudo docker build -t firstypescriptms .\n```", "```ts\nsudo docker run -p 8080:3000 -d firstypescriptms:latest\n```"]