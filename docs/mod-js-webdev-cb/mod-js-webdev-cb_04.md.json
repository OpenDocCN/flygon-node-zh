["```js\nnpm install express --save\n```", "```js\n// Source file: src/hello_world.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => res.send(\"Server alive, with Express!\"));\n```", "```js\napp.listen(8080, () =>\n    console.log(\n        \"Mini server (with Express) ready at http://localhost:8080/!\"\n    )\n);\n```", "```js\n> npm run build\n> node out/hello_world.js\nMini server (with Express) ready at http://localhost:8080/!\n```", "```js\n> curl 127.0.0.1:8080\nServer alive, with Express!\n\n```", "```js\n// Source file: src/middleware.js\n\n/* @flow */\n\"use strict\";\nconst express = require(\"express\");\nconst app = express();\n\napp.use((req, res, next) => {\n    console.log(\"Logger... \", new Date(), req.method, req.path);\n    next();\n});\n\napp.use((req, res, next) => {\n    if (req.method !== \"DELETE\") {\n        res.send(\"Server alive, with Express!\");\n    } else {\n        next(new Error(\"DELETEs are not accepted!\"));\n    }\n});\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () =>\n    console.log(\n        \"Mini server (with Express) ready at http://localhost:8080/!\"\n    )\n);\n```", "```js\napp.use((req, res, next) => {\n    console.log(\"Logger... \", new Date(), req.method, req.path);\n    next();\n});\n```", "```js\napp.use((req, res, next) => {\n if (req.method === \"DELETE\") {\n next(new Error(\"DELETEs are not accepted!\"));\n    } else {\n        res.send(\"Server alive, with Express!\");\n    }\n});\n```", "```js\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n```", "```js\n> npm run build\n> node out/middleware.js\n```", "```js\n> curl \"http://127.0.0.1:8080/some/path/to/get?value=9\" \nServer alive, with Express!\n> curl -X POST \"http://127.0.0.1:8080/a/post/to/a/path\" \nServer alive, with Express!\n> curl -X DELETE \"http://127.0.0.1:8080/try/to/delete?key=22\" \nINTERNAL SERVER ERROR\n```", "```js\nLogger... 2018-05-08T00:22:20.192Z GET /some/path/to/get\nLogger... 2018-05-08T00:22:44.282Z POST /a/post/to/a/path\nLogger... 2018-05-08T00:23:01.888Z DELETE /try/to/delete\nError.... DELETEs are not accepted!\n```", "```js\n// Source file: src/get_parameters.js\n\nconst bodyParser = require(\"body-parser\");\napp.use(bodyParser.urlencoded({ extended: false }));\n```", "```js\n// Source file: src/get_parameters.js\n\napp.use(\"*\", (req, res) => {\n    console.log(req.query, req.body);\n    res.send(\"Server alive, with Express!\");\n});\n```", "```js\n> curl \"http://127.0.0.1:8080/birthdays?day=22&month=9&year=1960\" \n> curl -X POST --data \"name=FK\" \"http://127.0.0.1:8080/persons\" \n```", "```js\n> node out/get_parameters.js\nMini server (with Express) ready at http://localhost:8080/!\n{ day: '22', month: '9', year: '1960' } {}\n{} { name: 'FK' }\n```", "```js\n// Source file: src/serve_statics.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst path = require(\"path\");\nconst app = express();\n\napp.get(\"/\", (req, res) => res.send(\"Server alive, with Express!\"));\n\napp.use(\n \"/static\",\n express.static(path.join(__dirname, \"../flags\"), {\n immutable: true,\n maxAge: \"30 days\"\n })\n);\n\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () =>\n    console.log(\n        \"Mini Express static server ready at http://localhost:8080/!\"\n    )\n);\n```", "```js\n// Source file: src/serve_statics_alt.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\nconst path = require(\"path\");\n\nconst flagsPath = path.join(__dirname, \"../flags\");\n\napp.get(\"/uruguay\", (req, res) =>\n res.sendFile(`${flagsPath}/america/south/UY.png`)\n);\n\napp.get(\"/england\", (req, res) =>\n res.sendFile(`${flagsPath}/europe/GB.png`)\n);\n\napp.get(\"/license\", (req, res) =>\n res.sendFile(`${flagsPath}/license.txt`)\n);\n\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () =>\n    console.log(\n        \"Mini Express static server ready at http://localhost:8080/!\"\n    )\n);\n```", "```js\n// Source file: src/routing.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\n\nconst myRouter = require(\"./router_home.js\");\napp.use(\"/\", myRouter);\n\n// *eslint-disable-next-line no-unused-vars*\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () =>\n    console.log(\"Routing ready at http://localhost:8080\")\n);\n```", "```js\n// Source file: src/router_home.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst routerHome = express.Router();\n\nconst routerCountries = require(\"./router_countries.js\");\nconst routerRegions = require(\"./router_regions.js\");\nconst routerCities = require(\"./router_cities.js\");\n\nrouterHome.use(\"/countries\", routerCountries);\nrouterHome.use(\"/regions\", routerRegions);\nrouterHome.use(\"/cities\", routerCities);\n\nmodule.exports = routerHome;\n```", "```js\n// Source file: src/router_countries.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst routerCountries = express.Router();\n\nrouterCountries.get(\"/\", (req, res) => {\n    res.send(`All countries... path=${req.originalUrl}`);\n});\n\nrouterCountries.get(\"/URUGUAY\", (req, res) => {\n res.send(`GET UY (Uruguay)... path=${req.originalUrl}`);\n});\n\nrouterCountries.get(\"/:country\", (req, res) => {\n    res.send(`GET Single country... ${req.params.country}`);\n});\n\nmodule.exports = routerCountries;\n```", "```js\n// Source file: src/router_regions.src\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst routerRegions = express.Router();\n\nrouterRegions.get(\"/\", (req, res) => {\n    res.send(`Region GET ALL... `);\n});\n\nrouterRegions.get(\"/:country\", (req, res) => {\n    res.send(`Region GET ALL FOR Country=${req.params.country}`);\n});\n\nrouterRegions.get(\"/:country/:id\", (req, res) => {\n    res.send(`Region GET ${req.params.country}/${req.params.id}`);\n});\n\nrouterRegions.delete(\"/:country/:id\", (req, res) => {\n    res.send(`Region DELETE... ${req.params.country}/${req.params.id}`);\n});\n\nrouterRegions.post(\"/\", (req, res) => {\n    res.send(`Region POST... `);\n});\n\nrouterRegions.put(\"/:country/:id\", (req, res) => {\n    res.send(`Region PUT... ${req.params.country}/${req.params.id}`);\n});\n\nmodule.exports = routerRegions;\n```", "```js\n> curl \"http://127.0.0.1:8080/regions\" \nRegion GET ALL..\n\n> curl \"http://127.0.0.1:8080/regions/uy\" \nRegion GET ALL FOR Country=uy\n\n> curl -X POST \"http://127.0.0.1:8080/regions\" \nRegion POST... \n\n> curl -X PUT \"http://127.0.0.1:8080/regions/uy/4\" \nRegion PUT... uy/4\n\n```", "```js\nopenssl req -newkey rsa:4096 -nodes -keyout modernjsbook.key -out modernjsbook.csr openssl x509 -signkey modernjsbook.key -in modernjsbook.csr -req -days 366 -out modernjsbook.crt\n\n```", "```js\n> dir\n-rw-r--r-- 1 fkereki users 1801 May 14 22:32 modernjsbook.crt\n-rw-r--r-- 1 fkereki users 1651 May 14 22:31 modernjsbook.csr\n-rw------- 1 fkereki users 3272 May 14 22:31 modernjsbook.key\n```", "```js\n// Source file: src/https_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\nconst https = require(\"https\");\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst keysPath = path.join(__dirname, \"../../certificates\");\n\nconst ca = fs.readFileSync(`${keysPath}/modernjsbook.csr`);\nconst cert = fs.readFileSync(`${keysPath}/modernjsbook.crt`);\nconst key = fs.readFileSync(`${keysPath}/modernjsbook.key`);\n\nhttps.createServer({ ca, cert, key }, app).listen(8443);\n```", "```js\n// Source file: src/http_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\nconst http = require(\"http\");\n\nhttp.createServer(app).listen(8080);\n\napp.use((req, res, next) => {\n    if (req.secure) {\n        next();\n    } else {\n res.redirect(\n `https://${req.headers.host.replace(/8080/, \"8443\")}${req.url}`\n );\n    }\n});\n```", "```js\nnpm install helmet --save\n```", "```js\nconst helmet = require(\"helmet\");\napp.use(helmet());\n```", "```js\nConnection: keep-alive\nContent-Length: 27\nContent-Type: text/html; charset=utf-8\nDate: Wed, 16 May 2018 01:57:10 GMT\nETag: W/\"1b-bpQ4Q2jOe/d4pXTjItXGP42U4V0\"\nX-Powered-By: Express\n```", "```js\nConnection: keep-alive\nContent-Length: 27\nContent-Type: text/html; charset=utf-8\nDate: Wed, 16 May 2018 01:58:50 GMT\nETag: W/\"1b-bpQ4Q2jOe/d4pXTjItXGP42U4V0\"\nStrict-Transport-Security: max-age=15552000; includeSubDomains\nX-Content-Type-Options: nosniff\nX-DNS-Prefetch-Control: off\nX-Download-Options: noopen\nX-Frame-Options: SAMEORIGIN\nX-XSS-Protection: 1; mode=block\n```", "```js\n npm install cors --save\n```", "```js\n// Source file: src/cors_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\n\nconst cors = require(\"cors\");\napp.use(cors());\n\napp.get(\"/\", (req, res) => res.send(\"Server alive, with CORS!\"));\n\napp.listen(8080, () =>\n    console.log(\"CORS server ready at http://localhost:8080/!\")\n);\n```", "```js\nrouterCities.get(\"/:id\", cors(), (req, res) => {\n    res.send(`GET City... ${req.params.id}`);\n});\n```", "```js\nrouterCities.options(\"/:id\", cors()); \nrouterCities.delete(\"/:id\", (req, res) => {\n    res.send(`DELETE City... ${req.params.id}`);\n});\n```", "```js\n// Source file: src/cors_request.html\n\n<html>\n<head></head>\n<body>\n    <script type=\"text/javascript\">\n        const req = new XMLHttpRequest();\n        req.open('GET', 'http://www.corsserver.com:8080/', true);\n        req.onreadystatechange = () => {\n            if (req.readyState === 4) {\n                if (req.status >= 200 && req.status < 400) {\n                    console.log(req.responseText)\n                } else {\n                    console.warn(\"Problems!\")\n                }\n            }\n        };\n        req.setRequestHeader(\"dummy\", \"value\");\n        req.send();\n    </script>\n</body>\n</html>\n```", "```js\nnpm install jsonwebtoken --save\n```", "```js\n// Source file: src/jwt_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst app = express();\nconst jwt = require(\"jsonwebtoken\");\nconst bodyParser = require(\"body-parser\");\n\nconst validateUser = require(\"./validate_user.js\");\n\nconst SECRET_JWT_KEY = \"modernJSbook\";\n\napp.use(bodyParser.urlencoded({ extended: false }));\n```", "```js\n// Source file: src/validate_user.js\n\n/* @flow */\n\"use strict\";\n\n/*\n *In real life, validateUser could check a database,*\n *look into an Active Directory, call another service,*\n *etc. -- but for this demo, let's keep it quite*\n *simple and only accept a single, hardcoded user.*\n*/\n\nconst validateUser = (\n    userName: string,\n    password: string,\n    callback: (?string, ?string) => void) => {\n    if (!userName || !password) {\n        callback(\"Missing user/password\", null);\n    } else if (userName === \"fkereki\" && password === \"modernjsbook\") {\n        callback(null, \"fkereki\"); // OK, send userName back\n    } else {\n        callback(\"Not valid user\", null);\n    }\n};\n\nmodule.exports = validateUser;\n```", "```js\n// Source file: src/jwt_server.js\n\napp.get(\"/public\", (req, res) => {\n    res.send(\"the /public endpoint needs no token!\");\n});\n\napp.post(\"/gettoken\", (req, res) => {\n    validateUser(req.body.user, req.body.password, (idErr, userid) => {\n if (idErr !== null) {\n res.status(401).send(idErr);\n } else {\n jwt.sign(\n { userid },\n SECRET_JWT_KEY,\n { algorithm: \"HS256\", expiresIn: \"1h\" },\n (err, token) => res.status(200).send(token)\n );\n }\n    });\n});\n```", "```js\n// Source file: src/jwt_server.js\n\napp.use((req, res, next) => {\n    // First check for the Authorization header\n    const authHeader = req.headers.authorization;\n if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n        return res.status(401).send(\"No token specified\");\n    }\n\n    // Now validate the token itself\n    const token = authHeader.split(\" \")[1];\n    jwt.verify(token, SECRET_JWT_KEY, (err, decoded) => {\n        if (err) {\n            // Token bad formed, or expired, or other problem\n            return res.status(403).send(\"Token expired or not valid\");\n        } else {\n            // Token OK; get the user id from it\n            req.userid = decoded.userid;\n            // Keep processing the request\n            next();\n        }\n    });\n});\n```", "```js\n// Source file: src/jwt_server.js app.get(\"/private\", (req, res) => {\n res.send(\"the /private endpoint needs JWT, but it was provided: OK!\");\n});\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () =>\n    console.log(\"Mini JWT server ready, at http://localhost:8080/!\")\n);\n```", "```js\n> curl \"http://localhost:8080/public\" \nthe /public endpoint needs no token!\n\n> curl \"http://localhost:8080/private\" \nNo token specified\n\n```", "```js\n> curl http://localhost:8080/gettoken -X POST -d \"user=fkereki&password=modernjsbook\" \neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI2ODM5MDEwLCJleHAiOjE1MjY4NDI2MTB9.cTwpL-x7kszn7C9OUXhHlkTGhb8Aa7oOGwNf_nhALCs\n\n```", "```js\n{\n  \"userid\": \"fkereki\",\n  \"iat\": 1526839010,\n  \"exp\": 1526842610\n}\n```", "```js\n> curl \"http://localhost:8080/private\" -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI2ODM5MDEwLCJleHAiOjE1MjY4NDI2MTB9.cTwpL-x7kszn7C9OUXhHlkTGhb8Aa7oOGwNf_nhALCs\"\nthe /private endpoint needs JWT, but it was provided: OK!\n\n```", "```js\n// Source file: src/restful_server.js\n\n/* @flow */\n\"use strict\";\nconst express = require(\"express\");\nconst app = express();\nconst bodyParser = require(\"body-parser\");\nconst dbConn = require(\"./restful_db.js\");\napp.get(\"/\", (req, res) => res.send(\"Secure server!\"));\n\n/*\n    Add here the logic for CORS\n*/\n\n/*\n    Add here the logic for providing a JWT at /gettoken\n    and the logic for validating a JWT, as shown earlier\n*/\n```", "```js\n// Source file: src/restful_server.js\n\nconst {\n    getRegion,\n    deleteRegion,\n    postRegion,\n    putRegion\n} = require(\"./restful_regions.js\");\n\napp.get(\"/regions\", (req, res) => getRegion(res, dbConn));\n\napp.get(\"/regions/:country\", (req, res) =>\n    getRegion(res, dbConn, req.params.country)\n);\n\napp.get(\"/regions/:country/:region\", (req, res) =>\n    getRegion(res, dbConn, req.params.country, req.params.region)\n);\n\napp.delete(\"/regions/:country/:region\", (req, res) =>\n    deleteRegion(res, dbConn, req.params.country, req.params.region)\n);\n\napp.post(\"/regions/:country\", (req, res) =>\n    postRegion(res, dbConn, req.params.country, req.body.name)\n);\n\napp.put(\"/regions/:country/:region\", (req, res) =>\n    putRegion(\n        res,\n        dbConn,\n        req.params.country,\n        req.params.region,\n        req.body.name\n    )\n);\n```", "```js\n// Source file: src/restful_server.js\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n    console.error(\"Error....\", err.message);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\n/*\n   Add here the logic for HTTPS, finishing with: \n\n    https.createServer({ ca, cert, key }, app);\n*/\n\napp.listen(8080, () =>\n    console.log(\"Routing ready at http://localhost:8080\")\n);\n```", "```js\n// Source file: src/restful_regions.js\n\nconst getRegion = async (\n    res: any,\n    dbConn: any,\n    country: ?string,\n    region: ?string\n) => {\n    try {\n        res.set(\"Connection\", \"close\");\n\n        let sqlQuery = \"\";\n        let regions;\n        if (country == null) {\n            sqlQuery = `\n                SELECT rr.* \n                FROM regions rr \n                JOIN countries cc \n                ON cc.countryCode=rr.countryCode\n                ORDER BY cc.countryCode, rr.regionCode\n            `;\n            regions = await dbConn.query(sqlQuery);\n        } else if (region == null) {\n            sqlQuery = `\n                SELECT 1\n                FROM countries\n                WHERE countryCode=?\n            `;\n\n            const countries = await dbConn.query(sqlQuery, [country]);\n            if (countries.length === 0) {\n                res.status(404).send(\"Country not found\");\n                return;\n            }\n\n            sqlQuery = `\n                SELECT rr.* \n                FROM regions rr \n                JOIN countries cc \n                ON cc.countryCode=rr.countryCode\n                WHERE rr.countryCode=?\n                ORDER BY rr.regionCode\n            `;\n            regions = await dbConn.query(sqlQuery, [country]);\n        } else {\n            sqlQuery = `\n                SELECT rr.* \n                FROM regions rr \n                JOIN countries cc \n                ON cc.countryCode=rr.countryCode\n                WHERE rr.countryCode=? \n                AND rr.regionCode=?\n            `;\n            regions = await dbConn.query(sqlQuery, [country, region]);\n        }\n\n        if (regions.length > 0 || region === null) {\n            res.status(200)\n                .set(\"Content-Type\", \"application/json\")\n                .send(JSON.stringify(regions));\n        } else {\n            res.status(404).send(\"Not found\");\n        }\n    } catch (e) {\n        res.status(500).send(\"Server error\");\n    }\n};\n```", "```js\n> curl localhost:8080/regions/\n[{\"countryCode\":\"AD\", \"regionCode\":\"2\", \"regionName\":\"Canillo\"}, {\"countryCode\":\"AD\", \"regionCode\":\"3\", \"regionName\":\"Encamp\"}, {\"countryCode\":\"AD\", \"regionCode\":\"4\", \"regionName\":\"La Massana\"},\n.\n.\n.\n{\"countryCode\":\"ZW\", \"regionCode\":\"7\", \"regionName\":\"Matabeleland South\"}, {\"countryCode\":\"ZW\", \"regionCode\":\"8\", \"regionName\":\"Masvingo\"}, {\"countryCode\":\"ZW\", \"regionCode\":\"9\", \"regionName\":\"Bulawayo\"}]\n```", "```js\n> curl localhost:8080/regions/uy/10 \n[{\"countryCode\":\"UY\",\"regionCode\":\"10\",\"regionName\":\"Montevideo\"}]\n\n```", "```js\n// Source file: src/restful_regions.js\n\nconst deleteRegion = async (\n    res: any,\n    dbConn: any,\n    country: string,\n    region: string\n) => {\n    try {\n        res.set(\"Connection\", \"close\");\n\n        const sqlCities = `\n            SELECT 1 FROM cities \n            WHERE countryCode=? \n            AND regionCode=? \n            LIMIT 1 \n        `;\n        const cities = await dbConn.query(sqlCities, [country, region]);\n        if (cities.length > 0) {\n            res.status(405).send(\"Cannot delete a region with cities\");\n            return;\n        }\n\n        const deleteRegion = `\n                DELETE FROM regions \n                WHERE countryCode=? \n                AND regionCode=?\n            `;\n\n        const result = await dbConn.query(deleteRegion, [country, region]);\n        if (result.info.affectedRows > 0) {\n            res.status(204).send();\n        } else {\n            res.status(404).send(\"Region not found\");\n        }\n    } catch (e) {\n        res.status(500).send(\"Server error\");\n    }\n};\n```", "```js\n> curl localhost:8080/regions/uy/23 -X DELETE --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8080 (#0) \n> DELETE /regions/uy/23 HTTP/1.1 \n*.* .\n.\n< HTTP/1.1 204 No Content\n\n> curl localhost:8080/regions/uy/10 -X DELETE --verbose\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> DELETE /regions/uy/10 HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 405 Method Not Allowed\n*.* .\n.\nCannot delete a region with cities\n\n> curl localhost:8080/regions/uy/99 --verbose\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n> GET /regions/uy/99 HTTP/1.1\n> Host: localhost:8080\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 404 Not Found\n*.* .\n.\nNot found\n\n```", "```js\n// Source file: src/restful_regions.js\n\nconst putRegion = async (\n    res: any,\n    dbConn: any,\n    country: string,\n    region: string,\n    name: string\n) => {\n    res.set(\"Connection\", \"close\");\n\n    if (!name) {\n        res.status(400).send(\"Missing name\");\n        return;\n    }\n\n    try {\n        const sqlUpdateRegion = `\n            UPDATE regions\n            SET regionName=?\n            WHERE countryCode=? \n            AND regionCode=? \n        `;\n\n        const result = await dbConn.query(sqlUpdateRegion, [\n            name,\n            country,\n            region\n        ]);\n\n        if (result.info.affectedRows > 0) {\n            res.status(204).send();\n        } else {\n            res.status(409).send(\"Region not updated\");\n        }\n    } catch (e) {\n        res.status(500).send(\"Server error\");\n    }\n};\n```", "```js\n> curl localhost:8080/regions/uy/16 -X PUT -d \"name=San Jose\" --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8080 (#0) \n> PUT /regions/uy/16 HTTP/1.1 \n.\n.\n.\n< HTTP/1.1 204 No Content\n```", "```js\n> curl localhost:8080/regions/uy/xyzzy -X PUT -d \"name=Colossal Cave\" --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8080 (#0) \n> PUT /regions/uy/xyzzy HTTP/1.1 \n*.* .\n.\n< HTTP/1.1 409 Conflict \n*.* .\n.\nRegion not updated\n\n> curl localhost:8080/regions/uy/10 -X PUT --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8080 (#0) \n> PUT /regions/uy/10 HTTP/1.1 \n*.* .\n.\n< HTTP/1.1 400 Bad Request \n*.* .\n.\nMissing name\n\n```", "```js\n// Source file: src/restful_regions.js\n\nconst postRegion = async (\n    res: any,\n    dbConn: any,\n    country: string,\n    name: string\n) => {\n    res.set(\"Connection\", \"close\");\n\n    if (!name) {\n        res.status(400).send(\"Missing name\");\n        return;\n    }\n\n    try {\n        const sqlCountry = `\n            SELECT 1 \n            FROM countries\n            WHERE countryCode=? \n        `;\n        const countries = await dbConn.query(sqlCountry, [country]);\n        if (countries.length === 0) {\n            res.status(403).send(\"Country must exist\");\n            return;\n        }\n\n        const sqlGetId = `\n            SELECT MAX(CAST(regionCode AS INTEGER)) AS maxr \n            FROM regions\n            WHERE countryCode=? \n        `;\n        const regions = await dbConn.query(sqlGetId, [country]);\n        const newId =\n            regions.length === 0 ? 1 : 1 + Number(regions[0].maxr);\n\n        const sqlAddRegion = `\n            INSERT INTO regions SET \n            countryCode=?,\n            regionCode=?,\n            regionName=?\n        `;\n\n        const result = await dbConn.query(sqlAddRegion, [\n            country,\n            newId,\n            name\n        ]);\n        if (result.info.affectedRows > 0) {\n            res.status(201)\n                .header(\"Location\", `/regions/${country}/${newId}`)\n                .send(\"Region created\");\n        } else {\n            res.status(409).send(\"Region not created\");\n        }\n    } catch (e) {\n        res.status(500).send(\"Server error\");\n    }\n};\n```", "```js\n> curl localhost:8080/regions/ar -X POST -d \"name=NEW REGION\" --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8080 (#0) \n> POST /regions/ar HTTP/1.1 \n*.\n.\n.*\n< HTTP/1.1 201 Created \n< X-Powered-By: Express \n< Location: /regions/ar/25 \n.\n.\n.\nRegion created\n\n> curl localhost:8080/regions/ar/25 \n[{\"countryCode\":\"ar\",\"regionCode\":\"25\",\"regionName\":\"NEW REGION\"}]\n```", "```js\n{\n    leftComparison: hero(episode: EMPIRE) {\n        ...comparisonFields\n    }\n    rightComparison: hero(episode: JEDI) {\n        ...comparisonFields\n    }\n}\n\nfragment comparisonFields on Character {\n    name\n    appearsIn\n    friends {\n        name\n    }\n}\n```", "```js\n{\n    data: {\n        leftComparison: {\n            name: \"Luke Skywalker\",\n            appearsIn: [\"NEWHOPE\", \"EMPIRE\", \"JEDI\"],\n            friends: [\n                {\n                    name: \"Han Solo\"\n                },\n                {\n                    name: \"Leia Organa\"\n                },\n                {\n                    name: \"C-3PO\"\n                },\n                {\n                    name: \"R2-D2\"\n                }\n            ]\n        },\n        rightComparison: {\n            name: \"R2-D2\",\n            appearsIn: [\"NEWHOPE\", \"EMPIRE\", \"JEDI\"],\n            friends: [\n                {\n                    name: \"Luke Skywalker\"\n                },\n                {\n                    name: \"Han Solo\"\n                },\n                {\n                    name: \"Leia Organa\"\n                }\n            ]\n        }\n    }\n}\n```"]