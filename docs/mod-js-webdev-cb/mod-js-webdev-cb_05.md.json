["```js\n npm install winston --save\n```", "```js\n// Source file: winston_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst winston = require(\"winston\");\n\nconst app = express();\n\nconst logger = winston.createLogger({\n    transports: [\n        new winston.transports.Console({\n            level: \"info\",\n            format: winston.format.combine(\n                winston.format.colorize({ all: true }),\n                winston.format.label({ label: \"serv\" }),\n                winston.format.timestamp(),\n                winston.format.printf(\n                    msg =>\n                       `${msg.timestamp} [${msg.label}] ${msg.level} ${\n                            msg.message\n                        }`\n                )\n            )\n        }),\n        new winston.transports.File({\n            filename: \"serv_error.txt.log\",\n            level: \"warn\",\n            format: winston.format.combine(\n                winston.format.timestamp(),\n                winston.format.printf(\n                    msg =>\n                        `${msg.timestamp} [serv] ${msg.level} ${\n                            msg.message\n                        }`\n                )\n            )\n        }),\n        new winston.transports.File({\n            filename: \"serv_error.json.log\",\n            level: \"warn\"\n        })\n    ]\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\napp.use((req, res, next) => {\n    logger.info(`${req.method} request for ${req.originalUrl}`);\n    next();\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\napp.get(\"/\", (req, res) => {\n    logger.info(\"Doing some processing...\");\n logger.debug(\"Some fake step 1; starting\");\n logger.debug(\"Some fake step 2; working\");\n logger.debug(\"Some fake step 3; finished!\");\n    res.send(\"Winston server!\");\n});\n\napp.get(\"/xyzzy\", (req, res) => {\n    logger.info(\"Adventurer says 'XYZZY'\");\n    res.say_xyzzy(); // this will fail\n    res.send(\"Nothing happens.\");\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\napp.use((req, res) => {\n    logger.warn(`UNKNOWN ROUTE ${req.originalUrl}`);\n    res.status(404).send(\"NOT FOUND\");\n});\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n    logger.error(`GENERAL ERROR ${err.message}\\n${err.stack}`);\n    res.status(500).send(\"INTERNAL SERVER ERROR\");\n});\n\napp.listen(8080, () => {\n    logger.info(\"Ready at http://localhost:8080\");\n});\n```", "```js\n> curl localhost:8080/ \nWinston server!\n> curl localhost:8080/ \nWinston server!\n> curl localhost:8080/invented \nNOT FOUND\n> curl localhost:8080/ \nWinston server!\n> curl localhost:8080/xyzzy \nINTERNAL SERVER ERROR\n> curl localhost:8080/ \nWinston server!\n> curl localhost:8080/ \nWinston server!\n```", "```js\n2018-05-28T00:29:06.651Z [serv] warn UNKNOWN ROUTE /invented\n2018-05-28T00:29:11.214Z [serv] error GENERAL ERROR res.say_xyzzy is not a function\nTypeError: res.say_xyzzy is not a function\n at app.get (/home/fkereki/MODERNJS/chapter05/out/winston_server.js:60:9)\n at Layer.handle [as handle_request] (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/layer.js:95:5)\n at next (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/route.js:137:13)\n at Route.dispatch (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/route.js:112:3)\n at Layer.handle [as handle_request] (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/layer.js:95:5)\n at /home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/index.js:281:22\n at Function.process_params (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/index.js:335:12)\n at next (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/index.js:275:10)\n at app.use (/home/fkereki/MODERNJS/chapter05/out/winston_server.js:47:5)\n at Layer.handle [as handle_request] (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/layer.js:95:5)\n```", "```js\n{\"message\":\"UNKNOWN ROUTE /invented\",\"level\":\"warn\"}\n{\"message\":\"GENERAL ERROR res.say_xyzzy is not a function\\nTypeError: res.say_xyzzy is not a function\\n at app.get (/home/fkereki/MODERNJS/chapter05/out/winston_server.js:60:9)\\n at Layer.handle [as handle_request] *...part of the text snipped out...*\n(/home/fkereki/MODERNJS/chapter05/out/winston_server.js:47:5)\\n at Layer.handle [as handle_request] (/home/fkereki/MODERNJS/chapter05/node_modules/express/lib/router/layer.js:95:5)\",\"level\":\"error\"}\n```", "```js\napp.use((req, res, next) => {\n    logger.info(`${req.method} request for ${req.originalUrl}`);\n    next();\n});\n```", "```js\n npm install morgan --save\n```", "```js\n// Source file: src/morgan_server.js\n\n/* @flow */\n\"use strict\";\n\nconst express = require(\"express\");\nconst winston = require(\"winston\");\nconst morgan = require(\"morgan\");\nconst fs = require(\"fs\");\n\nconst app = express();\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nconst morganStream = fs.createWriteStream(\"serv_http_errors.log\", {\n    flags: \"a\"\n});\n\napp.use(\n    morgan(\n        (tokens, req, res) =>\n `${new Date().toISOString()} [http] ` +\n `${tokens.method(req, res)} ${tokens.url(req, res)}`,\n        {\n            immediate: true,\n            stream: morganStream\n        }\n    )\n);\n\napp.use(\n    morgan(\n        `:date[iso] [http] ` +\n `:method :url (:status) :res[content-length] - :response-time ms`,\n        {\n            skip: (req, res) => res.statusCode < 400\n        }\n    )\n);\n\n// *continues...*\n```", "```js\n.\n.\n.\n2018-05-28T19:27:19.232Z [http] GET /invented (404) 9 - 0.886 ms\n.\n.\n.\n2018-05-28T19:27:23.771Z [http] GET /xyzzy (500) 21 - 0.925 ms\n.\n.\n.\n```", "```js\n2018-05-28T19:27:16.871Z [http] GET /\n2018-05-28T19:27:17.827Z [http] GET /\n2018-05-28T19:27:19.231Z [http] GET /invented\n2018-05-28T19:27:20.677Z [http] GET /\n2018-05-28T19:27:23.770Z [http] GET /xyzzy\n2018-05-28T19:27:25.296Z [http] GET /\n```", "```js\napp.use(\n    morgan(\n        `:date[iso] [http] ` +\n            `:method :url (:status) :res[content-length] - :response-time ms`,\n        {\n            skip: (req, res) => res.statusCode < 400,\n            stream: morganStream\n        }\n    )\n);\n```", "```js\n2018-05-28T19:36:54.968Z [http] GET /\n2018-05-28T19:36:55.453Z [http] GET /\n2018-05-28T19:36:56.011Z [http] GET /\n2018-05-28T19:36:58.149Z [http] GET /invented\n2018-05-28T19:36:58.151Z [http] GET /invented (404) 9 - 1.230 ms\n2018-05-28T19:36:59.528Z [http] GET /\n2018-05-28T19:37:00.033Z [http] GET /\n2018-05-28T19:37:01.886Z [http] GET /xyzzy\n2018-05-28T19:37:01.888Z [http] GET /xyzzy (500) 21 - 1.115 ms\n2018-05-28T19:37:03.060Z [http] GET /\n2018-05-28T19:37:03.445Z [http] GET /\n2018-05-28T19:37:03.903Z [http] GET /\n```", "```js\n// Source file: src/morgan_in_winston_server.js\n\napp.use(\n    morgan(\n        `:method :url (:status) :res[content-length] - :response-time ms`,\n        {\n stream: {\n write: message => logger.info(message.trim())\n }\n        }\n    )\n);\n```", "```js\n2018-05-28T20:03:59.931Z [serv] info Ready at http://localhost:8080\n2018-05-28T20:04:02.140Z [serv] info Doing some processing...\n2018-05-28T20:04:02.146Z [serv] info GET / (200) 15 - 3.642 ms\n2018-05-28T20:04:02.727Z [serv] info Doing some processing...\n2018-05-28T20:04:02.728Z [serv] info GET / (200) 15 - 0.581 ms\n2018-05-28T20:04:04.479Z [serv] warn UNKNOWN ROUTE /invented\n2018-05-28T20:04:04.480Z [serv] info GET /invented (404) 9 - 1.170 ms\n2018-05-28T20:04:05.842Z [serv] info Doing some processing...\n2018-05-28T20:04:05.843Z [serv] info GET / (200) 15 - 0.490 ms\n2018-05-28T20:04:07.640Z [serv] info Adventurer says 'XYZZY'\n```", "```js\nconst DB_HOST = \"127.0.0.1\";\nconst DB_USER = \"fkereki\";\nconst DB_PASS = \"modernJS!!\";\nconst DB_SCHEMA = \"world\";\n```", "```js\nconst SECRET_JWT_KEY = \"modernJSbook\";\n```", "```js\nconst logger = winston.createLogger({\n    transports: [\n        new winston.transports.Console({\n            level: \"info\",\n            format: winston.format.combine(\n                winston.format.colorize({ all: true }),\n                .\n                .\n                .\n```", "```js\nconst morganStream = fs.createWriteStream(\"serv_http_errors.log\", {\n    flags: \"a\"\n});\n\napp.use(\n    morgan(\n        `:date[iso] [http] ` +\n            `:method :url (:status) :res[content-length] - :response-time ms`,\n        {\n            skip: (req, res) => res.statusCode < 400\n```", "```js\n> node show_env.js\n{ GS_LIB: '/home/fkereki/.fonts',\n KDE_FULL_SESSION: 'true',\n PILOTPORT: 'usb:',\n HOSTTYPE: 'x86_64',\n VSCODE_NLS_CONFIG: '{\"locale\":\"en-us\",\"availableLanguages\":{}}',\n XAUTHLOCALHOSTNAME: 'linux',\n XKEYSYMDB: '/usr/X11R6/lib/X11/XKeysymDB',\n LANG: 'en_US.UTF-8',\n WINDOWMANAGER: '/usr/bin/startkde',\n LESS: '-M -I -R',\n DISPLAY: ':0',\n JAVA_ROOT: '/usr/lib64/jvm/jre',\n HOSTNAME: 'linux',\n .\n .\n .\n . *many, many lines snipped out*\n .\n .\n .\n PATH: '/home/fkereki/bin:/usr/local/bin:/usr/bin:/bin:/usr/lib/mit/sbin',\n JAVA_BINDIR: '/usr/lib64/jvm/jre/bin',\n KDE_SESSION_UID: '1000',\n KDE_SESSION_VERSION: '5',\n SDL_AUDIODRIVER: 'pulse',\n HISTSIZE: '1000',\n SESSION_MANAGER: 'local/linux:@/tmp/.ICE-unix/2202,unix/linux:/tmp/.ICE-unix/2202',\n CPU: 'x86_64',\n CVS_RSH: 'ssh',\n LESSOPEN: 'lessopen.sh %s',\n GTK_IM_MODULE: 'ibus',\n NODE_VERSION: '9' }\n```", "```js\n> export NODE_ENV=production \n> echo $NODE_ENV \nProduction\n\n```", "```js\n// Source file: show_env.js\n\nconst dev = process.env.NODE_ENV || \"development\";\nconst isDev = dev === \"development\";\n```", "```js\nlevel attribute gets its value, depending on the environment:\n```", "```js\nconst logger = winston.createLogger({\n    transports: [\n        new winston.transports.Console({\n            level: isDev ? \"info\" : \"warn\",\n            format: winston.format.combine(\n                winston.format.colorize({ all: true }),\n                .\n                .\n                .\n```", "```js\nlet loggingFile;\nif (isDev) { \n    loggingFile = \"serv_http_errors.log\";\n} else {\n    loggingFile = \"/var/log/http_server.txt\";\n}\n\nconst morganStream = fs.createWriteStream(loggingFile, {\n    flags: \"a\"\n});\n```", "```js\nconst DB_HOST = process.env.DB_HOST;\nconst DB_USER = process.env.DB_USER;\nconst DB_PASS = process.env.DB_PASS;\nconst DB_SCHEMA = process.env.DB_SCHEMA;\nconst SECRET_JWT_KEY = process.env.SECRET_JWT_KEY;\n```", "```js\nconst logger = winston.createLogger({\n    transports: [\n        new winston.transports.Console({\n            level: process.env.WINSTON_LEVEL,\n            format: winston.format.combine(\n                winston.format.colorize({ all: true }),\n                .\n                .\n                .\n```", "```js\nDB_HOST=127.0.0.1\nDB_USER=fkereki\nDB_PASS=modernJS!!\nDB_SCHEMA=world\nSECRET_JWT_KEY=modernJSbook\n```", "```js\nif (isDev) {\n    dotenv.load();\n}\n```", "```js\nconst addR = (x: number, y: number): number => roundToCents(x + y);\n\nconst subR = (x: number, y: number): number => addR(x, changeSign(y));\n\nconst multR = (x: number, y: number): number => roundToCents(x * y);\n\nconst divR = (x: number, y: number): number => {\n    if (y === 0) {\n        throw new Error(\"Divisor must be nonzero\");\n    } else {\n        return roundToCents(x / y);\n    }\n};\n```", "```js\n// Source file: src/roundmath.test.js\n\n/* @flow */\n\"use strict\";\n\nconst rm = require(\"./roundmath\");\n\ndescribe(\"addR\", () => {\n    it(\"should add first and round later\", () => {\n        expect(rm.addR(1.505, 2.505)).toBe(4.01);\n    });\n\n    it(\"should handle negatives\", () => {\n        expect(rm.addR(3.15, -2.149)).toBe(1.0);\n    });\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\ndescribe(\"divR\", () => {\n    it(\"should divide first, then round\", () => {\n        expect(rm.divR(22.96, 0.001)).toBe(22960);\n    });\n\n    it(\"should not divide by zero\", () =>\n        expect(() => rm.divR(22, 0)).toThrow());\n});\n```", "```js\nconst validateUser = (\n    userName: string,\n    password: string,\n    callback: (?string, ?string) => void) => {\n    if (!userName || !password) {\n        callback(\"Missing user/password\", null);\n    } else if (userName === \"fkereki\" && password === \"modernjsbook\") {\n        callback(null, \"fkereki\"); // OK, send userName back\n    } else {\n        callback(\"Not valid user\", null);\n }\n};\n```", "```js\n// Source file: validate_user.test.js\n\n/* @flow */\n\"use strict\";\n\nconst validateUser = require(\"./validate_user\");\n\ndescribe(\"validateUser\", () => {\n    let cb;\n    beforeEach(() => {\n        cb = jest.fn();\n    });\n\n    it(\"should reject a call with empty user\", () => {\n        validateUser(\"\", \"somepass\", cb);\n        expect(cb).toHaveBeenCalled();\n        expect(cb).toHaveBeenCalledWith(\"Missing user/password\", null);\n    });\n\n    it(\"should reject a wrong password\", () => {\n        validateUser(\"fkereki\", \"wrongpassword\", cb);\n        expect(cb).toHaveBeenCalledWith(\"Not valid user\", null);\n    });\n\n    it(\"should accept a correct password\", () => {\n        validateUser(\"fkereki\", \"modernjsbook\", cb);\n        expect(cb).toHaveBeenCalledWith(null, \"fkereki\");\n    });\n});\n```", "```js\nconst deleteRegion = async (\n    res: any,\n    dbConn: any,\n    country: string,\n    region: string\n) => {\n    try {\n        const sqlCities = `\n            SELECT 1 FROM cities \n            WHERE countryCode=\"${country}\" \n            AND regionCode=\"${region}\" \n            LIMIT 1 \n        `;\n\n        const cities = await dbConn.query(sqlCities);\n\n        if (cities.length > 0) {\n            res.status(405).send(\"Cannot delete a region with cities\");\n        } else {\n            const deleteRegion = `\n                DELETE FROM regions \n                WHERE countryCode=\"${country}\" \n                AND regionCode=\"${region}\"\n            `;\n\n            const result = await dbConn.query(deleteRegion);\n\n            if (result.info.affectedRows > 0) {\n                res.status(204).send();\n            } else {\n                res.status(404).send(\"Region not found\");\n            }\n        }\n    } catch (e) {\n        res.status(500).send(\"Server error\");\n    }\n};\n```", "```js\n// Source file: src/restful_regions.test.js\n\n/* @flow */\n\"use strict\";\n\nconst { deleteRegion } = require(\"./restful_regions\");\nconst mockRes = require(\"node-mocks-http\");\n\ndescribe(\"deleteRegion\", () => {\n    let mDb;\n    let mRes;\n    beforeEach(() => {\n        mDb = { query: jest.fn() };\n        mRes = new mockRes.createResponse();\n    });\n\n    it(\"should not delete a region with cities\", async () => {\n        mDb.query.mockReturnValueOnce(Promise.resolve([1]));\n        await deleteRegion(mRes, mDb, \"FK\", \"22\");\n        expect(mRes.statusCode).toBe(405);\n    });\n\n// *continues*...\n```", "```js\n// ...*continued*\n\n    it(\"should delete a region without cities\", async () => {\n        mDb.query\n .mockReturnValueOnce(Promise.resolve([]))\n .mockReturnValueOnce(\n Promise.resolve({\n info: { affectedRows: 1 }\n })\n );\n        await deleteRegion(mRes, mDb, \"ST\", \"12\");\n        expect(mRes.statusCode).toBe(204);\n    });\n\n    it(\"should produce a 404 for non-existing region\", async () => {\n        mDb.query\n            .mockReturnValueOnce(Promise.resolve([]))\n            .mockReturnValueOnce(\n                Promise.resolve({\n                    info: { affectedRows: 0 }\n                })\n            );\n        await deleteRegion(mRes, mDb, \"IP\", \"24\");\n        expect(mRes.statusCode).toBe(404);\n    });\n});\n```", "```js\n \"test\": \"jest out/\"\n```", "```js\n \"test\": \"jest out/ --coverage --no-cache\"\n```", "```js\n> curl localhost:8443/\nReady\n```", "```js\n> curl localhost:8443/regions/uy/10 \nNo token specified\n\n```", "```js\n> curl localhost:8443/regions/uy/10 --verbose\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 8443 (#0)\n> GET /regions/uy/10 HTTP/1.1\n> Host: localhost:8443\n> User-Agent: curl/7.59.0\n> Accept: */*\n> \n< HTTP/1.1 401 Unauthorized\n< X-Powered-By: Express\n< Access-Control-Allow-Origin: *\n< Connection: close\n< Content-Type: text/html; charset=utf-8\n< Content-Length: 18\n< ETag: W/\"12-s2+Ia/H9PDrgc59/6Z0mcWLfxuw\"\n< Date: Sun, 03 Jun 2018 21:00:40 GMT\n< \n* Closing connection 0\nNo token specified\n```", "```js\n> curl localhost:8443/gettoken -d \"user=fkereki\" -d \"password=modernjsbook\" -o token.txt \n % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current \n Dload  Upload   Total   Spent    Left  Speed \n100   187  100   153  100    34   149k  34000 --:--:-- --:--:-- --:--:--  182k \n\n> cat token.txt \neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI4MDU5Nzc0LCJleHAiOjE1MjgwNjMzNzR9.6tioV798HHqriOFkhUpf8xJc8wq5TY5g-jN-XhgwaTs\n\n```", "```js\n> curl localhost:8443/regions/uy/10 -H \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI4MDU5Nzc0LCJleHAiOjE1MjgwNjMzNzR9.6tioV798HHqriOFkhUpf8xJc8wq5TY5g-jN-XhgwaTs\" \n[{\"countryCode\":\"UY\",\"regionCode\":\"10\",\"regionName\":\"Montevideo\"}]\n\n> curl localhost:8443/regions/uy/10 -H \"Authorization: Bearer `cat token.txt`\" \n[{\"countryCode\":\"UY\",\"regionCode\":\"10\",\"regionName\":\"Montevideo\"}]\n\n```", "```js\n> curl localhost:8443/regions/uy/10 -H \"Authorization: Bearer `cat token.txt`\" -X PUT -d \"name=MVD\" --verbose \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8443 (#0) \n> PUT /regions/uy/10 HTTP/1.1 \n> Host: localhost:8443 \n> User-Agent: curl/7.59.0 \n> Accept: */* \n> Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI4MDU5Nzc0LCJleHAiOjE1MjgwNjMzNzR9.6tioV798HHqriOFkhUpf8xJc8wq5TY5g-jN-XhgwaTs \n> Content-Length: 8 \n> Content-Type: application/x-www-form-urlencoded \n> \n* upload completely sent off: 8 out of 8 bytes \n< HTTP/1.1 204 No Content \n< X-Powered-By: Express \n< Access-Control-Allow-Origin: * \n< Connection: close \n< Date: Sun, 03 Jun 2018 21:09:01 GMT \n< \n* Closing connection 0\n\n> curl localhost:8443/regions/uy/10 -H \"Authorization: Bearer `cat token.txt`\"\n[{\"countryCode\":\"UY\",\"regionCode\":\"10\",\"regionName\":\"MVD\"}]\n\n```", "```js\n> curl localhost:8443/regions/uy/20 -H \"Authorization: Bearer `cat token.txt`\" -X DELETE --verbose  \n*   Trying 127.0.0.1... \n* TCP_NODELAY set \n* Connected to localhost (127.0.0.1) port 8443 (#0) \n> DELETE /regions/uy/20 HTTP/1.1 \n> Host: localhost:8443 \n> User-Agent: curl/7.59.0 \n> Accept: */* \n> Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyaWQiOiJma2VyZWtpIiwiaWF0IjoxNTI4MDU5Nzc0LCJleHAiOjE1MjgwNjMzNzR9.6tioV798HHqriOFkhUpf8xJc8wq5TY5g-jN-XhgwaTs \n> \n< HTTP/1.1 204 No Content \n< X-Powered-By: Express \n< Access-Control-Allow-Origin: * \n< Connection: close \n< Date: Sun, 03 Jun 2018 21:12:06 GMT \n< \n* Closing connection 0 \n\n> curl localhost:8443/regions/uy/20 -H \"Authorization: Bearer `cat token.txt`\" -X DELETE --verbose  \n.\n. *several lines snipped out*\n.\n< HTTP/1.1 404 Not Found \n.\n. *more snipped lines*\n.\nRegion not found\n\n```", "```js\n> curl localhost:8443/regions/uy -H \"Authorization: Bearer `cat token.txt`\" -X POST -d \"name=Fictitious\" --verbose \n.\n. *lines snipped out*\n.\n< HTTP/1.1 201 Created \n< X-Powered-By: Express \n< Access-Control-Allow-Origin: * \n< Connection: close \n< Location: /regions/uy/20 \n.\n. *snipped lines*\n.\nRegion created\n\n> curl localhost:8443/regions/uy -H \"Authorization: Bearer `cat token.txt`\" \n[{\"countryCode\":\"UY\",\"regionCode\":\"1\",\"regionName\":\"Artigas\"},{\"countryCode\":\"UY\",\"regionCode\":\"10\",\"regionName\":\"MVD\"},\n.\n. *snipped out lines*\n.\n{\"countryCode\":\"uy\",\"regionCode\":\"20\",\"regionName\":\"Fictitious\"},\n.\n. *more snipped out lines*\n.\n{\"countryCode\":\"UY\",\"regionCode\":\"9\",\"regionName\":\"Maldonado\"}]\n\n```", "```js\npm.test(\"Response is long enough\", () => \n    pm.expect(pm.response.text()).to.have.lengthOf.above(40)); \n\npm.test(\"Response has three parts\", () => \n    pm.expect(pm.response.text().split(\".\")).to.have.lengthOf(3));\n\npm.environment.set(\"token\", pm.response.text()); // for later scripts\n```", "```js\npm.test(\"Answer should be JSON\", () => {\n    pm.response.to.be.success;\n    pm.response.to.have.jsonBody(); \n});\n\npm.test(\"Answer should have at least 19 regions\", () => {\n    const regions = JSON.parse(pm.response.text());\n    pm.expect(regions).to.have.lengthOf.at.least(19);\n});\n```", "```js\n> npm run newman\n\n> simpleproject@1.0.0 newman /home/fkereki/MODERNJS/chapter05\n> newman run postman_collection.json\n\nnewman\n\nRestful server testing for regions\n\n\u274f Test Delete\n\u21b3 Get JWT\n  POST localhost:8443/gettoken [200 OK, 386B, 14ms]\n  \u2713 Response is long enough\n  \u2713 Response has three parts\n\n\u21b3 Delete non-existing region\n  DELETE localhost:8443/regions/zz/99 [404 Not Found, 255B, 4ms]\n  \u2713 Status code is 404 baby!!\n\n\u274f Test Get\n\u21b3 Get JWT\n  POST localhost:8443/gettoken [200 OK, 386B, 2ms]\n  \u2713 Response is long enough\n  \u2713 Response has three parts\n\n\u21b3 Get /regions/uy\n  GET localhost:8443/regions/uy [200 OK, 1.46KB, 2ms]\n  \u2713 Answer should be JSON\n  \u2713 Answer should have at least 19 regions\n\n\u21b3 Get /regions/uy/10\n  GET localhost:8443/regions/uy/11 [200 OK, 303B, 2ms]\n  \u2713 Answer has a single region\n  \u2713 Country code is UY\n  \u2713 Region code is 11\n  \u2713 Region name is Paysandu\n  \u2713 Answer is valid, JSON\n\n```", "```js\nswagger: \"2.0\"\ninfo:\n  description: \"This is a RESTful API to access countries, regions, and cities.\"\n  version: \"1.0.0\"\n  title: \"World Data API\"\n\nhost: \"127.0.0.1:8443\"\nschemes:\n- \"http\"\n```", "```js\ntags:\n- name: \"token\"\n  description: \"Get a JWT for authorization\"\n- name: \"countries\"\n  description: \"Access the world countries\"\n- name: \"regions\"\n  description: \"Access the regions of countries\"\n- name: \"cities\"\n  description: \"Access the world cities\"\n```", "```js\npaths:\n /gettoken:\n    post:\n      tags:\n      - \"token\"\n      summary: \"Get a token to authorize future requests\"\n      consumes: \n        - \"application/x-www-form-urlencoded\"\n      produces:\n        - text/plain\n      parameters:\n        - in: formData\n          name: user\n          required: true\n          type: string\n        - in: formData\n          name: password\n          required: true\n          type: string\n      responses:\n        200:\n          description: A valid token to use for other requests\n        401:\n          description: \"Wrong user/password\"\n```", "```js\n/regions:\n  get:\n    tags:\n    - \"regions\"\n    summary: \"Get all regions of all countries\"\n    produces:\n      - application/json\n    parameters:\n      - in: header\n        name: \"Authorization\"\n        required: true\n        type: string\n        description: Authorization Token\n    responses:\n      200:\n        description: \"OK\"\n      401:\n        description: \"No token provided\"\n```", "```js\nconst swaggerUi = require(\"swagger-ui-express\");\nconst swaggerDocument = require(\"../swagger.json\");\n```", "```js\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerDocument));\n\n```"]