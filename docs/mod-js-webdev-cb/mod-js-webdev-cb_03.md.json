["```js\n// Source file: src/miniserver.js\n\n/* @flow */\n\"use strict\";\n\nconst http = require(\"http\");\n\nhttp\n .createServer((req, res) => {\n res.writeHead(200, { \"Content-Type\": \"text/plain\" });\n res.end(\"Server alive!\");\n })\n .listen(8080, \"localhost\");\n\nconsole.log(\"Mini server ready at http://localhost:8080/\");\n```", "```js\n> node src/miniserver.js\nMini server ready at http://localhost:8080/\n```", "```js\n// Source file: src/roundmath.js\n\n/* @flow */\n\"use strict\";\n\n// *continues...*\n```", "```js\n// ...*continued*\n\n// These won't be exported:\n\nconst roundToCents = (x: number): number => Math.round(x * 100) / 100;\nconst changeSign = (x: number): number => -x;\n\n// The following will be exported:\n\nconst addR = (x: number, y: number): number => roundToCents(x + y);\n\nconst subR = (x: number, y: number): number => addR(x, changeSign(y));\n\nconst multR = (x: number, y: number): number => roundToCents(x * y);\n\nconst divR = (x: number, y: number): number => {\n    if (y === 0) {\n        throw new Error(\"Divisor must be nonzero\");\n    } else {\n        return roundToCents(x / y);\n    }\n};\n\n// *continues*...\n```", "```js\n// ...*continued* exports.addR = addR;\nexports.subR = subR;\nexports.multR = multR;\nexports.divR = divR;\n```", "```js\n// Source file: src/doroundmath.js\n\n/* @flow */\n\"use strict\";\n\nconst RM = require(\"./roundmath.js\");\n\nconsole.log(RM.addR(12.348, 4.221)); // 16.57\nconsole.log(RM.changeSign(0.07)); // error; RM.changeSign is not a function\n```", "```js\n/* @flow */\n\"use strict\";\n\nconst { multR, divR } = require(\"./roundmath.js\");\n\nconsole.log(multR(22.9, 12.4)); // 283.96\nconsole.log(divR(22, 7)); // 3.14\n```", "```js\n// Source file: src/flowcomments.js\n\nlet someFlag /*: boolean */;\nlet greatTotal /*: number */;\nlet firstName /*: string */;\n\nfunction toString(x /*: number */) /*: string */ {\n    return String(x);\n}\n\nlet traffic /*: \"red\" | \"amber\" | \"green\" */;\n\n// *continues...*\n```", "```js\n// ...*continued* /*::\ntype pair<T> = [T, T];\ntype pairOfNumbers = pair<number>;\ntype pairOfStrings = pair<string>;\n\ntype simpleFlag = number | boolean;\n\ntype complexObject = {\n    id: string,\n    name: string,\n    indicator: simpleFlag,\n    listOfValues: Array<number>\n};\n*/\n\nclass Person {\n /*::\n first: string;\n last: string;\n */\n\n    constructor(first /*: string */, last /*: string */) {\n        this.first = first;\n        this.last = last;\n    }\n\n    // ...several methods, snipped out\n}\n\n// *continues...*\n```", "```js\n// *...continued* /*::\nimport type { dniType, nameType } from \"./opaque_types\";\n*/\n\n/*::\nexport type { pairOfNumbers, pairOfStrings };\n*/\n```", "```js\nnpm install flow-remove-types --save-dev\n```", "```js\n\"scripts\": {\n \"build\": \"flow-remove-types src/ -d out/\",\n    \"addTypes\": \"flow-typed install\",\n    \"update\": \"npm install && flow-typed install\",\n    \"flow\": \"flow\",\n    .\n    .\n    .\n},\n```", "```js\n**/node_modules \n**/flow-typed \n**/out\n```", "```js\n/* @flow */\n\"use strict\";\n\n// These won't be exported:\n\nconst roundToCents = (x: number): number => Math.round(x * 100) / 100;\n\nconst changeSign = (x: number): number => -x;\n\n// The following will be exported:\n\nconst addR = (x: number, y: number): number => roundToCents(x + y);\n\nconst subR = (x: number, y: number): number => addR(x, changeSign(y));\n\nconst multR = (x: number, y: number): number => roundToCents(x * y);\n\nconst divR = (x: number, y: number): number => {\n    if (y === 0) {\n        throw new Error(\"Divisor must be nonzero\");\n    } else {\n        return roundToCents(x / y);\n    }\n};\n```", "```js\n\"scripts\": {\n    \"build\": \"flow-remove-types src/ -d out/\",\n    \"buildWithMaps\": \"flow-remove-types src/ -d out/ --pretty --sourcemaps\",\n    .\n    .\n    .\n},\n```", "```js\nnpm install nodemon --save-dev\n```", "```js\n\"scripts\": {\n    \"build\": \"flow-remove-types src/ -d out/\",\n    \"buildWithMaps\": \"flow-remove-types src/ -d out/ --pretty --\n     sourcemaps\",\n \"start\": \"npm run build && node out/doroundmath.js\",\n \"nodemon\": \"nodemon --watch src --delay 1 --exec npm start\",\n    .\n    .\n    .  \n},\n```", "```js\n// Source file: src/promisify.js\n\n/* @flow */\n\"use strict\";\n\nconst fs = require(\"fs\");\n\nconst FILE_TO_READ = \"/home/fkereki/MODERNJS/chapter03/src/promisify.js\"; // its own source!\n\nfunction showFileLength1(fileName: string): void {\n    fs.readFile(fileName, \"utf8\", (err, text) => {\n if (err) {\n throw err;\n } else {\n console.log(`1\\. Reading, old style: ${text.length} bytes`);\n }\n    });\n}\nshowFileLength1(FILE_TO_READ);\n\n// *continues...*\n```", "```js\nconst util = require(\"util\");\n```", "```js\n// ...*continued*\n\nfunction showFileLength2(fileName: string): void {\n    fs.readFile = util.promisify(fs.readFile); \n    fs\n        .readFile(fileName, \"utf8\")\n        .then((text: string) => {\n            console.log(`2\\. Reading with promises: ${text.length} bytes`);\n        })\n        .catch((err: mixed) => {\n            throw err;\n        });\n}\nshowFileLength2(FILE_TO_READ);\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nconst showFileLength3 = async (fileName: string) => {\n    fs.readFile = util.promisify(fs.readFile);\n\n    try {\n        const text: string = await fs.readFile(fileName, \"utf8\");\n        console.log(`3\\. Reading with async/await: ${text.length} bytes`);\n    } catch (err) {\n        throw err;\n    }\n};\nshowFileLength3(FILE_TO_READ);\n```", "```js\n// Source file: src/process_request.js\n\nconst http = require(\"http\");\n\nhttp\n    .createServer((req, res) => {\n        // *For PUT/POST methods, wait until the*\n        // *complete request body has been read.*\n\n        if (req.method === \"POST\" || req.method === \"PUT\") {\n            let body = \"\";\n\n req.on(\"data\", data => {\n body += data;\n });\n\n req.on(\"end\", () => processRequest(req, res, body));\n\n        } else {\n            return processRequest(req, res, \"\");\n        }\n    })\n    .listen(8080, \"localhost\");\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nconst url = require(\"url\");\nconst querystring = require(\"querystring\");\n\nfunction processRequest(req, res, body) {\n /*\n *Get parameters, both from the URL and the request body*\n */\n const urlObj = url.parse(req.url, true);\n const urlParams = urlObj.query;\n const bodyParams = querystring.parse(body);\n\n console.log(\"URL OBJECT\", urlObj);\n console.log(\"URL PARAMETERS\", urlParams);\n console.log(\"BODY PARAMETERS\", bodyParams);\n\n /*\n * Here you would analyze the URL to decide what is required*\n *Then you would do whatever is needed to fulfill the request*\n *Finally, when everything was ready, results would be sent*\n *In our case, we just send a FINISHED message*\n */\n\n res.writeHead(200, \"OK\");\n res.end(`FINISHED WITH THE ${req.method} REQUEST`);\n}\n```", "```js\n> npm run build\n> node out/process_request.js\n```", "```js\n> curl \"http://127.0.0.1:8080/some/path/in/the/server?alpha=22&beta=9\" \nFINISHED WITH THE GET REQUEST\n\n```", "```js\nURL OBJECT Url {\n protocol: null,\n slashes: null,\n auth: null,\n host: null,\n port: null,\n hostname: null,\n hash: null,\n search: '?alpha=22&beta=9',\n query: { alpha: '22', beta: '9' },\n pathname: '/some/path/in/the/server',\n path: '/some/path/in/the/server?alpha=22&beta=9',\n href: '/some/path/in/the/server?alpha=22&beta=9' }\nURL PARAMETERS { alpha: '22', beta: '9' }\nBODY PARAMETERS {}\n```", "```js\nURL OBJECT Url {\n protocol: null,\n slashes: null,\n auth: null,\n host: null,\n port: null,\n hostname: null,\n hash: null,\n search: null,\n query: {},\n pathname: '/other/path/',\n path: '/other/path/',\n href: '/other/path/' }\nURL PARAMETERS {}\nBODY PARAMETERS { gamma: '60', delta: 'FK' }\n```", "```js\n// Source file: src/zip_files.js\n\nconst zlib = require(\"zlib\");\n\nconst fs = require(\"fs\");\n\nconst inputStream = fs.createReadStream(\n \"/home/fkereki/Documents/CHURCHES - Digital Taxonomy.pdf\"\n);\n\nconst gzipStream = zlib.createGzip();\n\nconst outputStream = fs.createWriteStream(\n \"/home/fkereki/Documents/CHURCHES.gz\"\n);\n\ninputStream.pipe(gzipStream).pipe(outputStream);\n```", "```js\n// Source file: src/zip_send.js\n\nconst zlib = require(\"zlib\");\nconst fs = require(\"fs\");\n\nconst http = require(\"http\");\n\nhttp\n    .createServer(function(request, response) {\n        // Tell the client, this is a zip file.\n response.writeHead(200, {\n \"Content-Type\": \"application/zip\",\n \"Content-disposition\": \"attachment; filename=churches.gz\"\n });\n\n        const inputStream = fs.createReadStream(\n            \"/home/fkereki/Documents/CHURCHES - Digital Taxonomy.pdf\"\n        );\n\n```", "```js\n        const gzipStream = zlib.createGzip();\n\n        inputStream.pipe(gzipStream).pipe(response);\n    })\n    .listen(8080, \"localhost\");\n```", "```js\n// Source file: src/dbaccess.js\n\n/* @flow */\n\"use strict\";\n\nconst mariaSQL = require(\"mariasql\");\nconst { promisify } = require(\"util\");\n\nconst DB_HOST = \"127.0.0.1\";\nconst DB_USER = \"fkereki\";\nconst DB_PASS = \"modernJS!!\";\nconst DB_SCHEMA = \"world\";\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nfunction getDbConnection(host, user, password, db) {\n    const dbConn = new mariaSQL({ host, user, password, db });\n    dbConn.query = promisify(dbConn.query);\n    return dbConn;\n}\n\nconst dbConn = getDbConnection(DB_HOST, DB_USER, DB_PASS, DB_SCHEMA); // *continues*...\n```", "```js\n// ...*continued*\n\nasync function tryDbAccess(dbConn) {\n    try {\n        const rows = await dbConn.query(\"SELECT 1960 AS someYear\");\n        console.log(`Year was ${rows[0].someYear}`);\n    } catch (e) {\n        console.log(\"Unexpected error\", e);\n    }\n}\n\n// *continues*...\n```", "```js\n// ...*continued*\n\nasync function get10CountriesWithMoreCities(dbConn) {\n    try {\n        const myQuery = `SELECT \n            CI.countryCode, \n            CO.countryName, \n            COUNT(*) as countCities\n        FROM cities CI JOIN countries CO \n        ON CI.countryCode=CO.countryCode\n        GROUP BY 1 \n        ORDER BY 3 DESC \n        LIMIT 10`;\n\n const rows = await dbConn.query(myQuery);\n rows.forEach(r =>\n console.log(r.countryCode, r.countryName, r.countCities)\n );\n    } catch (e) {\n        console.log(\"Unexpected error\", e);\n    }\n}\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nasync function addSeekAndDeleteCountry(dbConn) {\n    try {\n        const code = \"42\";\n        const name = \"DOUGLASADAMSLAND\";\n\n        /*\n            1\\. Add the new country via a prepared insert statement\n        */\n const prepInsert = dbConn.prepare(\n \"INSERT INTO countries (countryCode, countryName) VALUES (:code, :name)\"\n );\n const preppedInsert = prepInsert({ code, name });\n        await dbConn.query(preppedInsert);\n\n        /*\n            2\\. Seek the recently added country, return an array of objects\n        */\n const getAdams = `SELECT * FROM countries WHERE countryCode=\"${code}\"`;\n        const adams = await dbConn.query(getAdams);\n        console.log(\n            adams.length,\n            adams[0].countryCode,\n            adams[0].countryName\n        );\n\n        /*\n            3\\. Update the country, but using placeholders\n        */\n        await dbConn.query(\n            `UPDATE countries SET countryName=? WHERE countryCode=?`,\n            [\"NEW NAME\", code]\n        );\n\n        /*\n           4\\. Check the new data, but returning an array of arrays instead\n        */\n        const adams2 = await dbConn.query(\n            `SELECT * FROM countries WHERE countryCode=?`,\n            [code],\n            { useArray: true }\n        );\n        console.log(adams2.length, adams2[0][0], adams2[0][1]);\n\n        /*\n            5\\. Drop the new country\n        */\n await dbConn.query(`DELETE FROM countries WHERE countryCode=\"42\"`);\n\n        /*\n            6\\. Verify that the country is no more\n        */\n        const adams3 = await dbConn.query(getAdams);\n        console.log(adams3.length);\n    } catch (e) {\n        console.log(\"Unexpected error\", e);\n    }\n}\n\n// *continues...*\n```", "```js\n// ...*continued*\n\ntryDbAccess(dbConn);\nget10CountriesWithMoreCities(dbConn);\naddSeekAndDeleteCountry(dbConn);\n```", "```js\n\"scripts\": {\n    \"build\": \"flow-remove-types src/ -d out/\",\n    \"buildWithMaps\": \"flow-remove-types src/ -d out/ --pretty --sourcemaps\",\n    \"start\": \"npm run build && node out/doroundmath.js\",\n    \"start-db\": \"npm run build && node out/dbaccess.js\",\n    .\n    .\n    .\n},\n```", "```js\nYear was 1960\n```", "```js\nIN India 1301\nBR Brazil 1203\nRU Russian Federation 1090\nDE Germany 1061\nCN China 810\nFR France 633\nES Spain 616\nJP Japan 605\nIT Italy 575\nMX Mexico 556\n```", "```js\n1 '42' 'DOUGLASADAMSLAND'\n1 '42' 'NEW NAME'\n0\n```", "```js\n// Source file: src/process_exec.js\n\nconst child_process = require(\"child_process\");\nconst { promisify } = require(\"util\");\nchild_process.exec = promisify(child_process.exec);\n\nasync function getDirectoryJs(path: ?string) {\n    try {\n const cmd = \"ls -ld -1 *.js\";\n        const stdout = await child_process.exec(cmd, { cwd: path });\n        console.log(\"OUT\", path || \"\");\n        console.log(stdout);\n    } catch (e) {\n        console.log(\"ERR\", e.stderr);\n    }\n}\n```", "```js\ngetDirectoryJs(\"/home/fkereki/MODERNJS/chapter03/flow-typed/npm\");\n*OUT /home/fkereki/MODERNJS/chapter03/flow-typed/npm*\n*-rw-r--r-- 1 fkereki users 4791 Apr 9 12:52 axios_v0.18.x.js*\n*-rw-r--r-- 1 fkereki users 3006 Mar 28 14:51 babel-cli_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 3904 Apr 9 12:52 babel-eslint_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 2760 Apr 9 12:52 babel-preset-env_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 888 Apr 9 12:52 babel-preset-flow_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 518 Apr 9 12:52 eslint-config-recommended_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 14995 Apr 9 12:52 eslint-plugin-flowtype_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 73344 Apr 9 12:52 eslint_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 1889 Mar 28 14:51 fetch_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 188 Apr 9 12:52 flow-bin_v0.x.x.js*\n*-rw-r--r-- 1 fkereki users 13290 Apr 9 12:52 flow-coverage-report_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 1091 Apr 9 12:52 flow-remove-types_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 5763 Apr 9 12:52 flow-typed_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 1009 Apr 9 12:52 mariasql_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 0 Mar 28 14:51 moment_v2.3.x.js*\n*-rw-r--r-- 1 fkereki users 5880 Apr 9 12:52 nodemon_vx.x.x.js*\n*-rw-r--r-- 1 fkereki users 4786 Apr 9 12:52 prettier_v1.x.x.js*\n\ngetDirectoryJs(\"/boot\");\n*ERR ls: cannot access '*.js': No such file or directory*\n```", "```js\n// Source file: src/process_spawn.js\n\nconst path = require(\"path\");\nconst { spawn } = require(\"child_process\");\n\nconst child = spawn(\"node\", [path.resolve(\"out/process_spawn_dir.js\")]);\n\nchild.stdin.write(\"/home/fkereki\");\n\nchild.stdout.on(\"data\", data => {\n    console.log(String(data));\n});\n\nchild.stdout.on(\"end\", () => {\n    child.kill();\n});\n```", "```js\n// Source file: src/process_spawn.js\n\nconst fs = require(\"fs\");\n\nprocess.stdin.resume();\n\nprocess.stdin.on(\"data\", path => {\n    // Received a path to process\n    fs\n        .readdirSync(path)\n        .sort((a, b) => a.localeCompare(b, [], { sensitivity: \"base\" }))\n        .filter(file => !file.startsWith(\".\"))\n        .forEach(file => process.stdout.write(file + \"\\n\"));\n\n process.stdout.end();\n});\n```", "```js\n// Source file: src/process_fork.js\n\nconst path = require(\"path\");\nconst { fork } = require(\"child_process\");\n\nconst child = fork(path.resolve(\"out/process_fork_dir.js\"));\n\nchild.send({ path: \"/home/fkereki\" });\n\nchild.on(\"message\", data => {\n    console.log(String(data));\n});\n```", "```js\n// Source file: src/process_fork_dir.js\n\nconst fs = require(\"fs\");\n\nprocess.on(\"message\", obj => {\n    // Received a path to process\n    fs\n        .readdirSync(obj.path)\n        .sort((a, b) => a.localeCompare(b, [], { sensitivity: \"base\" }))\n        .filter(file => !file.startsWith(\".\"))\n        .forEach(file => process.send && process.send(file));\n});\n```"]