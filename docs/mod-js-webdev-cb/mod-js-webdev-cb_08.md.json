["```js\nnpm install redux react-redux --save\n```", "```js\n// Source file: src/counterApp/counter.actions.js\n\n/* @flow */\n\nexport const COUNTER_INCREMENT = \"counter:increment\";\nexport const COUNTER_RESET = \"counter:reset\";\n\nexport type CounterAction = {\n    type: string,\n    value?: number\n};\n\nexport const reset = () =>\n    ({\n        type: COUNTER_RESET\n    }: CounterAction);\n\nexport const increment = (inc: number) =>\n    ({\n        type: COUNTER_INCREMENT,\n        value: inc\n    }: CounterAction);\n\nexport const decrement = (dec: number) =>\n    ({\n        type: COUNTER_INCREMENT,\n        value: -dec\n    }: CounterAction);\n\n// *returning increment(-dec) would have worked as well*\n```", "```js\n// Source file: src/counterApp/counter.reducer.js\n\n/* @flow */\n\nimport { COUNTER_INCREMENT, COUNTER_RESET } from \"./counter.actions\";\n\nimport type { CounterAction } from \"./counter.actions.js\";\n\nexport const reducer = (\n state = {\n // *initial state*\n count: 0,\n clicks: 0\n },\n    action: CounterAction\n) => {\n    switch (action.type) {\n        case COUNTER_INCREMENT:\n            return {\n                count: state.count + action.value,\n                clicks: state.clicks + 1\n            };\n\n        case COUNTER_RESET:\n            return { count: 0, clicks: state.clicks + 1 };\n\n        default:\n            return state;\n    }\n};\n```", "```js\n// Source file: src/counterApp/store.js\n\n/* @flow */\n\nimport { createStore } from \"redux\";\n\nimport { reducer } from \"./counter.reducer.js\";\n\nexport const store = createStore(reducer);\n```", "```js\n// Source file: src/counterApp/counter.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nimport {\n    increment,\n    decrement,\n    reset,\n    CounterAction\n} from \"./counter.actions.js\";\n\nexport class Counter extends React.PureComponent<{\n    count: number,\n    dispatch: CounterAction => any\n}> {\n    static propTypes = {\n        count: PropTypes.number.isRequired,\n        dispatch: PropTypes.func.isRequired\n    };\n\n    onAdd1 = () => this.props.dispatch(increment(1));\n    onSub2 = () => this.props.dispatch(decrement(2));\n    onReset = () => this.props.dispatch(reset());\n\n    render() {\n        return (\n            <div>\n                Value: {this.props.count}\n                <br />\n                <button onClick={this.onAdd1}>Add 1</button>\n                <button onClick={this.onSub2}>Subtract 2</button>\n                <button onClick={this.onReset}>Reset</button>\n            </div>\n        );\n    }\n}\n```", "```js\n// Source file: src/counterApp/clicksDisplay.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { PropTypes } from \"prop-types\";\n\nexport class ClicksDisplay extends React.PureComponent<{\n    clicks: number\n}> {\n    static propTypes = {\n        clicks: PropTypes.number.isRequired\n    };\n\n    render() {\n        return <div>Clicks so far: {this.props.clicks}</div>;\n    }\n}\n```", "```js\n// Source file: src/counterApp/counter.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { Counter } from \"./counter.component\";\n\nconst getProps = state => ({ count: state.count });\n\nexport const ConnectedCounter = connect(getProps)(Counter);\n```", "```js\n// Source file: src/counterApp/clicksDisplay.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { ClicksDisplay } from \"./clicksDisplay.component\";\n\nconst getProps = state => ({\n clicks: state.clicks\n});\n\nexport const ConnectedClicksDisplay = connect(getProps)(ClicksDisplay);\n```", "```js\n// Source file: src/App.counter.js\n\n/* @flow */\n\nimport React, { Component, Fragment } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./counterApp/store\";\nimport { ConnectedCounter, ConnectedClicksDisplay } from \"./counterApp\";\n\nclass App extends Component<{}> {\n    render() {\n        return (\n <Provider store={store}>\n                <Fragment>\n                    <ConnectedCounter />\n                    <hr />\n                    <ConnectedClicksDisplay />\n                </Fragment>\n </Provider>\n        );\n    }\n}\n```", "```js\nnpm install redux-thunk --save\n```", "```js\n// Source file: src/regionsApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport { reducer } from \"./worlds.reducer.js\";\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\n/* @flow */\n\n// Countries actions\n\nexport const COUNTRIES_REQUEST = \"countries:request\";\nexport const COUNTRIES_SUCCESS = \"countries:success\";\nexport const COUNTRIES_FAILURE = \"countries:failure\";\n\nexport type CountriesAction = {\n    type: string,\n    country?: string,\n    listOfCountries?: [object]\n};\n\nexport const countriesRequest = () =>\n    ({\n        type: COUNTRIES_REQUEST\n    }: CountriesActions);\n\nexport const countriesSuccess = (listOfCountries: []) =>\n    ({\n        type: COUNTRIES_SUCCESS,\n        listOfCountries\n    }: CountriesActions);\n\nexport const countriesFailure = () =>\n    ({\n        type: COUNTRIES_FAILURE\n    }: CountriesActions);\n\n// *continues...*\n```", "```js\n// *...continued*\n\n// *Regions actions*\n\nexport const REGIONS_REQUEST = \"regions:request\";\nexport const REGIONS_SUCCESS = \"regions:success\";\nexport const REGIONS_FAILURE = \"regions:failure\";\n\nexport type RegionsAction = {\n    type: string,\n    listOfRegions?: [object]\n};\n\nexport const regionsRequest = (country: string) =>\n    ({\n        type: REGIONS_REQUEST,\n        country\n    }: RegionsActions);\n\nexport const regionsSuccess = (listOfRegions: [{}]) =>\n    ({\n        type: REGIONS_SUCCESS,\n        listOfRegions\n    }: RegionsActions);\n\nexport const regionsFailure = () =>\n    ({\n        type: REGIONS_FAILURE\n    }: RegionsActions);\n```", "```js\n// Source file: src/regionsApp/world.reducer.js\n\n/* @flow */\n\nimport {\n    COUNTRIES_REQUEST,\n    COUNTRIES_SUCCESS,\n    COUNTRIES_FAILURE,\n    REGIONS_REQUEST,\n    REGIONS_SUCCESS,\n    REGIONS_FAILURE\n} from \"./world.actions\";\n\nimport type { CountriesAction, RegionsAction } from \"./world.actions\";\n\n// import type { CounterAction } from \"./world.actions.js\";\n\nexport const reducer = (\n    state: object = {\n        // initial state\n        loadingCountries: false,\n        currentCountry: \"\",\n        countries: [],\n        loadingRegions: false,\n        regions: []\n    },\n    action: CountriesAction | RegionsAction\n) => {\n    switch (action.type) {\n        case COUNTRIES_REQUEST:\n            return {\n                ...state,\n                loadingCountries: true,\n                countries: []\n            };\n\n        case COUNTRIES_SUCCESS:\n            return {\n                ...state,\n                loadingCountries: false,\n                countries: action.listOfCountries\n            };\n\n        case COUNTRIES_FAILURE:\n            return {\n                ...state,\n                loadingCountries: false,\n                countries: []\n            };\n\n        case REGIONS_REQUEST:\n            return {\n                ...state,\n                loadingRegions: true,\n                currentCountry: action.country,\n                regions: []\n            };\n\n        case REGIONS_SUCCESS:\n            return {\n                ...state,\n                loadingRegions: false,\n                regions: action.listOfRegions\n            };\n\n        case REGIONS_FAILURE:\n            return {\n                ...state,\n                loadingRegions: false,\n                regions: []\n            };\n\n        default:\n            return state;\n    }\n};\n```", "```js\n    return {\n ...state,\n        loadingCountries: true,\n        currentCountry: \"\",\n        countries: []\n    };\n```", "```js\n// Source file: src/regionsApp/countrySelect.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../general.css\";\n\nexport class CountrySelect extends React.PureComponent<{\n    dispatch: ({}) => any\n}> {\n    static propTypes = {\n loading: PropTypes.bool.isRequired,\n        list: PropTypes.arrayOf(PropTypes.object).isRequired,\n        onSelect: PropTypes.func.isRequired,\n getCountries: PropTypes.func.isRequired\n    };\n\n    componentDidMount() {\n if (this.props.list.length === 0) {\n this.props.getCountries();\n }\n    }\n\n    onSelect = (e: { target: HTMLOptionElement }) =>\n        this.props.onSelect(e.target.value);\n\n    render() {\n        if (this.props.loading) {\n            return <div className=\"bordered\">Loading countries...</div>;\n        } else {\n            const sortedCountries = [...this.props.list].sort(\n                (a, b) => (a.countryName < b.countryName ? -1 : 1)\n            );\n\n            return (\n                <div className=\"bordered\">\n                    Country:&nbsp;\n                    <select\n                        onChange={this.onSelect}\n                        onBlur={this.onSelect}\n                    >\n                        <option value=\"\">Select a country:</option>\n                        {sortedCountries.map(x => (\n                            <option\n                                key={x.countryCode}\n                                value={x.countryCode}\n                            >\n                                {x.countryName}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            );\n        }\n    }\n}\n```", "```js\n// Source file: src/regionsApp/countrySelect.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { CountrySelect } from \"./countrySelect.component\";\nimport { getCountries, getRegions } from \"./world.actions\";\n\nconst getProps = state => ({\n list: state.countries,\n loading: state.loadingCountries\n});\n\nconst getDispatch = dispatch => ({\n getCountries: () => dispatch(getCountries()),\n onSelect: c => dispatch(getRegions(c))\n});\n\nexport const ConnectedCountrySelect = connect(\n    getProps,\n    getDispatch\n)(CountrySelect);\n```", "```js\n// Source file: src/regionsApp/regionsTable.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../general.css\";\n\nexport class RegionsTable extends React.PureComponent<{\n    list: Array<{\n        regionCode: string,\n        regionName: string\n    }>\n}> {\n    static propTypes = {\n        list: PropTypes.arrayOf(PropTypes.object).isRequired\n    };\n\n    static defaultProps = {\n        list: []\n    };\n\n    render() {\n        if (this.props.list.length === 0) {\n            return <div className=\"bordered\">No regions.</div>;\n        } else {\n            const ordered = [...this.props.list].sort(\n                (a, b) => (a.regionName < b.regionName ? -1 : 1)\n            );\n\n            return (\n                <div className=\"bordered\">\n                    {ordered.map(x => (\n                        <div key={x.countryCode + \"-\" + x.regionCode}>\n                            {x.regionName}\n                        </div>\n                    ))}\n                </div>\n            );\n        }\n    }\n}\n```", "```js\n// Source file: src/regionsApp/regionsTable.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { RegionsTable } from \"./regionsTable.component\";\n\nconst getProps = state => ({\n list: state.regions,\n loading: state.loadingRegions\n});\n\nexport const ConnectedRegionsTable = connect(getProps)(RegionsTable);\n```", "```js\n// Source file: src/App.regions.js\n\n/* @flow */\n\nimport React, { Component, Fragment } from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport {\n    ConnectedCountrySelect,\n    ConnectedRegionsTable\n} from \"./regionsApp\";\n\nimport { store } from \"./regionsApp/store\";\n\nclass App extends Component<{}> {\n    render() {\n        return (\n            <Provider store={store}>\n                <Fragment>\n                    <ConnectedCountrySelect />\n                    <ConnectedRegionsTable />\n                </Fragment>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\nimport axios from \"axios\";\n\nexport const getCountries = () => async dispatch => {\n    try {\n        dispatch(countriesRequest());\n        const result = await axios.get(`http://fk-server:8080/countries`);\n        dispatch(countriesSuccess(result.data));\n    } catch (e) {\n```", "```js\n        dispatch(countriesFailure());\n    }\n};\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\nexport const getRegions = (country: string) => async dispatch => {\n    if (country) {\n        try {\n            dispatch(regionsRequest());\n            const result = await axios.get(\n                `http://fk-server:8080/regions/${country}`\n            );\n            dispatch(regionsSuccess(result.data));\n        } catch (e) {\n            dispatch(regionsFailure());\n        }\n    } else {\n        dispatch(regionsFailure());\n    }\n};\n```", "```js\nawait new Promise(resolve => setTimeout(resolve, 5000));\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\nexport const getRegions2 = (country: string) => async (\n dispatch,\n getState\n) => {\n if (country === getState().currentCountry) {\n console.log(\"Hey! You are getting the same country as before!\");\n }\n\n    if (country) {\n        .\n        .\n        . *everything as earlier*\n        .\n        .\n    }\n};\n```", "```js\nnpm install react-router-dom --save\n```", "```js\n// Source file: src/App.routing.js\n\n/* @flow */\n\nimport React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\n\nimport { store } from \"./routingApp/store\";\n\nconst Home = () => <h1>Home Sweet Home</h1>;\nconst Help = () => <h1>Help! SOS!</h1>;\nconst Alpha = () => <h1>Alpha</h1>;\nconst Bravo = () => <h1>Bravo</h1>;\nconst Charlie = () => <h1>Charlie</h1>;\nconst Zulu = () => <h1>Zulu</h1>;\nconst Error404 = () => <h1>404 Error!</h1>;\n\n// *continued...*\n```", "```js\n// *...continued*\n\nclass App extends Component<{}> {\n    render() {\n        return (\n            <Provider store={store}>\n <BrowserRouter>\n                    <div>\n                        <header>\n                            <nav>\n                                <Link to=\"/\">Home</Link>&nbsp;\n                                <Link to=\"/about/routing\">\n                                    About Routing\n                                </Link>&nbsp;\n                                <Link to=\"/alpha\">Alpha...</Link>&nbsp;\n                                <Link to=\"/bravo\">Bravo...</Link>&nbsp;\n                                <Link to=\"/charlie\">Charlie...\n                                </Link>&nbsp;\n                                <Link to=\"/wrong\">...Wrong...\n                                </Link>&nbsp;\n                                <Link to=\"/zulu\">Zulu</Link>&nbsp;\n                                <Link to=\"/help\">Help</Link>&nbsp;\n                            </nav>\n                        </header>\n\n                        <Switch>\n                            <Route path=\"/\" component={Home} />\n                            <Route path=\"/help\" component={Help} />\n <Route\n path=\"/about/:something\"\n render={props => (\n <div>\n <h1>About...</h1>\n {props.match.params.something}\n </div>\n )}\n />\n                            <Route path=\"/alpha\" component={Alpha} />\n                            <Route path=\"/bravo\" component={Bravo} />\n                            <Route path=\"/charlie\" component={Charlie} \n                            />\n                            <Route path=\"/zulu\" component={Zulu} />\n                            <Route component={Error404} />\n                        </Switch>\n                    </div>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n```", "```js\n// Source file: src/routingApp/login.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Redirect } from \"react-router-dom\";\n\nexport class Login extends React.PureComponent<{\n    logging: boolean\n}> {\n    static propTypes = {\n        onLogin: PropTypes.func.isRequired,\n        logging: PropTypes.bool.isRequired,\n        token: PropTypes.string.isRequired,\n        location: PropTypes.object\n    };\n\n    state = {\n        userName: \"\",\n        password: \"\"\n    };\n\n    onUserNameBlur = e => this.setState({ userName: e.target.value });\n\n    onPasswordBlur = e => this.setState({ password: e.target.value });\n\n    onLoginClick = () =>\n        this.props.onLogin(this.state.userName, this.state.password);\n\n    render() {\n        if (\n            this.state.userName &&\n            this.state.password &&\n            this.props.token\n        ) {\n            return (\n                <Redirect to={this.props.location.state.from.pathname} />\n            );\n        } else {\n            return (\n                <div>\n                    <h1>Login Form</h1>\n                    <div>\n                        User:<input\n                            type=\"text\"\n                            onBlur={this.onUserNameBlur}\n                        />\n                    </div>\n                    <div>\n                        Password:\n                        <input\n                            type=\"password\"\n                            onBlur={this.onPasswordBlur}\n                        />\n                    </div>\n                    <button\n                        onClick={this.onLoginClick}\n                        disabled={this.props.logging}\n                    >\n                        Login\n                    </button>\n                </div>\n            );\n        }\n    }\n}\n```", "```js\n// Source file: src/routingApp/login.reducer.js\n\n/* @flow */\n\nimport {\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAILURE\n} from \"./login.actions\";\n\nexport const reducer = (\n    state: object = {\n        // initial state\n        logging: false,\n        token: \"\"\n    },\n    action\n) => {\n    switch (action.type) {\n        case LOGIN_REQUEST:\n            return {\n                ...state,\n                logging: true,\n                token: \"\"\n            };\n\n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                logging: false,\n                token: action.token\n            };\n\n        case LOGIN_FAILURE:\n            return {\n                ...state,\n                logging: false\n            };\n\n        default:\n            return state;\n    }\n};\n```", "```js\n// Source file: src/routingApp/login.actions.js\n\n/* @flow */\n\nimport { loginService } from \"./serviceApi\";\n\nexport const LOGIN_REQUEST = \"login:request\";\nexport const LOGIN_SUCCESS = \"login:success\";\nexport const LOGIN_FAILURE = \"login:failure\";\n\nexport const loginRequest = () => ({\n    type: LOGIN_REQUEST\n});\n\nexport const loginSuccess = (token: string) => ({\n    type: LOGIN_SUCCESS,\n    token\n});\n\nexport const loginFailure = () => ({\n    type: LOGIN_FAILURE\n});\n\n// Complex actions:\n\nexport const attemptLogin = (\n    user: string,\n    password: string\n) => async dispatch => {\n    try {\n        dispatch(loginRequest());\n        *// the next line delays execution for 5 seconds:*\n *// await new Promise(resolve => setTimeout(resolve, 5000));*\n        const result = await loginService(user, password);\n        dispatch(loginSuccess(result.data));\n    } catch (e) {\n        dispatch(loginFailure());\n    }\n};\n```", "```js\n// Source file: src/routingApp/authRoute.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nexport class Auth extends React.Component<{\n    loginRoute: string,\n    token: string,\n    location: object\n}> {\n    static propTypes = {\n        loginRoute: PropTypes.string.isRequired,\n        token: PropTypes.string.isRequired,\n        location: PropTypes.object\n    };\n\n    render() {\n        const myProps = { ...this.props };\n        if (!myProps.token) {\n            delete myProps.component;\n            myProps.render = () => (\n                <Redirect\n                    to={{\n                        pathname: this.props.loginRoute,\n                        state: { from: this.props.location }\n                    }}\n                />\n            );\n        }\n        return <Route {...myProps} />;\n    }\n}\n```", "```js\n// Source file: src/routingApp/authRoute.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { Auth } from \"./authRoute.component\";\nexport const AuthRoute = connect(state => ({\n    token: state.token,\n    loginRoute: \"/login\"\n}))(Auth);\n```", "```js\n// Source file: src/App.routing.auth.js\n\n<AuthRoute path=\"/alpha\" component={Alpha} />\n<AuthRoute path=\"/bravo\" component={Bravo} />\n<AuthRoute path=\"/charlie\" component={Charlie} />\n<AuthRoute path=\"/zulu\" component={Zulu} />\n<AuthRoute component={Error404} />\n```", "```js\nconst anActionCreator = \n    (...*parameters*...) => \n        (dispatch, getState) => \n            { ...*your action*... }\n```", "```js\nnpm install react-loadable --save\n```", "```js\n// Source file: src/App.splitting.js\n\n/* @flow */\n\n/* eslint-disable */\n\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\n\nimport {\n AsyncAlpha,\n AsyncBravo,\n AsyncCharlie,\n AsyncZulu,\n AsyncHelp\n} from \"./splittingApp\";\n\nconst Home = () => <h1>Home Sweet Home</h1>;\nconst Error404 = () => <h1>404 Error!</h1>;\n\nclass App extends Component<{}> {\n    render() {\n        return (\n            <BrowserRouter>\n                <div>\n                    <header>\n                        <nav>\n                            <Link to=\"/\">Home</Link>&nbsp;\n                            <Link to=\"/alpha\">Alpha...</Link>&nbsp;\n                            <Link to=\"/bravo\">Bravo...</Link>&nbsp;\n                            <Link to=\"/charlie\">Charlie...</Link>&nbsp;\n                            <Link to=\"/wrong\">...Wrong...</Link>&nbsp;\n                            <Link to=\"/zulu\">Zulu</Link>&nbsp;\n                            <Link to=\"/help\">Help</Link>&nbsp;\n                        </nav>\n                    </header>\n\n                    <Switch>\n                        <Route exact path=\"/\" component={Home} />\n                        <Route path=\"/help\" component={AsyncHelp} />\n                        <Route path=\"/alpha\" component={AsyncAlpha} />\n                        <Route path=\"/bravo\" component={AsyncBravo} />\n                        <Route path=\"/charlie\" component={AsyncCharlie} \n                        />\n                        <Route path=\"/zulu\" component={AsyncZulu} />\n                        <Route component={Error404} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n```", "```js\n// Source file: src/splittingApp/alpha.component.js\n\n/* @flow */\n\nimport React from \"react\";\n\nconst Alpha = () => <h1>Alpha</h1>;\n\nexport default Alpha;\n```", "```js\n// Source file: src/splittingApp/alpha.loadable.js\n\n/* @flow */\n\nimport Loadable from \"react-loadable\";\n\nimport { LoadingStatus } from \"./loadingStatus.component\";\n\nexport const AsyncAlpha = Loadable({\n loader: () => import(\"./alpha.component\"),\n loading: LoadingStatus\n});\n```", "```js\n// Source file: src/splittingApp/loadingStatus.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport class LoadingStatus extends React.Component<{\n    isLoading: boolean,\n    error: boolean\n}> {\n    static propTypes = {\n        isLoading: PropTypes.bool,\n        error: PropTypes.bool\n    };\n\n    render() {\n if (this.props.isLoading) {\n return <div>Loading...</div>;\n } else if (this.props.error) {\n return <div>ERROR: the component could not be loaded.</div>;\n } else {\n return null;\n }\n    }\n}\n```", "```js\n<Link to=\"/alpha\">\n    <span onMouseOver={() => AsyncAlpha.preload()}>Alpha...</span>\n</Link>\n```"]