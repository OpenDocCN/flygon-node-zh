["```js\nnpm install create-react-native-app -g\n```", "```js\ncreate-react-native-app yourprojectname\ncd yourprojectname\nnpm start\n```", "```js\nnpm install --save-dev \\\n eslint eslint-config-recommended eslint-plugin-babel \\\n eslint-plugin-flowtype eslint-plugin-react eslint-plugin-react-native\n```", "```js\n{\n    \"parser\": \"babel-eslint\",\n    \"parserOptions\": {\n        \"ecmaVersion\": 2017,\n        \"sourceType\": \"module\",\n        \"ecmaFeatures\": {\n            \"jsx\": true\n        }\n    },\n    \"env\": {\n        \"node\": true,\n        \"browser\": true,\n        \"es6\": true,\n        \"jest\": true,\n \"react-native/react-native\": true\n    },\n    \"extends\": [\n        \"eslint:recommended\",\n        \"plugin:flowtype/recommended\",\n        \"plugin:react/recommended\",\n \"plugin:react-native/all\"\n    ],\n    \"plugins\": [\"babel\", \"flowtype\", \"react\", \"react-native\"],\n    \"rules\": {\n        \"no-console\": \"off\",\n        \"no-var\": \"error\",\n        \"prefer-const\": \"error\",\n        \"flowtype/no-types-missing-file-annotation\": 0\n    }\n}\n```", "```js\nnpm install --save-dev flow flow-bin flow-coverage-report flow-typed\n```", "```js\n\"scripts\": {\n    \"start\": \"react-native-scripts start\",\n    .\n    .\n    .\n \"flow\": \"flow\",\n \"addTypes\": \"flow-typed install\"\n},\n```", "```js\nnpm run flow init\n```", "```js\n[ignore]\n.*/node_modules/.*\n\n[include]\n\n[libs]\n\n[lints]\nall=warn\nuntyped-type-import=off\nunsafe-getters-setters=off\n\n[options]\ninclude_warnings=true\n\n[strict]\n```", "```js\nnpm install --save-dev prettier\n```", "```js\n{\n    \"tabWidth\": 4,\n    \"printWidth\": 75\n}\n```", "```js\n// Source file: App.original.fixed.js /* @flow */\n\nimport React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\n\nexport default class App extends React.Component<> {\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text>Open up App.js to start working on your app!</Text>\n                <Text>Changes you make will automatically reload.</Text>\n                <Text>Shake your phone to open the developer menu.</Text>\n            </View>\n        );\n    }\n}\n\nconst white: string = \"#fff\";\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: white,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }\n});\n```", "```js\nnpm install prop-types --save\n```", "```js\nnpm install react react-redux redux-thunk --save\n```", "```js\nnpm install axios --save\n```", "```js\nnode out/restful_server.js.\n```", "```js\n// Source file: src/regionsApp/regionsTable.component.js\n\n.\n.\n.\n\nrender() {\n    if (this.props.list.length === 0) {\n        return (\n <View>\n <Text>No regions.</Text>\n </View>\n        );\n    } else {\n        const ordered = [...this.props.list].sort(\n            (a, b) => (a.regionName < b.regionName ? -1 : 1)\n        );\n\n        return (\n <View>\n                {ordered.map(x => (\n <View key={x.countryCode + \"-\" + x.regionCode}>\n <Text>{x.regionName}</Text>\n </View>\n                ))}\n </View>\n        );\n    }\n}\n```", "```js\n// Source file: src/regionsApp/countrySelect.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, Text, Picker } from \"react-native\";\n\nexport class CountrySelect extends React.PureComponent<{\n    dispatch: ({}) => any\n}> {\n    static propTypes = {\n        loading: PropTypes.bool.isRequired,\n currentCountry: PropTypes.string.isRequired,\n        list: PropTypes.arrayOf(PropTypes.object).isRequired,\n        onSelect: PropTypes.func.isRequired,\n        getCountries: PropTypes.func.isRequired\n    };\n\n    componentDidMount() {\n        if (this.props.list.length === 0) {\n            this.props.getCountries();\n        }\n    }\n\n onSelect = value => this.props.onSelect(value);\n\n    render() {\n        if (this.props.loading) {\n            return (\n <View>\n <Text>Loading countries...</Text>\n </View>\n            );\n        } else {\n            const sortedCountries = [...this.props.list].sort(\n                (a, b) => (a.countryName < b.countryName ? -1 : 1)\n            );\n\n            return (\n <View>\n <Text>Country:</Text>\n <Picker\n onValueChange={this.onSelect}\n prompt=\"Country\"\n selectedValue={this.props.currentCountry}\n >\n <Picker.Item\n key={\"00\"}\n label={\"Select a country:\"}\n value={\"\"}\n />\n {sortedCountries.map(x => (\n <Picker.Item\n key={x.countryCode}\n label={x.countryName}\n value={x.countryCode}\n />\n ))}\n </Picker>\n </View>\n            );\n        }\n    }\n}\n```", "```js\n// Source file: src/regionsApp/countrySelect.connected.js\n\nconst getProps = state => ({\n    list: state.countries,\n currentCountry: state.currentCountry,\n    loading: state.loadingCountries\n});\n```", "```js\n// Source file: App.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./src/regionsApp/store\";\nimport { Main } from \"./src/regionsApp/main\";\n\nexport default class App extends React.PureComponent<> {\n    render() {\n        return (\n <Provider store={store}>\n <Main />\n </Provider>\n        );\n    }\n}\n```", "```js\n// Source file: src/regionsApp/main.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { View, StatusBar } from \"react-native\";\n\nimport {\n    ConnectedCountrySelect,\n    ConnectedRegionsTable\n} from \".\";\n\nexport class Main extends React.PureComponent<> {\n    render() {\n        return (\n <View>\n <StatusBar hidden />\n                <ConnectedCountrySelect />\n                <ConnectedRegionsTable />\n </View>\n        );\n    }\n}\n```", "```js\n// Source file: src/adaptiveApp/device.js\n\n/* @flow */\n\nimport { Dimensions } from \"react-native\";\n\nexport type deviceDataType = {\n    isTablet: boolean,\n    isPortrait: boolean,\n    height: number,\n    width: number,\n    scale: number,\n    fontScale: number\n};\n\nexport const getDeviceData = (): deviceDataType => {\n    const { height, width, scale, fontScale } = Dimensions.get(\"screen\");\n\n    return {\n isTablet: Math.max(height, width) / Math.min(height, width) <= 1.6,\n isPortrait: height > width,\n        height,\n        width,\n        scale,\n        fontScale\n    };\n};\n```", "```js\n// Source file: src/adaptiveApp/deviceHandler.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View } from \"react-native\";\n\nclass DeviceHandler extends React.PureComponent<{\n    setDevice: () => any\n}> {\n    static propTypes = {\n        setDevice: PropTypes.func.isRequired\n    };\n\n    onLayoutHandler = () => this.props.setDevice();\n\n    render() {\n return <View hidden onLayout={this.onLayoutHandler} />;\n    }\n}\n\nexport { DeviceHandler };\n```", "```js\n// Source file: src/adaptiveApp/deviceHandler.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { DeviceHandler } from \"./deviceHandler.component\";\nimport { setDevice } from \"./actions\";\n\nconst getDispatch = dispatch => ({\n setDevice: () => dispatch(setDevice())\n});\n\nexport const ConnectedDeviceHandler = connect(\n    null,\n    getDispatch\n)(DeviceHandler);\n```", "```js\n// Source file: src/adaptiveApp/actions.js\n\n/* @flow */\n\nimport { getDeviceData } from \"./device\";\n\nimport type { deviceDataType } from \"./device\"\n\nexport const DEVICE_DATA = \"device:data\";\n\nexport type deviceDataAction = {\n    type: string,\n    deviceData: deviceDataType\n};\n\nexport const setDevice = (deviceData?: object) =>\n ({\n type: DEVICE_DATA,\n deviceData: deviceData || getDeviceData()\n }: deviceDataAction); /* *A real app would have many more actions!*\n*/\n```", "```js\n// Source file: src/adaptiveApp/reducer.js\n\n/* @flow */\n\nimport { getDeviceData } from \"./device\";\n\nimport { DEVICE_DATA } from \"./actions\";\n\nimport type { deviceAction } from \"./actions\";\n\nexport const reducer = (\n    state: object = {\n        // initial state: more app data, plus:\n deviceData: getDeviceData()\n    },\n    action: deviceAction\n) => {\n    switch (action.type) {\n case DEVICE_DATA:\n return {\n ...state,\n deviceData: action.deviceData\n };\n\n        /*\n  *          In a real app, here there would*\n *be plenty more \"case\"s*\n        */\n\n        default:\n            return state;\n    }\n};\n```", "```js\n// Source file: src/adaptiveApp/adaptiveView.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, Text, StyleSheet } from \"react-native\";\n\nimport type { deviceDataType } from \"./device\";\n\nconst textStyle = StyleSheet.create({\n    bigText: {\n        fontWeight: \"bold\",\n        fontSize: 24\n    }\n});\n\nexport class AdaptiveView extends React.PureComponent<{\n    deviceData: deviceDataType\n}> {\n static propTypes = {\n deviceData: PropTypes.object.isRequired\n };\n\n renderHandset() {\n        return (\n            <View>\n                <Text style={textStyle.bigText}>\n                    I believe I am a HANDSET currently in\n                    {this.props.deviceData.isPortrait\n                        ? \" PORTRAIT \"\n                        : \" LANDSCAPE \"}\n                    orientation\n                </Text>\n            </View>\n        );\n    }\n\n renderTablet() {\n        return (\n            <View>\n                <Text style={textStyle.bigText}>\n                    I think I am a\n                    {this.props.deviceData.isPortrait\n                        ? \" PORTRAIT \"\n                        : \" LANDSCAPE \"}\n                    TABLET\n                </Text>\n            </View>\n        );\n    }\n\n render() {\n return this.props.deviceData.isTablet\n ? this.renderTablet()\n : this.renderHandset();\n }\n}\n```", "```js\n// Source file: src/adaptiveApp/adaptiveView.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { AdaptiveView } from \"./adaptiveView.component\";\n\nconst getProps = state => ({\n deviceData: state.deviceData\n});\n\nexport const ConnectedAdaptiveView = connect(getProps)(AdaptiveView);\n```", "```js\n// Source file: src/adaptiveApp/main.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { View, StatusBar } from \"react-native\";\n\nimport { ConnectedAdaptiveView } from \"./adaptiveView.connected\";\nimport { ConnectedDeviceHandler } from \"./deviceHandler.connected\";\n\nexport class Main extends React.PureComponent<> {\n    render() {\n        return (\n            <View>\n                <StatusBar hidden />\n <ConnectedDeviceHandler />\n <ConnectedAdaptiveView />\n            </View>\n        );\n    }\n}\n```", "```js\nESLint react/require-render-return rule to\u00a0make .render() not to return anything:\n```", "```js\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// eslint-disable-next-line react/require-render-return\nclass SomethingBase extends React.PureComponent<{\n    deviceData: deviceDataType\n}> {\n    static propTypes = {\n        deviceData: PropTypes.object.isRequired\n    };\n\n    render() {\n throw new Error(\"MUST IMPLEMENT ABSTRACT render() METHOD\");\n }\n}\n\nexport { SomethingBase };\n```", "```js\nimport { SomethingTablet } from \"./something.tablet\";\nimport { SomethingHandset } from \"./something.handset\";\nimport { getDeviceData } from \"./device\";\n\nexport const Something = getDeviceData().isTablet ? SomethingTablet : SomethingHandset;\n```", "```js\n// Source file: src/regionsStyledApp/main.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { View, StatusBar } from \"react-native\";\n\nimport {\n    ConnectedCountrySelect,\n    ConnectedRegionsTable,\n    ConnectedDeviceHandler\n} from \".\";\nimport type { deviceDataType } from \"./device\";\n\n export class Main extends React.PureComponent<{\n    deviceData: deviceDataType\n}> {\n    render() {\n **if (this.props.deviceData.isPortrait) {** .\n            . *// portrait view*\n            .\n **} else {**            .\n            . *// landscape view*\n            .\n        }\n    }\n}\n```", "```js\n// Source file: src/regionsStyledApp/main.component.js\n\n            return (\n <View style={{ flex: 1 }}>\n                    <StatusBar hidden />\n                    <ConnectedDeviceHandler />\n <View style={{ flex: 1, flexDirection: \"column\" }}>\n                        <View>\n                            <ConnectedCountrySelect />\n                        </View>\n <View style={{ flex: 1 }}>\n                            <ConnectedRegionsTable />\n                        </View>\n                    </View>\n                </View>\n            );\n```", "```js\n// Source file: src/regionsStyledApp/main.component.js\n\n            return (\n <View style={{ flex: 1 }}>\n                    <StatusBar hidden />\n                    <ConnectedDeviceHandler />\n <View style={{ flex: 1, flexDirection: \"row\" }}>\n                        <View\n style={{\n flex: 1,\n flexDirection: \"column\",\n justifyContent: \"center\"\n }}\n                        >\n                            <ConnectedCountrySelect />\n                        </View>\n <View style={{ flex: 1 }}>\n                            <ConnectedRegionsTable />\n                        </View>\n                    </View>\n                </View>\n            );\n```", "```js\n// Source file: src/regionsStyledApp/styleConstants.js\n\n/* @flow */\n\nimport { StyleSheet } from \"react-native\";\n\nexport const styles = StyleSheet.create({\n    fullSize: {\n        flex: 1\n    }\n});\n\nexport const lowColor = \"lightgray\";\n```", "```js\n// Source file: src/regionsStyledApp/regionsTable.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View, ScrollView, Text, StyleSheet } from \"react-native\";\n\nimport type { deviceDataType } from \"./device\";\n\nimport { lowColor, fullSizeStyle } from \"./styleConstants\";\n\nconst ownStyle = StyleSheet.create({\n grayish: {\n backgroundColor: lowColor\n }\n});\n\nexport class RegionsTable extends React.PureComponent<{\n    deviceData: deviceDataType,\n    list: Array<{\n        regionCode: string,\n        regionName: string\n    }>\n}> {\n    static propTypes = {\n        deviceData: PropTypes.object.isRequired,\n        list: PropTypes.arrayOf(PropTypes.object).isRequired\n    };\n\n    static defaultProps = {\n        list: []\n    };\n\n    render() {\n        if (this.props.list.length === 0) {\n            return (\n <View style={ownStyle.fullSize}>\n                    <Text>No regions.</Text>\n                </View>\n            );\n        } else {\n            const ordered = [...this.props.list].sort(\n                (a, b) => (a.regionName < b.regionName ? -1 : 1)\n            );\n\n            return (\n                <ScrollView style={[fullSizeStyle, ownStyle.grayish]}>\n                    {ordered.map(x => (\n                        <View key={`${x.countryCode}-${x.regionCode}`}>\n                            <Text>{x.regionName}</Text>\n                        </View>\n                    ))}\n                </ScrollView>\n            );\n        }\n    }\n}\n```", "```js\n<View>\n    <Text\n        style={[\n            styles.title,\n this.props.isActive\n ? styles.activeTitle\n : styles.inactiveTitle\n        ]}\n    >\n        {this.props.mainTitle}\n    </Text>\n</View>\n```", "```js\nconst headings = Platform.select({\n    android: { title: \"An Android App\", subtitle: \"directly from Google\" },\n    ios: { title: \"A iOS APP\", subtitle: \"directly from Apple\" }\n});\n```", "```js\n// Source file: src/routingApp/screens.js\n\n/* @flow */\n\nimport React, { Component } from \"react\";\nimport {\n    Button,\n    Image,\n    StyleSheet,\n    Text,\n    TouchableOpacity,\n    View\n} from \"react-native\";\n\nconst myStyles = StyleSheet.create({\n    fullSize: {\n        flex: 1\n    },\n    fullCenteredView: {\n        flex: 1,\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    bigText: {\n        fontSize: 24,\n        fontWeight: \"bold\"\n    },\n    hamburger: {\n        width: 22,\n        height: 22,\n        alignSelf: \"flex-end\"\n    }\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nconst makeSimpleView = text =>\n    class extends Component<{ navigation: object }> {\n        displayName = `View:${text}`;\n\n        render() {\n            return (\n                <View style={myStyles.fullSize}>\n <TouchableOpacity\n onPress={this.props.navigation.toggleDrawer}\n >\n <Image\n source={require(\"./hamburger.png\")}\n style={myStyles.hamburger}\n />\n </TouchableOpacity>\n                    <View style={myStyles.fullCenteredView}>\n                        <Text style={myStyles.bigText}>{text}</Text>\n                    </View>\n                </View>\n            );\n        }\n    };\n\nexport const Home = makeSimpleView(\"Home\");\nexport const Alpha = makeSimpleView(\"Alpha\");\nexport const Bravo = makeSimpleView(\"Bravo\");\nexport const Charlie = makeSimpleView(\"Charlie\");\nexport const Zulu = makeSimpleView(\"Zulu\");\nexport const Help = makeSimpleView(\"Help!\");\n\nexport const SomeJumps = (props: object) => (\n    <View style={myStyles.fullSize}>\n <Button\n onPress={() => props.navigation.navigate(\"Alpha\")}\n title=\"Go to Alpha\"\n />\n <Button\n onPress={() => props.navigation.navigate(\"Bravo\")}\n title=\"Leap to Bravo\"\n />\n <Button\n onPress={() => props.navigation.navigate(\"Charlie\")}\n title=\"Jump to Charlie\"\n />\n    </View>\n);\n```", "```js\n// Source file: src/routingApp/drawer.js\n\n/* @flow */\n\nimport { createDrawerNavigator } from \"react-navigation\";\n\nimport {\n    Home,\n    Alpha,\n    Bravo,\n    Charlie,\n    Zulu,\n    Help,\n    SomeJumps\n} from \"./screens\";\n\nexport const MyDrawer = createDrawerNavigator(\n    {\n        Home: { screen: Home },\n        Alpha: { screen: Alpha },\n        Bravo: { screen: Bravo },\n        Charlie: { screen: Charlie },\n        Zulu: { screen: Zulu },\n        [\"Get Help\"]: { screen: Help },\n        [\"Some jumps\"]: { screen: SomeJumps }\n    },\n    {\n drawerBackgroundColor: \"lightcyan\",\n drawerWidth: 140\n    }\n);\n```", "```js\n// Source file: App.routing.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { StatusBar } from \"react-native\";\n\nimport { MyDrawer } from \"./src/routingApp/drawer\";\n\nclass App extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n <StatusBar hidden />\n <MyDrawer />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n```"]