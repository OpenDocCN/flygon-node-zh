["```js\nFlow will ignore any files that lack this comment, so even if you were adding the tool to an already existing project, you could do it gradually, adding files one at a time:\n```", "```js\n/* @flow */\n```", "```js\n/* @flow */\n\nfunction foo(x: ?number): string {\n    if (x) {\n        return x;\n    } else {\n        return \"some string\";\n    }\n}\n\nconsole.log(foo(\"x\"));\n```", "```js\nError ------------------------------------------------------------------------------------- src/types_examples.js:5:16\n\nCannot return x because number [1] is incompatible with string [2].\n\n        2\u2502\n [1][2] 3\u2502 function foo(x /* :?number */) /* :string */ {\n        4\u2502     if (x) {\n        5\u2502         return x;\n        6\u2502     } else {\n        7\u2502         return 'some string';\n        8\u2502     }\n```", "```js\n\nError------------------------------------------------------------------------------------- src/types_examples.js:12:17\n\nCannot call foo with 'x' bound to x because string [1] is incompatible with number [2].\n\n  [2] 3\u2502 function foo(x /* :?number */) /* :string */ {\n :\n 9\u2502 }\n 10\u2502\n 11\u2502 // eslint-disable-next-line no-console\n [1] 12\u2502 console.log(foo('x'));\n 13\u2502\n```", "```js\n// Source file: src/types_basic.js\n\n/* @flow */\n/* eslint-disable no-unused-vars */\n\nlet someFlag: boolean;\nlet greatTotal: number;\nlet firstName: string;\n\nfunction toString(x: number): string {\n    return String(x);\n}\n\nfunction addTwo(x: number | string, y: number | string) {\n    return x + y;\n}\n\nfunction showValue(z: mixed): void {\n    // not returning anything\n    console.log(\"Showing... \", z);\n}\n\nlet numbersList: Array&lt;number>;\nnumbersList = [22, 9, 60]; // OK\nnumbersList[1] = \"SEP\"; // error; cannot assign a string to a number\n\nlet anotherList: number[] = [12, 4, 56];\n\n// *continues...*\n```", "```js\n// *...continued*\n\nlet sealedObject: { name: string, age?: number } = { name: \"\" };\n\nsealedObject.name = \"Ivan Horvat\"; // OK\n\nsealedObject.id = 229; // error: key isn't defined in the data type \nsealedObject = { age: 57 }; // error: mandatory \"name\" field is missing\n\nlet unsealedObject = {};\nunsealedObject.id = 229; // OK\n```", "```js\n// Source file: src/types_advanced.js\n\nlet flag: number | boolean;\nflag = true; // OK\nflag = 1; // also OK\nflag = \"1\"; // error: wrong type\n\nlet traffic: \"red\" | \"amber\" | \"green\"; // traffic is implicitly string\ntraffic = \"yellow\"; // error: not allowed\n\ntype numberOrString = number | string;\nfunction addTwo(x: numberOrString, y: numberOrString) {\n    return x + y;\n}\n\n// *continues...*\n```", "```js\n// Source file: src/types_advanced.js\n\nclass Person {\n // *class fields need Flow annotations*\n first: string;\n last: string;\n\n    constructor(first: string, last: string) {\n        this.first = first;\n        this.last = last;\n    }\n\n    initials(): string {\n        return `${this.first[0]}${this.last[0]}`;\n    }\n\n    fullName(): string {\n        return `${this.first} ${this.last}`;\n    }\n\n    get lastFirst(): string {\n        return `${this.last}, ${this.first}`;\n    }\n\n    set lastFirst(lf: string) {\n        // *very unsafe; no checks!*\n        const parts = lf.split(\",\");\n        this.last = parts[0];\n        this.first = parts[1];\n    }\n}\n\nlet pp = new Person(\"Jan\", \"Jansen\"); // *OK*\nlet qq = new Person(1, 2); // ***error: wrong types for the constructor***\nlet rr: Person; // *OK, \"Person\" type is understood and can be used* \n```", "```js\n// Source file: src/types_advanced.js\n\nclass Animal {\n name: string;\n species: string;\n age: number;\n}\n\nclass Pet {\n name: string;\n species: string;\n age: number;\n}\n\nlet tom: Animal;\ntom = new Pet(); // error: *Pet and Animal are distinct types*\n```", "```js\n// Source file: src/types_advanced.js interface AnimalInt {\n name: string;\n species: string;\n age: number;\n}\n\nclass Animal2 implements AnimalInt {\n name: string;\n species: string;\n age: number;\n}\n\nclass Pet2 implements AnimalInt {\n name: string;\n species: string;\n age: number;\n}\n\nlet tom2: AnimalInt; // *not Animal2 nor Pet2*\ntom2 = new Pet2(); // *OK now*\n```", "```js\n// Source file: src/types_advanced.js\n\ntype simpleFlag = number | boolean;\n\ntype complexObject = {\n id: string,\n name: string,\n indicator: simpleFlag,\n listOfValues: Array&lt;number>\n};\n```", "```js\n// Source file: src/types_advanced.js\n\nlet myFlag: simpleFlag;\n\nlet something: complexObject = {\n id: \"B2209\",\n name: \"Anna Malli\",\n indicator: 1,\n listOfValues: [12, 4, 56]\n};\n```", "```js\n// Source file: src/types_advanced.jsconst identity = x => x;\n```", "```js\n// Source file: src/types_advanced.js\n\nconst identity = &lt;T>(x: T): T => x;\n```", "```js\n// Source file: src/types_advanced.jsfunction identity2&lt;T>(x: T): T {\n    return x;\n}\n```", "```js\n// Source file: src/types_advanced.jsfunction identity3&lt;T>(x: T): T {\n    return 229; // *wrong; this is always a number, not generic*\n*}*\n```", "```js\n// Source file: src/types_advanced.js\n\nfunction makeObject&lt;T1, T2>(x: T1, y: T2) {\n    return { first: x, second: y };\n}\n```", "```js\n// Source file: src/types_advanced.js\n\ntype pair&lt;T> = [T, T];\n\ntype pairOfNumbers = pair&lt;number>;\ntype pairOfStrings = pair&lt;string>;\n\nlet pn: pairOfNumbers = [22, 9];\n\nlet ps: pairOfStrings = [\"F\", \"K\"];\n```", "```js\n// Source file: src/opaque_types.js\n\ntype dniType = string;\ntype nameType = string;\n\nfunction updateClient(id: number, dni: dniType, name: nameType) {\n    /*\n        *Talk to some server*\n *Update the DNI and name for the client with given id*\n    */\n}\n```", "```js\n// Source file: src/opaque_types.js opaque type dniType = string;\ntype nameType = string; // *not opaque!*\n```", "```js\n// Source file: src/opaque_usage.js\n\nimport type { dniType, nameType } from \"./opaque_types\";\nimport { stringToDni } from \"./opaque_types\";\n\nlet newDni = \"1234567-8\"; // *supposedly a DNI*\n```", "```js\nlet newName = \"Kari Nordmann\";\n\nupdateClient(229, newName, newDni); // *doesn't work; 2nd argument should be a DNI*\nupdateClient(229, newDni, newName); // *doesn't work either; same reason*\n```", "```js\nlet newDni: dniType = \"1234567-8\"; // *a string cannot be assigned to DNI*\n```", "```js\n// Source file: src/opaque_types.js\n\nconst stringToDni = (st: string): dniType => {\n    /*\n    *    do validations on st*\n *if OK, return a dniType*\n *if wrong, throw an error*\n    */\n    return (st: dniType);\n};\n\nexport { stringToDni };\n```", "```js\n// Source file: src/opaque_usage.js\n\nupdateClient(229, stringToDni(newDni), newName); // *OK!*\n```", "```js\n// Source file: src/opaque_usage.js\n\nfunction showText(st: string) {\n    console.log(`Important message: ${st}`);\n}\n\nlet anotherDni: dniType = stringToDni(\"9876543-2\");\nshowText(anotherDni); // error!\n```", "```js\n// Source file: src/opaque_types.js\n\nopaque type dniType : string = string;\n```", "```js\nnpm install flow-typed --save-dev\n```", "```js\nscripts: {\n    .\n    .\n    .\n    addTypes: \"flow-typed install\",\n    .\n    .\n    .\n```", "```js\n> npm install moment --save\n> npm run addTypes\n```", "```js\nlet name = lastName + \",\" + firstName;\nlet clientUrl = basicUrl + \"/clients/\" + clientId + \"/\";\n```", "```js\nlet name = `${lastName}, ${firstName}`;\nlet clientUrl = `${basicUrl}/clients/${clientId}/`;\n```", "```js\nlet confirm = `Special handling: ${flagHandle ? \"YES\" : \"NO\"}`;\n```", "```js\nlet list = [\"London\", \"Paris\", \"Amsterdam\", \"Berlin\", \"Prague\"];\nlet sched = `Visiting ${list.length > 0 ? list.join(\", \") : \"no cities\"}`;\n// Visiting London, Paris, Amsterdam, Berlin, Prague\n```", "```js\nlet list = [\"London\", \"Paris\", \"Amsterdam\", \"Berlin\", \"Prague\"];\nlet destinations = list.length > 0 ? list.join(\", \") : \"no cities\";\nlet sched = `Visiting ${destinations}`;\n```", "```js\n// Source file: src/tagged_templates.js function showAge(strings, name, year) {\n    const currYear = new Date().getFullYear();\n    const yearsAgo = currYear - year;\n    return (\n        strings[0] + name + strings[1] + year + `, ${yearsAgo} years ago`\n    );\n}\n\nconst who = \"Prince Valiant\";\nconst when = 1937;\nconst output1 = showAge`The ${who} character was created in ${when}.`;\nconsole.log(output1);\n// *The Prince Valiant character was created in 1937, 81 years ago*\n\nconst model = \"Suzuki\";\nconst yearBought = 2009;\nconst output2 = showAge`My ${model} car was bought in ${yearBought}`;\nconsole.log(output2);\n// *My Suzuki car was bought in 2009, 9 years ago*\n```", "```js\nlet threeLines = \"These are\\nthree lines\\nof text\";\nconsole.log(threeLines);\n// *These are*\n// *three lines*\n// *of text*\n```", "```js\nlet threeLines = `These are\nthree lines\nof text`;\n```", "```js\nif (someCondition) {\n    .\n    .\n    .\n    if (anotherCondition) {\n        .\n        .\n        .\n        var threeLines = `These are\nthree lines\nof text`;\n    }\n}\n```", "```js\nlet notEscaped1 = `this is \\$\\{not\\} interpolation\\\\nright? `;\n// *\"this is ${not} interpolation\\nright? \"*\n```", "```js\n\"Hello!\".repeat(3); // Hello!Hello!Hello!\n```", "```js\n\"Hello\".padStart(12);       // \"       Hello\"\n\"Hello\".padStart(12,\"XYZ\"); // \"XYZXYZXHello\"\n\"Hello\".padStart(3);        // \"Hello\"; no effect here\n\n\"Hello\".padEnd(12);         // \"Hello       \"\n\"Hello\".padEnd(12,\"XYZ\");   // \"HelloXYZXYZX\"\n\"Hello\".padEnd(4);          // \"Hello\"; no effect here either\n```", "```js\nlet padded = String(229.6).padStart(12, \"0\"); // \"*0000000229.6*\"\n```", "```js\n\"Hello, there!\".startsWith(\"He\"); // true\n\"Hello, there!\".endsWith(\"!\");    // true\n\"Hello, there!\".includes(\"her\");  // true\n```", "```js\n\"   Hello, there!  \".trim();      //    \"*Hello, there!*\"\n\"   Hello, there!  \".trimStart(); //    \"*Hello, there!*  \"\n\"   Hello, there!  \".trimEnd();   // \"   *Hello, there!*\"\n```", "```js\nfor (let ch of \"PACKT\") {\n    console.log(ch);\n}\n```", "```js\nlet letters = [...\"PACKT\"];\n// [\"P\", \"A\", \"C\", \"K\", \"T\"]\n```", "```js\n\"use strict\";\n```", "```js\n// Source file: src/let_const.js\n\n{ \n    let w = 0;\n}\nconsole.log(w); // *error: w is not defined!*\n\nlet x = 1;\n{\n    let x = 99;\n}\nconsole.log(x); // *still 1*;\n\nlet y = 2;\nfor (let y = 999; 1 > 2; y++) {\n    /* *nothing!* */\n}\nconsole.log(y); // *still 2*;\n\nconst z = 3;\nz = 9999; // *error!*\n```", "```js\n// Source file: src/let_const.js\n\n// *Countdown to zero?*\nvar delay = 0;\nfor (var i = 10; i >= 0; i--) {\n    delay += 1000;\n    setTimeout(() => {\n        console.log(i + (i > 0 ? \"...\" : \"!\"));\n    }, delay);\n}\n```", "```js\n// Source file: src/let_const.js\n\nvar delay = 0;\nfor (let i = 10; i >= 0; i--) { // *minimal fix!*\n    delay += 1000;\n    setTimeout(() => {\n        console.log(i + (i > 0 ? \"...\" : \"!\"));\n    }, delay);\n}\n```", "```js\n// Source file: src/spread_and_rest.js\n\nlet values = [22, 9, 60, 12, 4, 56];\n\nconst maxOfValues = Math.max(...values); // 60\nconst minOfValues = Math.min(...values); // 4\n```", "```js\n// Source file: src/spread_and_rest.js\n\nlet arr1 = [1, 1, 2, 3];\nlet arr2 = [13, 21, 34];\n\nlet copyOfArr1 = [...arr1]; // a copy of arr1 is created\n\nlet fibArray = [0, ...arr1, 5, 8, ...arr2]; // first 10 Fibonacci numbers\n```", "```js\n// Source file: src/spread_and_rest.js\n\nlet person = { name: \"Juan\", age: 24 };\n\nlet copyOfPerson = { ...person }; // same data as in the person object\n\nlet expandedPerson = { ...person, sister: \"Mar\u00eda\" };\n// {name: \"Juan\", age: 24, sister: \"Mar\u00eda\"}\n```", "```js\n// Source file: src/spread_and_rest.js\n\nfunction average(...nums: Array&lt;number>): number {\n    let sum = 0;\n    for (let i = 0; i &lt; nums.length; i++) {\n        sum += nums[i];\n    }\n    return sum / nums.length;\n};\n\nconsole.log(average(22, 9, 60, 12, 4, 56)); // 27.166667\n```", "```js\nlet [a, b, c] = [22, 9, 60]; // *a=22, b=9, c=60*\n```", "```js\n[a, b] = [b, a];       // *a and b are swapped! a=9, b=22*\n[c, b, a] = [b, a, c]; // *and now a=60, b=9, c=22*\n```", "```js\n// *default values*\nlet [d, e = 1, f = 2, g] = [12, 4]; // *d=12, e=4, f=2, g=undefined*\n\n// *ignoring values*\nlet [h, , i] = [13, 21, 34];       // *h=13, i=34*\n\n// *using with rest*\nlet [j, k, ...l] = [2, 3, 5, 8];   // *j=2, k=3, l=[5,8]*\n```", "```js\nlet obj = { p: 1, q: true, r: \"FK\" };\n\nlet { p, r } = obj;             // p=1, r=\"FK\"\nlet { q: flag, r: name } = obj; // Renaming: flag=true, name=\"FK\"\nlet { q, t = \"India\" } = obj;   // q=true; t=\"India\"\n```", "```js\nfunction minAndMax1(...nums) {\n    return [Math.min(...nums), Math.max(...nums)];\n}\n\nlet [small1, big1] = minAndMax1(22, 9, 60, 12, 4, 56);\n```", "```js\nconst minAndMax2 = (...nums) => ({\n    min: Math.min(...nums),\n    max: Math.max(...nums)\n});\n\nlet { min: small2, max: big2 } = minAndMax2(22, 9, 60, 12, 4, 56);\n```", "```js\nlet a = 2 ** 3; // *8* \n```", "```js\nlet b = Math.pow(2, 3); // also 8\n```", "```js\nlet c = 4;\nc **= 3; // *4 cubed: 64*\n```", "```js\nfunction addThree1 (x, y, z) {\n    const s = x + y + z;\n    return s;\n}\n\nconst addThree2 = (x, y, z) => {\n    const s = x + y + z;\n    return s;\n};\n```", "```js\nconst addThree3 = (x, y, z) => x + y + z;\n```", "```js\nconst simpleAction = (t, d) => {\n    type: t;\n    data: d;\n};\n\nconsole.log(simpleAction(\"ADD_KEY\", 229)); // *undefined*\n```", "```js\nconst simpleAction = (t, d) => ({\n    type: t;\n    data: d;\n});\n\n// *this works as expected*\n```", "```js\n// Source file: src/arrow_functions.js\n\nfunction Show(value: mixed): void {\n    this.saved = value;\n setTimeout(function() {\n console.log(this.saved);\n }, 1000);\n}\n\nlet w = new Show(\"Doesn't work...\"); // *instead, \"undefined\" is shown*\n```", "```js\n// Source file: src/arrow_functions.js\n\nfunction Show1(value: mixed): void {\n    this.saved = value;\n    setTimeout(\n function() {\n console.log(this.saved);\n }.bind(this),\n        1000\n    );\n}\n\nfunction Show2(value: mixed): void {\n    this.saved = value;\n    const that = this;\n    setTimeout(function() {\n        console.log(that.saved);\n    }, 2000);\n}\n\nfunction Show3(value: mixed): void {\n    this.saved = value;\n    setTimeout(() => {\n console.log(this.saved);\n }, 3000);\n}\n\nlet x = new Show1(\"This\");\nlet y = new Show2(\"always\");\nlet z = new Show3(\"works\");\n```", "```js\n// Source file: src/types_basic.js\n\nconst toString2 = (x: number): string => {\n    return x + \"\";\n};\n\ntype numberToString = number => string;\nconst toString3: numberToString = (x: number) => String(x);\n```", "```js\n// Source file: src/default_arguments.js\n\nfunction root(a: number, n: number = 2): number {\n return a ** (1 / n);\n}\n\n// Or, equivalently:\n// const root = (a: number, n: number = 2): number => a ** (1 / n);\n\nconsole.log(root(125, 3));       // *5*\nconsole.log(root(4));            // *2*\nconsole.log(root(9, undefined)); // *3*\n```", "```js\n// Source file: src/default_arguments.js\n\nclass Counter {\n    count: number; // *required by Flow*\n\n    constructor(i: number = 0) {\n        this.count = 0;\n    }\n\n    inc(n: number = 1) {\n        this.count += n;\n    }\n}\n\nconst cnt = new Counter();\ncnt.inc(3);\ncnt.inc();\ncnt.inc();\n\nconsole.log(cnt.count); // 5\n```", "```js\n// Source file: src/default_arguments.js\n\nfunction nonsense(a = 2, b = a + 1, c = a * b, d = 9) {\n    console.log(a, b, c, d);\n}\n\nnonsense(1, 2, 3, 4);                 // *1 2 3 4*\nnonsense();                           // *2 3 6 9*\nnonsense(undefined, 4, undefined, 6); // *2 4 8 6*\n```", "```js\n// Source file: src/map_filter_reduce.js\n\nconst someArray: Array&lt;number> = [22, 9, 60, 12, 4, 56];\n\nconst totalSum = someArray.reduce(\n    (acc: number, val: number) => acc + val,\n    0\n); // *163*\n```", "```js\n// Source file: src/map_filter_reduce.js\n\nconst names = [\"Juan\", \"Mar\u00eda\", \"Sylvia\", \"Federico\"];\n\nconst bulletedList =\n    \"&lt;ul>\" +\n    names.reduce((acc, val) => `${acc}&lt;li>${val}&lt;/li>`, \"\") +\n    \"&lt;/ul>\";\n\n// *&lt;ul>&lt;li>Juan&lt;/li>&lt;li>Mar\u00eda&lt;/li>&lt;li>Sylvia&lt;/li>&lt;li>Federico&lt;/li>&lt;/ul>*\n```", "```js\n// Source file: src/map_filter_reduce.js\n\ntype person = { name: string, sex: string, age: number };\n\nconst family: Array&lt;person> = [\n    { name: \"Huey\", sex: \"M\", age: 7 },\n    { name: \"Dewey\", sex: \"M\", age: 8 },\n    { name: \"Louie\", sex: \"M\", age: 9 },\n    { name: \"Daisy\", sex: \"F\", age: 25 },\n    { name: \"Donald\", sex: \"M\", age: 30 },\n    { name: \"Della\", sex: \"F\", age: 30 }\n];\n\nconst ages = family.map(x => x.age);\n//  [*7, 8, 9, 25, 30, 30*]\n```", "```js\n// Source file: src/map_filter_reduce.js\n\nconst males = family.filter(x => x.sex === \"M\");\n// *an array with Huey, Dewey, Louie, and Donald records*\n```", "```js\n// Source file: src/map_filter_reduce.js\n\nconst eldestMaleAge = family\n    .filter(x => x.sex === \"M\")\n    .map(x => x.age)\n    .reduce((acc, val) => Math.max(acc, val), 0); // *30*\n```", "```js\n&lt;button id=\"billBtn\" onclick=\"billUser(sales, data)\">Bill me&lt;/button>\n```", "```js\nfunction billUser(sales, data) {\n    window.alert(\"Billing the user...\");\n    // *actually bill the user*\n}\n```", "```js\n// Source file: src/functional_code.js\n\nconst once = fn => {\n let done = false;\n return (...args) => {\n if (!done) {\n done = true;\n fn(...args);\n }\n    };\n};\n```", "```js\n&lt;button id=\"billButton\" onclick=\"once(billUser)(sales, data)\">\nBill me\n&lt;/button>;\n```", "```js\n// Source file: src/get_service_with_promises.js\n\nconst axios = require(\"axios\");\n\nconst BASE_URL = \"https://weather.com/en-IN/weather/today/l/\";\n\n// *latitude and longitude data for our three cities*\nconst MONTEVIDEO_UY = \"-34.90,-56.16\";\nconst LONDON_EN = \"51.51,-0.13\";\nconst PUNE_IN = \"18.52,73.86\";\n\nconst getWeather = coords => axios.get(`${BASE_URL}${coords}`);\n```", "```js\n// Source file: src/get_service_with_promises.js\n\nfunction getMontevideo() {\n    getWeather(MONTEVIDEO_UY)\n        .then(result => {\n            console.log(\"Montevideo, with promises\");\n            console.log(`Montevideo: ${result.data.length} bytes`);\n        })\n        .catch(error => console.log(error.message));\n}\n```", "```js\n// Source file: src/get_service_with_promises.js\n\nfunction getLondonAndPuneInSeries() {\n getWeather(LONDON_EN)\n .then(londonData => {\n getWeather(PUNE_IN)\n .then(puneData => {\n                    console.log(\"London and Pune, in series\");\n                    console.log(`London: ${londonData.data.length} b`);\n                    console.log(`Pune: ${puneData.data.length} b`);\n                })\n                .catch(error => {\n                    console.log(\"Error getting Pune...\", error.message);\n                });\n        })\n        .catch(error => {\n            console.log(\"Error getting London...\", error.message);\n        });\n}\n```", "```js\n// Source file: src/get_service_with_promises.js\n\nfunction getCitiesInParallel() {\n    const montevideoGet = getWeather(MONTEVIDEO_UY);\n    const londonGet = getWeather(LONDON_EN);\n    const puneGet = getWeather(PUNE_IN);\n\n    Promise.all([montevideoGet, londonGet, puneGet])\n .then(([montevideoData, londonData, puneData]) => {\n            console.log(\"All three cities in parallel, with promises\");\n            console.log(`Montevideo: ${montevideoData.data.length} b`);\n            console.log(`London: ${londonData.data.length} b`);\n            console.log(`Pune: ${puneData.data.length} b`);\n        })\n        .catch(error => {\n            console.log(error.message);\n        });\n}\n```", "```js\nMontevideo, with promises\nMontevideo: 353277 bytes\n\nLondon and Pune, in series\nLondon: 356537 b\nPune: 351679 b\n\nAll three cities in parallel, with promises\nMontevideo: 351294 b\nLondon: 356516 b\nPune: 351679 b\n```", "```js\n// Source file: src/get_service_with_async_await.js async function getMontevideo() {\n    try {\n        const montevideoData = await getWeather(MONTEVIDEO_UY);\n        console.log(\"Montevideo, with async/await\");\n        console.log(`Montevideo: ${montevideoData.data.length} bytes`);\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n```", "```js\n// Source file: src/get_service_with_async_await.js async function getLondonAndPuneInSeries() {\n    try {\n        const londonData = await getWeather(LONDON_EN);\n const puneData = await getWeather(PUNE_IN);\n        console.log(\"London and Pune, in series\");\n        console.log(`London: ${londonData.data.length} b`);\n        console.log(`Pune: ${puneData.data.length} b`);\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n```", "```js\n// Source file: src/get_service_with_async_await.js\n\nasync function getCitiesInParallel() {\n    try {\n        const montevideoGet = getWeather(MONTEVIDEO_UY);\n        const londonGet = getWeather(LONDON_EN);\n        const puneGet = getWeather(PUNE_IN);\n\n const [montevideoData, londonData, puneData] = await Promise.all([\n montevideoGet,\n londonGet,\n puneGet\n ]);\n\n        console.log(\"All three cities in parallel, with async/await\");\n        console.log(`Montevideo: ${montevideoData.data.length} b`);\n        console.log(`London: ${londonData.data.length} b`);\n        console.log(`Pune: ${puneData.data.length} b`);\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n```", "```js\n// Source file: src/class_persons.js\n\nclass Person {\n    constructor(first, last) {\n        this.first = first;\n        this.last = last;\n    }\n\n    initials() {\n        return `${this.first[0]}${this.last[0]}`;\n    }\n\n    fullName() {\n        return `${this.first} ${this.last}`;\n    }\n}\n\nlet pp = new Person(\"Erika\", \"Mustermann\");\nconsole.log(pp); // *Person {first: \"Erika\", last: \"Mustermann\"}*\nconsole.log(pp.initials()); // *\"EM\"*\nconsole.log(pp.fullName()); // *\"Erika Mustermann\"*\n```", "```js\n// Source file: src/class_persons.js\n\nclass Developer extends Person {\n    constructor(first, last, language) {\n        super(first, last);\n        this.language = language;\n    }\n\n    fullName() {\n // *redefines the original method*\n        return `${super.fullName()}, ${this.language} dev`;\n    }\n}\n\nlet dd = new Developer(\"John\", \"Doe\", \"JS\");\nconsole.log(dd); // *Developer {first: \"John\", last: \"Doe\", language: \"JS\"}*\nconsole.log(dd.initials()); // *\"JD\"*\nconsole.log(dd.fullName()); // *\"John Doe, JS dev\"*\n```", "```js\n// Source file: src/class_persons.js\n\nclass ExtDate extends Date {\n    fullDate() {\n        const months = [\n            \"JAN\",\n            \"FEB\",\n            \"MAR\",\n            \"APR\",\n            \"MAY\",\n            \"JUN\",\n            \"JUL\",\n            \"AUG\",\n            \"SEP\",\n            \"OCT\",\n            \"NOV\",\n            \"DEC\"\n        ];\n\n        return (\n            months[this.getMonth()] + \n            \" \" +\n            String(this.getDate()).padStart(2, \"0\") +\n            \" \" +\n            this.getFullYear()\n        );\n    }\n}\n\nconsole.log(new ExtDate().fullDate()); // *\"MAY 01 2018\"*\n```", "```js\n// Source file: src/class_persons.js\n\nconst toJsonMixin = base =>\n    class extends base {\n        toJson() {\n            return JSON.stringify(this);\n        }\n    };\n\nconst countKeysMixin = base =>\n    class extends base {\n        countKeys() {\n            return Object.keys(this).length;\n        }\n    };\n```", "```js\n// Source file: src/class_persons.js\n\nclass PersonWithTwoMixins extends toJsonMixin(countKeysMixin(Person)) {\n    toJson() { \n        // *redefine the method, just for the sake of it*\n        return \"NEW TOJSON \" + super.toJson();\n    }\n}\n\nlet p2m = new PersonWithTwoMixins(\"Jane\", \"Roe\");\nconsole.log(p2m);\nconsole.log(p2m.toJson());    // *NEW TOJSON {\"first\":\"Jane\",\"last\":\"Roe\"}*\nconsole.log(p2m.countKeys()); // *2*\n```", "```js\n// Source file: src/class_persons.js\n\nclass ExtDate extends Date {\n    static getMonthName(m) {\n        const months = [\n            \"JAN\",\n            \"FEB\",\n            .\n            .\n            .\n            \"DEC\"\n        ];\n        return months[m];\n    }\n    fullDate2() {\n        return (\n            ExtDate.getMonthName(this.getMonth()) +\n            \" \" +\n            String(this.getDate()).padStart(2, \"0\") +\n            \" \" +\n            this.getFullYear()\n        );\n    }\n}\n\nconsole.log(new ExtDate().fullDate2()); // *\"MAY 01 2018\"*\nconsole.log(ExtDate.getMonthName(8));  // *\"SEP\"*\n```", "```js\n// Source file: src/class_persons.js\n\nclass Person {\n    constructor(first, last) {\n        this.first = first;\n        this.last = last;\n    }\n\n    // initials() method snipped out...\n\n    fullName() {\n        return `${this.first} ${this.last}`;\n    }\n\n get lastFirst() {\n return `${this.last}, ${this.first}`;\n }\n\n    // *see below...*\n}\n```", "```js\npp = new Person(\"Jean\", \"Dupont\");\nconsole.log(pp.fullName()); // *\"Jean Dupont\"*\nconsole.log(pp.lastFirst); // *\"Dupont, Jean\"*\n```", "```js\n// Source file: src/class_persons.js\n\nclass Person {\n    // ...*continued from above*\n\n set lastFirst(lf) {\n *// very unsafe; no checks!*\n const parts = lf.split(\",\");\n this.last = parts[0];\n this.first = parts[1];\n }\n}\n\npp.lastFirst = \"Svensson, Sven\";\nconsole.log(pp); // *Person **{first: \" Sven\", last: \"Svensson\"}***\n```", "```js\n// Source file: src/iife_counter.js\n\n/* @flow */\n\n/*\n   * In the following code, the only thing that needs*\n *an explicit type declaration for Flow, is \"name\".*\n *Flow can work out on its own the rest of the types.*\n*/\n\nconst myCounter = ((name: string) => {\n    let count = 0;\n\n    const inc = () => ++count;\n\n    const get = () => count; // private\n\n    const toString = () => `${name}: ${get()}`;\n\n return {\n inc,\n toString\n }; \n})(\"Clicks\");\n\nconsole.log(myCounter); // *an object, with methods **inc** and **toString***\n\nmyCounter.inc(); // *1*\nmyCounter.inc(); // *2*\nmyCounter.inc(); // *3*\n\nmyCounter.toString(); // *\"Clicks: 3\"*\n```", "```js\n// Source file: src/module_counter.1.js\n\n/* @flow */\n\nlet name: string = \"\";\nlet count: number = 0;\n\nlet get = () => count;\nlet inc = () => ++count;\nlet toString = () => `${name}: ${get()}`;\n\n/*\n *Since we cannot initialize anything otherwise,*\n *a common pattern is to provide a \"init()\" function*\n *to do all necessary initializations.*\n*/\nconst init = (n: string) => {\n name = n;\n};\n\nexport default { inc, toString, init }; // *everything else is private*\n```", "```js\n// Source file: src/module_counter_usage.js\n import myCounter from \"module_counter\";\n/*\n   * Initialize the counter appropriately*\n*/ myCounter.init(\"Clicks\");\n\n/*\n   * The rest would work as before*\n*/\nmyCounter.inc(); // 1\nmyCounter.inc(); // 2\nmyCounter.inc(); // 3\nmyCounter.toString(); // \"Clicks: 3\"\n```", "```js\n// Source file: module_counter.2.js\n\n/* @flow */\n\nlet name = \"\";\nlet count = 0;\n\nlet get = () => count;\n\nlet throwNotInit = () => {\n throw new Error(\"Not initialized\");\n};\nlet inc = throwNotInit;\nlet toString = throwNotInit;\n\n/*\n *Since we cannot initialize anything otherwise,*\n *a common pattern is to provide a \"init()\" function*\n *to do all necessary initializations. In this case,*\n *\"inc()\" and \"toString()\" will just throw an error* \n *if the module wasn't initialized.*\n*/\nconst init = (n: string) => {\n    name = n;\n inc = () => ++count;\n toString = () => `${name}: ${get()}`;\n};\n\nexport default { inc, toString, init }; // *everything else is private*\n```", "```js\n// Source file: src/module_conversions.js\n\n/* @flow */\n\ntype conversion = number => number;\n\nconst SPEED_OF_LIGHT_IN_VACUUM_IN_MPS = 186282;\nconst KILOMETERS_PER_MILE = 1.60934;\nconst GRAMS_PER_POUND = 453.592;\nconst GRAMS_PER_OUNCE = 28.3495;\n\nconst milesToKm: conversion = m => m * KILOMETERS_PER_MILE;\nconst kmToMiles: conversion = k => k / KILOMETERS_PER_MILE;\n\nconst poundsToKg: conversion = p => p * (GRAMS_PER_POUND / 1000);\nconst kgToPounds: conversion = k => k / (GRAMS_PER_POUND / 1000);\n\nconst ouncesToGrams: conversion = o => o * GRAMS_PER_OUNCE;\nconst gramsToOunces: conversion = g => g / GRAMS_PER_OUNCE;\n\n/*\n *It's usually preferred to include all \"export\"*\n *statements together, at the end of the file.*\n *You need not have a SINGLE export, however.*\n*/\nexport { milesToKm, kmToMiles };\nexport { poundsToKg, kgToPounds, gramsToOunces, ouncesToGrams };\nexport { SPEED_OF_LIGHT_IN_VACUUM_IN_MPS };\n\n```", "```js\n// Source file: src/module_conversion_usage.js\n\n/* @flow */\n\nimport {\n milesToKm,\n ouncesToGrams,\n poundsToKg as p_to_kg\n} from \"./module_conversions.js\";\nconsole.log(`A miss is as good as ${milesToKm(1)} kilometers.`);\n\nconsole.log(\n    `${ouncesToGrams(1)} grams of protection `,\n    `are worth ${p_to_kg(1) * 1000} grams of cure.`\n);\n```", "```js\nexport type { conversion };\n```", "```js\nimport type { conversion } from \"./module_conversions.js\";\n```"]