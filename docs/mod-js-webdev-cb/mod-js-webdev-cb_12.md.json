["```js\nnpm install enzyme enzyme-adapter-react-16 react-test-renderer redux-mock-store --save\n```", "```js\n// Source file: src/regionsStyledApp/regionsTable.test.js\n\n/* @flow */\n\nimport React from \"react\";\nimport Enzyme from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\n\nimport { RegionsTable } from \"./regionsTable.component\";\n\nEnzyme.configure({ adapter: new Adapter() });\n\nconst fakeDeviceData = {\n isTablet: false,\n isPortrait: true,\n height: 1000,\n width: 720,\n scale: 1,\n fontScale: 1\n};\n\ndescribe(\"RegionsTable\", () => {\n    it(\"renders correctly an empty list\", () => {\n const wrapper = Enzyme.shallow(\n <RegionsTable deviceData={fakeDeviceData} list={[]} />\n );\n expect(wrapper.contains(\"No regions.\"));\n    });\n\n    it(\"renders correctly a list\", () => {\n const wrapper = Enzyme.shallow(\n            <RegionsTable\n deviceData={fakeDeviceData}\n                list={[\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"10\",\n                        regionName: \"Montevideo\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"9\",\n                        regionName: \"Maldonado\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"5\",\n                        regionName: \"Cerro Largo\"\n                    }\n                ]}\n            />\n        );\n\n expect(wrapper.contains(\"Montevideo\"));\n expect(wrapper.contains(\"Maldonado\"));\n expect(wrapper.contains(\"Cerro Largo\"));\n    });\n});\n```", "```js\n// Source file: src/regionsStyledApp/countrySelect.test.js\n\n/* @flow */\nimport React from \"react\";\nimport Enzyme from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\n\nimport { CountrySelect } from \"./countrySelect.component\";\n\nEnzyme.configure({ adapter: new Adapter() });\n\nconst threeCountries = [\n    {\n        countryCode: \"UY\",\n        countryName: \"Uruguay\"\n    },\n    {\n        countryCode: \"AR\",\n        countryName: \"Argentina\"\n    },\n    {\n        countryCode: \"BR\",\n        countryName: \"Brazil\"\n    }\n];\n\nconst fakeDeviceData = {\n    isTablet: false,\n    isPortrait: true,\n    height: 1000,\n    width: 720,\n    scale: 1,\n    fontScale: 1\n}\n\ndescribe(\"CountrySelect\", () => {\n    // \n    // *some tests omitted*\n    //\n\n    it(\"correctly calls onSelect\", () => {\n        const mockGetCountries = jest.fn();\n        const mockOnSelect = jest.fn();\n\n        const wrapper = Enzyme.shallow(\n            <CountrySelect\n                deviceData={fakeDeviceData}\n                loading={false}\n                currentCountry={\"\"}\n                onSelect={mockOnSelect}\n                getCountries={mockGetCountries}\n                list={threeCountries}\n            />\n        );\n\n wrapper.find(\"Picker\").simulate(\"ValueChange\", \"UY\");\n\n expect(mockGetCountries).not.toHaveBeenCalled();\n expect(mockOnSelect).toHaveBeenCalledTimes(1);\n expect(mockOnSelect).toHaveBeenCalledWith(\"UY\");\n    });\n});\n```", "```js\nnpm test\n```", "```js\n// Source file: src/regionsStyledApp/regionsTable.snapshot.test.js\n\n/* @flow */\n\nimport React from \"react\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { RegionsTable } from \"./regionsTable.component\";\n\nconst fakeDeviceData = {\n isTablet: false,\n isPortrait: true,\n height: 1000,\n width: 720,\n scale: 1,\n fontScale: 1\n};\n\ndescribe(\"RegionsTable\", () => {\n    it(\"renders correctly an empty list\", () => {\n        const tree = TestRenderer.create(\n            <RegionsTable deviceData={fakeDeviceData} list={[]} />\n        ).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it(\"renders correctly a list\", () => {\n        const tree = TestRenderer.create(\n            <RegionsTable\n                deviceData={fakeDeviceData}\n                list={[\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"10\",\n                        regionName: \"Montevideo\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"9\",\n                        regionName: \"Maldonado\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"5\",\n                        regionName: \"Cerro Largo\"\n                    }\n                ]}\n            />\n        ).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\n// Source file: src/regionsStyledApp/main.snapshot.test.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { Main } from \"./main.component\";\nimport { store } from \"./store\";\n\nconst fakeDeviceData = {\n    isTablet: false,\n    isPortrait: true,\n    height: 1000,\n    width: 720,\n    scale: 1,\n    fontScale: 1\n};\n\ndescribe(\"Main component\", () => {\n    it(\"renders in portrait mode\", () => {\n        const tree = TestRenderer.create(\n <Provider store={store}>\n                <Main\n                    deviceData={{ ...fakeDeviceData, isPortrait: true }}\n                />\n </Provider>\n        ).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n    it(\"renders in landscape mode\", () => {\n        const tree = TestRenderer.create(\n <Provider store={store}>\n                <Main\n                    deviceData={{ ...fakeDeviceData, isPortrait: false }}\n                />\n </Provider>\n        ).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\nnpm test snapshot\n```", "```js\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`RegionsTable renders correctly a list 1`] = `\n<RCTScrollView\n  style={\n    Array [\n      undefined,\n      Object {\n        \"backgroundColor\": \"lightgray\",\n      },\n    ]\n  }\n>\n  <View>\n    <View>\n      <Text\n        accessible={true}\n        allowFontScaling={true}\n        ellipsizeMode=\"tail\"\n      >\n        Cerro Largo\n      </Text>\n    </View>\n    <View>\n      <Text\n        accessible={true}\n        allowFontScaling={true}\n        ellipsizeMode=\"tail\"\n      >\n        Maldonado\n      </Text>\n    </View>\n    <View>\n      <Text\n        accessible={true}\n        allowFontScaling={true}\n        ellipsizeMode=\"tail\"\n      >\n        Montevideo\n      </Text>\n    </View>\n  </View>\n</RCTScrollView>\n`;\n\nexports[`RegionsTable renders correctly an empty list 1`] = `\n<View\n  style={undefined}\n>\n  <Text\n    accessible={true}\n    allowFontScaling={true}\n    ellipsizeMode=\"tail\"\n  >\n    No regions.\n  </Text>\n</View>\n`;\n```", "```js\n\"scripts\": {\n    .\n    .\n    .\n    \"test\": \"jest\",\n \"coverage\": \"jest --coverage --no-cache\",\n},\n```", "```js\nnpm run coverage\n```", "```js\nnpm install @storybook/cli react-native-storybook-loader --save-dev\nnpx storybook init\n```", "```js\nexport default from './storybook';\n```", "```js\n\"scripts\": {\n \"start\": \"cp App.standard.js App.js && react-native-scripts start\",\n    .\n    .\n    .\n \"storybook\": \"cp App.storybook.js App.js && rnstl && storybook start -p 7007\"\n},\n```", "```js\n\"config\": {\n    \"react-native-storybook-loader\": {\n        \"searchDir\": [\n            \"./src\"\n        ],\n        \"pattern\": \"**/*.story.js\",\n        \"outputFile\": \"./storybook/storyLoader.js\"\n    }\n},\n```", "```js\nimport { getStorybookUI, configure } from \"@storybook/react-native\";\n\nimport { loadStories } from \"./storyLoader\";\n\nconfigure(loadStories, module);\nconst StorybookUI = getStorybookUI({ port: 7007, onDeviceUI: true });\n\nexport default StorybookUI;\n```", "```js\n// Source file: src/regionsStyledApp/regionsTable.story.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react-native\";\n\nimport { Centered } from \"../../storybook/centered\";\nimport { RegionsTable } from \"./regionsTable.component\";\n\nconst fakeDeviceData = {\n    isTablet: false,\n    isPortrait: true,\n    height: 1000,\n    width: 720,\n    scale: 1,\n    fontScale: 1\n};\n\nstoriesOf(\"RegionsTable\", module)\n    .addDecorator(getStory => <Centered>{getStory()}</Centered>)\n    .add(\"with no regions\", () => (\n        <RegionsTable deviceData={fakeDeviceData} list={[]} />\n    ))\n    .add(\"with some regions\", () => (\n        <RegionsTable\n            deviceData={fakeDeviceData}\n            list={[\n                {\n                    countryCode: \"UY\",\n                    regionCode: \"10\",\n                    regionName: \"Montevideo\"\n                },\n                {\n                    countryCode: \"UY\",\n                    regionCode: \"9\",\n                    regionName: \"Maldonado\"\n                },\n                {\n                    countryCode: \"UY\",\n                    regionCode: \"5\",\n                    regionName: \"Cerro Largo\"\n                }\n            ]}\n        />\n    ));\n```", "```js\n// Source file: storybook/centered.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nconst centerColor = \"white\";\nconst styles = StyleSheet.create({\n centered: {\n flex: 1,\n backgroundColor: centerColor,\n alignItems: \"center\",\n justifyContent: \"center\"\n }\n});\n\nexport class Centered extends React.Component<{ children: node }> {\n    static propTypes = {\n        children: PropTypes.node.isRequired\n    };\n\n    render() {\n        return <View style={styles.centered}>{this.props.children}</View>;\n    }\n}\n```", "```js\n// Source file: src/regionsStyledApp/countrySelect.story.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { storiesOf } from \"@storybook/react-native\";\nimport { action } from \"@storybook/addon-actions\";\n\nimport { Centered } from \"../../storybook/centered\";\nimport { CountrySelect } from \"./countrySelect.component\";\n\nconst fakeDeviceData = {\n    isTablet: false,\n    isPortrait: true,\n    height: 1000,\n    width: 720,\n    scale: 1,\n    fontScale: 1\n};\n\nstoriesOf(\"CountrySelect\", module)\n    .addDecorator(getStory => <Centered>{getStory()}</Centered>)\n    .add(\"with no countries yet\", () => (\n        <CountrySelect\n            deviceData={fakeDeviceData}\n            loading={true}\n            currentCountry={\"\"}\n            onSelect={action(\"click:country\")}\n            getCountries={action(\"call:getCountries\")}\n            list={[]}\n        />\n    ))\n    .add(\"with three countries\", () => (\n        <CountrySelect\n            deviceData={fakeDeviceData}\n            currentCountry={\"\"}\n            loading={false}\n            onSelect={action(\"click:country\")}\n            getCountries={action(\"call:getCountries\")}\n            list={[\n                {\n                    countryCode: \"UY\",\n                    countryName: \"Uruguay\"\n                },\n                {\n                    countryCode: \"AR\",\n                    countryName: \"Argentina\"\n                },\n                {\n                    countryCode: \"BR\",\n                    countryName: \"Brazil\"\n                }\n            ]}\n        />\n    ));\n```", "```js\n// *at one terminal*\nnpm run storybook\n\n// *and at another terminal*\nnpm start\n```", "```js\n> npm run storybook\n\n> chapter12b@0.1.0 storybook /home/fkereki/JS_BOOK/modernjs/chapter12\n> cp App.storybook.js App.js && rnstl && storybook start -p 7007\n\nGenerating Dynamic Storybook File List\n\nOutput file: /home/fkereki/JS_BOOK/modernjs/chapter12/storybook/storyLoader.js\nPatterns: [\"/home/fkereki/JS_BOOK/modernjs/chapter12/src/**/*.story.js\"]\nLocated 2 files matching pattern '/home/fkereki/JS_BOOK/modernjs/chapter12/src/**/*.story.js' \nCompiled story loader for 2 files:\n /home/fkereki/JS_BOOK/modernjs/chapter12/src/regionsStyledApp/countrySelect.story.js\n /home/fkereki/JS_BOOK/modernjs/chapter12/src/regionsStyledApp/regionsTable.story.js\n=> Loading custom .babelrc from project directory.\n=> Loading custom addons config.\n=> Using default webpack setup based on \"Create React App\".\nScanning 1424 folders for symlinks in /home/fkereki/JS_BOOK/modernjs/chapter12/node_modules (18ms)\n\nRN Storybook started on => http://localhost:7007/\n\nScanning folders for symlinks in /home/fkereki/JS_BOOK/modernjs/chapter12/node_modules (27ms)\n\n+----------------------------------------------------------------------+\n|                                                                      |\n| Running Metro Bundler on port 8081\\.                                  |\n|                                                                      |\n| Keep Metro running while developing on any JS projects. Feel free to |\n| close this tab and run your own Metro instance if you prefer.        |\n|                                                                      |\n| https://github.com/facebook/react-native                             |\n|                                                                      |\n+----------------------------------------------------------------------+\n\nLooking for JS files in\n /home/fkereki/JS_BOOK/modernjs/chapter12/storybook\n /home/fkereki/JS_BOOK/modernjs/chapter12\n /home/fkereki/JS_BOOK/modernjs/chapter12 \n\nMetro Bundler ready.\n\nwebpack built bab22529b80fbd1ce576 in 2918ms\nLoading dependency graph, done.\n```", "```js\nnpm install react-devtools remote-redux-devtools --save-dev\n```", "```js\n// Source file: src/regionsStyledApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { reducer } from \"./world.reducer\";\n\nexport const store = createStore(\n    reducer,\n composeWithDevTools(applyMiddleware(thunk))\n);\n```", "```js\n// Source file: src/regionsStyledApp/world.actions.js\n\n.\n.\n.\n\nexport const getCountries = () => async dispatch => {\n console.log(\"getCountries: called\");\n    try {\n        dispatch(countriesRequest());\n        const result = await getCountriesAPI();\n        dispatch(countriesSuccess(result.data));\n    } catch (e) {\n console.error(\"getCountries: failure!\");\n        dispatch(countriesFailure());\n    }\n};\n\nexport const getRegions = (country: string) => async dispatch => {\n console.log(\"getRegions: called with \", country);\n    if (country) {\n        try {\n            dispatch(regionsRequest(country));\n            const result = await getRegionsAPI(country);\n            dispatch(regionsSuccess(result.data));\n        } catch (e) {\n console.error(\"getRegions: failure with API!\");\n            dispatch(regionsFailure());\n        }\n    } else {\n console.error(\"getRegions: failure, no country!\");\n        dispatch(regionsFailure());\n    }\n};\n```", "```js\nnpm start\n```", "```js\nnpm install reactotron-react-native reactotron-redux --save-dev\n```", "```js\n    \"scripts\": {\n        \"start\": \"cp App.standard.js App.js && react-native-scripts start\",\n \"start-reactotron\": \"cp App.reactotron.js App.js && react-native-scripts start\",\n        .\n        .\n        .\n```", "```js\n// Source file: reactotronConfig.js\n\n/* @flow */\n\nimport Reactotron from \"reactotron-react-native\";\nimport { reactotronRedux } from \"reactotron-redux\";\n\nconst reactotron = Reactotron.configure({\n    port: 9090,\n    host: \"192.168.1.200\"\n})\n    .useReactNative({\n        networking: {\n            ignoreUrls: /\\/logs$/\n        }\n    })\n    .use(\n        reactotronRedux({\n            isActionImportant: action => action.type.includes(\"success\")\n        })\n    )\n    .connect();\n\nReactotron.log(\"A knick-knack is a thing that sits on top of a whatnot\");\nReactotron.warn(\"If you must make a noise, make it quietly\");\nReactotron.error(\"Another nice mess you've gotten me into.\");\n\nexport default reactotron;\n```", "```js\nconsole.log = Reactotron.log;\nconsole.warn = Reactotron.warn;\nconsole.error = Reactotron.error;\n```", "```js\n// Source file: src/regionsStyledApp/store.reactotron.js\n\n/* @flow */\n\nimport { AsyncStorage } from \"react-native\";\nimport { applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reactotron from \"../../reactotronConfig\";\n\nimport { reducer } from \"./world.reducer\";\n\nexport const store = reactotron.createStore(\n    reducer,\n    applyMiddleware(thunk)\n);\n\n// *continues*...\n```", "```js\n// ...*continued*\n\n(async () => {\n    try {\n        await AsyncStorage.setItem(\"First\", \"Federico\");\n        await AsyncStorage.setItem(\"Last\", \"Kereki\");\n        await AsyncStorage.setItem(\"Date\", \"Sept.22nd\");\n        await AsyncStorage.getItem(\"Last\");\n    } catch (e) {\n    }\n})();\n```", "```js\n// Source file: App.reactotron.js\n\n/* @flow */\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\n\nimport \"./reactotronConfig\";\n import { store } from \"./src/regionsStyledApp/store.reactotron\";\nimport { ConnectedMain } from \"./src/regionsStyledApp/main.connected\";\n\nexport default class App extends React.PureComponent<> {\n    render() {\n        return (\n            <Provider store={store}>\n                <ConnectedMain />\n            </Provider>\n        );\n    }\n}\n```"]