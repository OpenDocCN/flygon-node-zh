["```js\nnpm install electron --save-dev\n```", "```js\n// Source file: electron-start.js\n\n/* @flow */\n\nconst { app, BrowserWindow } = require(\"electron\");\n\nlet mainWindow;\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        height: 768,\n        width: 1024\n    });\n    mainWindow.loadURL(\"http://localhost:3000\");\n    mainWindow.on(\"closed\", () => {\n        mainWindow = null;\n    });\n};\n\napp.on(\"ready\", createWindow);\n\napp.on(\"activate\", () => mainWindow === null && createWindow());\n\napp.on(\n    \"window-all-closed\",\n    () => process.platform !== \"darwin\" && app.quit()\n);\n\n```", "```js\n \"scripts\": {\n \"electron\": \"electron .\",\n        .\n        .\n        .\n```", "```js\n// *in the directory for our restful server:* node out/restful_server_cors.js // *in the React app directory:* npm start\n\n// *and after the React app is running, in other terminal:*\nnpm run electron\n```", "```js\n// Source file: src/regionsApp/serviceApi.js\n\n/* @flow */\n\nconst electron = window.require(\"electron\").remote;\n\n.\n.\n.\n\nconst fs = electron.require(\"fs\");\n\nexport const writeFile = fs.writeFile.bind(fs);\n\nexport const showSaveDialog = electron.dialog.showSaveDialog;\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\n/* @flow */\n\nimport {\n    getCountriesAPI,\n    getRegionsAPI,\n showSaveDialog,\n writeFile\n} from \"./serviceApi\";\n\n.\n.\n.\n\nexport const saveRegionsToDisk = () => async (\n    dispatch: ({}) => any,\n    getState: () => { regions: [] }\n) => {\n    showSaveDialog((filename: string = \"\") => {\n        if (filename) {\n            writeFile(filename, JSON.stringify(getState().regions), e =>\n                e && window.console.log(`ERROR SAVING ${filename}`, e);\n            );\n        }\n    });\n};\n```", "```js\n// Source file: src/regionsApp/regionsTableWithSave.component.js\n\n/* @flow */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"../general.css\";\n\nexport class RegionsTable extends React.PureComponent<{\n    loading: boolean,\n    list: Array<{\n        countryCode: string,\n        regionCode: string,\n        regionName: string\n    }>,\n saveRegions: () => void\n}> {\n    static propTypes = {\n        loading: PropTypes.bool.isRequired,\n        list: PropTypes.arrayOf(PropTypes.object).isRequired,\n saveRegions: PropTypes.func.isRequired\n    };\n\n    static defaultProps = {\n        list: []\n    };\n\n    render() {\n        if (this.props.list.length === 0) {\n            return <div className=\"bordered\">No regions.</div>;\n        } else {\n            const ordered = [...this.props.list].sort(\n                (a, b) => (a.regionName < b.regionName ? -1 : 1)\n            );\n\n            return (\n                <div className=\"bordered\">\n                    {ordered.map(x => (\n                        <div key={x.countryCode + \"-\" + x.regionCode}>\n                            {x.regionName}\n                        </div>\n                    ))}\n <div>\n <button onClick={() => this.props.saveRegions()}>\n Save regions to disk\n </button>\n </div>\n                </div>\n            );\n        }\n    }\n}\n```", "```js\n// Source file: src/regionsApp/regionsTableWithSave.connected.js\n\n/* @flow */\n\nimport { connect } from \"react-redux\";\n\nimport { RegionsTable } from \"./regionsTableWithSave.component\";\n\nimport { saveRegionsToDisk } from \"./world.actions\";\n\nconst getProps = state => ({\n    list: state.regions,\n    loading: state.loadingRegions\n});\n\nconst getDispatch = (dispatch: any) => ({\n saveRegions: () => dispatch(saveRegionsToDisk())\n});\n\nexport const ConnectedRegionsTable = connect(\n    getProps,\n getDispatch\n)(RegionsTable);\n```", "```js\n[{\"countryCode\":\"CA\",\"regionCode\":\"1\",\"regionName\":\"Alberta\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"10\",\"regionName\":\"Quebec\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"11\",\"regionName\":\"Saskatchewan\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"12\",\"regionName\":\"Yukon\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"13\",\"regionName\":\"Northwest Territories\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"14\",\"regionName\":\"Nunavut\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"2\",\"regionName\":\"British Columbia\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"3\",\"regionName\":\"Manitoba\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"4\",\"regionName\":\"New Brunswick\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"5\",\"regionName\":\"Newfoundland and Labrador\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"7\",\"regionName\":\"Nova Scotia\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"8\",\"regionName\":\"Ontario\"},\n{\"countryCode\":\"CA\",\"regionCode\":\"9\",\"regionName\":\"Prince Edward Island\"}]\n```", "```js\nmainWindow = new BrowserWindow({\n    height: 768,\n    width: 1024,\n icon: \"./src/regionsApp/r_icon.png\"\n});\n```", "```js\n// Source file: src/App.regions.js\n\n.\n.\n.\n\nimport { getRegions } from \"./regionsApp/world.actions\";\n\n.\n.\n.\n\nconst electron = window.require(\"electron\").remote;\nconst { Menu } = electron;\n\nconst template = [\n    {\n        label: \"Countries\",\n        submenu: [\n            {\n                label: \"Uruguay\",\n                accelerator: \"Alt+CommandOrControl+U\",\n                click: () => store.dispatch(getRegions(\"UY\"))\n            },\n            {\n                label: \"Hungary\",\n                accelerator: \"Alt+CommandOrControl+H\",\n                click: () => store.dispatch(getRegions(\"HU\"))\n            }\n        ]\n    },\n    {\n        label: \"Bye!\",\n        role: \"quit\"\n    }\n];\n\nconst mainMenu = Menu.buildFromTemplate(template);\nMenu.setApplicationMenu(mainMenu);\n```", "```js\nnpm install node-notifier --save\n```", "```js\nconst electron = window.require(\"electron\").remote;\n\n.\n.\n.\n\nexport const notifier = electron.require(\"node-notifier\");\n```", "```js\n\nimport {\n notifier,\n    .\n    .\n    .\n} from \"./serviceApi\";\n```", "```js\n// Source file: src/regionsApp/world.actions.js\n\n.\n.\n.\n\nexport const saveRegionsToDisk = () => async (\n    dispatch: ({}) => any,\n    getState: () => { regions: [] }\n) => {\n    showSaveDialog((filename: string = \"\") => {\n        if (filename) {\n            writeFile(filename, JSON.stringify(getState().regions), e => {\n if (e) {\n window.console.log(`ERROR SAVING ${filename}`, e);\n } else {\n notifier.notify({\n title: \"Regions app\",\n message: `Regions saved to ${filename}`\n });\n }\n            });\n        }\n    });\n};\n```", "```js\nnpm install electron-devtools-installer redux-devtools-extension --save-dev\n```", "```js\n// Source file: src/regionsApp/store.with.redux.devtools.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\n\nimport { reducer } from \"./world.reducer\";\n\nexport const store = createStore(\n    reducer,\n composeWithDevTools(applyMiddleware(thunk))\n);\n```", "```js\n// Source file: electron-start.with.debugging.js\n\n/* @flow */\n\nconst { app, BrowserWindow } = require(\"electron\");\nconst {\n default: installExtension,\n REACT_DEVELOPER_TOOLS,\n REDUX_DEVTOOLS\n} = require(\"electron-devtools-installer\");\n\nlet mainWindow;\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        height: 768,\n        width: 1024\n    });\n    mainWindow.loadURL(\"http://localhost:3000\");\n\n mainWindow.webContents.openDevTools();\n\n installExtension(REACT_DEVELOPER_TOOLS)\n .then(name => console.log(`Added Extension: ${name}`))\n .catch(err => console.log(\"An error occurred: \", err));\n\n installExtension(REDUX_DEVTOOLS)\n .then(name => console.log(`Added Extension: ${name}`))\n .catch(err => console.log(\"An error occurred: \", err));\n\n    mainWindow.on(\"closed\", () => {\n        mainWindow = null;\n    });\n};\n\napp.on(\"ready\", createWindow);\n\napp.on(\"activate\", () => mainWindow === null && createWindow());\n\napp.on(\n    \"window-all-closed\",\n    () => process.platform !== \"darwin\" && app.quit()\n);\n```", "```js\n// Source file: src/regionsApp/serviceApi.js\n\n.\n.\n.\n\naxios.originalGet = axios.get;\naxios.get = (uri, options, ...args) =>\n    axios.originalGet(uri, options, ...args).then(response => {\n        console.log(`GET ${uri}`, {\n            request: { uri, options, ...args },\n            response\n        });\n        return response;\n    });\n```", "```js\nnpm install electron-builder --save-dev\n```", "```js\n\"scripts\": {\n \"dist\": \"electron-builder\",\n    .\n    .\n    .\n}\n```", "```js\n\"name\": \"chapter13\",\n\"version\": \"0.1.0\",\n\"description\": \"Regions app for chapter 13\",\n\"homepage\": \"./\",\n\"license\": \"free\",\n\"author\": \"Federico Kereki\",\n```", "```js\n\"build\": {\n    \"appId\": \"com.electron.chapter13\",\n    \"compression\": \"normal\",\n    \"asar\": true,\n    \"extends\": null,\n    \"files\": [\n        \"electron-start.js\",\n        \"build/**/*\",\n        \"node_modules/**/*\",\n        \"src/regionsApp/r_icon.png\"\n    ],\n    \"linux\": {\n        \"target\": \"zip\"\n    },\n    \"win\": {\n        \"target\": \"portable\"\n    }\n}\n```", "```js\n// Source file: electron-start.for.builder.js\n\n/* @flow */\n\nconst { app, BrowserWindow } = require(\"electron\");\nconst path = require(\"path\");\nconst url = require(\"url\");\n\nlet mainWindow;\n\nconst createWindow = () => {\n    mainWindow = new BrowserWindow({\n        height: 768,\n        width: 1024,\n icon: path.join(__dirname, \"./build/r_icon.png\")\n    });\n    mainWindow.loadURL(\n url.format({\n pathname: path.join(__dirname, \"./build/index.html\"),\n protocol: \"file\",\n slashes: true\n })\n    );\n    mainWindow.on(\"closed\", () => {\n        mainWindow = null;\n    });\n};\n\napp.on(\"ready\", createWindow);\n\napp.on(\"activate\", () => mainWindow === null && createWindow());\n\napp.on(\n    \"window-all-closed\",\n    () => process.platform !== \"darwin\" && app.quit()\n);\n```", "```js\nnpm run electron-builder\n```"]