["```js\nnpm install enzyme enzyme-adapter-react-16 --save-dev\n```", "```js\n// Source file: src/regionsApp/regionsTable.test.js\n\n/* @flow */\n\nimport React from \"react\";\nimport Enzyme from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\n\nimport { RegionsTable } from \"./regionsTable.component\";\n\nEnzyme.configure({ adapter: new Adapter() });\n\n// *continued...*\n```", "```js\n// ...*continues*\n\ndescribe(\"RegionsTable\", () => {\n    it(\"renders correctly an empty list\", () => {\n        const wrapper = Enzyme.render(<RegionsTable list={[]} />);\n expect(wrapper.text()).toContain(\"No regions.\");\n    });\n\n// *continued*...\n```", "```js\n// *...continues*\n\n    it(\"renders correctly a list\", () => {\n        const wrapper = Enzyme.render(\n            <RegionsTable\n                list={[\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"10\",\n                        regionName: \"Montevideo\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"9\",\n                        regionName: \"Maldonado\"\n                    },\n                    {\n                        countryCode: \"UY\",\n                        regionCode: \"5\",\n                        regionName: \"Cerro Largo\"\n                    }\n                ]}\n            />\n        );\n expect(wrapper.text()).toContain(\"Montevideo\");\n expect(wrapper.text()).toContain(\"Maldonado\");\n expect(wrapper.text()).toContain(\"Cerro Largo\");\n    });\n});\n```", "```js\n// Source file: src/regionsApp/countrySelect.test.js\n\n/* @flow */\n\nimport React from \"react\";\nimport Enzyme from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\n\nimport { CountrySelect } from \"./countrySelect.component\";\n\nEnzyme.configure({ adapter: new Adapter() });\n\nconst threeCountries = [\n    {\n        countryCode: \"UY\",\n        countryName: \"Uruguay\"\n    },\n    {\n        countryCode: \"AR\",\n        countryName: \"Argentina\"\n    },\n    {\n        countryCode: \"BR\",\n        countryName: \"Brazil\"\n    }\n];\n\n// *continued...*\n```", "```js\n// ...*continues*\n\ndescribe(\"CountrySelect\", () => {\n    it(\"renders correctly when loading, with no countries\", () => {\n const mockGetCountries = jest.fn();\n const mockOnSelect = jest.fn();\n\n        const wrapper = Enzyme.mount(\n            <CountrySelect\n                loading={true}\n                onSelect={mockOnSelect}\n                getCountries={mockGetCountries}\n                list={[]}\n            />\n        );\n        expect(wrapper.text()).toContain(\"Loading countries\");\n\n expect(mockGetCountries).toHaveBeenCalledTimes(1);\n expect(mockOnSelect).not.toHaveBeenCalled();\n    });\n\n// *continued...*\n```", "```js\n// ...*continues*\n\n    it(\"renders correctly a countries dropdown\", () => {\n const mockGetCountries = jest.fn();\n const mockOnSelect = jest.fn();\n\n        const wrapper = Enzyme.mount(\n            <CountrySelect\n                loading={false}\n                onSelect={mockOnSelect}\n                getCountries={mockGetCountries}\n                list={threeCountries}\n            />\n        );\n\n        expect(wrapper.text()).toContain(\"Uruguay\");\n        expect(wrapper.text()).toContain(\"Argentina\");\n        expect(wrapper.text()).toContain(\"Brazil\");\n\n expect(mockGetCountries).not.toHaveBeenCalled();\n expect(mockOnSelect).not.toHaveBeenCalled();\n    });\n\n// *continued...*\n```", "```js\n// ...*continues*\n\n    it(\"correctly calls onSelect\", () => {\n        const mockGetCountries = jest.fn();\n const mockOnSelect = jest.fn();\n\n        const wrapper = Enzyme.mount(\n            <CountrySelect\n                loading={false}\n onSelect={mockOnSelect}\n                getCountries={mockGetCountries}\n                list={threeCountries}\n            />\n        );\n\n wrapper\n .find(\"[name='selectCountry']\")\n .at(0)\n .simulate(\"change\", { target: { value: \"UY\" } });\n\n        expect(mockGetCountries).not.toHaveBeenCalled();\n expect(mockOnSelect).toHaveBeenCalledTimes(1);\n expect(mockOnSelect).toHaveBeenCalledWith(\"UY\");\n    });\n});\n```", "```js\n// Source file: src/regionsApp/world.reducer.test.js\n\n/* @flow */\n\nimport { reducer } from \"./world.reducer.js\";\nimport { countriesRequest, regionsSuccess } from \"./world.actions.js\";\n\ndescribe(\"The countries and regions reducer\", () => {\n    it(\"should process countryRequest actions\", () => {\n        const initialState = {\n            loadingCountries: false,\n            currentCountry: \"whatever\",\n            countries: [{}, {}, {}],\n            loadingRegions: false,\n            regions: [{}, {}]\n        };\n\n        const initialJSON = JSON.stringify(initialState);\n\n        expect(reducer(initialState, countriesRequest())).toEqual({\n            loadingCountries: true,\n            currentCountry: \"whatever\",\n            countries: [],\n            loadingRegions: false,\n            regions: [{}, {}]\n        });\n\n        expect(JSON.stringify(initialState)).toBe(initialJSON);\n    });\n\n    it(\"should process regionsSuccess actions\", () => {\n        const initialState = {\n            loadingCountries: false,\n            currentCountry: \"whatever\",\n            countries: [{}, {}, {}],\n            loadingRegions: true,\n            regions: []\n        };\n\n        const initialJSON = JSON.stringify(initialState);\n\n        expect(\n            reducer(\n                initialState,\n                regionsSuccess([\n                    { something: 1 },\n                    { something: 2 },\n                    { something: 3 }\n                ])\n            )\n        ).toEqual({\n            loadingCountries: false,\n            currentCountry: \"whatever\",\n            countries: [{}, {}, {}],\n            loadingRegions: false,\n            regions: [{ something: 1 }, { something: 2 }, { something: 3 }]\n        });\n\n        expect(JSON.stringify(initialState)).toBe(initialJSON);\n    });\n\n    it(\"should return the initial state for unknown actions\", () => {\n        const initialState = {\n            loadingCountries: false,\n            currentCountry: \"whatever\",\n            countries: [{}, {}, {}],\n            loadingRegions: true,\n            regions: []\n        };\n        const initialJSON = JSON.stringify(initialState);\n\n        expect(\n            JSON.stringify(reducer(initialState, { actionType: \"other\" }))\n        ).toBe(initialJSON);\n        expect(JSON.stringify(initialState)).toBe(initialJSON);\n    });\n});\n```", "```js\nconst getProps = state => ({\n    list: state.regions,\n    loading: state.loadingRegions\n});\n```", "```js\n// Source file: src/regionsApp/regionsTable.connected.test.js\n\n/* @flow */\n\nimport { getProps } from \"./regionsTable.connected.js\";\n\ndescribe(\"getProps for RegionsTable\", () => {\n    it(\"should extract regions and loading\", () => {\n        const initialState = {\n            loadingCountries: false,\n            currentCountry: \"whatever\",\n            countries: [{ other: 1 }, { other: 2 }, { other: 3 }],\n            loadingRegions: false,\n            regions: [{ something: 1 }, { something: 2 }]\n        };\n        const initialJSON = JSON.stringify(initialState);\n\n        expect(getProps(initialState)).toEqual({\n            list: [{ something: 1 }, { something: 2 }],\n            loading: false\n        });\n        expect(JSON.stringify(initialState)).toBe(initialJSON);\n    });\n});\n```", "```js\nnpm install redux-mock-store --save-dev\n```", "```js\nexport const getCountries = () => async dispatch => {\n try {\n dispatch(countriesRequest());\n const result = await getCountriesAPI();\n dispatch(countriesSuccess(result.data));\n } catch (e) {\n dispatch(countriesFailure());\n }\n};\n```", "```js\n// Source file: src/regionsApp/world.actions.test.js\n\n/* @flow */\n\nimport configureMockStore from \"redux-mock-store\";\nimport thunk from \"redux-thunk\";\n\nimport {\n    getCountries,\n    COUNTRIES_REQUEST,\n    COUNTRIES_SUCCESS,\n    COUNTRIES_FAILURE\n} from \"./world.actions.js\";\n\nimport { getCountriesAPI } from \"./serviceApi\";\n\nlet mockPromise;\njest.mock(\"./serviceApi\", () => {\n return {\n getCountriesAPI: jest.fn().mockImplementation(() => mockPromise)\n };\n\n// *continues...*\n```", "```js\n// ...*continued*\n\ndescribe(\"getCountries\", () => {\n    it(\"on API success\", async () => {\n const fakeCountries = {\n data: [{ code: \"UY\" }, { code: \"AR\" }, { code: \"BR\" }]\n };\n mockPromise = Promise.resolve(fakeCountries);\n\n        const store = configureMockStore([thunk])({});\n\n        await store.dispatch(getCountries());\n\n        const dispatchedActions = store.getActions();\n\n expect(getCountriesAPI).toHaveBeenCalledWith();\n expect(dispatchedActions.length).toBe(2);\n expect(dispatchedActions[0].type).toBe(COUNTRIES_REQUEST);\n expect(dispatchedActions[1].type).toBe(COUNTRIES_SUCCESS);\n expect(dispatchedActions[1].listOfCountries).toEqual(\n fakeCountries.data\n );\n    });\n\n// *continues...*\n```", "```js\n// ...*continued*\n\n    it(\"on API failure\", async () => {\n mockPromise = Promise.reject(new Error(\"failure!\"));\n\n        const store = configureMockStore([thunk])({});\n\n        await store.dispatch(getCountries());\n\n        const dispatchedActions = store.getActions();\n\n        expect(getCountriesAPI).toHaveBeenCalledWith();\n        expect(dispatchedActions.length).toBe(2);\n        expect(dispatchedActions[0].type).toBe(COUNTRIES_REQUEST);\n        expect(dispatchedActions[1].type).toBe(COUNTRIES_FAILURE);\n    });\n});\n\n// *continues...*\n```", "```js\n// ...*continued*\n\nexport const getCountries = () => async (dispatch, getState) => {\n if (getState().countries.length) {\n // no need to do anything!\n } else {\n        try {\n            dispatch(countriesRequest());\n            const result = await getCountriesAPI();\n            dispatch(countriesSuccess(result.data));\n        } catch (e) {\n            dispatch(countriesFailure());\n        }\n    }\n};\n\n// *continues*...\n```", "```js\n// ...*continued*\n\ndescribe(\"optimized getCountries\", () => {\n    it(\"doesn't do unneeded calls\", async () => {\n        const store = configureMockStore([thunk])({\n countries: [{ land: 1 }, { land: 2 }]\n        });\n\n jest.resetAllMocks();\n\n        await store.dispatch(getCountries());\n\n        expect(getCountriesAPI).not.toHaveBeenCalled();\n expect(store.getActions().length).toBe(0);\n    });\n});\n```", "```js\n// Source file: src/counterApp/clicksDisplay.test.js\n\nimport React from \"react\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { ClicksDisplay } from \"./\";\n\ndescribe(\"clicksDisplay\", () => {\n    it(\"renders correctly\", () => {\n const tree = TestRenderer\n .create(<ClicksDisplay clicks={22} />)\n .toJSON();\n expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\n// Source file: src/counterApp/counter.test.js\n\nimport React from \"react\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { Counter } from \"./counter.component\";\n\ndescribe(\"clicksDisplay\", () => {\n    it(\"renders correctly\", () => {\n        const tree = TestRenderer\n            .create(<Counter count={9} dispatch={() => null} />)\n            .toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\n// Source file: src/regionsApp/regionsTable.snapshot.test.js\n\nimport React from \"react\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { RegionsTable } from \"./regionsTable.component\";\n\ndescribe(\"RegionsTable\", () => {\n it(\"renders correctly an empty list\", () => {\n        const tree = TestRenderer.create(<RegionsTable list={[]} />).toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n it(\"renders correctly a list\", () => {\n        const tree = TestRenderer\n            .create(\n                <RegionsTable\n                    list={[\n                        {\n                            countryCode: \"UY\",\n                            regionCode: \"10\",\n                            regionName: \"Montevideo\"\n                        },\n                        .\n                        .\n                        .\n                    ]}\n                />\n            )\n            .toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\n// Source file: src/regionsApp/countrySelect.snapshot.test.js\n\nimport React from \"react\";\nimport TestRenderer from \"react-test-renderer\";\n\nimport { CountrySelect } from \"./countrySelect.component\";\n\ndescribe(\"CountrySelect\", () => {\n it(\"renders correctly when loading, with no countries\", () => {\n        const tree = TestRenderer\n            .create(\n                <CountrySelect\n                    loading={true}\n                    onSelect={() => null}\n                    getCountries={() => null}\n                    list={[]}\n                />\n            )\n            .toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n\n it(\"renders correctly a countries dropdown\", () => {\n        const tree = TestRenderer\n            .create(\n                <CountrySelect\n                    loading={false}\n                    onSelect={() => null}\n                    getCountries={() => null}\n                    list={[\n                        {\n                            countryCode: \"UY\",\n                            countryName: \"Uruguay\"\n                        },\n                        .\n                        .\n                        .\n                    ]}\n                />\n            )\n            .toJSON();\n        expect(tree).toMatchSnapshot();\n    });\n});\n```", "```js\n// Source file: src/regionsApp/countryAndRegions.test.js\n\nimport React from \"react\";\nimport ShallowRenderer from \"react-test-renderer/shallow\";\n\nimport { CountrySelect } from \"./countrySelect.component\";\nimport { RegionsTable } from \"./regionsTable.component\";\n\nclass CountryAndRegions extends React.Component {\n    render() {\n        return (\n            <div>\n                <div>\n                    Select:\n                    <CountrySelect\n                        loading={true}\n                        onSelect={() => null}\n                        getCountries={() => null}\n                        list={[]}\n                    />\n                </div>\n                <div>\n                    Display: <RegionsTable list={[]} />\n                </div>\n            </div>\n        );\n    }\n}\n\ndescribe(\"App for Regions and Countries\", () => {\n    it(\"renders correctly\", () => {\n        const tree = new ShallowRenderer().render(<CountryAndRegions />);\n        expect(tree).toMatchSnapshot();\n    });\n});\n\n```", "```js\n PASS src/regionsApp/countryAndRegions.test.js\n PASS src/counterApp/counter.test.js\n PASS src/regionsApp/countrySelect.test.js\n PASS src/regionsApp/regionsTable.test.js\n PASS src/counterApp/clicksDisplay.test.js\n\nTest Suites: 5 passed, 5 total\nTests:       7 passed, 7 total\nSnapshots:   7 passed, 7 total\nTime:        0.743s, estimated 1s\nRan all test suites related to changed files.\n\nWatch Usage\n \u203a Press a to run all tests.\n \u203a Press p to filter by a filename regex pattern.\n \u203a Press t to filter by a test name regex pattern.\n \u203a Press q to quit watch mode.\n \u203a Press Enter to trigger a test run.\n```", "```js\n> dir\n-rw-r--r-- 1 fkereki users 956 Aug 10 20:48 countryAndRegions.test.js\n-rw-r--r-- 1 fkereki users 1578 Jul 28 13:02 countrySelect.component.js\n-rw-r--r-- 1 fkereki users 498 Jul 25 23:16 countrySelect.connected.js\n-rw-r--r-- 1 fkereki users 1301 Aug 10 20:31 countrySelect.test.js\n-rw-r--r-- 1 fkereki users 212 Jul 22 21:07 index.js\n-rw-r--r-- 1 fkereki users 985 Aug 9 23:45 regionsTable.component.js\n-rw-r--r-- 1 fkereki users 274 Jul 22 21:17 regionsTable.connected.js\n-rw-r--r-- 1 fkereki users 1142 Aug 10 20:32 regionsTable.test.js\n-rw-r--r-- 1 fkereki users 228 Jul 25 23:16 serviceApi.js\ndrwxr-xr-x 1 fkereki users 162 Aug 10 20:44 __snapshots__\n-rw-r--r-- 1 fkereki users 614 Aug 3 22:22 store.js\n-rw-r--r-- 1 fkereki users 2679 Aug 3 21:33 world.actions.js\n```", "```js\n> dir __snapshots__/\n-rw-r--r-- 1 fkereki users 361 Aug 10 20:44 countryAndRegions.test.js.snap\n-rw-r--r-- 1 fkereki users 625 Aug 10 20:32 countrySelect.test.js.snap\n-rw-r--r-- 1 fkereki users 352 Aug 10 20:01 regionsTable.test.js.snap\n```", "```js\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`CountrySelect renders correctly a countries dropdown 1`] = `\n<div\n  className=\"bordered\"\n>\n  Country: \n  <select\n    onChange={[Function]}\n  >\n    <option\n      value=\"\"\n    >\n      Select a country:\n    </option>\n    <option\n      value=\"AR\"\n    >\n      Argentina\n    </option>\n    <option\n      value=\"BR\"\n    >\n      Brazil\n    </option>\n    <option\n      value=\"UY\"\n    >\n      Uruguay\n    </option>\n  </select>\n</div>\n`;\n\nexports[`CountrySelect renders correctly when loading, with no countries 1`] = `\n<div\n  className=\"bordered\"\n>\n  Loading countries...\n</div>\n`;\n```", "```js\n// Jest Snapshot v1, https://goo.gl/fbAQLP\n\nexports[`App for Regions and Countries renders correctly 1`] = `\n<div>\n  <div>\n    Select:\n    <CountrySelect\n      getCountries={[Function]}\n      list={Array []}\n      loading={true}\n      onSelect={[Function]}\n    />\n  </div>\n  <div>\n    Display: \n    <RegionsTable\n      list={Array []}\n    />\n  </div>\n</div>\n`;\n```", "```js\n FAIL src/regionsApp/countryAndRegions.test.js\n  \u25cf App for Regions and Countries \u203a renders correctly\n\n    expect(value).toMatchSnapshot()\n\n Received value does not match stored snapshot 1.\n\n    - Snapshot\n    + Received\n\n    @@ -7,11 +7,11 @@\n           loading={true}\n           onSelect={[Function]}\n         />\n       </div>\n       <div>\n - Display: \n + Displays: \n         <RegionsTable\n           list={Array []}\n         />\n       </div>\n     </div>\n\n      at Object.it (src/regionsApp/countryAndRegions.test.js:31:22)\n          at new Promise (<anonymous>)\n      at Promise.resolve.then.el (node_modules/p-map/index.js:46:16)\n```", "```js\nSnapshot Summary\n \u203a 1 snapshot test failed in 1 test suite. Inspect your code changes or press `u` to update them.\n```", "```js\n\"scripts\": {\n    .\n    .\n    .\n    \"test\": \"react-app-rewired test --env=jsdom\",\n \"coverage\": \"react-app-rewired test --env=jsdom --coverage --no-cache\",\n    .\n    .\n    .\n}\n```"]