["```js\nnpm install debug --save\n```", "```js\n// Source file: src/logging/index.js\n\n/* @flow */\n\nimport debug from \"debug\";\n\nconstWHAT_TO_LOG = \"myapp:SERVICE:*\"; // change this to suit your needs\nconst MIN_LEVEL_TO_LOG = \"info\"; // error, warn, info, verbose, or debug\n\nconst log = {\n error() {},\n    warn() {},\n    info() {},\n    verbose() {},\n    debug() {}\n};\n\nconst logMessage = (\n    color: string,\n    topic: string,\n    message: any = \"--\",\n    ...rest: any\n) => {\n    const logger = debug(topic);\n    logger.color = color;\n    logger(message, ...rest);\n};\n\nif (process.env.NODE_ENV === \"development\") {\n    localStorage.setItem(\"debug\", WHAT_TO_LOG);\n\n /* *eslint-disable no-fallthrough* */\n    switch (MIN_LEVEL_TO_LOG) {\n        case \"debug\":\n            log.debug = (topic: string, ...args: any) =>\n                logMessage(\"gray\", topic, ...args);\n\n        case \"verbose\":\n            log.verbose = (topic: string, ...args: any) =>\n                logMessage(\"green\", topic, ...args);\n\n        case \"info\":\n            log.info = (topic: string, ...args: any) =>\n                logMessage(\"blue\", topic, ...args);\n\n        case \"warn\":\n            log.warn = (topic: string, ...args: any) =>\n                logMessage(\"brown\", topic, ...args);\n\n        case \"error\":\n        default:\n            log.error = (topic: string, ...args: any) =>\n                logMessage(\"red\", topic, ...args);\n    }\n}\n\nexport { log };\n```", "```js\n// Source file: src/index.js\n\n.\n.\n.\n\nimport { log } from \"./logging\";\n\nlog.error(\"myapp:SERVICE:LOGIN\", `Attempt`, { user: \"FK\", pass: \"who?\" });\n\nlog.error(\"myapp:FORM:INITIAL\", \"Doing render\");\n\nlog.info(\n    \"myapp:SERVICE:ERROR_STORE\",\n    \"Reporting problem\",\n    \"Something wrong\",\n    404\n);\n\nlog.warn(\"myapp:SERVICE:LOGIN\");\n\nlog.debug(\"myapp:SERVICE:INFO\", \"This won't be logged... low level\");\n\nlog.info(\"myapp:SERVICE:GETDATE\", \"Success\", {\n    day: 22,\n    month: 9,\n    year: 60\n});\n\nlog.verbose(\"myapp:SERVICE:LOGIN\", \"Successful login\");\n```", "```js\nnpm install react-devtools --save-dev\n```", "```js\n\"scripts\": {\n    .\n    .\n    .\n    \"devtools\": \"react-devtools\"\n}\n```", "```js\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n <script src=\"img/192.168.1.200:8097\"></script>\n  .\n  .\n  .\n```", "```js\n{\n  \"count\": 6,\n  \"dispatch\": \"[function dispatch]\"\n}\n```", "```js\nnpm install redux-logger --save\n```", "```js\n// Source file: src/counterApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\n\nimport { reducer } from \"./counter.reducer.js\";\n\nconst logger = createLogger({ diff: true, duration: true });\nexport const store = createStore(reducer, applyMiddleware(logger));\n.\n.\n.\n```", "```js\nexport const store =\n    process.env.NODE_ENV === \"development\"\n        ? createStore(reducer, applyMiddleware(logger))\n        : createStore(reducer);\n.\n.\n.\n```", "```js\n// Source file: src/regionsApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n\nimport { reducer } from \"./worlds.reducer.js\";\n\nconst logger = createLogger({ duration: true });\n\nexport const store = createStore(reducer, applyMiddleware(thunk, logger));\n.\n.\n.\n```", "```js\nnpm install redux-devtools-extension --save-dev\n```", "```js\ncomposeWithDevTools()\u00a0added function will take care of the necessary connections to make everything work:\n```", "```js\n// Source file: src/regionsApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { reducer } from \"./worlds.reducer.js\";\n\nconst logger = createLogger({ duration: true });\n\nexport const store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(thunk, logger))\n);\n```", "```js\nnpm install --save connected-react-router\n```", "```js\n// Source file: src/routingApp/store.js\n\n/* @flow */\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport { createBrowserHistory } from \"history\";\n\nimport { reducer } from \"./login.reducer\";\n\nconst logger = createLogger({ duration: true });\n\nexport const history = createBrowserHistory();\n\nexport const store = createStore(\n connectRouter(history)(reducer),\n    composeWithDevTools(\n        applyMiddleware(routerMiddleware(history), thunk, logger)\n    )\n);\n```", "```js\n// Source file: src/App.routing.auth.js\n\nimport React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport { ConnectedRouter } from \"connected-react-router\";\n\nimport {\n    ConnectedLogin,\n    AuthRoute\n} from \"./routingApp\";\nimport { history, store } from \"./routingApp/store\";\n\nconst Home = () => <h1>Home Sweet Home</h1>;\nconst Help = () => <h1>Help! SOS!</h1>;\n.\n.\n.\n\nclass App extends Component<{}> {\n    render() {\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n <ConnectedRouter history={history}>\n                        <div>\n                            <header>\n                                <nav>\n                                    <Link to=\"/\">Home</Link>&nbsp;\n                                    <Link to=\"/login\">Log \n                                     in</Link>&nbsp;\n                                    .\n                                    .\n                                    .\n                                </nav>\n                            </header>\n\n                            <Switch>\n                              <Route exact path=\"/\" component={Home} />\n                              <Route path=\"/help\" component={Help} />\n                                .\n                                .\n                                .\n                            </Switch>\n                        </div>\n </ConnectedRouter>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n```"]