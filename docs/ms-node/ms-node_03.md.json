["```js\n// First attempt\nconsole.log('Copying...');\nlet block = fs.readFileSync(\"source.bin\");\nconsole.log('Size: ' + block.length);\nfs.writeFileSync(\"destination.bin\", block);\nconsole.log('Done.');\n```", "```js\n// Attempt the second\nconsole.log('Copying...');\nfs.readFile('source.bin', null, (error1, block) => {\n  if (error1) {\n    throw error1;\n  }\n  console.log('Size: ' + block.length);\n  fs.writeFile('destination.bin', block, (error2) => {\n    if (error2) {\n      throw error2;\n    }\n    console.log('Done.');\n  });\n});\n```", "```js\nRangeError: \"size\" argument must not be larger than 2147483647\n at Function.Buffer.allocUnsafe (buffer.js:209:3)\n at tryCreateBuffer (fs.js:530:21)\n at Object.fs.readFile (fs.js:569:14)\n ...\n```", "```js\n// Attempt, part III\nconsole.log('Copying...');\nfs.readFileAsync('source.bin').then((block) => {\n  console.log('Size: ' + block.length);\n  return fs.writeFileAsync('destination.bin', block);\n}).then(() => {\n console.log('Done.');\n}).catch((e) => {\n  // handle errors\n});\n```", "```js\n// Streams to the rescue\nconsole.log('Copying...');\nfs.createReadStream('source.bin')\n.pipe(fs.createWriteStream('destination.bin'))\n.on('close', () => { console.log('Done.'); });\n```", "```js\nconst stream = require('stream');\nlet readable = new stream.Readable({\n  encoding: \"utf8\",\n  highWaterMark: 16000,\n  objectMode: true\n});\n```", "```js\nconst stream = require('stream');\n\nlet Feed = function(channel) {\n   let readable = new stream.Readable({});\n   let news = [\n      \"Big Win!\",\n      \"Stocks Down!\",\n      \"Actor Sad!\"\n   ];\n   readable._read = () => {\n      if(news.length) {\n         return readable.push(news.shift() + \"\\n\");\n      }\n      readable.push(null);\n   };\n   return readable;\n};\n```", "```js\nlet feed = new Feed();\n\nfeed.on(\"readable\", () => {\n   let data = feed.read();\n   data && process.stdout.write(data);\n});\nfeed.on(\"end\", () => console.log(\"No more news\"));\n// Big Win!\n// Stocks Down!\n// Actor Sad!\n// No more news\n```", "```js\nconst stream = require('stream');\n\nlet Feed = function(channel) {\n   let readable = new stream.Readable({\n      objectMode : true\n   });\n   let prices = [{price : 1},{price : 2}];\n   readable._read = () => {\n      if(prices.length) {\n         return readable.push(prices.shift());\n      }\n      readable.push(null);\n   };\n   return readable;\n};\n```", "```js\nlet feed = new Feed();\nfeed.on(\"readable\", () => {\n   let data = feed.read();\n   data && console.log(data);\n});\nfeed.on(\"end\", () => console.log(\"No more news\"));\n// { price: 1 }\n// { price: 2 }\n// No more news\n```", "```js\nlet Feed = function(channel) {\n   let readable = new stream.Readable({});\n   let news = 'A long headline might go here';\n   readable._read = () => {\n      readable.push(news);\n      readable.push(null);\n   };\n   return readable;\n};\n```", "```js\nfeed.on('readable', () => {\n   let character;\n   while(character = feed.read(1)) {\n      console.log(character.toString());\n   }\n});\n// A\n// \n// l\n// o\n// n\n// ...\n// No more bytes to read\n```", "```js\nconst stream = require('stream');\nlet readable = new stream.Writable({\n  highWaterMark: 16000,\n  decodeStrings: true\n});\n```", "```js\nconst stream = require('stream');\n\nlet writable = new stream.Writable({\n   decodeStrings: false\n});\n\nwritable._write = (chunk, encoding, callback) => {\n   console.log(chunk.toString());\n   callback();\n};\n\nlet written = writable.write(Buffer.alloc(32, 'A'));\nwritable.end();\n\nconsole.log(written);\n\n// AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n// true\n```", "```js\nlet written = writable.write(Buffer.alloc(16384, 'A'));\nconsole.log(written); // Will be 'false'\n```", "```js\nconst stream = require('stream');\n\nlet writable = new stream.Writable({\n   highWaterMark: 10\n});\n\nwritable._write = (chunk, encoding, callback) => {\n   process.stdout.write(chunk);\n   callback();\n};\n\nfunction writeData(iterations, writer, data, encoding, cb) {\n   (function write() {\n\n      if(!iterations--) {\n         return cb()\n      }\n\n      if (!writer.write(data, encoding)) {\n         console.log(` <wait> highWaterMark of ${writable.writableHighWaterMark} reached`);\n         writer.once('drain', write);\n      }\n   })()\n}\n\nwriteData(4, writable, 'String longer than highWaterMark', 'utf8', () => console.log('finished'));\n```", "```js\nconst stream = require(\"stream\");\nconst net = require(\"net\");\n\nnet.createServer(socket => {\n  socket.write(\"Go ahead and type something!\");\n  socket.setEncoding(\"utf8\");\n  socket.on(\"readable\", function() {\n    process.stdout.write(this.read())\n  });\n})\n.listen(8080);\n```", "```js\ntelnet 127.0.0.1 8080\n```", "```js\n_transform = function(buffer, encoding, cb) {\n  let transformation = \"...\";\n  this.push(transformation);\n  cb();\n};\n```", "```js\nconst stream = require('stream');\nlet converter = new stream.Transform();\n\nconverter._transform = function(num, encoding, cb) {\n   this.push(String.fromCharCode(new Number(num)) + \"\\n\");\n   cb();\n};\n\nprocess.stdin.pipe(converter).pipe(process.stdout);\n```", "```js\n65 A\n66 B\n256 \u0100\n257 \u0101\n```", "```js\nconst fs = require('fs');\nconst stream = require('stream');\nconst spy = new stream.PassThrough();\n\nspy\n.on('error', (err) => console.error(err))\n.on('data', function(chunk) {\n    console.log(`spied data -> ${chunk}`);\n})\n.on('end', () => console.log('\\nfinished'));\n\nfs.createReadStream('./passthrough.txt').pipe(spy).pipe(process.stdout);\n```", "```js\nconst http = require('http');\nlet server = http.createServer((request, response) => {\n   response.writeHead(200, { \n      'Content-Type': 'text/plain'\n   });\n   response.write(\"PONG\");\n   response.end();\n}).listen(8080);\n\nserver.on(\"request\", (request, response) => {\n   request.setEncoding(\"utf8\");\n   request.on(\"readable\", () => console.log(request.read()));\n   request.on(\"end\", () => console.log(\"DONE\"));\n});\n```", "```js\nconst http = require('http');\nconst server = new http.Server();\nserver.on('connection', socket => {\n   let now = new Date();\n   console.log(`Client arrived: ${now}`);\n   socket.on('end', () => console.log(`client left: ${new Date()}`));\n});\n// Connections get 2 seconds before being terminated\nserver.setTimeout(2000, socket => socket.end());\nserver.listen(8080);\n```", "```js\nserver.on('request', (request, response) => {\n   request.setEncoding('utf8');\n   request.on('readable', () => {\n      let data = request.read();\n      data && response.end(data);\n   });\n});\n```", "```js\ncurl http://localhost:8080 -d \"Here is some data\"\n// Here is some data\n```", "```js\nconst http = require('http');\nhttp.request({ \n   host: 'www.example.org',\n   method: 'GET',\n   path: \"/\"\n}, function(response) {\n   response.setEncoding(\"utf8\");\n   response.on(\"readable\", () => console.log(response.read()));\n}).end();\n```", "```js\nhttp.get(\"http://www.example.org/\", response => {\n  console.log(`Status: ${response.statusCode}`);\n}).on('error', err => {\n  console.log(\"Error: \" + err.message);\n});\n```", "```js\nconst http = require('http');\nconst server = new http.Server();\n\nserver.on(\"request\", (request, socket) => {\n   console.log(request.url);\n   http.request({ \n      host: 'www.example.org',\n      method: 'GET',\n      path: \"/\",\n      port: 80\n   }, response => response.pipe(socket))\n   .end();\n});\n\nserver.listen(8080, () => console.log('Proxy server listening on localhost:8080'));\n```", "```js\nconst http = require('http');\nconst net = require('net');\nconst url = require('url');\nconst proxy = new http.Server();\n\nproxy.on('connect', (request, clientSocket, head) => {\n  let reqData = url.parse(`http://${request.url}`);\n  let remoteSocket = net.connect(reqData.port, reqData.hostname, () => {\n    clientSocket.write('HTTP/1.1 200 \\r\\n\\r\\n');\n    remoteSocket.write(head);\n    remoteSocket.pipe(clientSocket);\n    clientSocket.pipe(remoteSocket);\n   });\n}).listen(8080);\n\nlet request = http.request({\n  port: 8080,\n  hostname: 'localhost',\n  method: 'CONNECT',\n  path: 'www.example.org:80'\n});\nrequest.end();\n\nrequest.on('connect', (res, socket, head) => {\n  socket.setEncoding(\"utf8\");\n  socket.write('GET / HTTP/1.1\\r\\nHost: www.example.org:80\\r\\nConnection: close\\r\\n\\r\\n');\n  socket.on('readable', () => {\n      console.log(socket.read());\n   });\n  socket.on('end', () => {\n    proxy.close();\n  });\n});\n```", "```js\nopenssl genrsa -out server-key.pem 2048\n openssl req -new -key server-key.pem -out server-csr.pem\n openssl x509 -req -in server-csr.pem -signkey server-key.pem -out server-cert.pem\n```", "```js\nconst https = require('https');\nconst fs = require('fs');\nhttps.createServer({\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n}, (req, res) => {\n  ...\n}).listen(443);\n```", "```js\nlet options = {\n  key: fs.readFileSync(\"mysite.key\"),\n  cert: fs.readFileSync(\"mysite.com.crt\"),\n  ca: [ fs.readFileSync(\"gd_bundle.crt\") ]\n};\n```", "```js\nquery: { filter: 'sports', maxresults: '20' }\n```", "```js\nhost: null,\n path: '//www.example.org'\n```", "```js\nhost: 'www.example.org',\n path: null\n```", "```js\nurl.parse(\"//www.example.org\", null, true);\n```", "```js\nurl.format({\n  protocol: 'http:',\n  host: 'www.example.org'\n});\n```", "```js\nurl.resolve(\"http://example.org/a/b\", \"c/d\"); //'http://example.org/a/c/d'\nurl.resolve(\"http://example.org/a/b\", \"/c/d\"); \n//'http://example.org/c/d'\nurl.resolve(\"http://example.org\", \"http://google.com\"); //'http://google.com/'\n```", "```js\n{\n  foo: 'bar',\n  bingo: 'bango'\n}\n```", "```js\nlet qs = require(\"querystring\");\nconsole.log(qs.parse(\"foo:bar^bingo:bango\", \"^\", \":\"));\n// { foo: 'bar', bingo: 'bango' }\n```", "```js\nconsole.log(qs.stringify({ foo: 'bar', bingo: 'bango' }));\n// foo=bar&bingo=bango\n```", "```js\nconsole.log(qs.stringify({ foo: 'bar', bingo: 'bango' }, \"^\", \":\"));\n// foo:bar^bingo:bango\n```", "```js\nresponse.writeHead(200, {\n  'Content-Length': 4096,\n  'Content-Type': 'text/plain'\n});\n```", "```js\nresponse.setHeader(\"Set-Cookie\", [\"session:12345\", \"language=en\"]);\n```", "```js\nconst http = require('http');\nconst url = require('url');\nhttp.createServer((request, response) => {\n  let cookies = request.headers.cookie;\n  if(!cookies) {\n    let cookieName = \"session\";\n    let cookieValue = \"123456\";\n    let numberOfDays = 4;\n    let expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + numberOfDays);\n\n    let cookieText = `${cookieName}=${cookieValue};expires=${expiryDate.toUTCString()};`;\n    response.setHeader('Set-Cookie', cookieText);\n    response.writeHead(302, {'Location': '/'});\n    return response.end();\n  }\n\n  cookies.split(';').forEach(cookie => {\n    let m = cookie.match(/(.*?)=(.*)$/);\n    cookies[m[1].trim()] = (m[2] || '').trim();\n  });\n\n  response.end(`Cookie set: ${cookies.toString()}`);\n}).listen(8080);\n```", "```js\nlet server = http.createServer((request, response) => {\n  let cookies = request.headers.cookie;\n  ...\n```", "```js\nif (!cookies) {\n  ...\n  let cookieText = `${cookieName}=${cookieValue};expires=${expiryDate.toUTCString()};`;\n  response.setHeader('Set-Cookie', cookieText);\n  response.writeHead(302, {\n    'Location': '/'\n  });\n  return response.end();\n}\n```", "```js\ncookies.split(';').forEach(cookie => {\n let m = cookie.match(/(.*?)=(.*)$/);\n cookies[m[1].trim()] = (m[2] || '').trim();\n});\nresponse.end(`Cookie set: ${cookies.toString()}`);\n```", "```js\nCookie set: AuthSession=c3Bhc3F1YWxpOjU5QzkzRjQ3OosrEJ30gDa0KcTBhRk-YGGXSZnT; io=QuzEHrr5tIZdH3LjAAAC\n```", "```js\nAccept: text/html\n```", "```js\nContent-Type: text/html; charset=utf-8\n```", "```js\nfile --brief --mime resource\n```", "```js\nlet exec = require('child_process').exec;\nexec(\"file --brief --mime resource\", (err, mime) => {\n  console.log(mime);\n});\n```", "```js\nconst http = require('http');\nhttp.createServer((request, response) => { \n  if(request.url === '/favicon.ico') {\n    response.writeHead(200, {\n      'Content-Type': 'image/x-icon'\n    });\n    return response.end();\n  }\n  response.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n  response.write('Some requested resource');\n  response.end();\n\n}).listen(8080);\n```", "```js\nconst http = require('http');\nconst qs = require('querystring');\n\nhttp.createServer((request, response) => {\n   let body = \"\";\n   if(request.url === \"/\") {\n      response.writeHead(200, {\n         \"Content-Type\": \"text/html\"\n      });\n      return response.end(\n         '<form action=\"/submit\" method=\"post\">\\\n         <input type=\"text\" name=\"sometext\">\\\n         <input type=\"submit\" value=\"Send some text\">\\\n         </form>'\n      );\n   }\n}).listen(8080);\n```", "```js\nif(request.url === \"/submit\") {\n   request.on('readable', () => {\n      let data = request.read();\n      data && (body += data);\n   });\n   request.on('end', () => {\n      let fields = qs.parse(body);\n      response.end(`Thanks for sending: ${fields.sometext}`);\n   });\n}\n```", "```js\nlet values = url.parse(request.url, true).query['values'].split(\",\");\nlet cacheKey = values.sort().join('');\n```", "```js\n<svg width=\"200\" height=\"200\">\n<g transform=\"translate(100,100)\">\n<defs>\n  <radialgradient id=\"grad-0\" gradientUnits=\"userSpaceOnUse\" cx=\"0\" cy=\"0\" r=\"100\">\n  <stop offset=\"0\" stop-color=\"#7db9e8\"></stop>\n ...\n```", "```js\njsdom.env({\n   ...\n   html : `<!DOCTYPE html><div id=\"pie\" style=\"width:${width}px;height:${height}px;\"></div>`,\n   scripts : ['d3.min.js','d3.layout.min.js','pie.js'], \n   done : (err, window) => {\n      let svg = window.insertPie(\"#pie\", width, height, values).innerHTML;\n      let svgToPng = spawn(\"convert\", [\"svg:\", \"png:-\"]);\n      let filewriter = fs.createWriteStream(cacheKey);\n\n      filewriter.on(\"open\", err => {\n         let streamer = new stream.Transform();\n         streamer._transform = function(data, enc, cb) {\n            filewriter.write(data);\n            this.push(data);\n            cb();\n         };\n         svgToPng.stdout.pipe(streamer).pipe(response);\n         svgToPng.stdout.on('finish', () => response.end());\n\n         // jsdom's domToHTML will lowercase element names\n         svg = svg.replace(/radialgradient/g,'radialGradient');\n\n         svgToPng.stdin.write(svg);\n         svgToPng.stdin.end();\n         window.close();\n      });\n   }\n});    \n```", "```js\nsvgToPng.stdout.pipe(streamer).pipe(response);\n```", "```js\nfs.exists(cacheKey, exists => {\n  response.writeHead(200, {\n    'Content-Type': 'image/png'\n  });\n  if (exists) {\n    fs.createReadStream(cacheKey).pipe(response);\n    return;\n  }\n ...\n```", "```js\nhttp://localhost:8080/?values=3,3,3,3,3\n```"]