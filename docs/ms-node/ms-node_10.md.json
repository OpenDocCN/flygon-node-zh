["```js\nlet start = new Date().getTime();\nfor (x = 0; x < 1000; x++) {\n  measureTheSpeedOfThisFunction();\n}\nconsole.log(new Date().getTime() - start);\n// A time, in milliseconds \n```", "```js\n console.time('Add 1000000 records');\n let rec = [];\n for (let i = 0; i < 1000000; i++) {\n     rec.push(1);\n }\n console.timeEnd('Add 1000000 records');\n //  > Add 1000000 records: 59ms\n```", "```js\n> util.format('%s:%s', 'foo','bar')\n 'foo:bar' \n```", "```js\n> util.format('%s:%s', 'foo', 'bar', 'baz');\n 'foo:bar baz' \n```", "```js\nconst util = require('util');\nlet obj = function() {\n   this.foo = 'bar';\n};\nobj.prototype.inspect = function() {\n   return \"CUSTOM INSPECTOR\";\n};\nconsole.log(util.inspect(new obj));\n// CUSTOM INSPECTOR\nconsole.log(util.inspect(new obj, { customInspect: false }));\n// { foo: 'bar' }\n```", "```js\n{\n   number: 'yellow',\n   boolean: 'yellow',\n   string: 'green',\n   date: 'magenta',\n   regexp: 'red'\n   null: 'bold',\n   undefined: 'grey',\n   special: 'cyan',\n } \n```", "```js\n util.inspect.styles.number = \"green\";\n console.log(util.inspect([1,2,4,5,6], {colors: true}));\n // [1,2,3,4,5,6] Numbers are in green\n```", "```js\n> node inspect somescript.js \n```", "```js\n// debug-sample.js\nsetTimeout(() => {\n  let dummyVar = 123;\n  debugger;\n  console.log('world');\n}, 1000);\nconsole.log('hello'); \n```", "```js\n> node inspect debug-sample.js\n< Debugger listening on ws://127.0.0.1:9229/b3f76643-9464-41d0-943a-d4102450467e\n< For help see https://nodejs.org/en/docs/inspector\n< Debugger attached.\nBreak on start in debug-sample.js:1\n> 1 (function (exports, require, module, __filename, __dirname) { setTimeout(() => {\n 2 let dummyVar = 123;\n 3 debugger;\ndebug>\n```", "```js\n...\ndebug> cont\n< hello // A pause will now occur because of setTimeout\nbreak in debug-sample.js:3\n 1 (function (exports, require, module, __filename, __dirname) { setTimeout(() => {\n 2 let dummyVar = 123;\n> 3 debugger;\n 4 console.log('world');\n 5 }, 1000);\ndebug>\n```", "```js\ndebug> repl\nPress Ctrl + C to leave debug repl\n> dummyVar\n123\n```", "```js\ndebug> next\nbreak in timers.js:307\n 305 threw = false;\n 306 } finally {\n>307 if (timerAsyncId !== null) {\n 308 if (!threw)\n 309 emitAfter(timerAsyncId);\ndebug>\n```", "```js\ndebug> scripts\n* 39: timers.js <native>\n71: debug-sample.js\n```", "```js\n> require('assert').equal(1,2,'Not equal!')\nAssertionError [ERR_ASSERTION]: Not equal!\n>\n```", "```js\n> require('assert').equal(1,1,\"Not equal!\")\nundefined\n```", "```js\n1 == \"1\" // true\nfalse == \"0\" // true\nfalse == null // false\n```", "```js\n1 === \"1\" // false\nfalse === \"0\" // false\nfalse === null // false\n```", "```js\nlet a = function(){};\nlet b = new a;\nlet c = new a;\nlet d = b;\nconsole.log(a == function(){}) // false\nconsole.log(b == c) // false\nconsole.log(b == d) // true\nconsole.log(b.constructor === c.constructor); // true\n```", "```js\nconst assert = require('assert');\nlet a = [1,2,3];\nlet b = [1,2,3];\nassert.deepEqual(a, b); // passes, so nothing is output\nassert.strictEqual(a, b); // throws Assertion error\n```", "```js\nequal            notEqual\nstrictEqual      notStrictEqual\ndeepEqual        notDeepEqual\ndeepStrictEqual  notDeepStrictEqual\nok\nifError\nfail\nthrows           doesNotThrow\n```", "```js\n// assertthrows.js\nconst assert = require('assert');\ntry {\n   assert.fail(1,2,'Bad!','NOT EQ') \n} catch(e) { \n   console.log(e);\n}\n```", "```js\n{ AssertionError [ERR_ASSERTION]: Bad!\n at Object.<anonymous> (/Users/sandro/Desktop/clients/ME/writing/Mastering_V2/chapter_ten/code/assertthrows.js:4:9)\n at Module._compile (module.js:660:30)\n ...\n at bootstrap_node.js:618:3\n   generatedMessage: false,\n name: 'AssertionError [ERR_ASSERTION]',\n code: 'ERR_ASSERTION',\n actual: 1,\n expected: 2,\n operator: 'NOT EQ' }\n```", "```js\n> repl\n> console.assert(1 == 2, 'Nope!')\nAssertionError [ERR_ASSERTION]: Nope!\n```", "```js\nconst vm = require('vm');\nlet sandbox = {\n    count: 2\n};\nlet suspectCode = '++count;';\nvm.runInNewContext(suspectCode, sandbox);\nconsole.log(sandbox);\n// { count: 3 }\n```", "```js\nsuspectCode = '++count; process.exit()';\nvm.runInNewContext(suspectCode, sandbox);\n\n// evalmachine.<anonymous>:1\n// ++count; process.exit()\n//          ^\n//\n// ReferenceError: process is not defined\n// at evalmachine.<anonymous>:1:10\n// at ContextifyScript.Script.runInContext (vm.js:59:29)\n// ...\n```", "```js\nconst vm = require('vm');\n\nglobal.x = 1; // global scope\nlet y = 1; // local scope\n\nvm.runInThisContext('x = 2; y = 3');\nconsole.log(x, y); // 2, 1 <- only global is changed\n\neval('x = 3; y = 4');\nconsole.log(x, y); // 3, 4 <- eval changes x, y\n```", "```js\nconst vm = require('vm');\n\nglobal.x = 0;\nglobal.y = 0;\n\nlet script = new vm.Script('++x, ++y;');\nlet emulation = vm.createContext({ x:0, y:0 });\n\nfor (let i = 0; i < 1000; i++) {\n   script.runInThisContext(); // using global\n   script.runInNewContext(emulation); // using own context\n}\n\nconsole.log(x, y); // 1000 1000\nconsole.log(emulation.x, emulation.y); // 1000 1000\n```", "```js\n/testing\n\n/scripts\n\n/spec\n```", "```js\nmocha ./spec --require ./spec/helpers/chai.js --reporter spec\n```", "```js\nnpm install --save-dev mocha chai sinon redis\n```", "```js\ndescribe(\"Test of Utility Class\", function() {\n  it(\"should return a date\", function(){\n   // Test date function somehow and assert success or failure\n  });\n  it(\"should return JSON\", function() {\n   // Test running some string through #parse \n  });\n});\n```", "```js\ndescribe(\"An asynchronous test\", () => { \n  it(\"Runs an async function\", done => { \n    // Run async test, and when finished call... done(); \n  }); \n}); \n```", "```js\ndescribe(\"Main block\", () => { \n  describe(\"Sub block\", () => { \n    it(\"Runs an async function\", () => { \n      // A test running in sub block \n    }); \n  }); \n  it(\"Runs an async function\", () => { \n    // A test running in main block \n  }); \n});\n```", "```js\nlet chai = require('chai');\n\nchai.config.includeStack = true;\nglobal.sinon = require('sinon');\nglobal.expect = chai.expect;\nglobal.AssertionError = chai.AssertionError;\nglobal.Assertion = chai.Assertion;\n```", "```js\nexpect('hello').to.be.a('string') \nexpect({ foo: 'bar' }).to.have.property('foo') \nexpect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' }); \nexpect(true).to.not.be.false \nexpect(1).to.not.be.true \nexpect(5).to.be.at.least(10) // fails\n```", "```js\nlet Capitalizer = () => {\n  this.capitalize = str => { \n    return str.split('').map(char => { \n      return char.toUpperCase(); \n    }).join(''); \n  }; \n};\n```", "```js\ndescribe('Testing Capitalization', () => { \n  let capitalizer = new Capitalizer(); \n  it('capitalizes a string', () => {\n    let result = capitalizer.capitalize('foobar'); \n    expect(result).to.be.a('string').and.equal('FOOBAR'); \n  }); \n});\n```", "```js\nconst sinon = require('sinon'); \n\nlet argA = \"foo\"; \nlet argB = \"bar\"; \nlet callback = sinon.spy(); \n\ncallback(argA); \ncallback(argB); \n\nconsole.log(\n  callback.called, \n  callback.callCount, \n  callback.calledWith(argA), \n  callback.calledWith(argB), \n  callback.calledWith('baz')\n);\n```", "```js\ntrue \n2 \ntrue \ntrue \nfalse\n```", "```js\nconst redis = require(\"redis\"); \nconst client1 = redis.createClient(); \nconst client2 = redis.createClient(); \n\n// Testing this\nfunction nowPublish(channel, msg) { \n  client2.publish(channel, msg); \n}; \ndescribe('Testing pub/sub', function() { \n  before(function() { \n    sinon.spy(client1, \"subscribe\"); \n  }); \n  after(function() { \n    client1.subscribe.restore(); \n  }); \n\n  it('tests that #subscribe works', () => { \n    client1.subscribe(\"channel\");\n    expect(client1.subscribe.calledOnce); \n  }); \n  it('tests that #nowPublish works', done => { \n    let callback = sinon.spy(); \n    client1.subscribe('channel', callback); \n    client1.on('subscribe', () => { \n      nowPublish('channel', 'message'); \n        expect(callback.calledWith('message')); \n        expect(client1.subscribe.calledTwice); \n        done(); \n    }); \n  }); \n});\n```", "```js\nhttp.get(\"http://www.example.org\", res => { \n  console.log(`Got status: ${res.statusCode}`); \n}).on('error', e => { \n  console.log(`Got error: ${e.message}`); \n});\n```", "```js\nconst http = require('http'); \nconst sinon = require('sinon'); \n\nsinon.stub(http, 'get').yields({ \n  statusCode: 404 \n}); \n\n// This URL is never actually called \nhttp.get(\"http://www.example.org\", res => { \n  console.log(`Got response: ${res.statusCode}`); \n  http.get.restore(); \n})\n```", "```js\nconst http = require('http'); \nmodule.exports = function() => { \n  this.makeCall = (url, cb) => { \n    http.get(url, res => { \n      cb(this.parseResponse(res)); \n    }) \n  } \n  this.parseResponse = res => { \n    if(!res.statusCode) { \n      throw new Error('No status code present'); \n    }\n    switch(res.statusCode) { \n      case 200: \n        return 'handled'; \n        break; \n      case 404: \n        return 'handled'; \n        break; \n      default: \n        return 'not handled'; break; \n    } \n  } \n}\n```", "```js\nlet Caller = require('../scripts/Caller.js'); \ndescribe('Testing endpoint responses', function() { \n  let caller = new Caller(); \n  function setTestForCode(code) { \n    return done => { \n      sinon.stub(caller, 'makeCall').yields(caller.parseResponse({ \n        statusCode: code \n      })); \n      caller.makeCall('anyURLWillDo', h => { \n        expect(h).to.be.a('string').and.equal('handled'); \n        done(); \n      }); \n    } \n  } \n  afterEach(() => caller.makeCall.restore()); \n\n  it('Tests 200 handling', setTestForCode(200)); \n  it('Tests 404 handling', setTestForCode(404)); \n  it('Tests 403 handling', setTestForCode(403)); \n});\n```", "```js\nconst sinon = require('sinon'); \nlet Capitalizer = require('../scripts/Capitalizer.js'); \nlet capitalizer = new Capitalizer(); \n\nlet arr = ['a','b','c','d','e']; \nlet mock = sinon.mock(capitalizer); \n\n// Expectations \nmock.expects(\"capitalize\").exactly(5).withArgs.apply(sinon, arr); \n// Reality\narr.map(capitalizer.capitalize);\n// Verification\nconsole.log(mock.verify());\n\n// true\n```", "```js\nExpectationError: Expected capitalize([...]) 5 times (called 4 times)\n```", "```js\nconst redis = require(\"redis\"); \nconst client = redis.createClient(); \n\ndescribe('Mocking pub/sub', function() { \n  let mock = sinon.mock(client); \n  mock.expects('subscribe').withExactArgs('channel').once(); \n  it('tests that #subscribe is being called correctly', function() { \n    client.subscribe('channel'); \n    expect(mock.verify()).to.be.true; \n  }); \n});\n```", "```js\nExpectationError: Unexpected call: subscribe(channel)\n```", "```js\nconst Nightmare = require('nightmare');\n\ndescribe(`Nightmare`, function() {\n  let nightmare;\n\n  beforeEach(() => nightmare = Nightmare({\n    show: false\n  }));\n\n  afterEach(function(done) {\n    nightmare.end(done);\n  });\n\n  it(`Title should be 'Example Domain'`, function(done) {\n    nightmare\n    .goto('http://example.org')\n    .title()\n    .then(title => expect(title).to.equal(`Example Domain`))\n    .then(() => done())\n    .catch(done);\n  });\n});\n```", "```js\nconst bbNightmare = Nightmare({\n  Promise: require('bluebird')\n});\n\nbbNightmare.goto(...)\n```", "```js\nit('Yahoo search should find Nightmare homepage', done => {\n    nightmare\n    .goto('http://www.yahoo.com')\n    .type('form[action*=\"/search\"] [name=p]', 'nightmare.js')\n    .click('form[action*=\"/search\"] [type=submit]')\n    .wait('#main')\n    .evaluate(() => document.querySelector('#main .searchCenterMiddle a').href)\n    .then(result => expect(result).to.equal(`http://www.nightmarejs.org/`))\n    .then(() => done())\n    .catch(done);\n})\n```", "```js\nNightmare.action('getLinkText', function(selector, done) {\n    // `this` is the nightmare instance\n    this.evaluate_now(selector => {\n        return document.querySelector(selector).href;\n    }, done, selector)\n});\n```", "```js\n...\n.wait('#main')\n.getLinkText('#main .searchCenterMiddle a') // Call action\n...\n```", "```js\nit(`Title should be 'Example Domain'`, async function() {\n    let browser = await puppeteer.launch({\n        headless: true\n    });\n\n    let page = await browser.newPage();\n    await page.goto(`http://example.org`);\n    let title = await page.title();\n    await browser.close();\n\n    expect(title).to.equal(`Example Domain`);\n});\n```", "```js\nit(`Should create an imageless screenshot`, async function() {\n\n    let savePath = './news.png';\n    const browser = await puppeteer.launch({\n        headless: true\n    });\n\n    const page = await browser.newPage();\n    await page.setRequestInterception(true);\n    page.on('request', request => {\n        if (request.resourceType === 'image') {\n            request.abort();\n        }\n        else {\n            request.continue();\n        }\n    });\n    await page.goto('http://www.nytimes.com');\n    await page.screenshot({\n        path: savePath,\n        fullPage: true\n    });\n    await browser.close();\n\n    expect(fs.existsSync(savePath)).to.equal(true);\n});\n```", "```js\nsavePath = './news.pdf';\nawait page.pdf({path: savePath});\n```", "```js\n{\n  rss: 23744512,\n  heapTotal: 7708672,\n  heapUsed: 5011728,\n  external: 12021 \n}\n```", "```js\nconst fs = require('fs');\nconst stream = require('stream');\nlet lineReader = new stream.Transform({ \n   objectMode: true \n});\n\nlineReader._transform = function $transform(chunk, encoding, done) {\n   let data = chunk.toString();\n   if(this._lastLine) {\n      data = this._lastLine + data;\n   }\n   let lines = data.split('\\n');\n   this._lastLine = lines.pop();\n   lines.forEach(line => this.push(line));\n   done();\n};\n\nlineReader._flush = function $flush(done) {\n     if(this._lastLine) {\n       this.push(this._lastLine);\n     }\n     this._lastLine = null;\n     done();\n};\n\nlineReader.on('readable', function $reader() {\n   let line;\n   while(line = this.read()) {\n      console.log(line);\n   }\n});\n\nfs.createReadStream('./dummy.log').pipe(lineReader);\n```", "```js\nnode --prof logreader.js\n```", "```js\nnode --prof-process isolate-0x103000000-v8.log > profile\n```", "```js\n8   50.0%    LazyCompile: *$reader /../profiling/logreader.js:26:43\n```", "```js\n// heapdumper.js\nconst path = require('path');\nconst heapdump = require('heapdump');\n\nheapdump.writeSnapshot(path.join(__dirname, `${Date.now()}.heapsnapshot`));\n```", "```js\n// server.js\nconst Express = require('express');\nlet app = Express();\n\nfunction $alloc() {\n    Buffer.alloc(1e6, 'Z');\n}\n\napp.get('/', function $serverHandler(req, res) => {\n\n    let d = 100;\n    while(d--){ $alloc() }\n\n    res.status(200).send(`I'm done`);\n})\n\napp.listen(8080);\n```", "```js\nnode --inspect server.js\n```", "```js\nDebugger listening on ws://127.0.0.1:9229/bc4d2b60-0d01-4a66-ad49-2e990fa42f4e\nFor help see https://nodejs.org/en/docs/inspector\n```", "```js\nchrome://inspect\n```"]