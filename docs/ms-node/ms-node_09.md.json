["```js\nlet orm = require('some-orm');\n\nmodule.exports = {\n  create: list  => orm.createList(list),\n  add: (list, item) => List(list).insert(new Item(item)),\n  delete: (list, item) => List(list).delete(item)\n};\n```", "```js\n// hellogoodbye.js\nconst seneca = require('seneca')({ log: 'silent' });\nconst clientHello = seneca.client(8080);\nconst clientGoodbye = seneca.client(8081);\n\nseneca\n.add({\nrole: 'hello',\ncmd:'sayHello'\n}, (args, done) => done(null, {message: \"Hello!\"}))\n.listen(8082);\n\nseneca\n.add({\nrole: 'goodbye',\ncmd:'sayGoodbye'\n}, (args, done) => done(null, {message: \"Goodbye\"}))\n.add({\nrole: 'goodbye',\ncmd:'reallySayGoodbye'\n}, (args, done) => done(null, {message: \"Goodbye!!\"}))\n.listen(8083);\n\nclientHello.act({\nrole: 'hello',\ncmd: 'sayHello'\n}, (err, result) => console.log(result.message));\n\nclientGoodbye.act({\nrole: 'goodbye',\ncmd: 'sayGoodbye'\n}, (err, result) => console.log(result.message));\n\nclientGoodbye.act({\nrole: 'goodbye',\ncmd: 'reallySayGoodbye'\n}, (err, result) => console.log(result.message));\n```", "```js\ncurl -d \"{\\\"cmd\\\":\\\"sayHello\\\",\\\"role\\\":\\\"hello\\\"}\" http://localhost:8082/act\n// {\"message\":\"Hello!\"}\n```", "```js\nnpm i seneca-balance-client seneca-mesh\n```", "```js\n// base.js\nrequire('seneca')().use('mesh', {\n  base: true\n});\n```", "```js\n// add.js\nrequire('seneca')()\n.add({\n  role: 'calculator',\n  cmd: 'add'\n}, (args, done) => {\n  let result = args.operands[0] + args.operands[1];\n  done(null, {\n    result : result\n  })\n})\n.use('mesh', {\n  pin: {\n    role: 'calculator',\n    cmd: 'add'\n  }\n})\n.listen({\n  host: 'localhost',\n  port: 8080\n});\n```", "```js\n// calculator.js\nrequire('seneca')({ log: 'silent' })\n.use('mesh')\n.ready(function() {\n\n  let seneca = this;\n\n  seneca.act({\n    role: 'calculator',\n    cmd: 'add',\n    operands: [7,3]\n  }, (err, op) => console.log(`Addition result -> ${op.result}`));\n\n  seneca.act({\n    role: 'calculator',\n    cmd:'subtract',\n    operands: [7,3]\n  }, (err, op) => console.log(`Subtraction result -> ${op.result}`));\n});\n```", "```js\nAddition result -> 10\nSubtraction result -> 4\n```", "```js\nnpm install claudia -g\n```", "```js\n[claudia] \naws_access_key_id = YOUR_ACCESS_KEY \naws_secret_access_key = YOUR_ACCESS_SECRET\n```", "```js\nnpm install claudia-api-builder\n```", "```js\nconst ApiBuilder = require('claudia-api-builder');\nconst api = new ApiBuilder();\n\nmodule.exports = api;\n\napi.get('/hello', function () {\n    return 'Hello from AWS!';\n});\n```", "```js\nAWS_PROFILE=claudia claudia create --region us-east-1 --api-module app\n```", "```js\n{\n  \"lambda\": {\n    \"role\": \"claudiaapi-executor\",\n    \"name\": \"claudiaapi\",\n    \"region\": \"us-east-1\"\n  },\n  \"api\": {\n    \"id\": \"s8r80rsu22\",\n    \"module\": \"app\",\n    \"url\": \"https://s8r80rsu22.execute-api.us-east-1.amazonaws.com/latest\"\n  }\n}\n```", "```js\napi.get('/hello', function () ...\n```", "```js\nhttps://s8r80rsu22.execute-api.us-east-1.amazonaws.com/latest/hello\n```", "```js\nHello from AWS!\n```", "```js\nAWS_PROFILE=claudia claudia update\n```", "```js\napi.get('/hello', function (request, context, callback) {\n    return request;\n});\n```", "```js\ndocker is configured to use the default machine with IP 192.158.59.101\n```", "```js\n// index.js\nconst express = require('express');\nconst port = 8087;\nconst app = express();\nconst message = `Service #${Date.now()} responding`;\napp.get('/', (req, res) => {\n    res.send(message);\n});\napp.listen(port, () => console.log(`Running on http://localhost:${port}`));\n```", "```js\n> node app.js\n// Running on http://localhost:8087\n```", "```js\n# Dockerfile\nFROM node:9\nLABEL maintainer=\"your@email.com\"\nENV NODE_ENV=development\nWORKDIR /app\nCOPY ./app .\nRUN npm i\nEXPOSE 8087\nCMD [ \"npm\", \"start\" ]\n```", "```js\ndocker run -p 8088:8087 -d mastering-docker\n```", "```js\nminikube: Running\ncluster: Running\nkubectl: Correctly Configured: pointing to minikube-vm at 192.160.80.100\n```", "```js\ndocker build -t mastering-kube:v1 .\n```", "```js\nSuccessfully built 754d44e83976\nSuccessfully tagged mastering-kube:v1\n```", "```js\nkubectl run kubernetes-demo --image=mastering-kube:v1\n```", "```js\nkubectl expose deployment kubernetes-demo --port=8087 --type=LoadBalancer\n```", "```js\nminikube service kubernetes-demo --url\n```", "```js\nService #1513534970093 responding\n```", "```js\nkubectl scale deployment kubernetes-demo --replicas=4\n```", "```js\nab -n 100 -c 10 -v 2 http://192.168.99.100:31769/\n```", "```js\nService #1513614868094 responding\nLOG: header received:\n HTTP/1.1 200 OK\nX-Powered-By: Express\n...\nConnection: close\n\nService #1513614581591 responding\n...\n\nService #1513614867927 responding\n...\n```", "```js\n// Per-server unique message\nconst message = `Service #${Date.now()} responding`; \n\napp.get('/', (req, res) => {\n    res.send(message);\n});\n```", "```js\n/kubernetes\n /rerouter /responder three-containers.yaml\n```", "```js\napiVersion: v1\nkind: Pod\nmetadata:\n  name: three-containers\nspec:\n  restartPolicy: OnFailure\n  volumes:\n  - name: shared-data\n    emptyDir: {}\n\n  containers:\n  - name: service-rerouter\n    image: rerouter:v1\n    volumeMounts:\n    - name: shared-data\n      mountPath: /app/public\n\n  - name: service-responder\n    image: responder:v1\n\n  - name: service-os\n    image: debian\n    volumeMounts:\n    - name: shared-data\n      mountPath: /pod-data\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"echo Another service wrote this! > /pod-data/index.html\"]\n```", "```js\nimage: rerouter:v1\n```", "```js\nconst express = require('express');\nconst port = 8087;\nconst app = express();\n\napp.use(express.static('public'));\n\napp.get('/rerouter', (req, res) => {\n    res.redirect('http://localhost:8086/oneroute');\n});\n\napp.listen(port, () => console.log(`Running on http://localhost:${port}`)); \n```", "```js\n- name: service-os\n    image: debian\n    volumeMounts:\n    - name: shared-data\n      mountPath: /pod-data\n    command: [\"/bin/sh\"]\n    args: [\"-c\", \"echo Another service wrote this! > /pod-data/index.html\"]\n```", "```js\n- name: service-rerouter\n  image: rerouter:v1\n  volumeMounts:\n  - name: shared-data\n    mountPath: /app/public\n```", "```js\nconst express = require('express');\nconst port = 8086;\nconst app = express();\napp.get('/oneroute', (req, res) => {\n    res.send('\\nThe routing worked!\\n\\n');\n});\napp.listen(port, () => console.log(`Running on http://localhost:${port}`));\n```", "```js\n// rerouter/app/index.js\nres.redirect('http://localhost:8086/oneroute');\n```", "```js\nkubectl create -f three-containers.yaml\n```", "```js\nkubectl exec -it three-containers -c service-rerouter -- /bin/bash\n```", "```js\napt-get install curl\n```", "```js\ncurl -L http://localhost:8087/rerouter\n```"]