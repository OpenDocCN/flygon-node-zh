["```js\nlet stop = false;\nsetTimeout(() => {\n  stop = true;\n}, 1000);\n\nwhile (stop === false) {};\n```", "```js\nconst fs = require('fs');\nfs.readFile('foo.js', {encoding:'utf8'}, (err, fileContents) => {\n  console.log('Then the contents are available', fileContents);\n});\nconsole.log('This happens first');\n```", "```js\n> This happens first\n> Then the contents are available, [file contents shown]\n```", "```js\n// sigint.js\nconsole.log(\"Running...\");\n\n// After 16 minutes, do nothing\nsetInterval(() => {}, 1e6); // Keeps Node running the process\n\n// Subscribe to SIGINT, so some of our code runs when Node gets that signal\nprocess.on(\"SIGINT\", () => {\n    console.log(\"We received the SIGINT signal!\");\n    process.exit(1);\n});\n```", "```js\n$ node sigint.js\nRunning...\n(then press Ctrl+C)\nWe received the SIGINT signal!\n```", "```js\n// ipc.js\nsetInterval(() => {}, 1e6);\nprocess.on(\"SIGUSR1\", () => {\n    console.log(\"Got a signal!\");\n});\n```", "```js\n$ node ipc.js\n```", "```js\n$ kill \u2013s SIGUSR1 123\n```", "```js\nlet cp = require(\"child_process\");\nlet child = cp.fork(__dirname + \"/lovechild.js\");\n```", "```js\n// parent.js\nconst cp = require(\"child_process\");\nlet child = cp.fork(__dirname + \"/lovechild.js\");\n\nchild.on(\"message\", (m) => {\n  console.log(\"Child said: \", m); // Parent got a message up from our child\n});\nchild.send(\"I love you\"); // Send a message down to our child\n```", "```js\n$ node parent.js\nParent said:  I love you\nChild said:  I love you too\n(then Ctrl+C to terminate both processes)\n```", "```js\n// lovechild.js\nprocess.on(\"message\", (m) => {\n  console.log(\"Parent said: \", m); // Child got a message down from the parent\n  process.send(\"I love you too\"); // Send a message up to our parent\n});\n```", "```js\nParent said:  I love you\nChild said:  I love you too\n```", "```js\n// net-parent.js\nconst path = require('path');\nlet child = require(\"child_process\").fork(path.join(__dirname, \"net-child.js\"));\nlet server = require(\"net\").createServer();\n\nserver.on(\"connection\", (socket) => {\n  socket.end(\"Parent handled connection\");\n});\n\nserver.listen(8080, () => {\n  child.send(\"Parent passing down server\", server);\n});\n```", "```js\n// net-child.js\nprocess.on(\"message\", function(message, server) {\n  console.log(message);\n  server.on(\"connection\", function(socket) {\n    socket.end(\"Child handled connection\");\n  });\n});\n```", "```js\nconst fs = require('fs');\nfs.watch(__filename, { persistent: false }, (event, filename) => {\n  console.log(event);\n  console.log(filename);\n})\n\nsetImmediate(function() {\n  fs.rename(__filename, __filename + '.new', () => {});\n});\n```", "```js\nlet w = fs.watch('file', () => {});\nw.close();\n```", "```js\nconst events = require('events');\nfunction getEmitter() {\n  let emitter = new events.EventEmitter();\n  emitter.emit('start');\n  return emitter;\n}\n\nlet myEmitter = getEmitter();\n\nmyEmitter.on(\"start\", () => {\n  console.log(\"Started\");\n});\n```", "```js\nconst events = require('events');\nfunction getEmitter() {\n  let emitter = new events.EventEmitter();\n  process.nextTick(() => {\n    emitter.emit('start');\n  });\n  return emitter;\n}\n\nlet myEmitter = getEmitter();\nmyEmitter.on('start', () => {\n  console.log('Started');\n});\n```", "```js\nsetTimeout(a, 1000);\nsetTimeout(b, 1001);\n```", "```js\nsetTimeout(a, 1000);\nsetTimeout(b, 1000);\n```", "```js\nlet intervalId = setInterval(() => { ... }, 100);\n```", "```js\nlet intervalId = setInterval(() => {}, 1000);\n```", "```js\nlet intervalId = setInterval(() => {}, 1000);\nintervalId.unref();\n```", "```js\nsetTimeout(() => {\n  console.log(\"now stop\");\n}, 100);\n\nlet intervalId = setInterval(() => {\n  console.log(\"running\")\n}, 1);\n\nintervalId.unref();\n```", "```js\nlet intervalId = setInterval(() => {}, 1000);\nintervalId.unref();\nintervalId.ref();\n```", "```js\nconst fs = require('fs');\nconst EventEmitter = require('events').EventEmitter;\nlet pos = 0;\nlet messenger = new EventEmitter();\n\n// Listener for EventEmitter\nmessenger.on(\"message\", (msg) => {\n  console.log(++pos + \" MESSAGE: \" + msg);\n});\n\n// (A) FIRST\nconsole.log(++pos + \" FIRST\");\n\n//  (B) NEXT\nprocess.nextTick(() => {\n  console.log(++pos + \" NEXT\")\n})\n\n// (C) QUICK TIMER\nsetTimeout(() => {\n  console.log(++pos + \" QUICK TIMER\")\n}, 0)\n\n// (D) LONG TIMER\nsetTimeout(() => {\n  console.log(++pos + \" LONG TIMER\")\n}, 10)\n\n// (E) IMMEDIATE\nsetImmediate(() => {\n  console.log(++pos + \" IMMEDIATE\")\n})\n\n// (F) MESSAGE HELLO!\nmessenger.emit(\"message\", \"Hello!\");\n\n// (G) FIRST STAT\nfs.stat(__filename, () => {\n  console.log(++pos + \" FIRST STAT\");\n});\n\n// (H) LAST STAT\nfs.stat(__filename, () => {\n  console.log(++pos + \" LAST STAT\");\n});\n\n// (I) LAST\nconsole.log(++pos + \" LAST\");\n```", "```js\nFIRST (A).\nMESSAGE: Hello! (F).\nLAST (I).\nNEXT (B).\nQUICK TIMER (C).\nFIRST STAT (G).\nLAST STAT (H).\nIMMEDIATE (E).\nLONG TIMER (D).\n```", "```js\nAPI.getUser(loginInfo, function(err, user) {\n    API.getProfile(user, function(err, profile) {\n        // ...and so on\n    }\n});\n```", "```js\nlet promiseProfile = API.getUser(loginInfo)\n.then(user => API.getProfile(user))\n.then(profile => {\n    // do something with #profile\n})\n.catch(err => console.log(err))\n```", "```js\nAPI.getUser(loginInfo, function(err, user) {\n  if(err) {\n    throw err;\n  }\n  API.getProfile(user, function(err, profile) {\n    if(err) {\n      throw err;\n    }\n    // ...and so on\n  }\n});\n```", "```js\n.catch(err => console.log(err))\n.then(() => // this happens no matter what happened previously)\n```", "```js\nconst db = {\n  getFullName: Promise.resolve('Jack Spratt'),\n  getAddress: Promise.resolve('10 Clean Street'),\n  getFavorites: Promise.resolve('Lean'),\n};\n\nPromise.all([\n  db.getFullName() \n  db.getAddress() \n  db.getFavorites() \n])\n.then(results => {\n  // results = ['Jack Spratt', '10 Clean Stree', 'Lean']\n})\n.catch(err => {...})\n```", "```js\nconst db = {\n  getFullName: Promise.resolve('Jack Spratt'),\n  getAddress: Promise.resolve('10 Clean Street'),\n  getFavorites: Promise.resolve('Lean'),\n}\n\nasync function profile() {\n  let fullName = await db.getFullName() // Jack Spratt\n  let address = await db.getAddress() // 10 Clean Street\n  let favorites = await db.getFavorites() // Lean\n\n  return {fullName, address, favorites};\n}\n\nprofile().then(res => console.log(res) // results = ['Jack Spratt', '10 Clean Street', 'Lean'\n```", "```js\nconst {join} = require('path');\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst readdir = promisify(fs.readdir);\nconst stat = promisify(fs.stat);\n\nasync function $readDir (dir, acc = []) {\n  await Promise.all((await readdir(dir)).map(async file => {\n    file = join(dir, file);\n    return (await stat(file)).isDirectory() && acc.push(file) && $readDir(file, acc);\n  }));\n  return acc;\n}\n\n$readDir(`./dummy_filesystem`).then(dirInfo => console.log(dirInfo));\n\n// [ 'dummy_filesystem/folderA',\n// 'dummy_filesystem/folderB',\n// 'dummy_filesystem/folderA/folderA-C' ]\n```", "```js\nfunction $readDir(dir, acc=[]) {\n  return readdir(dir).then(files => Promise.all(files.map(file => {\n    file = join(dir, file);\n    return stat(file).then(fobj => {\n      if (fobj.isDirectory()) {\n        acc.push(file);\n        return $readDir(file, acc);\n      }\n    });\n  }))).then(() => acc);\n};\n```", "```js\nasync function makeError() {\n    try {\n        console.log(await thisDoesntExist());\n    } catch (error) {\n        console.error(error);\n    }\n}\n\nmakeError();\n```", "```js\nfunction* threeThings() {\n    yield 'one';\n    yield 'two';\n    yield 'three';\n}\n\nlet tt = threeThings();\n\nconsole.log(tt); // {} \nconsole.log(tt.next()); // { value: 'one', done: false }\nconsole.log(tt.next()); // { value: 'two', done: false }\nconsole.log(tt.next()); // { value: 'three', done: false }\nconsole.log(tt.next()); // { value: undefined, done: true }\n```", "```js\nfunction demoIterator(array) {\n  let idx = 0;\n  return {\n    next: () => {\n      return idx < array.length ? {\n        value: array[idx++],\n        done: false\n      } : { done: true };\n    }\n  };\n}\nlet it = demoIterator(['one', 'two', 'three']);\nconsole.log(it); // { next: [Function: next] }\nconsole.log(it.next()); // { value: 'one', done: false }\nconsole.log(it.next()); // { value: 'two', done: false }\nconsole.log(it.next()); // { value: 'three', done: false }\nconsole.log(it.next()); // { done: true }\n```", "```js\nfunction getArraySomehow() {\n  // slice into a copy; don't send original\n  return ['one','two','buckle','my','shoe'].slice(0); \n}\n\nlet state = getArraySomehow();\nfor(let x=0; x < state.length; x++) {\n    console.log(state[x].toUpperCase());\n}\n```", "```js\nfunction* liveData(state) {\n    let state = ['one','two','buckle','my','shoe'];\n    let current;\n\n    while(current = state.shift()) {\n        yield current;\n    }\n}\n\nlet list = liveData([]);\nlet item;\nwhile (item = list.next()) {\n    if(!item.value) {\n        break;\n    }\n    console.log('generated:', item.value);\n}\n```", "```js\nfunction* range(start=1, end=2) {\n    do {\n        yield start;\n    } while(++start <= end)\n}\n\nfor (let num of range(1, 3)) {\n    console.log(num);\n}\n// 1\n// 2\n// 3\n```", "```js\n> console.log(new Error(\"My Error Message\").stack);\n Error: My Error Message\n     at Object.<anonymous> (/js/errorstack.js:1:75)\n     at Module._compile (module.js:449:26)\n     at Object.Module._extensions..js (module.js:467:10)\n     ...\n\n```", "```js\n> console.trace(\"The Stack Head\")\n Trace: The Stack Head\n     at Object.<anonymous> (/js/stackhead.js:1:71)\n     at Module._compile (module.js:449:26)\n     at Object.Module._extensions..js (module.js:467:10)\n     ...\n```", "```js\ntry {\n  something.that = wontWork;\n} catch (thrownError) {\n  // do something with the exception we just caught\n} \n```", "```js\nprocess.on('uncaughtException', (err) => {\n  console.log('Caught exception: ' + err);\n });\n\nsetTimeout(() => {\n  console.log(\"The exception was caught and this can run.\");\n}, 1000);\n\nthrowAnUncaughtException();\n\n// > Caught exception: ReferenceError: throwAnUncaughtException is not defined\n// > The exception was caught and this can run.\n```", "```js\nprocess.on('unhandledRejection', (reason, Prom) => {\n  console.log(`Unhandled Rejection: ${p} reason: ${reason}`);\n});\n```", "```js\nlet fs = require(\"fs\");\nlet http = require('http');\n\nlet theUser = null;\nlet userPos = 0;\nlet tweetFile = \"tweets.txt\";\n```", "```js\nhttp.createServer((request, response) => {\n  response.writeHead(200, {\n    'Content-Type': 'text/event-stream',\n    'Cache-Control': 'no-cache',\n    'Access-Control-Allow-Origin': '*'\n  });\n\n  theUser = response;\n\n  response.write(':' + Array(2049).join(' ') + '\\n');\n  response.write('retry: 2000\\n');\n\n  response.socket.on('close', () => {\n    theUser = null;\n  });\n}).listen(8080);\n```", "```js\nlet sendNext = function(fd) {\n  let buffer = Buffer.alloc(140);\n  fs.read(fd, buffer, 0, 140, userPos * 140, (err, num) => {\n    if (!err && num > 0 && theUser) {\n      ++userPos;\n      theUser.write(`data: ${buffer.toString('utf-8', 0, num)}\\n\\n`);\n      return process.nextTick(() => {\n        sendNext(fd);\n      });\n    }\n  });\n};\n```", "```js\nfunction start() {\n  fs.open(tweetFile, 'r', (err, fd) => {\n    if (err) {\n      return setTimeout(start, 1000);\n    }\n    fs.watch(tweetFile, (event, filename) => {\n      if (event === \"change\") {\n        sendNext(fd);\n      }\n    });\n  });\n};\n\nstart();\n```", "```js\nconst fs = require(\"fs\");\nconst Twit = require('twit');\n\nlet twit = new Twit({\n  consumer_key: 'your key',\n  consumer_secret: 'your secret',\n  access_token: 'your token',\n  access_token_secret: 'your secret token'\n});\n```", "```js\nlet tweetFile = \"tweets.txt\";\nlet writeStream = fs.createWriteStream(tweetFile, {\n  flags: \"a\" // indicate that we want to (a)ppend to the file\n});\n```", "```js\nlet cleanBuffer = function(len) {\n  let buf = Buffer.alloc(len);\n  buf.fill('\\0');\n  return buf;\n};\n```", "```js\nlet check = function() {\n  twit.get('search/tweets', {\n    q: '#nodejs since:2013-01-01'\n  }, (err, reply) => {\n    let buffer = cleanBuffer(reply.statuses.length * 140);\n    reply.statuses.forEach((obj, idx) => {\n      buffer.write(obj.text, idx*140, 140);\n    });\n    writeStream.write(buffer);\n  })\n  setTimeout(check, 10000);\n};\n\ncheck();\n```", "```js\n<!DOCTYPE html>\n<html>\n<head>\n    <title></title>\n</head>\n\n<script>\n\nwindow.onload = () => {\n  let list = document.getElementById(\"list\");\n  let evtSource = new EventSource(\"http://localhost:8080/events\");\n\n  evtSource.onmessage = (e) => {\n    let newElement = document.createElement(\"li\");\n    newElement.innerHTML = e.data;\n    list.appendChild(newElement);\n  }\n}\n\n</script>\n<body>\n\n<ul id=\"list\"></ul>\n\n</body>\n</html>\n```"]