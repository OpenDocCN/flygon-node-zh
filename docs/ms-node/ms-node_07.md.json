["```js\nconst spawn = require('child_process').spawn;\nlet ls = spawn('ls', ['-lh', '.']);\nls.stdout.on('readable', function() {\n    let d = this.read();\n    d && console.log(d.toString());\n});\nls.on('close', code => {\n    console.log(`child process exited with code: ${code}`);\n});\n```", "```js\n-rw-r--r-- 1 root root 43 Jul 9 19:44 index.html\n -rw-rw-r-- 1 root root 278 Jul 15 16:36 child_example.js\n -rw-r--r-- 1 root root 1.2K Jul 14 19:08 server.js\n child process exited with code 0\n```", "```js\n{\n  name: \"Sandro\",\n  role: \"admin\"\n}\n```", "```js\nprocess.stdout.write(Buffer.from(\"Hello!\"));\n```", "```js\nspawn(\"node\", ['./reader.js', './afile.txt'], {\n  stdio: [process.stdin, process.stdout, process.stderr]\n});\n```", "```js\nlet writer = fs.createWriteStream('./a.out');\nwriter.on('open', () => {\n  let cp = spawn(\"node\", ['./reader.js'], {\n    stdio: [null, writer, null]\n  });\n});\n```", "```js\nfs.createReadStream('cached.data').pipe(process.stdout);\n```", "```js\nconst spawn = require('child_process').spawn;\nlet php = spawn(\"php\", ['-r', 'print \"Hello from PHP!\";']);\nphp.stdout.on('readable', () => {\n  let d;\n  while (d = this.read()) {\n    console.log(d.toString());\n  }\n});\n// Hello from PHP!\n```", "```js\nlet cnt = 0;\nsetInterval(() => {\n  process.stdout.write(\" -> \" + cnt++);\n}, 100);\n```", "```js\nvar fork = require('child_process').fork;\nfork('./emitter.js');\n// -> 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10 ...\n```", "```js\nfork('./emitter.js');\nfork('./emitter.js');\nfork('./emitter.js');\n// 0 -> 0 -> 0 -> 1 -> 1 -> 1 -> 2 -> 2 -> 2 -> 3 -> 3 -> 3 -> 4 ...\n```", "```js\n// parent.js\nconst fork = require('child_process').fork;\nlet cp = fork('./child.js');\ncp.on('message', msgobj => {\n    console.log(`Parent got message: ${msgobj.text}`);\n});\ncp.send({\n    text: 'I love you'\n});\n```", "```js\n// child.js\nprocess.on('message', msgobj => {\n    console.log('Child got message:', msgobj.text);\n    process.send({\n        text: `${msgobj.text} too`\n    });\n});\n```", "```js\nChild got message: I love you\nParent got message: I love you too\n```", "```js\n// tcpparent.js\nconst fork = require('child_process').fork;\nconst net = require('net');\nlet children = [];\nrequire('os').cpus().forEach((f, idx) => {\n children.push(fork('./tcpchild.js', [idx]));\n});\nnet.createServer((socket) => { \n let rand = Math.floor(Math.random() * children.length);\n children[rand].send(null, socket);\n}).listen(8080)\n```", "```js\n// tcpchild.js\nlet id = process.argv[2];\nprocess.on('message', (n, socket) => {\n socket.write(`child ${id} was your server today.\\r\\n`);\n socket.end();\n});\n```", "```js\nTrying 127.0.0.1...\n \u2026\n child 3 was your server today.\n Connection closed by foreign host.\n```", "```js\nchild.exec(`wc -l ${filename}`, function(e, fL) {\n  fileLength = parseInt(fL.replace(filename, \"\"));\n\n  let fileRanges = [];\n  let oStart = 1;\n  let oEnd = fileChunkLength;\n\n  while(oStart < fileLength) {\n    fileRanges.push({\n      offsetStart: oStart,\n      offsetEnd: oEnd\n    })\n    oStart = oEnd + 1;\n    oEnd = Math.min(oStart + fileChunkLength, fileLength);\n  } \n  ...\n}\n```", "```js\nlet w = child.fork('bin/worker');\nw.send({\n  file: filename,\n  offsetStart: range.offsetStart,\n  offsetEnd: range.offsetEnd\n});\nw.on('message', chunkData => {\n  // pass results data on to a reducer.\n});\n```", "```js\nprocess.on('message', (m) => {\n  let filename = m.file;\n  let sed = `sed -n '${m.offsetStart},${m.offsetEnd}p' ${filename}`;\n  let reader = require('child_process').exec(sed, {maxBuffer: 1024e6}, (err, data, stderr) => {\n\n     // Split the file chunk into lines and process it.\n     //\n     data = data.split(\"\\n\");\n     ...\n  })\n})            \n```", "```js\nconst cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif(cluster.isMaster) {\n   for(let i = 0; i < numCPUs; i++) {\n      cluster.fork();\n   }\n}\n\nif(cluster.isWorker) {\n   http.createServer((req, res) => {\n      res.writeHead(200);\n      res.end(`Hello from ${cluster.worker.id}`);\n   }).listen(8080);\n}\n```", "```js\n// script.js\nlet count = 1;\nfunction loop() {\n  console.log(count++);\n  setTimeout(loop, 1000);\n}\nloop();\n```", "```js\npm2 start script.js \n// [PM2] Process script.js launched\n```", "```js\nconst pm2 = require('pm2');\n\npm2.connect(err => {\n   pm2.start('script.js', { \n      name: 'programmed script runner',\n      scriptArgs: [\n         'first',\n         'second',\n         'third'\n      ],\n      execMode : 'fork_mode'\n   }, (err, proc) => {\n      if(err) {\n         throw new Error(err);\n      }\n   });\n});\n```", "```js\n... \n\"monit\": {\n  \"loadavg\": [ 1.89892578125, 1.91162109375, 1.896484375 ],\n  \"total_mem\": 17179869184, \"free_mem\": 8377733120, \n...\n{\n  \"pid\": 13352,\n  \"name\": \"programmed script runner\",\n  \"pm2_env\": {\n    \"instance_var\": \"NODE_APP_INSTANCE\",\n    \"exec_mode\": \"fork_mode\",\n...\n  \"pm_id\": 8, // our script.js process \"monit\": {\n  \"memory\": 19619840, \"cpu\": 0 \n...\n```", "```js\n// server.js\nconst http = require('http');\nhttp.createServer((req, resp) => {\n   if(req.url === \"/\") {\n      resp.writeHead(200, {\n         'content-type' : 'text/plain'\n      });\n      return resp.end(\"Hello World\");\n   }\n   resp.end();\n}).listen(8080);\n```", "```js\n// process.json\n{\n  \"apps\" : [{\n    \"name\" : \"server\",\n    \"script\" : \"./server.js\",\n    \"watch\" : true,\n    \"env\": {\n      \"NODE_ENV\": \"development\"\n    },\n    \"instances\" : 4,\n    \"exec_mode\" : \"cluster\"\n  }]\n}\n```", "```js\n{\n  \"apps\" : [{\n    ...\n    \"watch\": [\n      \"tests/*.test\",\n      \"app\" \n    ],\n    \"ignore_watch\": [\n      \"**/*.log\"\n    ],\n    \"watch_options\": {\n      \"followSymlinks\": false\n    },\n    ...\n  }]\n}\n```", "```js\n<head>\n  <script>\n    let connection = new WebSocket('ws://127.0.0.1:8081', ['json']);\n      connection.onopen = () => {\n        let userId = 'user' + Math.floor(Math.random()*10e10);\n        document.onmousemove = e => {\n          connection.send(JSON.stringify({id: userId, x: e.x, y: e.y}));\n        }\n      };\n  </script>\n</head>\n```", "```js\nconst SServer = require('ws').Server;\nlet socketServer = new SServer({port: 8081});\nsocketServer.on('connection', socket => {\n  let lastMessage = null;\n  function kill() => {\n    if (lastMessage) {                                              \n      process.send({kill: lastMessage.id});            \n    }\n  }\n  socket.on('message', message => {\n    lastMessage = JSON.parse(message);   \n    process.send(lastMessage);                                                                  \n  });\n  socket.on('close', kill);\n  socket.on('error', kill);\n});\n```", "```js\nlet ev = new EventSource('/receive/adminname');\nev.addEventListener(\"open\", () => {\n  console.log(\"Connection opened\");\n});\nev.addEventListener(\"message\", data => {\n  //  Do something with mouse data, like graph it.\n}\n```", "```js\nif (method === \"receive\") {\n  // Unknown admin; reject\n  if (!admins[adminId]) {\n    return response.end();\n  }\n  response.writeHead(200, {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache\",\n    \"Connection\": \"keep-alive\"\n  });\n  response.write(\":\" + Array(2049).join(\" \") + \"\\n\");\n  response.write(\"retry: 2000\\n\");\n  response.on(\"close\", () => {\n    admins[adminId] = {};\n  });\n  setInterval(() => {\n    response.write(\"data: PING\\n\\n\");\n  }, 15000);\n  admins[adminId].socket = response;\n  return;\n}\n```", "```js\nif (cluster.isMaster) {\n  let i;\n  for (i = 0; i < numCPUs; i++) {\n    cluster.fork();\n}\ncluster.on('exit', (worker, code, signal) => {\n  console.log(`worker ${worker.process.pid} died`);\n})\n\n// Set up socket worker listeners\nObject.keys(cluster.workers).forEach(id => {\n  cluster.workers[id].on('message', msg => {\n    let a;\n    for (a in admins) {\n      if (admins[a].socket) {\n        admins[a].socket.write(`data: ${JSON.stringify(msg)}\\n\\n`);\n      }\n    }\n  });\n});\n```"]