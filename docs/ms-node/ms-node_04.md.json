["```js\n$ mkfifo namedpipe\n```", "```js\nprw-r--r-- 1 system staff 0 May 01 07:52 namedpipe\n```", "```js\necho \"hello\" > namedpipe\n```", "```js\n$ cat namedpipe.\n```", "```js\nconst path = require('path'); \npath.normalize(\"../one////two/./three.html\"); \n// -> ../one/two/three.html \n```", "```js\npath.join(\"../\", \"one\", \"two\", \"three.html\"); \n// -> ../one/two/three.html \n```", "```js\npath.dirname(\"../one/two/three.html\"); \n// ../one/two\n```", "```js\npath.basename(\"../one/two/three.html\"); \n// -> three.html \n\n// Remove file extension from the basename \npath.basename(\"../one/two/three.html\", \".html\"); \n// -> three \n```", "```js\nvar pstring = \"../one/two/three.html\"; \npath.extname(pstring); \n// -> .html \n```", "```js\npath.relative( \n  '/one/two/three/four',  \n  '/one/two/thumb/war' \n); \n// -> ../../thumb/war \n```", "```js\npath.resolve('/one/two', '/three/four'); \n// -> /three/four \npath.resolve('/one/two/three', '../', 'four', '../../five') \n// -> /one/five \n```", "```js\ncd /one/two/three \ncd ../ \ncd four \ncd ../../five \npwd \n// -> /one/five \n```", "```js\npath.resolve('one', 'two/three', 'four'); \n// -> /users/home/john/one/two/three/four\n```", "```js\nfs.stat(\"file.txt\", (err, stats) => { \n  console.log(stats); \n}); \n```", "```js\n  dev: 2051, // id of device containing this file \n  mode: 33188, // bitmask, status of the file \n  nlink: 1, // number of hard links \n  uid: 0, // user id of file owner \n  gid: 0, // group id of file owner \n  rdev: 0, // device id (if device file) \n  blksize: 4096, // I/O block size \n  ino: 27396003, // a unique file inode number \n  size: 2000736, // size in bytes \n  blocks: 3920, // number of blocks allocated \n  atime: Fri May 3 2017 15:39:57 GMT-0500 (CDT), // last access \n  mtime: Fri May 3 2017 17:22:46 GMT-0500 (CDT), // last modified \n  ctime: Fri May 3 2017 17:22:46 GMT-0500 (CDT)  // last status change \n```", "```js\nconsole.log(process.stdin.fd); // 0 \nconsole.log(process.stdout.fd); // 1 \nconsole.log(process.stderr.fd); // 2 \n\nfs.fstat(1, (err, stat) => { \n  console.log(stat); // an fs.Stats object \n}); \n```", "```js\nfs.open(\"path.js\", \"r\", (err, fileDescriptor) => { \n  console.log(fileDescriptor); // An integer, like `7` or `23` \n}); \n```", "```js\nfs.open(\"index.html\", \"w\", 755, (err, fd) => { \n   fs.read(fd, ...); \n}); \n```", "```js\necho \"hello\" >> target.txt  \n```", "```js\nfs.readlink('a.txt', (err, targetFName) => { \n  console.log(targetFName); // target.txt \n}); \n```", "```js\nfs.realpath('file.txt', (err, resolvedPath) => { \n  console.log(resolvedPath); // `/real/path/to/file.txt` \n}); \n```", "```js\nfs.realpath('.////./file.txt', (err, resolvedPath) => { \n  // still `/real/path/to/file.txt` \n}); \n```", "```js\nlet cache = {'/etc':'/private/etc'}; \nfs.realpath('/etc/passwd', cache, (err, resolvedPath) => { \n  console.log(resolvedPath); // `/private/etc/passwd` \n});\n```", "```js\nkey: fs.readFileSync('server-key.pem'), \ncert: fs.readFileSync('server-cert.pem') \n```", "```js\nrequire('fs') \n```", "```js\nfs.readdir('.', (err, files) => { \n  console.log(files); // list of all files in current directory \n}); \n```", "```js\n(dir => { \n  fs.readdir(dir, (err, list) => { \n    list.forEach(file => { \n      fs.stat(path.join(dir, file), (err, stat) => { \n        if (stat.isDirectory()) { \n          return console.log(`Found directory: ${file}`); \n        }\n        console.log(`Found file: ${file}`); \n      }); \n    }); \n  }); \n})(\".\"); \n```", "```js\nlet walk = (dir, done) => { \n  let results = {}; \n  fs.readdir(dir, (err, list) => { \n    let pending = list.length;    \n    if (err || !pending) { \n      return done(err, results); \n    } \n    list.forEach(file => { \n      let dfile = require('path').join(dir, file); \n      fs.stat(dfile, (err, stat) => { \n        if(stat.isDirectory()) { \n          return walk(dfile, (err, res) => { \n            results[file] = res; \n            !--pending && done(null, results); \n          }); \n        }  \n        results[file] = stat; \n        !--pending && done(null, results); \n      }); \n    }); \n  }); \n}; \nwalk(\".\", (err, res) => { \n  console.log(require('util').inspect(res, {depth: null})); \n});\n```", "```js\nlet walk = (dir, done, emitter) => { \n  ... \n  emitter = emitter || new (require('events').EventEmitter); \n  ... \n  if (stat.isDirectory()) { \n    emitter.emit('directory', dfile, stat); \n    return walk(dfile, (err, res) => { \n      results[file] = res; \n      !--pending && done(null, results); \n    }, emitter); \n  }  \n  emitter.emit('file', dfile, stat); \n  results[file] = stat; \n  ... \n  return emitter; \n} \nwalk(\"/usr/local\", (err, res) => { \n  ... \n}).on(\"directory\", (path, stat) => { \n  console.log(`Directory: ${path} - ${stat.size}`); \n}).on(\"file\", (path, stat) => { \n  console.log(`File: ${path} - ${stat.size}`); \n}); \n// File: index.html - 1024 \n// File: readme.txt - 2048 \n// Directory: images - 106 \n// File images/logo.png - 4096 \n// ... \n```", "```js\nfs.open('path.js', 'r', (err, fd) => { \n  fs.fstat(fd, (err, stats) => { \n    let totalBytes = stats.size; \n    let buffer = Buffer.alloc(totalBytes); \n    let bytesRead = 0; \n    // Each call to read should ensure that chunk size is \n    // within proper size ranges (not too small; not too large). \n    let read = chunkSize => { \n      fs.read(fd, buffer, bytesRead, chunkSize, bytesRead, (err, numBytes, bufRef) => { \n        if((bytesRead += numBytes) < totalBytes) { \n          return read(Math.min(512, totalBytes - bytesRead)); \n        } \n        fs.close(fd); \n        console.log(`File read complete. Total bytes read: ${totalBytes}`); \n        // Note that the callback receives a reference to the \n        // accumulating buffer  \n        console.log(bufRef.toString()); \n      }); \n    } \n    read(Math.min(512, totalBytes)); \n  }); \n}); \n```", "```js\nfs.readFile('/etc/passwd', (err, fileData) => { \n  if(err) { \n    throw err; \n  } \n  console.log(fileData); \n  // <Buffer 48 65 6C 6C 6F ... > \n}); \n```", "```js\nfs.readFile('/etc/passwd', (err, { encoding : \"utf8\" }, fileData) => { \n  ... \n  console.log(fileData); \n  // \"Hello ...\" \n});\n```", "```js\nconst fs = require('fs'); \nconst readline = require('readline'); \n\nlet rl = readline.createInterface({ \n  input: fs.createReadStream(\"dictionary.txt\"), \n  terminal: false \n}); \nlet arr = []; \nrl.on(\"line\", ln => { \n  arr.push(ln.trim()) \n}); \n// aardvark \n// abacus \n// abaisance \n// ...  \n```", "```js\nlet buffer = Buffer.alloc(8675); \nfs.open(\"index.html\", \"w\", (err, fd) => { \n  fs.write(fd, buffer, 309, 8366, 100, (err, writtenBytes, buffer) => { \n    console.log(`Wrote ${writtenBytes} bytes to file`); \n    // Wrote 8366 bytes to file \n  }); \n}); \n```", "```js\nconst fs = require('fs'); \nconst readline = require('readline'); \nlet cells  = 186; // 6 x 31 \nlet buffer = Buffer.alloc(cells); \nlet rand;\nwhile(cells--) { \n  //  0, 1 or greater \n  rand = Math.floor(Math.random() * 3); \n  //  78 = \"N\", 87 = \"W\", 76 = \"L\" \n  buffer[cells] = rand === 0 ? 78 : rand === 1 ? 87 : 76; \n} \nfs.open(\"scores.txt\", \"r+\", (err, fd) => { \n  fs.write(fd, buffer, 0, buffer.length, 0, (err, writtenBytes, buffer) => {          \n    let rl = readline.createInterface({ \n      input: process.stdin, \n      output: process.stdout \n    }); \n\n    let quest = () => { \n      rl.question(\"month/day:\", index => { \n        if(!index) { \n          return rl.close(); \n        } \n        let md = index.split('/'); \n        let pos = parseInt(md[0] -1) * 31 + parseInt(md[1] -1); \n        fs.read(fd, Buffer.alloc(1), 0, 1, pos, (err, br, buff) => { \n          let v = buff.toString(); \n          console.log(v === \"W\" ? \"Win!\" : v === \"L\" ? \"Loss...\" : \"No game\"); \n          quest(); \n        }); \n      }); \n    }; \n    quest(); \n  }); \n}); \n```", "```js\nfs.writeFile('test.txt', 'A string or Buffer of data', err => { \n  if (err) { \n    return console.log(err); \n  } \n  // File has been written \n}); \n```", "```js\nlet writer = fs.createWriteStream(\"novel.txt\", 'w'); \nprocess.stdin.pipe(writer);\n```", "```js\nhttp.createServer((request, response) => { \n  if(request.method !== \"GET\") { \n    return response.end(\"Simple File Server only does GET\"); \n  } \n  fs \n  .createReadStream(__dirname + request.url) \n  .pipe(response); \n}).listen(8000); \n```", "```js\n    POST /path/addUser HTTP/1.1\n    Content-Type: application/x-www-form-urlencoded\n    name=John&group=friends \n    ...\n    Status: 201 \n    Location: http://website.com/users/john.html  \n```", "```js\n    Status: 200 \n    Content-Type: application/json\n    Content-Location: http://blogs.com/cache/allArticles.json\n    ... JSON entity body  \n```", "```js\nfunction requestHandler(request,response) { \n  let newPath = \"/thedroids.html\"; \n  response.writeHead(301, { \n    'Content-Location': newPath \n  }); \n  response.end(); \n} \n```", "```js\nIf-None-Match : \"686897696a7c876b7e\" \nIf-None-Match : \"686897696a7c876b7e\", \"923892329b4c796e2e\"\n```", "```js\nlet etag = crypto.createHash('md5').update(stat.size + stat.mtime).digest('hex'); \nif(request.headers['if-none-match'] === etag) { \n  response.statusCode = 304; \n  return response.end(); \n} else { \n  // stream the requested resource \n} \n```", "```js\n npm install formidable \n```", "```js\n    let formidable = require('formidable');  \n```", "```js\n<form action=\"/uploads\" enctype=\"multipart/form-data\" method=\"post\"> \nTitle: <input type=\"text\" name=\"title\"><br /> \n<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br /> \n<input type=\"submit\" value=\"Upload\"> \n</form> \n```", "```js\nhttp.createServer((request, response) => { \n  let rm = request.method.toLowerCase(); \n  if(request.url === '/uploads' && rm === 'post') { \n    let form = new formidable.IncomingForm(); \n    form.uploadDir = process.cwd(); \n    let resp = \"\"; \n    form \n    .on(\"file\", (field, File) => { \n      resp += `File: ${File.name}<br />`; \n    }) \n    .on(\"field\", (field, value) => { \n      resp += `${field}: ${value}<br />`; \n    }) \n    .on(\"end\", () => { \n      response.writeHead(200, {'content-type': 'text/html'}); \n      response.end(resp); \n    }) \n    .parse(request); \n    return; \n  } \n}).listen(8000); \n```", "```js\nhttp.createServer((request, response) => { \n  let rm = request.method.toLowerCase(); \n  if(rm === \"post\") { \n    let form = new formidable.IncomingForm(); \n    form.uploadDir = process.cwd(); \n    form \n    .on(\"file\", (field, file) => { \n      // process files \n    }) \n    .on(\"field\", (field, value) => { \n      // process POSTED field data \n    }) \n    .on(\"end\", () => { \n      response.end(\"Received\"); \n    }) \n    .parse(request); \n    return; \n  } \n  // Only GET is handled if not POST\n  if(rm !== \"get\") { \n    return response.end(\"Unsupported Method\"); \n  } \n  let filename = path.join(__dirname, request.url); \n  fs.stat(filename, (err, stat) => { \n      if(err) { \n        response.statusCode = err.errno === 34 ? 404 : 500; \n      return response.end() \n      }  \n    var etag = crypto.createHash('md5').update(stat.size + stat.mtime).digest('hex');     \n    response.setHeader('Last-Modified', stat.mtime); \n    if(request.headers['if-none-match'] === etag) { \n      response.statusCode = 304; \n      return response.end(); \n    } \n    response.setHeader('Content-Length', stat.size); \n    response.setHeader('ETag', etag); \n    response.statusCode = 200; \n    fs.createReadStream(filename).pipe(response); \n  }); \n}).listen(8000); \n```", "```js\n$ mkdir hello_files\n$ cd hello_files\n$ npm init\n$ npm install -S electron\n```", "```js\n{\n  \"name\": \"hello_files\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A simple file browser using Node, Electron, and Vue.js\",\n  \"main\": \"main.js\",\n  \"dependencies\": {\n    \"electron\": \"^1.7.9\"\n  }\n}\n```", "```js\n$ ./node_modules/.bin/electron --version\n$ ./node_modules/.bin/electron\n$ ./node_modules/.bin/electron .\n```", "```js\n$ npm install -g electron\n\n$ electron --version\n$ electron\n$ electron .\n```", "```js\n// main.js\n\nconst electron = require('electron');\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;\n\nconst path = require('path');\nconst url = require('url');\n\nlet mainWindow; // Keep this reference so the window doesn't close\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({width: 800, height: 800});\n  mainWindow.loadURL(url.format({\n    pathname: path.join(__dirname, 'index.html'),\n    protocol: 'file:',\n    slashes: true\n  }));\n  mainWindow.webContents.openDevTools();\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  app.quit();\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Hello, files</title>\n  </head>\n  <body>\n    <p>\n      <input type=\"button\" value=\"Reload the app after changing the code\" onClick=\"window.location.reload()\"/>\n    </p>\n    <div id=\"app\">\n      <p>{{ location }}</p>\n      <button @click=\"up\">..</button>\n      <listing v-for=\"file in files\" v-bind:key=\"file.id\" v-bind:item=\"file\"></listing>\n      <p><img v-bind:src=\"img/image\"/></p>\n    </div>\n    <script src=\"img/vue\"></script>\n    <script>\n      require('./renderer.js')\n    </script>\n  </body>\n</html>\n```", "```js\n// renderer.js\n\nconst Promise = require(\"bluebird\");\nconst fs = Promise.promisifyAll(require(\"fs\"));\nconst path = require(\"path\");\n\nVue.component('listing', {\n  props: ['item'],\n  template: '<div @click=\"clicked(item.name)\">{{ item.name }}</div>',\n  methods: {\n    clicked(n) {\n      go(path.format({ dir: app.location, base: n }));\n    }\n  }\n});\n\nvar app = new Vue({\n  el: '#app',\n  data: {\n    location: process.cwd(),\n    files: [],\n    image: null\n  },\n  methods: {\n    up() {\n      go(path.dirname(this.location));\n    }\n  }\n});\n\nfunction go(p) {\n\n  if (p.endsWith(\".bmp\") || p.endsWith(\".png\") || p.endsWith(\".gif\") || p.endsWith(\".jpg\")) {\n\n    // Image\n    app.image = \"file://\" + p; // Show it\n\n  } else {\n\n    // Non-image\n    app.image = null;\n\n    // See if it's a directory or not\n    fs.lstatAsync(p).then((stat) => {\n\n      if (stat.isDirectory()) {\n\n        // Directory, list its contents\n        app.location = p;\n        fs.readdirAsync(app.location).then((files) => {\n          var a = [];\n          for (var i = 0; i < files.length; i++)\n            a.push({ id: i, name: files[i] });\n          app.files = a;\n        }).catch((e) => {\n          console.log(e.stack);\n        });\n      } else {\n        // Non-directory, don't go there at all\n      }\n    }).catch((e) => {\n      console.log(e.stack);\n    });\n  }\n}\n\ngo(app.location);\n```", "```js\n<script src=\"img/vue\"></script>\n```", "```js\n<div id=\"app\">\n  <p>{{ location }}</p>\n  <button @click=\"up\">..</button>\n  <listing v-for=\"file in files\" v-bind:key=\"file.id\" v-bind:item=\"file\"></listing&gt;\n  <p><img v-bind:src=\"img/image\"/></p>\n</div>\n<script src=\"img/vue\"></script>\n```", "```js\nvar app = new Vue({\n  el: '#app',\n  data: {\n    location: process.cwd(),\n    files: [],\n    image: null\n  },\n  methods: {\n    up() {\n      go(path.dirname(this.location));\n    }\n  }\n});\n```"]