["```js\nhttp.createServer(function(request, response) { \n    response.writeHeader(200, {\"Content-Type\": \"text/plain\"});   \n    response.write(\"Hello World\");   \n    response.end();   \n}).listen(2112) \n```", "```js\nab -n 10000 -c 100 http://yourserver.com/ \n```", "```js\n Concurrency Level:      100\n Time taken for tests:   9.658 seconds\n Complete requests:      10000\n Failed requests:        0\n Write errors:           0\n Total transferred:      1120000 bytes\n HTML transferred:       110000 bytes\n Requests per second:    1035.42 [#/sec] (mean)\n Time per request:       96.579 [ms] (mean)\n Time per request:       0.966 [ms] (mean, across all concurrent requests)\n Transfer rate:          113.25 [Kbytes/sec] received\n\n Connection Times (ms)\n min  mean[+/-sd] median   max\n Connect:        0    0   0.4      0       6\n Processing:    54   96  11.7     90     136\n Waiting:       53   96  11.7     89     136\n Total:         54   96  11.6     90     136\n\n Percentage of the requests served within a certain time (ms)\n 50%     90\n 66%     98\n ...\n 99%    133\n 100%    136 (longest request) \n```", "```js\nLoad average: 0.00 0.01 0.00\n```", "```js\nconst os = require('os'); \n// Load average, as an Array \nconsole.log(os.loadavg()); \n// Total and free memory \nconsole.log(os.totalmem()); \nconsole.log(os.freemem()); \n// Information about CPUs, as an Array \nconsole.log(os.cpus()); \n```", "```js\nio.sockets.clients() \n```", "```js\n# lsof | wc -l     // 1345\n```", "```js\nredis> info \n# Clients \nconnected_clients:1 \nblocked_clients:0 \n# Memory \nused_memory:17683488 \nused_memory_human:16.86M \nused_memory_rss:165900288 \nused_memory_peak:226730192 \nused_memory_peak_human:216.23M \nused_memory_lua:31744 \nmem_fragmentation_ratio:9.38 \n# CPU \nused_cpu_sys:13998.77 \nused_cpu_user:21498.45 \nused_cpu_sys_children:1.60 \nused_cpu_user_children:7.19 \n... \n```", "```js\n> db.stats(1024) \n{    \"collections\" : 3, \n \"objects\" : 5, \n \"avgObjSize\" : 39.2, \n \"dataSize\" : 0, \n \"storageSize\" : 12, \n \"numExtents\" : 3, \n \"indexes\" : 1, \n \"indexSize\" : 7, \n \"fileSize\" : 196608, \n \"nsSizeMB\" : 16, \n ... \n \"ok\" : 1 } \n```", "```js\nlet httpProxy = require('http-proxy'); \nlet proxy = httpProxy.createServer({ \ntarget: { \n  host: 'www.example.com', \n  port: 80 \n} \n}).listen(80); \n```", "```js\nlet httpProxy = httpProxy.createServer({ \n  router: { \n    'www.mywebsite.com' : '127.0.0.1:8001', \n    'www.myothersite.com' : '127.0.0.1:8002', \n  } \n}); \nhttpProxy.listen(80); \n```", "```js\nlet httpProxy = httpProxy.createServer({ \n  router: { \n    'www.mywebsite.com/friends': '127.0.0.1:8001', \n    'www.mywebsite.com/foes': '127.0.0.1:8002', \n  } \n}); \nhttpProxy.listen(80); \n```", "```js\nconst httpProxy = require('http-proxy'); \nlet addresses = [ \n  { host: 'one.example.com', port: 80 }, \n  { host: 'two.example.com', port: 80 } \n]; \nhttpProxy.createServer((req, res, proxy) => { \n  let target = addresses.shift(); \n  proxy.proxyRequest(req, res, target); \n  addresses.push(target); \n}).listen(80); \n```", "```js\napt-get install nginx\n```", "```js\nservice nginx start\n```", "```js\ncurl https://raw.githubusercontent.com/creationix/nvm/v7.10.1/install.sh | sh\n```", "```js\nnvm install 9.2.0\n```", "```js\nnvm use 9.2.0\n```", "```js\nconst http = require('http');\nhttp.createServer((req, res) => {\n  res.writeHead(200, {\n    \"Content-Type\" : \"text/html\"\n  });\n  res.write('HOST **');\n  res.end();\n}).listen(8080)\n```", "```js\nupstream lb_servers {\n  server first.node.server.ip;\n  server second.node.server.ip;\n}\n```", "```js\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server ipv6only=on;\n\n    #root /usr/share/nginx/html;\n    #index index.html index.htm;\n\n    # Make site accessible from http://localhost/\n    server_name localhost;\n\n    location / {\n        proxy_pass http://lb-servers; # Load balance mapped servers\n\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n... more configuration options not specifically relevant to our purposes\n\n}\n```", "```js\nproxy_pass http://lb-servers\n```", "```js\nservice nginx restart\n```", "```js\nservice nginx stop\nservice nginx start\n```", "```js\nupstream lb-servers {\n    server first.node.server.ip weight=10;\n    server second.node.server.ip weight=20;\n}\n```", "```js\nupstream lb-servers {\n  server first.node.server.ip weight=10 max_fails=2 fail_timeout=20s;\n  server second.node.server.ip weight=20 max_fails=10 fail_timeout=5m;   \n}\n```", "```js\nservice rabbitmq-server start\n```", "```js\nnpm install amqp\n```", "```js\nconst amqp = require('amqp');\u2028\nconst consumer = amqp.createConnection({ host: 'localhost', port: 5672 });\u2028\u2028\nconsumer.on('error', err => {\u2028 \nconsole.log(err);\n\u2028});\u2028\u2028\nconsumer.on('ready', () => {\u2028 \nlet exchange = consumer.exchange('node-topic-exchange', {type: \"topic\"});\u2028 \nconsumer.queue('node-topic-queue', q => {\u2028\u2028  \nq.bind(exchange, '#');\u2028\u2028  \nq.subscribe(message => {\u2028   // Messages are buffers\u2028   console.log(message.data.toString('utf8'));\u2028  \n});\u2028  \u2028  \nexchange.publish(\"some-topic\", \"Hello!\");\u2028 \n});\u2028\n});\n```", "```js\nconsumer.on('ready', function() { \n  // ... \n  exchange.publish(\"some-topic\", \"Hello!\"); \n}); \n// Hello! \n```", "```js\nqueue.bind(exchange, 'room-1');\n```", "```js\nconsumer.on('ready', function() { \n  // When all 3 queues are ready, publish. \n  let cnt = 3; \n  let queueReady = function() { \n    if(--cnt > 0) { \n      return; \n    } \n    exchange.publish(\"animals.dogs.poodles\", \"Poodle!\"); \n    exchange.publish(\"animals.dogs.dachshund\", \"Dachshund!\"); \n    exchange.publish(\"animals.cats.shorthaired\", \"Shorthaired Cat!\"); \n    exchange.publish(\"animals.dogs.shorthaired\", \"Shorthaired Dog!\"); \n    exchange.publish(\"animals.misc\", \"Misc!\"); \n  } \n  let exchange = consumer.exchange('topical', {type: \"topic\"}); \n  consumer.queue('queue-1', q => { \n    q.bind(exchange, 'animals.*.shorthaired'); \n    q.subscribe(message => { \n      console.log(`animals.*.shorthaired -> ${message.data.toString('utf8')}`); \n    }); \n    queueReady(); \n  }); \n  consumer.queue('queue-2', q => {     \n    q.bind(exchange, '#'); \n    q.subscribe(function(message) { \n      console.log('# -> ' + message.data.toString('utf8')); \n    }); \n    queueReady(); \n  }); \n  consumer.queue('queue-3', q => {     \n    q.bind(exchange, '*.cats.*'); \n    q.subscribe(message => { \n      console.log(`*.cats.* -> ${message.data.toString('utf8')}`); \n    }); \n    queueReady(); \n  }); \n}); \n\n//    # -> Poodle! \n//    animals.*.shorthaired -> Shorthaired Cat! \n//    *.cats.* -> Shorthaired Cat! \n//    # -> Dachshund! \n//    # -> Shorthaired Cat! \n//    animals.*.shorthaired -> Shorthaired Dog! \n//    # -> Shorthaired Dog! \n//    # -> Misc! \n```", "```js\nconst dgram = require(\"dgram\"); \nlet socket = dgram.createSocket(\"udp4\"); \nsocket.on(\"message\", (msg, info) => { \n  console.log(\"socket got: \" + msg + \" from \" + \n  info.address + \":\" + info.port); \n}); \nsocket.bind(41234); \nsocket.on(\"listening\", () => { \n  console.log(\"Listening for datagrams.\"); \n}); \n```", "```js\nlet client = dgram.createSocket(\"udp4\"); \nlet message = Buffer.from('UDP says Hello!', 'utf8'); \nclient.send(message, 0, message.length, 41234, \"localhost\", (err, bytes) => client.close()); \n```", "```js\nlet socket = dgram.createSocket('udp4'); \nlet multicastAddress = '230.1.2.3'; \nlet multicastPort = 5554; \nsocket.bind(multicastPort); \nsocket.on(\"listening\", function() { \n    this.setMulticastTTL(64); \n    this.addMembership(multicastAddress); \n}); \n```", "```js\ndgram.createSocket('udp4').on('message', (message, remote) => { \n  console.log(`Client1 received message ${message} from ${remote.address}:${remote.port}`); \n}).bind(multicastPort, multicastAddress); \n\ndgram.createSocket('udp4').on('message', (message, remote) => { \n  console.log(`Client2 received message ${message} from ${remote.address}:${remote.port}`); \n}).bind(multicastPort, multicastAddress); \n```", "```js\nlet cnt = 1; \nlet sender; \n(sender = function() { \n  let msg = Buffer.from(`This is message #${cnt}`); \n  socket.send( \n    msg, \n    0, \n    msg.length, \n    multicastPort, \n    multicastAddress \n  ); \n  ++cnt; \n  setTimeout(sender, 1000); \n})(); \n```", "```js\n Client2 received message This is message #1 from 67.40.141.16:5554\n Client1 received message This is message #1 from 67.40.141.16:5554\n Client2 received message This is message #2 from 67.40.141.16:5554\n Client1 received message This is message #2 from 67.40.141.16:5554\n Client2 received message This is message #3 from 67.40.141.16:5554\n ...\n```", "```js\ndgram.createSocket('udp4').on('message', (message, remote) =>{ \n  console.log(`Client3 received message ${message} from ${remote.address}:${remote.port}`); \n}).bind(multicastPort, '230.3.2.1');\n```", "```js\nsocket.on(\"listening\", function() { \n  this.addMembership(multicastAddress); \n  this.addMembership('230.3.2.1'); \n}); \n```", "```js\n(sender = function() { \n  socket.send( \n      ... \n      multicastAddress \n  ); \n  socket.send( \n      ... \n      '230.3.2.1' \n  ); \n  // ... \n})(); \n```", "```js\ndgram.createSocket('udp4').on('message', (message, remote) => { \n  let msg = Buffer.from('Calling original group!', 'utf8'); \n  // 230.1.2.3 is the multicast address \n  socket.send(msg, 0, msg.length, multicastPort, '230.1.2.3'); \n}).bind(multicastPort, '230.3.2.1'); \n```", "```js\nnpm install aws-sdk  \n```", "```js\n{ \n  \"accessKeyId\" : \"your-key\",  \n  \"secretAccessKey\" : \"your-secret\", \n  \"region\" : \"us-east-1\", \n  \"apiVersions\" : { \n     \"s3\" : \"2006-03-01\", \n     \"ses\" : \"2010-12-01\", \n     \"dynamodb\" : \"2012-08-10\" \n  } \n} \n```", "```js\nconst AWS = require('aws-sdk'); \nAWS.config.loadFromPath('./config.json');\n```", "```js\nrdate 129.6.15.28\nntpdate 129.6.15.28  \n```", "```js\nconst AWS = require('aws-sdk');\u2028\u2028 // You should change this to something unique. AWS bucket names must\u2028// be unique and are shared across ALL USER namespaces.\u2028\nconst bucketName = 'nodejs-book';\u2028\u2028AWS.config.loadFromPath('../config.json');\n\u2028\u2028const S3 = new AWS.S3();\u2028\u2028\nS3.createBucket({\u2028\n Bucket: bucketName\u2028\n}, (err, data) => {\u2028 \nif(err) {\u2028  throw err;\u2028 }\u2028 \u2028 \nconsole.log(data);\n\u2028});\n```", "```js\n{\nLocation: '/masteringnodejs.examples'\n}\n```", "```js\nlet S3 = new AWS.S3({ \n  params: { Bucket: 'nodejs-book' } \n}); \nS3.createBucket((err, data) => { // ... }); \n```", "```js\nS3.listBuckets((err, data) => { \n  console.log(data.Buckets); \n}); \n//    [ { Name: 'nodejs-book', \n//        CreationDate: Mon Jul 15 2013 22:17:08 GMT-0500 (CDT) }, \n//        ... \n//    ] \n```", "```js\nconst AWS = require('aws-sdk');\u2028AWS.config.loadFromPath('../config.json');\u2028\u2028\nconst S3 = new AWS.S3({\n\u2028 params: {\u2028  Bucket: 'nodejs-book'\u2028 }\n\u2028});\u2028\u2028\nlet body = JSON.stringify({ foo: \"bar\" });\u2028\nlet s3Obj = {\n\u2028 Key: 'demos/putObject/first.json',\n\u2028 Body: body,\n\u2028 ServerSideEncryption: \"AES256\",\n\u2028 ContentType: \"application/json\",\n\u2028 ContentLength: body.length,\n\u2028 ACL: \"private\"\u2028};\n\u2028\u2028S3.putObject(s3Obj, (err, data) => {\u2028\n if(err) {\u2028  throw err;\u2028 }\n \u2028 \u2028 console.log(data);\n\u2028});\n```", "```js\n{ ETag: '\"9bb58f26192e4ba00f01e2e7b136bbd8\"',\nServerSideEncryption: 'AES256'}\n```", "```js\nfs.stat(\"./testimage.jpg\", (err, stat) => {\u2028\u2028\n let s3Obj = {\n\u2028  Key    : 'demos/putObject/testimage.jpg',\n\u2028  Body   : fs.createReadStream(\"./testimage.jpg\"),\n\u2028  ContentLength : stat.size,\n\u2028  ContentType  : \"image/jpeg\",\n\u2028  ACL    : \"public-read\"\u2028 \n};\n\u2028 \u2028 S3.putObject(s3Obj, (err, data) => {\u2028  if(err) {\u2028   throw err;\u2028  }\u2028  console.log(data);\u2028 \n});\n\u2028});\n```", "```js\nlet outFile = fs.createWriteStream('./fetchedfile.jpg'); \nS3.getObject({ \n  Key : 'demos/putObject/testimage.jpg' \n}).createReadStream().pipe(outFile); \n```", "```js\nS3.getObject({ \n  Key : 'demos/putObject/testfile.jpg' \n}) \n.on('httpData', chunk => outFile.write(chunk)) \n.on('httpDone', () => outFile.end()) \n.send(); \n```", "```js\nS3.deleteObject({ \n  Bucket : 'nodejs-book', \n  Key : 'demos/putObject/optimism.jpg' \n}, (err, data) => { // ... }); \n```", "```js\nS3.deleteObjects({ \n  Bucket : 'nodejs-book', \n  Delete : { \n    Objects : [{ \n      Key : 'demos/putObject/first.json' \n    }, { \n      Key : 'demos/putObject/testimage2.jpg' \n    }] \n  } \n}, (err, data) => { // ... });\n```", "```js\nhttp.createServer(function(request, response) {  \n  let requestedFile = request.url.substring(1); \n  S3.headObject({ \n    Key : requestedFile \n  }, (err, data) => { \n    // 404, etc. \n    if(err) { \n      response.writeHead(err.statusCode); \n      return response.end(err.name); \n    } \n    response.writeHead(200, { \n      \"Last-Modified\" : data.LastModified, \n      \"Content-Length\" : data.ContentLength, \n      \"Content-Type\" : data.ContentType, \n      \"ETag\" : data.ETag \n    }); \n    S3.getObject({ \n      Key : requestedFile \n    }).createReadStream().pipe(response); \n  }); \n}).listen(8080); \n```", "```js\n{\n     Id = 123                                        \n     Date = \"1375314738466\" \n     UserId = \"DD9DDD8892\" \n     Cart = [ \"song1\", \"song2\" ] \n     Action = \"buy\" \n} \n```", "```js\nconst AWS = require('aws-sdk'); \nAWS.config.loadFromPath('../config.json'); \nlet db = new AWS.DynamoDB();  \ndb.createTable({ \n  TableName: 'purchases', \n  AttributeDefinitions : [{ \n    AttributeName : \"Id\", AttributeType : \"N\" \n  }, { \n    AttributeName : \"Date\", AttributeType : \"N\" \n  }], \n  KeySchema: [{  \n    AttributeName: 'Id',  KeyType: 'HASH'  \n  }, {  \n    AttributeName: 'Date',  KeyType: 'RANGE'  \n  }], \n  ProvisionedThroughput: { \n    ReadCapacityUnits: 2, \n    WriteCapacityUnits: 2 \n  } \n}, (err, data) => console.log(util.inspect(data))); \n```", "```js\n{     \n  TableDescription: {  \n    AttributeDefinitions: [ // identical to what was sent], \n    CreationDateTime: 1375315748.029, \n    ItemCount: 0, \n    KeySchema: [ // identical to what was sent ], \n    ProvisionedThroughput: {  \n      NumberOfDecreasesToday: 0, \n      ReadCapacityUnits: 2, \n      WriteCapacityUnits: 2  \n    }, \n    TableName: 'purchases', \n    TableSizeBytes: 0, \n    TableStatus: 'CREATING'  \n  }  \n} \n```", "```js\ndb.putItem({ \n  TableName : \"purchases\", \n  Item : { \n    Id : {\"N\": \"123\"},                                        \n    Date : {\"N\": \"1375314738466\"}, \n    UserId : {\"S\" : \"DD9DDD8892\"}, \n    Cart : {\"SS\" : [ \"song1\", \"song2\" ]}, \n    Action : {\"S\" : \"buy\"} \n  } \n}, () => { // ... }); \n```", "```js\ndb.getItem({ \n  TableName : \"purchases\", \n  Key : { \n    Id : { \"N\" : \"124\" } \n  }, \n  AttributesToGet : [\"Action\", \"Cart\"] \n}, (err, res) => console.log(util.inspect(res, { depth: 10 }))); \n```", "```js\n{   \n  Item: {  \n    Action: { S: 'buy' },  \n      Cart: { SS: [ 'song2', 'song4' ] }  \n  }  \n} \n```", "```js\ndb.scan({ \n  TableName : \"purchases\", \n  ScanFilter : { \n    \"Cart\": { \n      \"AttributeValueList\" : [{ \n        \"S\":\"song2\" \n      }], \n      \"ComparisonOperator\" : \"CONTAINS\" \n    }, \n  } \n}, (err, res) => { \n  console.log(util.inspect(res, { \n    depth: 10 \n  })); \n}); \n```", "```js\ndb.scan({ \n  TableName : \"purchases\", \n  ScanFilter : { \n    \"Date\": { \n      \"AttributeValueList\" : [{ \n        \"N\" : \"1375314738467\" \n      }], \n        \"ComparisonOperator\" : \"EQ\" \n      }, \n      \"Cart\": { \n         \"AttributeValueList\" : [{ \n           \"S\" : \"song2\" \n         }], \n         \"ComparisonOperator\" : \"CONTAINS\" \n      }, \n   } \n}, (err, res) => { \n  console.log(util.inspect(res, {depth: 10})); \n}); \n```", "```js\nlet ses = new AWS.SES(); \nses.getSendQuota((err, data) => { \n  console.log(err, data); \n});  \n```", "```js\nses.sendEmail({ \n  Source : \"spasquali@gmail.com\", \n  Destination : { \n    ToAddresses : [ \"spasquali@gmail.com\" ] \n  }, \n  Message : { \n    Subject: { Data : \"NodeJS and AWS SES\" }, \n    Body : { \n      Text : { Data : \"It worked!\" } \n    } \n  } \n}, (err, resp) => console.log(resp));\n```", "```js\nRequestId: '623144c0-fa5b-11e2-8e49-f73ce5ee2612'\n\nMessageId: '0000014037f1a167-587a626e-ca1f-4440-a4b0-81756301bc28-000000'\n```", "```js\n> heroku create\n```", "```js\n> git remote\n```", "```js\n> git push heroku master\n```", "```js\n> heroku logs\n```", "```js\n// router/index.js\nconst restify = require('restify');\nconst SServer = require(\"ws\").Server;\nconst server = restify.createServer({\n  // additional configuration can be done here\n});\nserver.use(restify.plugins.acceptParser(server.acceptable));\nserver.use(restify.plugins.bodyParser());\n\nfunction responder(req, res) {\n   res.send(200, 'Switchboard is active');\n}\nserver.get('/', responder);\n\n// process.env.PORT is set by heroku (add it yourself if hosting elsewhere)\nserver.listen(process.env.PORT, () => {});\n\n// Get the LevelDB interface, and its readable stream\nrequire('./Db')((db, dbApi) => {\n\n  // Configure the sms webhook routing\n  require('./sms')(server, dbApi);\n\n  // Configure a leveldb datastream listener which has the job\n  // of informing clients of data changes.\n  require('./dataStream.js')(db, Clients);\n\n  // Configure the socket listener for client connections\n  let wss = new SServer(server);\n\n  wss.on(\"connection\", clientConn => {\n    clientConn.on(\"close\", () => {\n      // remove clients, close the connection\n    });\n\n    clientConn.on(\"message\", payload => {\n      // ...more on this later\n    });\n\n    // Say something nice to clients when they connect\n    clientConn.send(JSON.stringify({\n      type: 'alert',\n      text: 'How can I help you?'\n    }));\n  });\n});\n```", "```js\n// router/sms/index.js\nrequire('./sms')(server, dbApi);\n```", "```js\nconst env = process.env;\nconst twilioAPI = require('twilio')(env.TWILIO_SID, env.TWILIO_AUTH_TOKEN);\nmodule.exports = (server, dbApi) => {\n  let smsUrl = env.URL + '/smswebhook';\n  twilioAPI.incomingPhoneNumbers(env.TWILIO_PHONE_NUMBER_SID).update({\n    smsUrl: smsUrl\n  });    \n\n  server.post('/smswebhook', (req, res) => {\n    let dat = req.body;\n    let meta = {\n      message : dat.Body,\n      received : Date.now(),\n      fromCountry : dat.FromCountry,\n      phoneNumber : dat.From\n    };\n\n    dbApi\n    .addToNumberHistory(dat.From, meta)\n    .then(newVal => console.log('Received message from', dat.From))\n    .catch(err => console.log(\"levelERRR:\", err));\n    res.end();\n  });\n};\n```", "```js\n   let smsUrl = `${env.URL}/smswebhook`;\n   twilioAPI.incomingPhoneNumbers(env.TWILIO_PHONE_NUMBER_SID).update({\n     smsUrl: smsUrl\n   });    \n```", "```js\n{\n  ToCountry: 'US',\n  ToState: 'NY',\n  SmsMessageSid: 'xxxxxx',\n  NumMedia: '0',\n  ToCity: 'SOUTH RICHMOND HILL',\n  FromZip: '11575',\n  SmsSid: 'xxxxxx',\n  FromState: 'NY',\n  SmsStatus: 'received',\n  FromCity: 'SOUTH RICHMOND HILL',\n  Body: 'Hi! This is a test message!',\n  FromCountry: 'US',\n  To: '+5555554444',\n  ToZip: '11244',\n  NumSegments: '1',\n  MessageSid: 'xxxxxx',\n  AccountSid: 'xxxxxx',\n  From: '+555555555',\n  ApiVersion: '2010-04-01' \n}\n```", "```js\nrequire('./dataStream.js')(db, Clients);\n```", "```js\nmodule.exports = (db, Clients) => {\n  const dbStream = require('level-live-stream')(db);\n\n  // When a new write has been successfully written...\n  dbStream.on('data', data => {\n    let number = data.key;\n    let val = data.value;\n\n    // Find any clients that are listening on this number\n    let boundClient = Clients.withNumber(number);\n\n    // Send the current history to this client\n    if(boundClient) {\n      try {\n        return boundClient.send(JSON.stringify({\n          type: 'update',\n          list: val\n        }));\n      } catch(e) {\n        Clients.delete(boundClient);\n      }\n    }\n\n    // Try to find an available client to handle this number\n    let waitingClient = Clients.nextAvailable();\n\n    if(waitingClient) {\n      // This client is no longer `available`. Assign client a number.\n      // Then send number history.\n      Clients.set(waitingClient, number);\n      waitingClient.send(JSON.stringify({\n        type: 'update',\n        list: val\n      }));\n    }\n    // TODO: handle situations without available clients\n  });\n};\n```", "```js\n// router/sms/sendResponse.js\nconst Twilio = require('twilio');\nconst twilioAPI = new Twilio(process.env.TWILIO_SID, process.env.TWILIO_AUTH_TOKEN);\nmodule.exports = (number, message) => twilioAPI.messages.create({\n  to: number,\n  from: process.env.TWILIO_DEFAULT_FROM,\n  body: message\n});\n```", "```js\n// router/index.js\n...\nclientConn.on(\"message\", payload => {\n  try {\n    payload = JSON.parse(payload);\n } catch(e) {\n    return;\n }\n\n switch(payload.type) {\n   case 'available':\n     Client.set(clientConn, 'available');\n   break;\n\n   case 'response':\n     let number = Clients.get(clientConn);\n     // Add to message history when bound client\n     // sends valid message to a known number.\n     if(/^\\+?[0-9]*$/.test(number)) {\n       dbApi.addToNumberHistory(number, {\n         message : payload.message,\n         received : Date.now(),\n         phoneNumber : number\n       })\n       .then(() => require('./sms/sendResponse.js')(number, payload.message))\n       .catch(err => console.log(\"response send error:\", err));\n     }\n     break;\n  }\n});\n```", "```js\n// /source/views/index.html\n\n<!DOCTYPE html>\n<html>\n<head>\n   <title>Untitled</title>\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"css/app.css\">\n</head&gt;\n<body>\n\n<div id=\"main\"></div>\n<div id=\"page_controls\">\n   <span id=\"message-composer\"></span>\n</div>\n\n<script src=\"img/jquery-3.2.1.min.js\" integrity=\"sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=\" crossorigin=\"anonymous\"></script>\n<script src=\"img/socketConnector.js\"></script>\n<script src=\"img/components.js\"></script>\n<script src=\"img/app.js\"></script>\n</body>\n</html>\n```", "```js\n// source/jsx/MessageComposer.jsx\nexport class Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      phone : '',\n      messages: []\n    };\n  }\n  componentDidMount() {\n    ws.onmessage = mOb => {\n      let data = JSON.parse(mOb.data);\n      if(data.messages && data.phone) {\n        return this.setState(data);\n      }\n    }\n  }\n\n  render() {\n    return <div>\n      <MessageHistory history={this.state} />\n      </div>\n  }\n}\n\nexport class MessageHistory extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    let history = this.props.history;\n     return <div id=\"timeline_container\">\n       <div className=\"history_header\">\n         <figure>{history.phone}</figure>\n       </div>\n         <ul> \n           { history.messages.map(function(it) { \n              return <li className=\"message_event\" key={it.received}>\n                <div className={\"event_icn icon-emo-\" + it.sentiment}></div>\n                <div className=\"event_content\">\n                  <p>{it.message}</p>\n                </div>\n                <div className=\"event_date\">\n                  {it.date}\n                </div>\n              </li>\n           }) }\n        </ul>\n      </div>;\n    }\n}\n\nrender(\n  <Timeline />, document.getElementById('main')\n);\n```", "```js\n{ history.messages.map(function(it) {\n   return <li className=\"message_event\" key={it.received}>\n      <div className={\"event_icn icon-emo-\" + it.sentiment}></div>\n      <div className=\"event_content\">\n         <p>{it.message}</p>\n      </div>\n      <div className=\"event_date\">\n         {it.date}\n      </div>\n   </li>\n}) }\n```", "```js\ndbApi.addToNumberHistory(number, {\n  message : payload.message,\n  received : Date.now(),\n  phoneNumber : number\n})\n```", "```js\nws.onmessage = mOb => {\n  let data = JSON.parse(mOb.data);\n  if(data.messages && data.phone) {\n    return this.setState(data);\n  }\n}\n```", "```js\n<script src=\"img/socketConnector.js\"></script>\n```", "```js\nlet ws = new WebSocket('ws://' + host + ':8080');\nws.sendMessage = function(command, msg) {\n  this.send(JSON.stringify({\n    command : command || '',\n    message : msg || ''\n  }));\n};\n```", "```js\n// source/jsx/MessageComposer.jsx\nexport class MessageComposer extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  sendMessage(ev) {\n    // Get message; clear input; exit if\n    let input = document.getElementById('composer');\n    let msg = input.value;\n\n    input.value = '';\n\n    if(msg.trim() === '') {\n      return;\n    }\n\n    ws.sendMessage('response', msg);\n  }\n  render() {\n    return <span>\n      <textarea id=\"composer\"></textarea><button onClick={this.sendMessage}>send</button>\n    </span>\n  }\n}\n\nrender(\n  <MessageComposer />, document.getElementById('message-composer')\n);\n```", "```js\nconst http = require('http');\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nlet defaultPort = 8080;\nlet app = express();\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(express.static('./public'));\n\nlet server = http.createServer(app);\nserver.listen(process.env.PORT || defaultPort);\n\nconsole.log('HTTP server listening on', process.env.PORT || defaultPort);\n\n// The client is connected to a local socket server, which sends client->LocalSS->customer messages.\n// The local SS is connected to switchboard, receiving SMS->switchboard->LocalSS->client messages.\nrequire('./bindSocketServer.js')(server);\n```", "```js\nrequire('./bindSocketServer.js')(server);\n```", "```js\n// router/bindSocketServer.js\nconst WebSocket = require('ws');\nconst SServer = WebSocket.Server;\n\nlet arrayToStream = require('./transformers/arrayToStream.js');\nlet timeTransformer = require('./transformers/time.js');\nlet sentimentTransformer = require('./transformers/sentiment.js');\nlet accumulator = require('./transformers/accumulator.js');\n\nconst sbUrl = process.env.SWITCHBOARD_URL;\n\nmodule.exports = server => {\n  // Bind the local socket server, which communicates\n  // with web clients.\n  (new SServer({\n     server: server\n  })).on('connection', localClientSS => {\n    let keepalive;\n    // A remote SMS gateway\n    let switchboard = new WebSocket(sbUrl);\n\n    // ... boilerplate ping/pong functionality\n\n    // handle \n    switchboard.onmessage = event => {\n      let data = event.data;\n      try {\n        data = JSON.parse(data);\n      } catch(e) {\n        return console.log(`Unable to process data: ${data}`);\n      }\n      // switchboard sent an update\n      if(data.type === 'update') {\n        // Transform messages into expected format for UI.\n        arrayToStream(data.list.reverse())\n        .pipe(timeTransformer({\n          format: \"%s ago\"\n        }))\n        .pipe(sentimentTransformer('message'))\n        .pipe(accumulator((err, messages) => {\n          if(err) {\n            return console.log(err);\n          }\n          localClientSS.sendMessage({\n            messages: messages,\n            phone: messages[0].phoneNumber\n          })\n         }));\n        }\n      };\n\n      // Need to configure handlers so we can bidirectionally\n      // communicate with client UI (snd/rcv messages)\n      localClientSS.sendMessage = obj => {\n        localClientSS.send(JSON.stringify(obj));\n      };\n\n      // Client UI is responding\n      localClientSS.on('message', payload => {\n        try {\n          payload = JSON.parse(payload);\n        } catch(e) {\n          return;\n        }\n        switch(payload.command) {\n          case 'response':\n            switchboard.send(JSON.stringify({\n              type: 'response',\n              message : payload.message\n            }));\n            break;\n            default:\n              // do nothing\n            break;\n         }\n      });\n\n      // ... handle socket close, etc.\n};\n```", "```js\n// router/transformers/sentiment.js\nconst through2 = require('through2');\nconst sentiment = require('sentiment');\n\nmodule.exports = targProp => {\n  if(typeof targProp !== 'string') {\n     targProp = 'sentiment';\n  }\n\n  return through2.obj(function(chunk, enc, callback) {\n    // Add #sentiment property\n    let score = sentiment(chunk[targProp]).score;\n\n    // Negative sentiments\n    if(score < 0) {\n      chunk.sentiment = score < -4 ? 'devil' : 'unhappy';\n    }\n\n    // Positive sentiments\n    else if(score >= 0) {\n      chunk.sentiment = score > 4 ? 'wink' : 'happy';\n    }\n\n    this.push(chunk);\n    callback()\n  });\n};\n```"]