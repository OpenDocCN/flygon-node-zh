["```js\nrequire('http').createServer((req, res) => {\n  res.writeHead(200, {'Content-Type': 'text/plain'});\n  res.end('Hello client from ${req.connection.remoteAddress}`);\n  console.log(req);\n}).listen(8000);\n```", "```js\nGET /services/cities.php?country=usa&state=ohio \n```", "```js\nGET /listCities/usa/ohio \n```", "```js\nlet app = http.createServer((request, response) => {\n  let url = request.url;\n  let method = request.method;\n  if (method === \"GET\") {\n    if (url === \"/listCities/usa/ohio\") {\n      database.call(\"usa\",\"ohio\", (err, data) => {\n        response.writeHead(200, {'Content-Type': 'application/json' });\n        // Return list of cities in Ohio, USA\n        response.end(JSON.stringify(data));\n      });\n    }\n    if (url === \"/listCities/usa/arizona\") { ... }\n    if (url === \"/listCities/canada/ontario\") { ... }\n  }\n})\n```", "```js\n/listCities/:country/:state \n```", "```js\n{ country: \"usa\", state: \"ohio\" } \n```", "```js\nif (request.method === \"GET\") {\n  let match = request.url.match(/^\\/listCities\\/([^\\/\\.]+)\\/([^\\/\\.]+)\\/?$/);\n  if (match) {\n    database.call(match[1],match[2],function(err, data) {\u2026}\n  }\n}\n```", "```js\nconst express = require('express');\nlet app = express();\napp.get('/listCities/:country/:state', (request, response) => {\n  let country = request.params.country;\n  let state = request.params.state;\n  response.end(`You asked for country: ${country}and state: ${state}`);\n});\napp.listen(8080);\n\nGET /listCities/usa/ohio\n// You asked for country: usa and state: ohio\nGET /didnt/define/this\n// Cannot GET /didnt/define/this\nGET /listCities // note missing arguments\n// Cannot GET /listCities\n```", "```js\nlet authenticate = (request, response, next) => {\n  if (validUser) {\n    next();\n  } else {\n    response.end(\"INVALID USER!\");\n  }\n}\napp.get('/listCities/:country/:state', authenticate, (request, response) => { ... });\n```", "```js\n$ redis-cli \n```", "```js\n $ redis-cli\n redis> get somerandomkey\n (nil)\n```", "```js\nredis> set somerandomkey \"who am I?\"\nredis> get somerandomkey\n\"who am I?\"\n```", "```js\n$ npm install redis \n```", "```js\nlet redis = require(\"redis\");\nlet client = redis.createClient();\nclient.set(\"userId\", \"jack\", (err) => {\n  client.get(\"userId\", (err, data) => {\n    console.log(data); // \"jack\"\n  });\n});\n```", "```js\nredis> hset jack password \"beanstalk\"\nredis> hset jack fullname \"Jack Spratt\"\n```", "```js\n{\n  \"password\": \"beanstalk\",\n  \"fullname\": \"Jack Spratt\"\n}\n```", "```js\nredis> hmset jack password \"beanstalk\" fullname \"Jack Spratt\"\n```", "```js\nredis> hgetall jack\n 1) \"password\"\n 2) \"beanstalk\"\n 3) \"fullname\"\n 4) \"Jack Spratt\"\n```", "```js\nredis> hget jack password // \"beanstalk\"\n```", "```js\n\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst app = express();\n\napp.use(cookieParser());\n\napp.get('/mycookie', (request, response) => {\n   response.end(request.cookies.node_cookie);\n});\n\napp.get('/', (request, response) => {\n   response.cookie('node_cookie', parseInt(Math.random() * 10e10));\n   response.end(\"Cookie set\");\n});\n\napp.listen(8000);\n```", "```js\n<ul id=\"results\"></ul> \n```", "```js\nfunction longPoll() {\n  $.get('http://localhost:2112/poll', (data) => {\n    $('<li>' + data + '</li>').appendTo('#results');\n    longPoll();\n  });\n}\nlongPoll();\n```", "```js\nconst fs = require('fs');\nconst express = require('express');\nconst cookieParser = require('cookie-parser');\nconst redis = require(\"redis\");\nconst receiver = redis.createClient();\nconst publisher = redis.createClient();\nconst app = express();\n\napp.use(cookieParser());\n\nlet connections = {};\n\napp.get('/poll', (request, response) => {\n   let id = request.cookies.node_poll_id;\n   if(!id) {\n      return;\n   }\n   connections[id] = response;\n});\n\napp.get('/', (request, response) => {\n    fs.readFile('./poll_client.html', (err, data) => {\n       response.cookie('node_poll_id', Math.random().toString(36).substr(2, 9));\n        response.writeHead(200, {'Content-Type': 'text/html'});\n        response.end(data);\n    });\n});\n\napp.listen(2112);\n\nreceiver.subscribe(\"stdin_message\");\nreceiver.on(\"message\", (channel, message) => {\n   let conn;\n   for(conn in connections) {\n      connections[conn].end(message);\n   }\n    console.log(`Received message: ${message} on channel: ${channel}`);\n});\n\nprocess.stdin.on('readable', function() {\n   let msg = this.read();\n   msg && publisher.publish('stdin_message', msg.toString());\n});\n```", "```js\nhttp.createServer(function(req, res) {\n\n   let auth = req.headers['authorization']; \n   if(!auth) {   \n      res.writeHead(401, {'WWW-Authenticate': 'Basic realm=\"Secure Area\"'});\n      return res.end('<html><body>Please enter some credentials.</body></html>');\n   }\n\n   let tmp = auth.split(' ');   \n   let buf = Buffer.from(tmp[1], 'base64'); \n   let plain_auth = buf.toString();   \n   let creds = plain_auth.split(':'); \n   let username = creds[0];\n\n   // Find this user record\n   client.get(username, function(err, data) {\n      if(err || !data) {\n         res.writeHead(401, {'WWW-Authenticate': 'Basic realm=\"Secure Area\"'});\n         return res.end('<html><body>You are not authorized.</body></html>');\n      }\n      res.statusCode = 200;\n      res.end('<html><body>Welcome!</body></html>');\n   });\n}).listen(8080);\n```", "```js\n  res.writeHead(401, {'WWW-Authenticate': 'Basic realm=\"Secure Area\"'});\n  return res.end('<html><body>Please enter some credentials.</body></html>');\n```", "```js\nGET /authenticate/jack \n```", "```js\n<script src=\"img/sha256.js\"></script>\n<script>\n$.get(\"/authenticate/jack\", (publicKey) => {\n    if (publicKey === \"no data\") {\n    return alert(\"Cannot log in.\");\n  }\n  // Expect to receive a challenge: the client should be able to derive a SHA456 hash\n  // String in this format: publicKey + password. Return that string.\n  let response = Sha256.hash(publicKey + \"beanstalk\");\n  $.get(\"/login/\" + response, (verdict) => {\n    if (verdict === \"failed\") {\n      return alert(\"No Dice! Not logged in.\");\n    }\n    alert(\"You're in!\");\n  });\n});\n</script>\n```", "```js\nconst crypto = require('crypto');\nconst fs = require('fs');\nconst express = require('express');\nconst redis = require(\"redis\");\n\nlet app = express();\nlet client = redis.createClient();\n\napp.get('/authenticate/:username', (request, response) => {\n  let publicKey = Math.random();\n  let username = request.params.username; // This is always \"jack\"\n  // ... get jack's data from redis\n  client.hgetall(username, (err, data) => {\n    if (err || !data) {\n      return response.end(\"no data\");\n    }\n    // Creating the challenge hash\n    let challenge = crypto.createHash('sha256').update(publicKey + data.password).digest('hex');\n    // Store challenge for later match\n    client.set(challenge, username);\n    response.end(challenge);\n  });\n});\napp.get('/login/:response', (request, response) => {\n  let challengehash = request.params.response;\n  client.exists(challengehash, (err, exists) => {\n    if (err || !exists) {\n    return response.end(\"failed\");\n    }\n  });\n  client.del(challengehash, () => {\n    response.end(\"OK\");\n  });\n});\n```", "```js\n client.setex(\"doomed\", 10, \"story\", (err) => { ... }); \n```", "```js\nclient.setex(challenge, 5, username); \n```", "```js\n<base64-encoded header>.<base64-encoded claims>.<base64-encoded signature>\n```", "```js\n{ \n  \"typ\":\"JWT\", \n  \"alg\":\"HS256\" \n}\n```", "```js\n{ \n  \"iss\": \"http://blogengine.com\", \n  \"aud\": [\"http://blogsearch.com\", \"http://blogstorage\"], \n  \"sub\": \"blogengine:uniqueuserid\", \n  \"iat\": \"1415918312\", \n  \"exp\": \"1416523112\", \n  \"sessionData\": \"<some data encrypted with secret>\" \n}\n```", "```js\nfunction send(route, formData, cb) {\n  if(!(formData instanceof FormData)) {\n    cb = formData;\n    formData = new FormData();\n  }\n  let caller = new XMLHttpRequest();\n  caller.onload = function() {\n     cb(JSON.parse(this.responseText));\n  };\n  caller.open(\"POST\", route);\n  token && caller.setRequestHeader('Authorization', 'Bearer ' + token);\n  caller.send(formData);\n}\n```", "```js\nformData = new FormData();\nformData.append(\"username\", \"sandro\");\nformData.append(\"password\", 'abcdefg');\n\nsend(\"/login\", formData, function(response) {\n  token = response.token;\n  console.log('Set token: ' + token);\n});\n```", "```js\nconst jwt = require('jwt-simple');\nconst app = express();\napp.set('jwtSecret', 'shhhhhhhhh');\n\n...\n\napp.post('/login', auth, function(req, res) {\n   let nowSeconds     = Math.floor(Date.now()/1000);\n   let plus7Days  = nowSeconds + (60 * 60 * 24 * 7);\n   let token = jwt.encode({\n      \"iss\" : \"http://blogengine.com\", \n      \"aud\" : [\"http://blogsearch.com\", \"http://blogstorage\"],\n      \"sub\" : \"blogengine:uniqueuserid\",\n      \"iat\" : nowSeconds,\n      \"exp\" : plus7Days,\n      \"sessionData\" : encrypt(JSON.stringify({\n         \"department\" : \"sales\"\n      }))\n   }, app.get('jwtSecret'));\n\n   res.send({\n      token : token\n   })\n})\n```", "```js\napp.post('/tokendata', function(req, res) { \n   let </span>token = req.get('Authorization').replace('Bearer ', '');\n   let decoded = jwt.decode(token, app.get('jwtSecret'));\n   decoded.sessionData = JSON.parse(decrypt(decoded.sessionData));\n   let now = Math.floor(Date.now()/1000);\n   if(now > decoded.exp) {\n      return res.end(JSON.stringify({\n         error : \"Token expired\"\n      }));\n   }\n   res.send(decoded)\n});\n```"]