["```js\nvar Http = require( 'http' );\n\nvar server = Http.createServer( );\n```", "```js\nvar Http = require( 'http' );\n\nvar server = Http.createServer( );\nserver.listen( 8080, function( ) {\n    console.log( 'Listening on port 8080' ); \n});\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\n\n```", "```js\nfunction requestHandler( request, response ) {\n}\nvar server = Http.createServer( requestHandler );\n```", "```js\nvar count = 0;\nfunction requestHandler( request, response ) {\n    var message;\n    count += 1;\n    response.writeHead( 201, {\n        'Content-Type': 'text/plain'\n    });\n\n    message = 'Visitor count: ' + count;\n    console.log( message );\n    response.end( message );\n}\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\nVisitor count: 1\nVisitor count: 2\n```", "```js\nmessage = 'Visitor count: ' + count + ', path: ' + request.url;\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\nVisitor count: 1, path: /\nVisitor count: 2, path: /favicon.ico\n\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\nVisitor count: 1, path: /\nVisitor count: 2, path: /favicon.ico\nVisitor count: 3, path: /test\nVisitor count: 4, path: /favicon.ico\nVisitor count: 5, path: /foo\nVisitor count: 6, path: /favicon.ico\nVisitor count: 7, path: /bar\nVisitor count: 8, path: /favicon.ico\nVisitor count: 9, path: /foo/bar/baz/qux/norf\nVisitor count: 10, path: /favicon.ico\n\n```", "```js\nfunction requestHandler( request, response ) {\n    var message,\n        status = 200;\n\n    count += 1;\n\n    switch( request.url ) {\n        case '/count':\n            message = count.toString( );\n            break;\n        case '/hello':\n            message = 'World';\n            break;\n        default: \n            status = 404;\n            message = 'Not Found';\n            break;\n    }\n\n    response.writeHead( 201, {\n        'Content-Type': 'text/plain'\n    });\n    console.log( request.url, status, message );\n    response.end( message ); \n}\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\n/foo 404 Not Found\n/bar 404 Not Found\n/world 404 Not Found\n/count 200 4\n/hello 200 World\n/count 200 6\n\n```", "```js\nconsole.log( request.method, request.url, status, message );\n```", "```js\n[~/examples/example-4]$ node server.js\nListening on port 8080\nGET /count 200 1\nPOST /count 200 2\nPUT /count 200 3\nDELETE /count 200 4\n\n```", "```js\n[~/examples/example-5]$ npm install router\n\n```", "```js\n/* server.js */\nvar Http = require( 'http' ),\n    Router = require( 'router' ), \n    server,\n    router; \n\nrouter = new Router( );\n\nserver = Http.createServer( function( request, response ) {\n    router( request, response, function( error ) {\n        if( !error ) {\n            response.writeHead( 404 );\n        } else {\n            //Handle errors\n            console.log( error.message, error.stack );\n            response.writeHead( 400 );\n        }       \n        response.end( '\\n' );\n    });\n});\n\nserver.listen( 8080, function( ) {\n    console.log( 'Listening on port 8080' );\n});\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\n\n```", "```js\nrouter.<HTTP method>( <path>, [ ... <handler> ] )\n```", "```js\nvar counter = 0,\n    messages = { };\n```", "```js\nfunction createMessage( request, response ) {\n    var id = counter += 1;\n    console.log( 'Create message', id );\n    response.writeHead( 201, {\n        'Content-Type': 'text/plain'\n    });\n    response.end( 'Message ' + id );\n}\nrouter.post( '/message', createMessage );\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nCreate message 1\nCreate message 2\nCreate message 3\n\n```", "```js\nrouter.post( '/message', parseBody, createMessage ) \n```", "```js\nrouter.use( function( request, response, next ) {\n    console.log( 'middleware executed' );\n    // Null as there were no errors\n    // If there was an error then we could call `next( error );`\n    next( null );\n});\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nmiddleware executed\nCreate message 1\n\n```", "```js\n[~/examples/example-5]$ npm install body-parser\n\n```", "```js\nvar BodyParser = require( 'body-parser' );\nrouter.use( BodyParser.text( ) );\n```", "```js\nfunction createMessage( request, response ) {\n    var id = counter += 1,\n        message = request.body;\n\n    console.log( 'Create message', id, message );\n    messages[ id ] = message;\n    response.writeHead( 201, {\n        'Content-Type': 'text/plain',\n        'Location': '/message/' + id \n    });\n    response.end( message );\n}\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nCreate message 1 Hello foo\nCreate message 2 Hello bar\n\n```", "```js\nfunction readMessage( request, response ) {\n    var id = request.params.id,\n        message = messages[ id ];\n    console.log( 'Read message', id, message );\n\n    response.writeHead( 200, {\n        'Content-Type': 'text/plain'\n    });\n    response.end( message );\n}\nrouter.get( '/message/:id', readMessage );\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nCreate message 1 Hello foo\nRead message 1 Hello foo\nCreate message 2 Hello bar\nRead message 2 Hello bar\nRead message 1 Hello foo\n\n```", "```js\nfunction deleteMessage( request, response ) {\n    var id = request.params.id;\n\n    console.log( 'Delete message', id );\n\n    messages[ id ] = undefined;\n\n    response.writeHead( 204, { } );\n\n    response.end( '' );\n}\n\nrouter.delete( '/message/:id', deleteMessage )\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nDelete message 1\nCreate message 1 Hello\nRead message 1 Hello\nDelete message 1\nRead message 1 undefined\n\n```", "```js\n    var id = request.params.id,\n        message = messages[ id ];\n\n    if( typeof message !== 'string' ) {\n        console.log( 'Message not found', id );\n\n        response.writeHead( 404 );\n        response.end( '\\n' );\n        return;\n    } \n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nMessage not found 1\nCreate message 1 Hello\nRead message 1 Hello\n\n```", "```js\nfunction readMessages( request, response ) {\n    var id,\n        message,\n        messageList = [ ],\n        messageString;\n\n    for( id in messages ) {\n        if( !messages.hasOwnProperty( id ) ) {\n            continue;\n        }\n        message = messages[ id ];\n        // Handle deleted messages\n        if( typeof message !== 'string' ) {\n            continue;\n        }\n        messageList.push( message );\n    }\n\n    console.log( 'Read messages', JSON.stringify( \n        messageList, \n        null, \n        '  ' \n    ));\n\n    messageString = messageList.join( '\\n' );\n\n    response.writeHead( 200, {\n        'Content-Type': 'text/plain'\n    });\n\n    response.end( messageString );\n}\nrouter.get( '/message', readMessages );\n```", "```js\n[~/examples/example-5]$ node server.js\nListening on port 8080\nCreate message 1 Hello 1\nCreate message 2 Hello 2\nCreate message 3 Hello 3\nCreate message 4 Hello 4\nCreate message 5 Hello 5\nRead messages [\n \"Hello 1\",\n \"Hello 2\",\n \"Hello 3\",\n \"Hello 4\",\n \"Hello 5\"\n]\n\n```"]