["```js\n[~/examples/example-18]$ npm install level\n\n```", "```js\nvar LevelUP = require( 'level' ),\n    db = new LevelUP( './example-db');\n```", "```js\ndb.put( 'key', 'value', function( error ) {\n    if ( error ) return console.log( 'Error!', error )\n\n    db.get( 'key', function( error, value ) {\n        if ( error ) return console.log( 'Error!', error )\n\n        console.log( \"key =\", value )\n    });\n});\n```", "```js\n[~/examples/example-18]$ node index.js\nkey = value\n\n```", "```js\nvar LevelUP = require( 'level' ),\n    db = new LevelUP( './example-db', {\n        valueEncoding: 'json'\n    });\n```", "```js\ndb.put( 'jsonKey', { inner: 'value' }, function ( error ) {\n    if ( error ) return console.log( 'Error!', error )\n\n    db.get( 'jsonKey', function( error, value ) {\n        if ( error ) return console.log( 'Error!', error )\n\n        console.log( \"jsonKey =\", value )\n    });\n});\n```", "```js\n[~/examples/example-18]$ node index.js\nkey = value\njsonKey = { inner: 'value' }\n\n```", "```js\ndb.put( 'key1', { inner: 'value' }, function( error ) {\n    if ( error ) return console.log( 'Error!', error )\n\n    var stream = db.createReadStream( );\n\n    stream\n    .on( 'data', function( pair ) {\n        console.log( pair.key, \"=\", pair.value );\n    })\n    .on( 'error', function( error ) {\n        console.log( error );\n    })\n    .on( 'end', function( ) {\n        console.log( 'end' );\n    });\n});\n```", "```js\n[~/examples/example-20]$ node index.js\nkey1 = { inner: 'value' }\nend\n\n```", "```js\n[~/examples/example-20]$ node index.js\nkey1 = { inner: 'value' }\nkey2 = { inner: 'value' }\nend\n\n```", "```js\n[~/examples/example-21]$ npm install mongodb\n\n```", "```js\nmongodb://localhost:27017/database\n```", "```js\nmongodb://<dbuser>:<dbpassword>@<ds>.mongolab.com:<port>/<db>\n\n```", "```js\nvar MongoDB = require('mongodb'),\n    MongoClient = MongoDB.MongoClient;\n\nconnection = \"mongodb://localhost:27017/database\"\n\nMongoClient.connect( connection, function( error, db ) {\n    if( error ) return console.log( error );\n\n    console.log( 'We have a connection!' );\n});\n```", "```js\nvar collection = db.collection( 'collection_name' );\n```", "```js\nvar doc = {\n    key: 'value_1'  \n};\ncollection.save( doc, { w: 1 }, function( ) {\n    console.log( 'Document saved' )\n});\n```", "```js\nvar ObjectId = MongoDB.ObjectId\n// This document already exists in my database\nvar doc_id = {\n    _id: new ObjectId( \"55b4b1ffa31f48c6fa33a62a\" ),\n    key: 'value_2'\n};\ncollection.save( doc_id, { w: 1 }, function( ) {\n    console.log( 'Document with ID saved' );\n});\n```", "```js\ncollection.find( ).toArray( function( error, result ) {\n    console.log( result.length + \" documents in our database!\" )\n});\n```", "```js\ncollection.find(\n    { _id: new ObjectId( \"55b4b1ffa31f48c6fa33a62a\" ) },\n    function( error, documents ) {\n        console.log( 'Found document', documents[ 0 ] );\n    }\n);\n```", "```js\ncollection.find(\n    { key: 'value' },\n    function( error, documents ) {\n        console.log( 'Found', documents.length, 'documents' );  \n    }\n);\n```", "```js\ncollection.find(\n    {\n        $or: [\n            { key: 'value' },\n            { key: 'value_2' }\n        ]\n    },\n    function( error, documents ) {\n        console.log( 'Found', documents.length, 'documents' );  \n    }\n);\n```"]