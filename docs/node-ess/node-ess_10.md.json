["```js\n[~] npm install -g coffee-script\n\n```", "```js\n[~] coffee\n>\n\n```", "```js\n[~] coffee\n> 1 + 1\n2\n> console.log( 'Hello' )\nHello\n\n```", "```js\n/* index.coffee */\nconsole.log( 'Hello CoffeeScript!' )\n```", "```js\n[~/examples/example-25] coffee index.coffee\nHello CoffeScript!\n\n```", "```js\n[~/examples/example-25] coffee -c index.coffee\n[~/examples/example-25] node index.js\nHello CoffeeScript!\n\n```", "```js\n/* index.js */\nrequire( 'coffee-script/register' );\nrequire( './other.coffee' );\n```", "```js\nif ( true ) \n{\n  console.log( 'It was true!' ) \n}\n```", "```js\nif true \n  console.log( 'It was true!' )\n```", "```js\nfunc = ->\n  console.log( 'I executed' )\n```", "```js\nvar func;\nfunc = function()\n{\n  return console.log('I executed');\n};\n```", "```js\nadd = ( a, b ) -> a + b \n```", "```js\nkeys = { }\nfunc = ( key, date = new Date ) ->\n  keys[ key ] = date\n```", "```js\nvar func, keys;\nkeys = {};\nfunc = function(key, date) \n{\n  if (date == null)\n  {\n    date = new Date();\n  }\n  return keys[key] = date;\n};\n```", "```js\ndate = null \nif not date?\n  date = new Date( )\nconsole.log( date )\n```", "```js\ndate ?= new Date( )\nconsole.log( date ) \n```", "```js\nvar date;\ndate = null;\nif (date == null) \n{\n  date = new Date();\n}\n```", "```js\ngetTime = ( date = null ) -> date?.getTime( ) ? -1 \n```", "```js\narray = [\n  1,\n  2,\n  3\n]\n```", "```js\narray = [\n  1\n  2\n  3\n]\n```", "```js\narray = [\n  'a', 'b', 'c'\n  1, 2, 3\n  true, false\n]\n```", "```js\nobject = {\n  foo: 1\n  bar: 2\n}\n```", "```js\nobject = \n  foo: 1\n  bar: 2\n  foobar: \n    another: 3\n    key: 4\n```", "```js\nfor value, index in array\n  console.log( value, index ) \n  continue if typeof value is 'string'\n  console.log( 'Value was not a string' )\n```", "```js\nfor value in array\n  console.log( value )\n```", "```js\nfor key, value of object \n  console.log( key, value ) \n```", "```js\nfor key of object \n  console.log( key )\n```", "```js\nfor key, value of object \n    # Note that this will let dates and arrays through ( etc )\n    continue unless value instanceof Object \n    for nestedKey, nestedValue of value\n      console.log(nestedKey, nestedValue )\n```", "```js\nfunction User( username ) {\n  this.username = username;\n}\n```", "```js\nUser.prototype.getUsername = function( ) {\n  return this.username;\n}\n```", "```js\nUser.createUser = function( username ) {\n  return new User( username );\n}\n```", "```js\nclass User\n  @createUser: ( username ) ->\n    return new User( username )\n\n  constructor: ( username ) ->\n    this.username = username\n  getUsername: ->\n    return this.username\n```", "```js\ngetUsername: ->\n  return @username\n```", "```js\ngetUsername: -> @username \n```", "```js\nsetUsername: ( username ) ->\n  @username = username\n```", "```js\nsetUsername: ( @username ) ->\n```", "```js\nconstructor: ( @username ) ->\n```", "```js\nclass Person extends User\n```", "```js\n  constructor: ( username, @name, @age ) ->\n    super( username )\n```", "```js\n  getName: -> @name\n  getAge: -> @age\n```", "```js\nclass Robot extends User\n  constructor: ( username, @usage ) \u2013>\n    super( username )\n  getUsage: -> @usage \n```"]