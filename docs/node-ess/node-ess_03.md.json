["```js\n[~/examples/example-19]$ npm install express body-parser passport passport-local\n\n```", "```js\nvar users = {\n    foo: {\n        username: 'foo',\n        password: 'bar',\n        id: 1\n    },\n    bar: {\n        username: 'bar',\n        password: 'foo',\n        id: 2\n    }\n}\n```", "```js\nvar Passport = require( 'passport' ),\n    LocalStrategy = require( 'passport-local' ).Strategy;\n\nvar localStrategy = new LocalStrategy({\n    usernameField: 'username',\n    passwordField: 'password'\n  },\n  function(username, password, done) {\n    user = users[ username ];\n\n    if ( user == null ) {\n        return done( null, false, { message: 'Invalid user' } );\n    }\n\n    if ( user.password !== password ) {\n        return done( null, false, { message: 'Invalid password' } );    \n    }\n\n    done( null, user );\n  }\n)\n```", "```js\nPassport.use( 'local', localStrategy );\n```", "```js\nvar Express = require( 'express' );\n\nvar app = Express( );\n```", "```js\nvar BodyParser = require( 'body-parser' );\napp.use( BodyParser.urlencoded( { extended: false } ) );\napp.use( BodyParser.json( ) );\napp.use( Passport.initialize( ) );\n```", "```js\napp.post(\n    '/login',\n    Passport.authenticate( 'local', { session: false } ),\n    function ( request, response ) {\n\n    }\n);\n```", "```js\napp.post(\n    '/login',\n    Passport.authenticate( 'local', { session: false } ),\n    function ( request, response ) {\n        response.send( 'User Id ' + request.user.id );\n    }\n);\n```", "```js\napp.listen( 8080, function( ) {\n    console.log( 'Listening on port 8080' );\n});\n```", "```js\n[~/examples/example-19]$ node server.js\nListening on port 8080\n\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login -v\n< HTTP/1.1 400 Bad Request\n\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"foo\",\"password\":\"foo\"}' \\\n -v\n< HTTP/1.1 401 Unauthorized\n\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"foo\",\"password\":\"bar\"}'\nUser Id 1\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"bar\",\"password\":\"foo\"}'\nUser Id 2\n\n```", "```js\n[~/examples/example-19]$ npm install jsonwebtoken\n\n```", "```js\nvar JSONWebToken = require( 'jsonwebtoken' ),\n    Crypto = require( 'crypto' );\n\nvar generateToken = function ( request, response ) {\n\n    // The payload just contains the id of the user\n    // and their username, we can verify whether the claim\n    // is correct using JSONWebToken.verify     \n    var payload = {\n        id: user.id,\n        username: user.username\n    };\n    // Generate a random string\n    // Usually this would be an app wide constant\n    // But can be done both ways\n    var secret = Crypto.randomBytes( 128 )\n                       .toString( 'base64' );\n    // Create the token with a payload and secret\n    var token = JSONWebToken.sign( payload, secret );\n\n    // The user is still referencing the same object\n    // in users, so no need to set it again\n    // If we were using a database, we would save\n    // it here\n    request.user.secret = secret\n\n    return token;\n}\n\nvar generateTokenHandler = function ( request, response  ) {\n    var user = request.user;    \n    // Generate our token\n    var token = generateToken( user );\n    // Return the user a token to use\n    response.send( token );\n};\n\napp.post(\n    '/login',\n    Passport.authenticate( 'local', { session: false } ),\n    generateTokenHandler\n);\n```", "```js\n[~/examples/example-19]$ node server.js\nListening on port 8080\n\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"foo\",\"password\":\"bar\"}'\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZC\nI6MSwidXNlcm5hbWUiOiJmb28iLCJpYXQiOjE0MzcyO\nTQ3OTV9.iOZO7oCIceZl6YvZqVP9WZLRx-XVvJFMF1p\npPCEsGGs\n\n```", "```js\n{\n  \"id\": 1,\n  \"username\": \"foo\",\n  \"iat\": 1437294795\n}\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"foo\",\"password\":\"bar\"}'\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZC\nI6MSwidXNlcm5hbWUiOiJmb28iLCJpYXQiOjE0MzcyO\nTQ5OTl9.n1eRQVOM9qORTIMUpslH-ycTNEYdLDKa9lU\npmhf44s0\n\n```", "```js\n[~/examples/example-19]$ npm install passport-http-bearer\n\n```", "```js\nvar BearerStrategy = require( 'passport-http-bearer' ).Strategy;\n\nvar verifyToken = function( token, done ) {\n    var payload = JSONWebToken.decode( token );\n    var user = users[ payload.username ];\n    // If we can't find a user, or the information\n    // doesn't match then return false\n    if ( user == null ||\n         user.id !== payload.id ||\n         user.username !== payload.username ) {\n        return done( null, false );\n    }\n    // Ensure the token is valid now we have a user\n    JSONWebToken.verify( token, user.secret, function ( error, decoded ) {\n        if ( error || decoded == null ) {\n            return done( error, false );\n        }\n        return done( null, user );\n    });\n}   \nvar bearerStrategy = new BearerStrategy(\n    verifyToken\n)\n```", "```js\nPassport.use( 'bearer', bearerStrategy );\n```", "```js\napp.get(\n    '/userinfo',\n    Passport.authenticate( 'bearer', { session: false } ),\n    function ( request, response ) {\n        var user = request.user;\n        response.send( {\n            id: user.id,\n            username: user.username\n        });\n    }\n);\n```", "```js\n[~/examples/example-19]$ node server.js\nListening on port 8080\n\n```", "```js\n[~]$ curl -X POST http://localhost:8080/login \\\n -H 'Content-Type: application/json' \\\n -d '{\"username\":\"foo\",\"password\":\"bar\"}'\n\n```", "```js\n[~]$ curl -X GET http://localhost:8080/userinfo \\\n -H 'Authorization: Bearer <token>'\n{\"id\":1,\"username\":\"foo\"}\n\n```", "```js\n[~/examples/example-19]$ npm install --save passport-oauth2\n\n```", "```js\nvar validateOAuth = function ( accessToken, refreshToken, profile, done ) {\n\n    var keys = Object.keys( users ), user = null;\n\n    for( var iKey = 0; iKey < keys.length; i += 1 ) {\n        user = users[ key ];\n        if ( user.thirdPartyId !== profile.user_id ) { continue; }\n        return done( null, user );\n    }\n\n    users[ profile.name ] = user = {\n        username: profile.name,\n        id: keys.length,\n        thirdPartyId: profile.user_id\n    }\n    done( null, user );\n\n};\n```", "```js\nvar oAuthOptions = {\n    authorizationURL: 'https://<domain>.auth0.com/authorize',\n    tokenURL: 'https://<domain>.auth0.com/oauth/token',\n    clientID: '<client id>',\n    clientSecret: '<client secret>',\n    callbackURL: \"http://localhost:8080/oauth/callback\"\n}\n```", "```js\nvar OAuth2Strategy = require( 'passport-oauth2' ).Strategy;\noAuthStrategy = new OAuth2Strategy( oAuthOptions, validateOAuth );\n```", "```js\nvar parseUserProfile = function ( done, error, body ) {\n    if ( error ) {\n        return done( new Error( 'Failed to fetch user profile' ) )\n    }\n\n    var json;\n    try {\n        json = JSON.parse( body );\n    } catch ( error ) {\n        return done( error );\n    }\n    done( null, json );\n}\n\nvar getUserProfile = function( accessToken, done ) {\n    oAuthStrategy._oauth2.get(\n        \"https://<domain>.auth0.com/userinfo\",\n        accessToken,\n        parseUserProfile.bind( null, done )\n    )\n}\noAuthStrategy.userProfile = getUserProfile\n```", "```js\nPassport.use( 'oauth', oAuthStrategy );\n```", "```js\napp.get( '/oauth', Passport.authenticate( 'oauth', { session: false } ) );\n```", "```js\napp.get( '/oauth/callback',\n  Passport.authenticate( 'oauth', { session: false } ),\n  generateTokenHandler\n);\n```"]