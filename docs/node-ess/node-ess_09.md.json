["```js\n[~/examples/example-24]$ npm install -g mocha\n\n```", "```js\n[~/examples/example-24]$ node\n> assert = require( 'assert' )\n> expected = 1\n> actual = 1\n> assert.equal( actual, expected )\n> actual = 1\n> assert.equal( actual, expected )\nAssertionError: 2 == 1\n\n```", "```js\n> assert.equal( actual, expected, 'Expected 1' )\nAssertionError: Expected 1\n\n```", "```js\nvar GetFullName = require( '../lib/get-full-name' ),\n    assert = require( 'assert' );\n\ndescribe( 'Fetch full name', function( ) {\n\n    it( 'should return both a first and last name', function( ) {\n        var result = GetFullName( { first: 'Node', last: 'JS' } )\n        assert.equal( result, 'Node JS' );\n    })\n})\n```", "```js\nit( 'should throw an error when an object was not passed', function( ) {\n    assert.throws(\n        function( ) {\n            GetFullName( null );\n        },\n        /Object expected/\n    )\n})\n```", "```js\nvar Expect = require( 'chai' ).expect\nvar Assert = require( 'assert' )\n\nvar value = 1\n\nExpect( value ).to.exist\nassert( !!value )\n```", "```js\nExpect( value ).to.be.ok.and.to.equal( 1 )\n```", "```js\nExpect( true ).to.be.ok\nExpect( false ).to.not.be.ok\nExpect( 1 ).to.exists\nExpect( [ ] ).to.be.empty\nExpect( 'hi' ).to.equal( 'hi' )\nExpect( 4 ).to.be.below( 5 )\nExpect( 5 ).to.be.above( 4 )\nExpect( function() {} ).to.be.instanceOf( Function )\n```", "```js\nvar Sinon = require( 'sinon' );\n\nvar returnOriginal = function( value ) {\n    return value;\n}\n\nvar spy = Sinon.spy( returnOriginal );\n\nresult = spy( 1 );\nconsole.log( result ); // Logs 1\n```", "```js\nassert( spy.called )\n```", "```js\nassert.equal( spy.args[ 0 ][ 0 ], 1 )\n```", "```js\nvar object = {\n    spyOnMe: function( value ) {\n        return value;\n    }\n}\nSinon.spy( object, 'spyOnMe' )\n\nvar result = object.spyOnMe( 1 )\nassert( result.called )\nassert.equal( result.args[ 0 ][ 0 ], 1 )\n\nobject.spyOnMe.restore( )\n```", "```js\nvar stub = Sinon.stub( ).returns( 42 )\nconsole.log( stub( ) ) // logs 42\n```", "```js\nvar stub = Sinon.stub( )\nstub.withArgs( 1, 2, 3 ).returns( 42 )\nstub.withArgs( 3, 4, 5 ).returns( 43 )\n\nconsole.log( stub( 1, 2, 3 ) ) // logs 42\nconsole.log( stub( 3, 4, 5 ) ) // logs 43\n```", "```js\nfunction Users( ) {\n\n}\nUsers.prototype.getUser = function( id ) {\n    return Database.findUser( id );\n}\nUsers.prototype.getNameForUser = function( id ) {\n    var user = this.getUser( id );\n    return user.name;\n}\nmodule.exports = Users\n```", "```js\nvar Sinon = require( 'sinon' );\nvar Users = require( '../lib/users' );\nvar Assert = require( 'assert' );\n\nit( 'should return a users name', function( ) {\n\n    var name = 'NodeJS';\n    var user = { name: name };\n\n    var stub = Sinon.stub( ).returns( user );\n\n    var users = new Users( );\n    users.getUser = stub;\n\n    var result = users.getNameForUser( 1 );\n\n    assert.equal( result, name, 'Name not returned' );\n});\n```", "```js\nvar result = users.getNameForUser.call(\n    {\n        getUser: stub\n    },\n    1\n);\n```"]