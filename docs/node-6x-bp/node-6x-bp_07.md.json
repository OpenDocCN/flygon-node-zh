["```js\n          {\n            \"name\": \"chapter-07\", \n            \"description\": \"Build a real time chat application with\n              Node.js and Socket.io\", \n            \"version\": \"0.0.1\", \n            \"private\": true, \n            \"scripts\": { \n              \"start\": \"node app.js\" \n            }, \n            \"dependencies\": { \n              \"body-parser\": \"^1.13.3\", \n              \"cookie-parser\": \"^1.3.3\", \n              \"ejs\": \"^2.3.1\", \n              \"express\": \"^4.13.3\", \n              \"morgan\": \"^1.6.1\", \n              \"serve-favicon\": \"^2.3.0\", \n              \"socket.io\": \"^1.4.6\" \n            }, \n            \"devDependencies\": { \n              \"gulp\": \"^3.9.0\", \n              \"gulp-nodemon\": \"^2.0.2\", \n              \"gulp-livereload\": \"^3.8.0\", \n              \"gulp-plumber\": \"^1.0.0\" \n            } \n          }\n\n    ```", "```js\n    npm install\n\n    ```", "```js\nchapter-01\n   node_modules\n   public\n   routes\n   views\n   package.json\n\n```", "```js\n          { \n            \"directory\": \"public/components\", \n            \"json\": \"bower.json\" \n          } \n\n    ```", "```js\n          # http://editorconfig.org \n          root = true \n          [*] \n          indent_style = tab \n          indent_size = 4 \n          end_of_line = lf \n          charset = utf-8 \n          trim_trailing_whitespace = true \n          insert_final_newline = true\n\n    ```", "```js\n          node_modules/ \n          public/components \n          .sass-cache \n          npm-debug.log \n\n    ```", "```js\n          { \n            \"name\": \"chapter-07\", \n            \"version\": \"0.0.1\", \n            \"ignore\": [ \n              \"**/.*\", \n              \"node_modules\", \n              \"components\" \n            ] \n          } \n\n    ```", "```js\n          var gulp = require('gulp'), \n            // Nodemon is Node.js module to reload the application when\n              any file change. \n           nodemon = require('gulp-nodemon'), \n           plumber = require('gulp-plumber'), \n           // Live reload is browser plugin to synchronize the\n             application after the server side changes \n             livereload = require('gulp-livereload'); \n               gulp.task('develop', function () { \n                 livereload.listen(); \n                 nodemon({ \n                   script: 'app.js', \n                   ext: 'js ejs', \n                   stdout: false \n                 }).on('readable', function () { \n                 this.stdout.on('data', function (chunk) { \n                   if (/^Express server listening on port/.test(chunk))\n                   { \n                     livereload.changed(__dirname); \n                   } \n                 }); \n                 this.stdout.pipe(process.stdout); \n                 this.stderr.pipe(process.stderr); \n               }); \n             }); \n             // We can name it all gulp tasks, we have an alias as develop\n              to call default task, on high scale applications we can have\n              many tasks with or without alias. \n             gulp.task('default', [ \n               'develop' \n             ]);\n\n    ```", "```js\n          # Node.js chat application with Socket.io \n\n    ```", "```js\n      // Node dependencies \n      var express = require('express'); \n      var path = require('path'); \n      var favicon = require('serve-favicon'); \n      var logger = require('morgan'); \n      var cookieParser = require('cookie-parser'); \n      var bodyParser = require('body-parser'); \n      // Setup application routes \n      var routes = require('./routes/index'); \n      // Create a Express application \n      var app = express(); \n      // Defining the env variable process for development \n      var env = process.env.NODE_ENV || 'development'; \n        app.locals.ENV = env; \n        app.locals.ENV_DEVELOPMENT = env == 'development'; \n      // Setup view engine to use EJS (Embedded JavaScript) \n        app.set('views', path.join(__dirname, 'views')); \n        app.set('view engine', 'ejs'); \n      // uncommented this line to use a favicon in your application \n      // app.use(favicon(__dirname + '/public/img/favicon.ico')); \n        app.use(logger('dev')); \n        app.use(bodyParser.json()); \n        app.use(bodyParser.urlencoded({ \n          extended: true \n        })); \n        app.use(cookieParser()); \n        app.use(express.static(path.join(__dirname, 'public'))); \n      // Setup all routes to listen on routes file (this came from\n         routes variable) \n        app.use('/', routes); \n      // Setup a  404 error handler \n        app.use(function(req, res, next) { \n          var err = new Error('Not Found'); \n          err.status = 404; \n          next(err); \n        }); \n      // Print the error stacktrace \n        if (app.get('env') === 'development') { \n          app.use(function(err, req, res, next) { \n            res.status(err.status || 500); \n            res.render('error', { \n              message: err.message, \n              error: err, \n              title: 'error' \n            }); \n          }); \n        } \n      // No stacktraces on production \n        app.use(function(err, req, res, next) { \n          res.status(err.status || 500); \n          res.render('error', { \n            message: err.message, \n            error: {}, \n            title: 'error' \n          }); \n        }); \n        module.exports = app; \n        // Exports all the application configuration \n          app.set('port', process.env.PORT || 3000); \n       // Setup the server port and give a user message \n       var server = app.listen(app.get('port'), function() { \n         console.log('Express server listening on port ' +\n           server.address().port); \n       }); \n\n```", "```js\n    // Import Express and Router \n      var express = require('express'); \n      var router = express.Router(); \n    // Get \n      router.get('/', function(req, res) { \n        res.render('index', { \n          title: 'Socket.io chat application', \n          lead: 'Insert your user name and start talk' \n        }); \n      }); \n      module.exports = router;\n\n```", "```js\n          <% include header %> \n             <div class=\"container\"> \n               <h1><%- error.status %></h1> \n               <h4><%- message %></h4> \n              <p><%- error.stack %></p> \n            </div> \n          <% include footer %> \n\n    ```", "```js\n          <script src=\"img/socket.io-1.4.5.js\"></script> \n          <script src=\"img/main.js\"></script> \n          </body> \n          </html> \n\n    ```", "```js\n          <!doctype html> \n          <html lang=\"en\"> \n          <head> \n            <meta charset=\"UTF-8\"> \n            <title><%- title %></title> \n            <meta name=\"viewport\" content=\"width=device-width,\n              initial-scale=1\"> \n             <link rel=\"stylesheet\" href=\"/css/style.css\"> \n           </head> \n           <body> \n             <div class=\"site-wrapper\"> \n               <div class=\"site-wrapper-inner\"> \n                 <div class=\"cover-container\"> \n                   <div class=\"masthead clearfix\"> \n                     <div class=\"inner\"> \n                       <h3 class=\"masthead-brand\">\n                         Node.js 6 Blueprints Book</h3>\n                       <nav class=\"nav nav-masthead\"> \n                         <a  class=\"active\"  href=\"/\">Home</a> \n                       </nav> \n                     </div> \n                   </div>\n\n    ```", "```js\n          <% include header %> \n            <div class=\"inner cover\" id=\"app\"> \n              <h1 class=\"cover-heading\"><%- title %>></h1> \n              <p class=\"lead\"><%- lead %></p> \n              <div class=\"chat-wrapper\"> \n                <div id=\"user-form\" class=\"row\"> \n                  <div class=\"col-md-12\"> \n                    <form> \n                      <div class=\"input-group input-group-lg\"> \n                        <input id=\"username\" class=\"form-control\"\n                          type=\"text\" placeholder=\"Your name or\n                          nickname...\"> \n                        <span class=\"input-group-btn\"> \n                          <input type=\"submit\" class=\"btn btn-success\n                          btn-lg\" value=\"Enter\"> \n                        </span> \n                      </div> \n                    </form> \n                  </div> \n                </div> \n                <div id=\"message-area\" class=\"row\" style=\"display:none\"> \n                  <div class=\"col-xs-9\"> \n                    <div class=\"card card-inverse\"> \n                      <div class=\"card-header card-success\"> \n                          Messages \n                      </div> \n                      <div class=\"card-block\" id=\"chat-block\"> \n                        <ul id=\"chat\" class=\"list-unstyled\"> \n                        </ul> \n                      </div> \n                      <div class=\"card-footer\"> \n                        <form id=\"message-form\" autocomplete=\"off\"> \n                          <div class=\"input-group input-group-sm\"> \n                            <input id=\"message\" class=\"form-control\n                             input-sm\" type=\"text\" placeholder=\"Type here...|\">\n                            <span class=\"input-group-btn\"> \n                            <input type=\"submit\" class=\"btn btn-success\n                             btn-sm\" value=\"Send message\"> \n                          </span> \n                          </div> \n                        </form> \n                      </div> \n                    </div> \n                  </div> \n                  <div class=\"col-xs-3\"> \n                    <div class=\"card card-inverse\"> \n                      <div class=\"card-header card-success\"\n                        id=\"online-users-header\"> \n                        <span class=\"card-title\">Users in the rooom:</span> \n                      </div> \n                      <div class=\"card-block\" id=\"online-users-block\"> \n                        <ul id=\"users\"></ul> \n                      </div> \n                    </div> \n                  </div> \n                </div> \n              </div>\n            </div> \n            <div class=\"mastfoot\"> \n              <div class=\"inner\"> \n                <p>&copy; 2016 <a href=\"$\">Node.js 6 Blueprints Book</a>,\n                 by <a href=\"https://twitter.com/newaeonweb\">@newaeonweb\n                 </a>\n                </p> \n              </div> \n            </div> \n          </div>\n          </div> \n          </div> \n          <% include footer %> \n\n    ```", "```js\n    npm install bower -g\n\n    ```", "```js\n    bower install bootstrap#v4.0.0-alpha\n\n    ```", "```js\n          <link rel=\"stylesheet\" href=\"components/bootstrap/dist/css\n            /bootstrap.min.css\">\n\n    ```", "```js\n          <script src=\"img/jquery.min.js\"></script> \n          <script src=\"img/bootstrap.min.js\">\n          </script> \n\n    ```", "```js\n          a, \n          a:focus, \n          a:hover { \n            color: #fff; \n          } \n          html, \n          body { \n            height: 100%; \n            background-color: #068555; \n          } \n          body { \n            color: #fff; \n          } \n          /* Extra markup and styles for table-esque vertical and\n           horizontal centering */ \n          .site-wrapper { \n            display: table; \n            width: 100%; \n            height: 100%; /* For at least Firefox */ \n            min-height: 100%; \n            -webkit-box-shadow: inset 0 0 5rem rgba(0,0,0,.5); \n              box-shadow: inset 0 0 5rem rgba(0,0,0,.5);\n          } \n          .site-wrapper-inner { \n            display: table-cell; \n            vertical-align: top; \n          } \n          .cover-container { \n            margin-right: auto; \n            margin-left: auto; \n          } \n          .inner { \n            padding: 2rem; \n          } \n          .card { \n            color: #414141; \n          } \n          .card-block { \n            background-color: #fff; \n          } \n          .masthead { \n            margin-bottom: 2rem; \n          } \n          .masthead-brand { \n            margin-bottom: 0; \n          } \n          .nav-masthead a { \n            padding: .25rem 0; \n            font-weight: bold; \n            color: rgba(255,255,255,.5); \n            background-color: transparent; \n            border-bottom: .25rem solid transparent; \n          } \n          .nav-masthead a:hover, \n          .nav-masthead a:focus { \n            text-decoration: none; \n            border-bottom-color: rgba(255,255,255,.25); \n          } \n          .nav-masthead a + a { \n            margin-left: 1rem; \n          } \n          .nav-masthead .active { \n            color: #fff; \n            border-bottom-color: #fff; \n          } \n          #users { \n            display: block; \n          } \n          @media (min-width: 48em) { \n            .masthead-brand { \n              float: left; \n            } \n            .nav-masthead { \n              float: right; \n            } \n          } \n          .cover { \n            padding: 0 1.5rem; \n          } \n          .cover-heading, .lead { \n            text-align: center; \n          } \n          .cover .btn-lg { \n            padding: .75rem 1.25rem; \n            font-weight: bold; \n          } \n          .mastfoot { \n            color: rgba(255,255,255,.5); \n          } \n          @media (min-width: 40em) { \n            /* Pull out the header and footer */ \n            .masthead { \n              position: fixed; \n              top: 0; \n            } \n            .mastfoot { \n              position: fixed; \n              bottom: 0; \n            } \n            /* Start the vertical centering */ \n            .site-wrapper-inner { \n              vertical-align: middle; \n            } \n            /* Handle the widths */ \n            .masthead, \n            .mastfoot, \n            .cover-container { \n              width: 100%;\n            /* Must be percentage or pixels for horizontal alignment */ \n            } \n          } \n          @media (min-width: 62em) { \n            .masthead, \n            .mastfoot, \n            .cover-container { \n              width: 62rem; \n            } \n          }\n\n    ```", "```js\n    gulp \n\n    ```", "```js\n          gulp.task('develop', function () { \n            livereload.listen(); \n            nodemon({ \n              script: 'app.js', \n              // map every file with .js, .ejs, extension and relaunch\n                the application \n              ext: 'js ejs', \n              stdout: false \n            })\n            .on('readable', function () { \n              this.stdout.on('data', function (chunk) { \n                if (/^Express server listening on port/.test(chunk)) { \n                  livereload.changed(__dirname); \n                } \n              }); \n              this.stdout.pipe(process.stdout); \n              this.stderr.pipe(process.stderr); \n            }); \n          });\n\n    ```", "```js\n          <% if (ENV_DEVELOPMENT) { %> \n            <script src=\"img/livereload.js\"></script> \n          <% } %>\n\n    ```", "```js\n          livereload.listen(); \n          nodemon({ \n            script: 'app.js', \n            ext: 'js ejs', \n            stdout: false \n          })\n\n    ```", "```js\n    // Starting with socket.io \n    var io = require('socket.io').listen(server); \n    // Create an Array to hold users \n    var userList = []; \n    // Create an Array to hold connections \n    var connections = []; \n    // Start connection listener \n    io.sockets.on('connection', function (socket) { \n      connections.push(socket); \n      console.log(\"Connected:\", connections.length ); \n      // Setup Disconnect user \n      socket.on('disconnect', function (data) { \n        if (socket.username) { \n          userList.splice(userList.indexOf(socket.username), 1); \n          updateUsernames(); \n        } \n        connections.splice(connections.indexOf(socket), 1); \n        console.log(\"Disconnected:\" , connections.length ); \n      }); \n      // Setup new messages \n      socket.on('send message', function (data) { \n        io.sockets.emit('new message', { msg: data, user:\n         socket.username }); \n      }); \n      // New User \n      socket.on('new user', function (data, callback) { \n        callback(!!data); \n        socket.username = data; \n        userList.push(socket.username); \n        updateUsernames(); \n      }); \n      function updateUsernames() { \n        io.sockets.emit('get userList', userList); \n      } \n    });\n\n```", "```js\n          (function() { \n             // Grab all HTML elements into variables \n             var socket = io.connect(); \n             var $messageForm = $('#message-form'); \n             var $message = $('#message'); \n             var $chat = $('#chat'); \n             var $messageArea = $('#message-area'); \n             var $userForm = $('#user-form'); \n             var $users = $('#users'); \n             var $onlineUsersHeader = $('#online-users-header'); \n             var $username = $('#username'); \n             // Form submit to send messages \n             $messageForm.submit(function(e) { \n               e.preventDefault(); \n               socket.emit('send message', $message.val()); \n               $message.val(''); \n             }); \n            // When a new message is sent, print username and time to\n              interface \n           socket.on('new message', function(data) { \n             var currentHours = new Date().getHours() > 9 ? new\n              Date().getHours() : ('0' + new Date().getHours()) \n             var currentMinutes = new Date().getMinutes() > 9 ? new\n              Date().getMinutes() : ('0' + new Date().getMinutes()) \n               data.msg ? ( \n                 $chat.append(`<li>[${currentHours}:${currentMinutes}]\n                   <strong> ${data.user}: </strong>${data.msg}</li>`) )\n                 : alert('Blank message not allow!'); \n               }); \n              // Form submit to username \n              $userForm.submit(function(e) { \n                e.preventDefault(); \n                socket.emit('new user', $username.val(), function(data) { \n                  data ? ( \n                    $userForm.hide(), \n                    $messageArea.show() \n                  ) : alert('Ohps. What's your name!') \n                }); \n                $username.val(''); \n              }); \n              // get all users connected on localhost:3000 and print a list \n              socket.on('get userList', function(data) { \n                var html = ''; \n                for (i = 0; i < data.length; i++) { \n                  html += `<li class=\"list-item\"><strong>${data[i]}\n                  </strong></li>`; \n                } \n                $onlineUsersHeader.html(`<span class=\"card-title\">\n                  Users in the room: </span><span class=\"label label-\n                  success\">${data.length}</span>`); \n                $users.html(html); \n              }); \n            })(); \n\n    ```", "```js\n    gulp\n\n    ```", "```js\n    gulp\n\n    ```"]