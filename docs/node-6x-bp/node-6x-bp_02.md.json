["```js\n express --git\n\n```", "```js\n     \"swig\": \"^1.4.2\",\n\n    ```", "```js\n     npm install\n\n    ```", "```js\n          var swig = require('swig');\n\n    ```", "```js\n          var swig = new swig.Swig(); \n          app.engine('html', swig.renderFile); \n          app.set('view engine', 'html'); \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head> \n          </head> \n          <body> \n              {% block content %} \n              {% endblock %} \n          </body> \n          </html> \n\n    ```", "```js\n          {% extends 'layout.html' %} \n          {% block title %}{% endblock %} \n          {% block content %} \n          <h1>{{ title }}</h1> \n              Welcome to {{ title }} \n          {% endblock %} \n\n    ```", "```js\n          {% extends 'layout.html' %} \n          {% block title %}{% endblock %} \n          {% block content %} \n          <div class=\"container\"> \n              <h1>{{ message }}</h1> \n              <h2>{{ error.status }}</h2> \n              <pre>{{ error.stack }}</pre> \n           </div> \n          {% endblock %} \n\n    ```", "```js\n          // view engine setup \n          app.set('views', path.join(__dirname, 'views/pages'));\n\n    ```", "```js\n          // Index controller \n          exports.show = function(req, res) { \n          // Show index content \n              res.render('index', { \n                  title: 'Express' \n              }); \n          }; \n\n    ```", "```js\n          app.get('/', index.show); \n\n    ```", "```js\n          // Inject index controller \n          var index = require('./controllers/index'); \n\n    ```", "```js\n     npm start\n\n    ```", "```js\n          <meta charset=\"utf-8\"> \n          <title>{{ title }}</title> \n          <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs\n           /twitter-bootstrap/4.0.0-alpha.2/css/bootstrap.min.css'> \n          <link rel=\"stylesheet\" href=\"/stylesheets/style.css\"> \n\n    ```", "```js\n          <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.2.1\n           /jquery.min.js'></script> \n          <script src='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap\n           /4.0.0-alpha.2/js/bootstrap.min.js'></script> \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head> \n              {% include \"../partials/head.html\" %} \n          </head> \n          <body> \n               {% block content %} \n               {% endblock %} \n\n              {% include \"../partials/footer.html\" %} \n          </body> \n          </html> \n\n    ```", "```js\n     npm install -g sequelize-cli\n\n    ```", "```js\n     npm install sequelize -save\n\n    ```", "```js\n          var path = require('path'); \n          module.exports = { \n            'config': path.resolve('./config', 'config.json'), \n            'migrations-path': path.resolve('./config', 'migrations'), \n            'models-path': path.resolve('./', 'models'), \n            'seeders-path': path.resolve('./config', 'seeders') \n          } \n\n    ```", "```js\n    sequelize init\n\n    ```", "```js\n     Sequelize [Node: 6.3.0, CLI: 2.3.1, ORM: 3.19.3] \n\n          Using gulpfile /usr/local/lib/node_modules/sequelize\n          -cli/lib/gulpfile.js \n          Starting 'init:config'... \n          Created \"config/config.json\" \n          Finished 'init:config' after 4.05 ms \n          Successfully created migrations folder at \"/chapter-02/config\n          /migrations\". \n          Finished 'init:migrations' after 1.42 ms \n          Successfully created seeders folder at \"/chapter-02/config\n          /seeders\". \n          Finished 'init:seeders' after 712 \u00ce\u00bcs \n          Successfully created models folder at \"/chapter-02/models\". \n          Loaded configuration file \"config/config.json\". \n          Using environment \"development\". \n          Finished 'init:models' after 18 msStarting 'init'...\n\n    ```", "```js\n          { \n            \"development\": { \n            \"username\": \"root\", \n                \"password\": \"\", \n                \"database\": \"mvc_mysql_app\", \n                \"host\": \"127.0.0.1\", \n                \"port\": \"3306\", \n                \"dialect\": \"mysql\" \n            }, \n            \"test\": { \n                \"username\": \"root\", \n                \"password\": null, \n                \"database\": \"database_test\", \n                \"host\": \"127.0.0.1\", \n                \"dialect\": \"mysql\" \n            }, \n            \"production\": { \n                \"username\": \"root\", \n                \"password\": null, \n                \"database\": \"database_production\", \n                \"host\": \"127.0.0.1\", \n                \"dialect\": \"mysql\" \n            } \n          } \n\n    ```", "```js\n sequelize model:create --name User --attributes \"name:string,\n      email:string\"\n\n```", "```js\nSequelize [Node: 6.3.0, CLI: 2.3.1, ORM: 3.19.3]\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nUsing gulpfile /usr/local/lib/node_modules/sequelize-\n      cli/lib/gulpfile.js\nStarting 'model:create'...\nFinished 'model:create' after 13 ms\n\n```", "```js\n      'use strict'; \n      module.exports = function(sequelize, DataTypes) { \n        var User = sequelize.define('User', { \n          name: DataTypes.STRING, \n          email: DataTypes.STRING \n        },\n       { \n          classMethods: { \n           associate: function(models) { \n              // associations can be defined here \n           } \n        } \n       }); \n       return User; \n       }; \n\n```", "```js\n      'use strict'; \n       module.exports = { \n        up: function(queryInterface, Sequelize) { \n          return queryInterface.createTable('Users', { \n            id: { \n              allowNull: false, \n              autoIncrement: true, \n              primaryKey: true, \n              type: Sequelize.INTEGER \n            }, \n            name: { \n                type: Sequelize.STRING \n            }, \n            email: { \n              type: Sequelize.STRING \n            }, \n            createdAt: { \n              allowNull: false, \n              type: Sequelize.DATE \n            }, \n            updatedAt: { \n               allowNull: false, \n               type: Sequelize.DATE \n            } \n          }); \n        }, \n        down: function(queryInterface, Sequelize) { \n            return queryInterface.dropTable('Users'); \n        } \n      }; \n\n```", "```js\n     sequelize model:create --name Band --attributes \"name:string,\n           description:string, album:string, year:string, UserId:integer\"\n\n    ```", "```js\n          'use strict'; \n          module.exports = function(sequelize, DataTypes) { \n            var Band = sequelize.define('Band', { \n              name: DataTypes.STRING, \n              description: DataTypes.STRING, \n              album: DataTypes.STRING, \n              year: DataTypes.STRING, \n              UserId: DataTypes.INTEGER \n            }, { \n              classMethods: { \n                 associate: function(models) { \n                  // associations can be defined here \n              } \n            } \n          }); \n          return Band; \n          }; \n\n    ```", "```js\n          'use strict'; \n           module.exports = function(sequelize, DataTypes) { \n             var User = sequelize.define('User', { \n               name: DataTypes.STRING, \n               email: DataTypes.STRING \n             }, { \n               classMethods: { \n                 associate: function(models) { \n                  // associations can be defined here \n                  User.hasMany(models.Band); \n                } \n              } \n             }); \n           return User; \n          }; \n\n    ```", "```js\n          'use strict'; \n           module.exports = function(sequelize, DataTypes) { \n             var Band = sequelize.define('Band', { \n               name: DataTypes.STRING, \n               description: DataTypes.STRING, \n               album: DataTypes.STRING, \n               year: DataTypes.STRING, \n               UserId: DataTypes.INTEGER \n             }, { \n               classMethods: { \n                  associate: function(models) { \n                  // associations can be defined here \n            Band.belongsTo(models.User); \n             } \n            } \n           }); \n           return Band; \n          }; \n\n    ```", "```js\n     mysql -u root\n\n    ```", "```js\n     mysql -u youruser -p yourpassword\n\n    ```", "```js\n     CREATE DATABASE mvc_mysql_app;\n\n    ```", "```js\n     Query OK, 1 row affected (0,04 sec)\n\n    ```", "```js\n     npm install\n\n    ```", "```js\n     sequelize db:migrate\n\n    ```", "```js\n    Sequelize [Node: 6.3.0, CLI: 2.3.1, ORM: 3.19.3, mysql: ^2.10.2]\n    Loaded configuration file \"config/config.json\".\n    Using environment \"development\".\n    Using gulpfile /usr/local/lib/node_modules/sequelize-\n          cli/lib/gulpfile.js\n    Starting 'db:migrate'...\n    Finished 'db:migrate' after 438 ms\n    == 20160319100145-create-user: migrating =======\n    == 20160319100145-create-user: migrated (0.339s)\n    == 20160319101806-create-band: migrating =======\n    == 20160319101806-create-band: migrated (0.148s)\n\n    ```", "```js\n          var models = require('../models/index'); \n          var User = require('../models/user'); \n\n          // Create Users \n          exports.create = function(req, res) { \n              // create a new instance of the Users model with request body \n              models.User.create({ \n                name: req.body.name, \n                  email: req.body.email \n              }).then(function(user) { \n                  res.json(user); \n              }); \n           }; \n\n           // List Users \n           exports.list = function(req, res) { \n               // List all users \n               models.User.findAll({}).then(function(users) { \n                   res.json(users); \n              }); \n          }; \n\n    ```", "```js\n          var models = require('../models/index'); \n          var Band = require('../models/band'); \n\n          // Create Band \n          exports.create = function(req, res) { \n              // create a new instance of the Bands model with request body \n              models.Band.create(req.body).then(function(band) { \n                  //res.json(band); \n                  res.redirect('/bands'); \n              }); \n          }; \n\n          // List Bands \n          exports.list = function(req, res) { \n              // List all bands and sort by Date \n              models.Band.findAll({ \n                // Order: lastest created \n                  order: 'createdAt DESC' \n              }).then(function(bands) { \n                   //res.json(bands); \n                  // Render result \n                   res.render('list', { \n                      title: 'List bands', \n                      bands: bands \n                   }); \n               });  \n          }; \n\n          // Get by band id \n          exports.byId = function(req, res) { \n              models.Band.find({ \n                 where: { \n                   id: req.params.id \n                } \n              }).then(function(band) { \n                  res.json(band); \n              }); \n           } \n           // Update by id \n           exports.update = function (req, res) { \n               models.Band.find({ \n               where: { \n                  id: req.params.id \n               } \n            }).then(function(band) { \n                 if(band){ \n                   band.updateAttributes({ \n                      name: req.body.name, \n                      description: req.body.description, \n                      album: req.body.album, \n                      year: req.body.year, \n                      UserId: req.body.user_id \n                   }).then(function(band) { \n                      res.send(band); \n                  }); \n                } \n              }); \n          } \n\n          // Delete by id \n          exports.delete = function (req, res) { \n              models.Band.destroy({ \n                where: { \n                   id: req.params.id \n                } \n              }).then(function(band) { \n                  res.json(band); \n              }); \n          } \n\n    ```", "```js\n          // List Sample Bands \n          exports.show = function(req, res) { \n             // List all comments and sort by Date \n             var topBands = [ \n                  { \n                      name: 'Motorhead', \n                      description: 'Rock and Roll Band', \n                      album: 'http://s2.vagalume.com/motorhead/discografia\n                      /orgasmatron-W320.jpg', year:'1986', \n                  }, \n                  { \n                      name: 'Judas Priest', \n                      description: 'Heavy Metal band', \n                      album: 'http://s2.vagalume.com/judas-priest/discografia\n                       /screaming-for-vengeance-W320.jpg', year:'1982', \n                  }, \n                  { \n                      name: 'Ozzy Osbourne', \n                      description: 'Heavy Metal Band', \n                      album: 'http://s2.vagalume.com/ozzy-osbourne/discografia\n                      /diary-of-a-madman-W320.jpg', year:'1981', \n                  } \n             ]; \n               res.render('index', { \n                   title: 'The best albums of the eighties', \n                   callToAction: 'Please be welcome, click the button below \n                   and register your favorite album.', bands: topBands \n               }); \n          }; \n\n    ```", "```js\n          {% extends 'layout.html' %} \n          {% block title %}{% endblock %} \n          {% block content %} \n          <div class=\"album text-muted\"> \n          <div class=\"container\"> \n          <div class=\"row\"> \n                      {% for band in bands %} \n          <div class=\"card col-lg-4\"> \n          <h2 class=\"text-lg-center\">{{ band.name }}</h2> \n                              {% if band.album == null %} \n           <img src=\"img/320x320\" alt=\"{{ band.name }}\"\n            style=\"height: 320px; width: 100%; display: block;\"> \n                              {% endif %} \n                              {% if band.album %} \n           <img src=\"img/{{ band.album }}\" width=\"100%\" height=\"320px\"> \n                              {% endif %} \n           <p class =\"card-text\">{{ band.description }}</p> \n           </div> \n                       {% endfor %} \n           </div> \n           </div> \n           </div> \n           {% endblock %} \n\n    ```", "```js\n          {% extends 'layout.html' %} \n          {% block title %}{% endblock %} \n          {% block content %}  \n          <section class=\"jumbotron text-xs-center\"> \n          <div class=\"container\"> \n            <h1 class=\"jumbotron-heading\">{{ title }}</h1> \n            <p class=\"lead text-muted\">{{ callToAction }}</p> \n            <p> \n            <a href=\"/bands\" class=\"btn btn-secondary\">\n              View Full List Albums</a> \n            </p> \n          </div> \n          </section> \n          <div class=\"album text-muted\"> \n            <div class=\"container\"> \n              <div class=\"row\"> \n                      {% for band in bands %} \n              <div class=\"card col-lg-4\"> \n                <h2 class=\"text-lg-center\">{{ band.name }}</h2> \n                              {% if band.album == null %} \n                <img src=\"img/320x320\" alt=\"{{ band.name }}\"\n                  style=\"height: 320px; width: 100%; display: block;\"> \n                          {% endif %} \n                          {% if band.album %} \n                <img src=\"img/{{ band.album }}\" width=\"100%\" height=\"320px\"> \n                          {% endif %} \n                <p class=\"card-text\">{{ band.description }}</p> \n              </div> \n                      {% endfor %} \n              </div> \n            </div> \n          </div> \n          {% endblock %} \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head> \n              {% include \"../partials/head.html\" %} \n          </head> \n          <body>\n     <div class=\"navbar-collapse inverse collapse\" id=\"navbar-header\"\n           aria-expanded=\"false\" style=\"height: 0px;\"> \n          <div class=\"container-fluid\"> \n          <div class=\"about\"> \n            <h4>About</h4> \n            <p class=\"text-muted\">Add some information about the album below,\n               the author, or any other background context. Make it a few\n               sentences long so folks can pick up some informative tidbits.\n               Then, link them off to some social networking sites or contact\n               information.\n             </p> \n          </div> \n          <div class=\"social\"> \n          <h4>Contact</h4> \n          <ul class=\"list-unstyled\"> \n            <li><a href=\"#\">Follow on Twitter</a></li> \n            <li><a href=\"#\">Like on Facebook</a></li> \n            <li><a href=\"#\">Email me</a></li> \n          </ul> \n          </div> \n          </div> \n          </div> \n          <div class=\"navbar navbar-static-top navbar-dark bg-inverse\"> \n          <div class=\"container-fluid\"> \n            <button class=\"navbar-toggler collapsed\" type=\"button\"\n              data-toggle=\"collapse\" data-target=\"#navbar-header\"\n              aria-expanded=\"false\"> \n            </button> \n            <a href=\"/\" class=\"navbar-brand\">MVC MySql App</a> \n          </div> \n          </div> \n\n                  {% block content %} \n                  {% endblock %} \n          <footer class=\"text-muted\"> \n          <div class=\"container\"> \n            <p class=\"pull-xs-right\"> \n            <a href=\"#\">Back to top</a>  \n            </p> \n            <p>Sample Page using Album example from \u00c2\u00a9 Bootstrap!</p> \n            <p>New to Bootstrap? <a href=\"http://v4-alpha.getbootstrap.\n                com/getting-started/introduction/\">Visit the homepage\n            </a>.</p> \n          </div> \n          </footer>\n               {% include \"../partials/footer.html\" %} \n          </body> \n          </html> \n\n    ```", "```js\n  body { \n    min-height: 75rem; /* Can be removed; just added for demo purposes */ \n  } \n  .navbar { \n    margin-bottom: 0; \n  } \n  .navbar-collapse .container-fluid { \n    padding: 2rem 2.5rem; \n    border-bottom: 1px solid #55595c; \n  } \n  .navbar-collapse h4 { \n    color: #818a91; \n  } \n  .navbar-collapse .text-muted { \n    color: #818a91; \n  } \n  .about { \n    float: left; \n    max-width: 30rem; \n    margin-right: 3rem; \n  } \n  .social a { \n  font-weight: 500; \n    color: #eceeef; \n  } \n  .social a:hover { \n    color: #fff; \n  } \n  .jumbotron { \n    padding-top: 6rem; \n    padding-bottom: 6rem; \n    margin-bottom: 0; \n    background-color: #fff; \n  } \n  .jumbotron p:last-child { \n    margin-bottom: 0; \n  } \n  .jumbotron-heading { \n    font-weight: 300; \n  } \n  .jumbotron .container { \n    max-width: 45rem; \n  } \n  .album { \n    min-height: 50rem; /* Can be removed; just added for demo purposes */ \n    padding-top: 3rem; \n    padding-bottom: 3rem; \n    background-color: #f7f7f7; \n  } \n  .card { \n    float: left; \n    width: 33.333%; \n    padding: .75rem; \n    margin-bottom: 2rem; \n    border: 0; \n  } \n  .card > img { \n    margin-bottom: .75rem; \n  } \n  .card-text { \n    font-size: 85%; \n  } \n  footer { \n    padding-top: 3rem; \n    padding-bottom: 3rem; \n  } \n  footer p { \n    margin-bottom: .25rem; \n  } \n\n```", "```js\n          // Inject band controller \n          var bands = require('./controllers/band'); \n          // Inject user controller \n          var users = require('./controllers/user'); \n\n    ```", "```js\n          // Defining route to list and post \n          app.get('/bands', bands.list); \n          // Get band by ID \n          app.get('/band/:id', bands.byId); \n          // Create band \n          app.post('/bands', bands.create); \n          // Update \n          app.put('/band/:id', bands.update); \n          // Delete by id \n          app.delete('/band/:id', bands.delete); \n          // Defining route to list and post users \n          app.get('/users', users.list); \n          app.post('/users', users.create); \n\n    ```", "```js\n     npm start \n\n    ```", "```js\n          # Dump of table Bands \n          # ------------------------------------------------------------ \n\n          DROP TABLE IF EXISTS `Bands`; \n\n          CREATE TABLE `Bands` ( \n            `id` int(11) NOT NULL AUTO_INCREMENT, \n            `name` varchar(255) DEFAULT NULL, \n            `description` varchar(255) DEFAULT NULL, \n            `album` varchar(255) DEFAULT NULL, \n            `year` varchar(255) DEFAULT NULL, \n            `UserId` int(11) DEFAULT NULL, \n            `createdAt` datetime NOT NULL, \n            `updatedAt` datetime NOT NULL, \n            PRIMARY KEY (`id`) \n          ) ENGINE=InnoDB DEFAULT CHARSET=utf8; \n\n          LOCK TABLES `Bands` WRITE; \n          /*!40000 ALTER TABLE `Bands` DISABLE KEYS */; \n\n          INSERT INTO `Bands` (`id`, `name`, `description`, `album`, `year`,\n          `UserId`, `createdAt`, `updatedAt`) \n          VALUES \n             (2,'Motorhead','Rock and Roll Band','http://s2.vagalume.com/\n              motorhead/discografia/ace-of-spades-W320.jpg','1979',NULL,\n              '2016-03-13 21:50:25','2016-03-12 21:50:25'), \n             (4,'Black Sabbath','Heavy Metal Band','http://s2.vagalume.com/\n              black-sabbath/discografia/heaven-and-hell W320.jpg','1980',\n              NULL,'2016-03-12 22:11:00','2016-03-12 23:08:30'), \n             (6,'Deep Purple','Heavy Metal band','http://s2.vagalume.com\n              /deep-purple/discografia/perfect-strangersW320.jpg',\n               '1988',NULL,'2016-03-13 23:09:59','2016-03-12 23:10:29'), \n             (7,'White Snake','Heavy Metal band','http://s2.vagalume.com/\n               whitesnake/discografia/slip-of-the-tongueW320.jpg','1989',\n                NULL,'2016-03-13 01:58:56','2016-03-13 01:58:56'),\n             (8,'Iron maiden','Heavy Metal band','http://s2.vagalume.com/\n                iron-maiden/discografia/the-number-of-the-beastW320.jpg',\n                '1982',NULL,'2016-03-13 02:01:24','2016-03-13 02:01:24'),\n             (9,'Queen','Heavy Metal band','http://s2.vagalume.com/queen\n                /discografia/greatest-hits-vol-1-W320.jpg','1981',NULL,\n                '2016-03-13 02:01:25','2016-03-13 02:01:25'); \n\n           /*!40000 ALTER TABLE `Bands` ENABLE KEYS */; \n           UNLOCK TABLES; \n\n           /*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */; \n           /*!40101 SET SQL_MODE=@OLD_SQL_MODE */; \n           /*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */; \n           /*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */; \n           /*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */; \n           /*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */; \n\n    ```", "```js\n          <div class=\"modal fade\" id=\"createBand\" tabindex=\"-1\" role=\"dialog\" \n             aria-labelledby=\"myModalLabel\" aria-hidden=\"true\"> \n          <div class=\"modal-dialog\" role=\"document\"> \n          <div class=\"modal-content\"> \n            <form action=\"/bands\" method=\"post\"> \n              <div class=\"modal-header\"> \n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" \n                 aria-label=\"Close\"> \n                <span aria-hidden=\"true\">&times;</span> \n                </button> \n                  <h4 class=\"modal-title\" id=\"myModalLabel\">Insert an\n                   Album</h4> \n              </div> \n              <div class=\"modal-body\"> \n              <fieldset class=\"form-group\"> \n              <label  for=\"inputname\">Band Name</label> \n              <input type=\"text\" id=\"inputname\" name=\"name\" \n               class=\"form-control\" placeholder=\"Band name\" required=\"\"> \n             </fieldset> \n             <fieldset class=\"form-group\"> \n             <label  for=\"inputdescription\">Description</label> \n             <textarea id=\"nputdescription\" name=\"description\" rows=\"8\"\n               cols=\"40\" class=\"form-control\" placeholder=\"Description\"\n               required=\"\">\n             </textarea> \n             </fieldset> \n             <fieldset class=\"form-group\">  \n             <label  for=\"inputalbum\">Best Album</label> \n             <input type=\"text\" id=\"inputalbum\" name=\"album\" rows=\"8\" cols=\"40\"  \n              class=\"form-control\" placeholder=\"Link to Album cover\">\n               </textarea> \n             </fieldset> \n           <fieldset class=\"form-group\"> \n             <label  for=\"inputyear\">Release Year</label> \n             <input type=\"text\" id=\"inputyear\" name=\"year\" rows=\"8\" cols=\"40\" \n              class=\"form-control\" placeholder=\"Year\" required=\"\"></textarea> \n           </fieldset> \n\n          </div> \n            <div class=\"modal-footer\"> \n              <button type=\"button\" class=\"btn btn-secondary\" \n                data-dismiss=\"modal\">Close</button> \n              <button type=\"submit\" class=\"btn btn-primary\">Save \n                changes</button> \n           </div> \n          </form> \n          </div> \n          </div> \n          </div> \n\n    ```", "```js\n     npm start\n\n    ```", "```js\n      // Create Band \n      exports.create = function(req, res) { \n          // create a new instance of the Bands model with request body \n          models.Band.create(req.body).then(function(band) { \n              //res.json(band); \n              res.redirect('/bands'); \n          }); \n      }; \n\n```", "```js\n          User.findOne({ 'local.email' :  email }, function(err, user) { \n                              // if errors \n                              if (err) \n                              return done(err); \n                              // check email \n                              if (user) { \n                                  return done(null, false, \n                                   req.flash('signupMessage', 'Wohh! the email\n                                    is already taken.')); \n                                   } else { \n                                  // create the user \n                                  var newUser = new User(); \n                                  // Get user name from req.body \n                                  newUser.local.name = req.body.name; \n                                  newUser.local.email = email; \n                                  newUser.local.password = \n                                    newUser.generateHash(password); \n                                  // save data \n                                  newUser.save(function(err) { \n                                      if (err) \n                                      throw err; \n                                      return done(null, newUser); \n                                  }); \n                               } \n                   }); \n\n    ```", "```js\n          User.findOne({ where: { localemail: email }}) \n              .then(function(user) { \n\n             if (user) \n                 return done(null, false, req.flash('loginMessage', 'That\n                  email\n                   is already taken.')); \n              if(req.user) { \n\n                  var user = req.user; \n                  user.localemail = email; \n                  user.localpassword = User.generateHash(password); \n                  user.save() \n                      .then (function() { \n                          done(null, user); \n                      }) \n                      .catch(function (err) { \n                          done(null, false, req.flash('loginMessage',\n                           err));}); \n                      }); \n              } else { \n                  // create the user \n                  var newUser = User.build ({ \n                      localemail: email, \n                      localpassword: User.generateHash(password) \n                  }); \n                  // store the newUser to the database \n                  newUser.save() \n                      .then(function() { \n                          done (null, newUser); \n                      }) \n                      .catch(function(err) { \n                          done(null, false, req.flash('loginMessage',\n                           err));}); \n                      } \n                  }) \n              .catch(function (e) { \n                   done(null, false, req.flash('loginMessage',e.name + \" \" + \n                       e.message));                  \n             }) \n\n    ```"]