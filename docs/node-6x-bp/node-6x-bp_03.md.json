["```js\n          { \n            \"name\": \"chapter-03\", \n            \"description\": \"Build a multimedia Application with Node.js\", \n            \"license\": \"MIT\", \n            \"author\": { \n              \"name\": \"Fernando Monteiro\", \n              \"url\": \"https://github.com/newaeonweb/node-6-blueprints\" \n           }, \n            \"repository\": { \n              \"type\": \"git\", \n              \"url\": \"https://github.com/newaeonweb/node-6-blueprints.git\" \n            }, \n            \"keywords\": [ \n              \"MVC\", \n              \"Express Application\", \n              \"Expressjs\", \n              \"Expressjs images upload\", \n              \"Expressjs video upload\" \n            ], \n            \"version\": \"0.0.1\", \n            \"private\": true, \n            \"scripts\": { \n              \"start\": \"node app.js\" \n            }, \n             \"dependencies\": { \n              \"bcrypt-nodejs\": \"0.0.3\", \n              \"body-parser\": \"~1.13.2\", \n              \"connect-flash\": \"^0.1.1\", \n              \"connect-mongo\": \"^1.1.0\", \n              \"cookie-parser\": \"~1.3.5\", \n              \"debug\": \"~2.2.0\", \n              \"ejs\": \"~2.3.3\", \n               \"express\": \"~4.13.1\", \n              \"express-session\": \"^1.13.0\", \n              \"gravatar\": \"^1.4.0\", \n              \"mongoose\": \"^4.4.5\", \n              \"morgan\": \"~1.6.1\", \n              \"multer\": \"^1.1.0\", \n              \"node-sass-middleware\": \"0.8.0\", \n              \"passport\": \"^0.3.2\", \n              \"passport-local\": \"^1.0.0\", \n              \"serve-favicon\": \"~2.3.0\" \n            }, \n            \"devDependencies\": { \n              \"nodemon\": \"^1.9.1\" \n            } \n          } \n\n    ```", "```js\n          # http://editorconfig.org \n          root = true \n\n          [*] \n          indent_style = tab \n          indent_size = 4 \n          charset = utf-8 \n          trim_trailing_whitespace = true \n          insert_final_newline = true \n\n          [*.md] \n          trim_trailing_whitespace = false \n\n    ```", "```js\n          # Logs \n          logs \n          *.log \n\n          # Runtime data \n          pids \n          *.pid \n          *.seed \n\n          # Directory for instrumented libs generated by jscoverage/JSCover \n          lib-cov \n\n          # Coverage directory used by tools like istanbul \n              coverage \n\n          # Grunt intermediate \n          storage (http://gruntjs.com/creating-plugins#storing-task-files) \n          .grunt \n\n          # node-waf configuration \n          .lock-wscript \n\n          # Compiled binary addons (http://nodejs.org/api/addons.html) \n          build/Release \n\n          # Dependency directory \n          # https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-\n          my-node_modules-folder-into-git- \n          node_modules \n\n          # Debug log from npm \n          npm-debug.log \n\n    ```", "```js\n    npm install\n\n    ```", "```js\n          // Import basic modules \n          var express = require('express'); \n          var path = require('path'); \n          var favicon = require('serve-favicon'); \n          var logger = require('morgan'); \n          var cookieParser = require('cookie-parser'); \n          var bodyParser = require('body-parser'); \n\n          // import multer \n          var multer  = require('multer'); \n          var upload = multer({ dest:'./public/uploads/', limits: {fileSize:\n           1000000, files:1} }); \n\n    ```", "```js\n           // Import home controller \n           var index = require('./server/controllers/index'); \n           // Import login controller \n           var auth = require('./server/controllers/auth'); \n           // Import comments controller \n           var comments = require('./server/controllers/comments'); \n           // Import videos controller \n           var videos = require('./server/controllers/videos'); \n           // Import images controller \n           var images = require('./server/controllers/images'); \n\n    ```", "```js\n           // ODM with Mongoose \n           var mongoose = require('mongoose'); \n           // Modules to store session \n           var session = require('express-session'); \n           var MongoStore = require('connect-mongo')(session); \n           // Import Passport and Warning flash modules \n           var passport = require('passport'); \n           var flash = require('connect-flash'); \n           // start express application in variable app. \n           var app = express(); \n\n    ```", "```js\n          // view engine setup \n          app.set('views', path.join(__dirname, 'server/views/pages')); \n          app.set('view engine', 'ejs'); \n          // Database configuration \n          var config = require('./server/config/config.js'); \n          // connect to our database \n          mongoose.connect(config.url); \n           // Check if MongoDB is running \n         mongoose.connection.on('error', function() { \n             console.error('MongoDB Connection Error. Make sure MongoDB is\n             running.'); \n         }); \n         // Passport configuration \n         require('./server/config/passport')(passport); \n\n    ```", "```js\n          app.use(logger('dev')); \n          app.use(bodyParser.json()); \n          app.use(bodyParser.urlencoded({ extended: false })); \n          app.use(cookieParser()); \n          app.use(require('node-sass-middleware')({ \n          src: path.join(__dirname, 'public'), \n          dest: path.join(__dirname, 'public'), \n          indentedSyntax: true, \n          sourceMap: true \n          })); \n          // Setup public directory \n          app.use(express.static(path.join(__dirname, 'public'))); \n\n          // required for passport \n          // secret for session \n          app.use(session({ \n          secret: 'sometextgohere', \n          saveUninitialized: true, \n          resave: true, \n               //store session on MongoDB using express-session + connect mongo \n          store: new MongoStore({ \n          url: config.url, \n          collection : 'sessions' \n              }) \n          })); \n\n          // Init passport authentication \n         app.use(passport.initialize()); \n          // persistent login sessions \n          app.use(passport.session()); \n          // flash messages \n          app.use(flash()); \n\n    ```", "```js\n          // Application Routes \n          // Index Route \n          app.get('/', index.show); \n          app.get('/login', auth.signin); \n          app.post('/login', passport.authenticate('local-login', { \n             //Success go to Profile Page / Fail go to login page \n          successRedirect : '/profile', \n          failureRedirect : '/login', \n          failureFlash : true \n          })); \n          app.get('/signup', auth.signup); \n          app.post('/signup', passport.authenticate('local-signup', { \n              //Success go to Profile Page / Fail go to Signup page \n          successRedirect : '/profile', \n          failureRedirect : '/signup', \n          failureFlash : true \n          })); \n\n          app.get('/profile', auth.isLoggedIn, auth.profile); \n\n          // Logout Page \n          app.get('/logout', function(req, res) { \n          req.logout(); \n          res.redirect('/'); \n           }); \n\n          // Setup routes for comments \n          app.get('/comments', comments.hasAuthorization, comments.list); \n          app.post('/comments', comments.hasAuthorization, comments.create); \n\n          // Setup routes for videos \n          app.get('/videos', videos.hasAuthorization, videos.show); \n          app.post('/videos', videos.hasAuthorization, upload.single('video'),\n          videos.uploadVideo); \n\n          // Setup routes for images \n          app.post('/images', images.hasAuthorization, upload.single('image'),\n          images.uploadImage); \n          app.get('/images-gallery', images.hasAuthorization, images.show); \n\n    ```", "```js\n          // catch 404 and forward to error handler \n          app.use(function(req, res, next) { \n          var err = new Error('Not Found'); \n          err.status = 404; \n          next(err); \n           }); \n\n          // development error handler \n          // will print stacktrace \n          if (app.get('env') === 'development') { \n          app.use(function(err, req, res, next) { \n          res.status(err.status || 500); \n          res.render('error', { \n          message: err.message, \n          error: err \n                  }); \n             }); \n          } \n\n          // production error handler \n          // no stacktraces leaked to user \n          app.use(function(err, req, res, next) { \n          res.status(err.status || 500); \n          res.render('error', { \n           message: err.message, \n          error: {} \n              }); \n          }); \n\n          module.exports = app; \n\n          app.set('port', process.env.PORT || 3000); \n\n          var server = app.listen(app.get('port'), function() { \n          console.log('Express server listening on port ' +\n          server.address().port); \n          }); \n\n    ```", "```js\n// Database URL \nmodule.exports = { \n    'url' : 'mongodb://localhost/mvc-app-multimedia' \n}; \n\n```", "```js\n          // get gravatar icon from email \n          var gravatar = require('gravatar'); \n          var passport = require('passport'); \n\n          // Signin GET \n          exports.signin = function(req, res) { \n              // List all Users and sort by Date \n          res.render('login', { title: 'Login Page', message:\n          req.flash('loginMessage') }); \n          }; \n          // Signup GET \n          exports.signup = function(req, res) { \n              // List all Users and sort by Date \n          res.render('signup', { title: 'Signup Page', message:\n          req.flash('signupMessage') }); \n\n          }; \n          // Profile GET \n          exports.profile = function(req, res) { \n              // List all Users and sort by Date \n          res.render('profile', { title: 'Profile Page', user : req.user,\n          avatar:gravatar.url(req.user.email ,  {s: '100', r: 'x', d: 'retro'},\n          true) }); \n          }; \n          // Logout function \n          exports.logout = function () { \n          req.logout(); \n          res.redirect('/'); \n          }; \n\n          // check if user is logged in \n          exports.isLoggedIn = function(req, res, next) { \n          if (req.isAuthenticated()) \n          return next(); \n          res.redirect('/login'); \n          }; \n\n    ```", "```js\n          // get gravatar icon from email \n          var gravatar = require('gravatar'); \n          // get Comments model \n          var Comments = require('../models/comments'); \n\n          // List Comments \n          exports.list = function(req, res) { \n             // List all comments and sort by Date \n          Comments.find().sort('-created').populate('user',\n          'local.email').exec(function(error, comments) { \n           if (error) { \n           returnres.send(400, { \n           message: error \n                      }); \n                  } \n                  // Render result \n           res.render('comments', { \n           title: 'Comments Page', \n           comments: comments, \n           gravatar: gravatar.url(comments.email ,  {s: '80', r: 'x', d:\n            'retro'}, true) \n                   }); \n            }); \n          }; \n          // Create Comments \n          exports.create = function(req, res) { \n             // create a new instance of the Comments model with request body \n          var comments = new Comments(req.body); \n              // Set current user (id) \n          comments.user = req.user; \n              // save the data received \n          comments.save(function(error) { \n          if (error) { \n          returnres.send(400, { \n           message: error \n                      }); \n                  } \n                  // Redirect to comments \n          res.redirect('/comments'); \n               }); \n          }; \n          // Comments authorization middleware \n           exports.hasAuthorization = function(req, res, next) { \n             if (req.isAuthenticated()) \n             return next(); \n            res.redirect('/login'); \n          }; \n\n    ```", "```js\n          // Show home screen \n          exports.show = function(req, res) { \n             // Render home screen \n           res.render('index', { \n                   title: 'Multimedia Application', \n                   callToAction: 'An easy way to upload and manipulate files\n                     with Node.js' \n             }); \n          }; \n\n    ```", "```js\n          // Import modules \n          var fs = require('fs'); \n          var mime = require('mime'); \n          // get gravatar icon from email \n          var gravatar = require('gravatar'); \n\n          var Images = require('../models/images'); \n          // set image file types \n          var IMAGE_TYPES = ['image/jpeg','image/jpg', 'image/png']; \n\n    ```", "```js\n          // Show images gallery \n          exports.show = function (req, res) { \n\n          Images.find().sort('-created').populate('user',\n          'local.email').exec(function(error, images) { \n          if (error) { \n            returnres.status(400).send({ \n              message: error \n             }); \n          } \n          // Render galley \n          res.render('images-gallery', {  \n          title: 'Images Gallery', \n          images: images, \n          gravatar: gravatar.url(images.email ,  {s: '80', r: 'x', d: 'retro'},\n          true) \n                  }); \n              }); \n          }; \n\n    ```", "```js\n          // Image upload \n          exports.uploadImage = function(req, res) { \n          var src; \n          var dest; \n          var targetPath; \n          var targetName; \n          var tempPath = req.file.path; \n          console.log(req.file); \n              //get the mime type of the file \n          var type = mime.lookup(req.file.mimetype); \n             // get file extension \n          var extension = req.file.path.split(/[. ]+/).pop(); \n             // check support file types \n          if (IMAGE_TYPES.indexOf(type) == -1) { \n            returnres.status(415).send('Supported image formats: jpeg, jpg,\n            jpe, png.'); \n           } \n              // Set new path to images \n          targetPath = './public/images/' + req.file.originalname; \n             // using read stream API to read file \n          src = fs.createReadStream(tempPath); \n             // using a write stream API to write file \n          dest = fs.createWriteStream(targetPath); \n          src.pipe(dest); \n\n              // Show error \n          src.on('error', function(err) { \n          if (err) { \n            returnres.status(500).send({ \n            message: error \n                      }); \n                  } \n           }); \n              // Save file process \n          src.on('end', function() { \n                 // create a new instance of the Images model with request body \n          var image = new Images(req.body); \n                 // Set the image file name \n          image.imageName = req.file.originalname; \n                 // Set current user (id) \n          image.user = req.user; \n                 // save the data received \n          image.save(function(error) { \n          if (error) { \n            return res.status(400).send({ \n            message: error \n                          }); \n                      } \n                  }); \n                  // remove from temp folder \n          fs.unlink(tempPath, function(err) { \n          if (err) { \n              return res.status(500).send('Woh, something bad happened here'); \n                    } \n                    // Redirect to galley's page \n              res.redirect('images-gallery'); \n\n                  }); \n              }); \n          }; \n\n    ```", "```js\n          // Images authorization middleware \n          exports.hasAuthorization = function(req, res, next) { \n          if (req.isAuthenticated()) \n          return next(); \n          res.redirect('/login'); \n          }; \n\n    ```", "```js\n          // Import modules \n          var fs = require('fs'); \n          var mime = require('mime'); \n          // get gravatar icon from email \n          var gravatar = require('gravatar'); \n\n          // get video model \n          var Videos = require('../models/videos'); \n          // set image file types \n          var VIDEO_TYPES = ['video/mp4', 'video/webm', 'video/ogg',\n           'video/ogv']; \n\n          // List Videos \n          exports.show = function(req, res) { \n\n          Videos.find().sort('-created').populate('user',\n          'local.email').exec(function(error, videos) { \n          if (error) { \n            return res.status(400).send({ \n            message: error \n                      }); \n                  } \n                  // Render result \n          console.log(videos); \n          res.render('videos', { \n          title: 'Videos Page', \n          videos: videos, \n          gravatar: gravatar.url(videos.email ,  {s: '80', r: 'x', d: 'retro'},\n          true) \n                  }); \n              }); \n          }; \n          // Create Videos \n          exports.uploadVideo = function(req, res) { \n          var src; \n          var dest; \n          var targetPath; \n          var targetName; \n          console.log(req); \n          var tempPath = req.file.path; \n              //get the mime type of the file \n          var type = mime.lookup(req.file.mimetype); \n             // get file extenstion \n          var extension = req.file.path.split(/[. ]+/).pop(); \n            // check support file types \n          if (VIDEO_TYPES.indexOf(type) == -1) { \n          return res.status(415).send('Supported video formats: mp4, webm, ogg,\n          ogv'); \n              } \n              // Set new path to images \n          targetPath = './public/videos/' + req.file.originalname; \n             // using read stream API to read file \n          src = fs.createReadStream(tempPath); \n            // using a write stream API to write file \n          dest = fs.createWriteStream(targetPath); \n          src.pipe(dest); \n\n              // Show error \n          src.on('error', function(error) { \n          if (error) { \n            return res.status(500).send({ \n            message: error \n                      }); \n                  } \n            }); \n\n              // Save file process \n          src.on('end', function() { \n                  // create a new instance of the Video model with request body \n          var video = new Videos(req.body); \n                  // Set the video file name \n          video.videoName = req.file.originalname; \n                 // Set current user (id) \n          video.user = req.user; \n                 // save the data received \n          video.save(function(error) { \n          if (error) { \n            return res.status(400).send({ \n            message: error \n                          }); \n                     } \n                  }); \n                  // remove from temp folder \n          fs.unlink(tempPath, function(err) { \n          if (err) { \n            return res.status(500).send({ \n            message: error \n                          }); \n                      } \n                     // Redirect to galley's page \n          res.redirect('videos'); \n\n                  }); \n              }); \n          }; \n          // Videos authorization middleware \n          exports.hasAuthorization = function(req, res, next) { \n          if (req.isAuthenticated()) \n             return next(); \n             res.redirect('/login'); \n          };\n\n    ```", "```js\n          // load the things we need \n          var mongoose = require('mongoose'); \n          var Schema = mongoose.Schema; \n\n          var commentSchema = mongoose.Schema({ \n          created: { \n           type: Date, \n          default: Date.now \n              }, \n          title: { \n          type: String, \n          default: '', \n          trim: true, \n          required: 'Title cannot be blank' \n              }, \n          content: { \n          type: String, \n          default: '', \n          trim: true \n              }, \n          user: { \n          type: Schema.ObjectId, \n          ref: 'User' \n              } \n          }); \n\n          module.exports = mongoose.model('Comments', commentSchema); \n\n    ```", "```js\n          // Import Mongoose and password Encrypt \n          var mongoose = require('mongoose'); \n          var bcrypt   = require('bcrypt-nodejs'); \n\n          // define the schema for User model \n          var userSchema = mongoose.Schema({ \n              // Using local for Local Strategy Passport \n          local: { \n          name: String, \n          email: String, \n          password: String, \n              } \n\n          }); \n\n          // Encrypt Password \n          userSchema.methods.generateHash = function(password) { return\n          bcrypt.hashSync(password, bcrypt.genSaltSync(8), null); \n          }; \n\n          // Verify if password is valid \n          userSchema.methods.validPassword = function(password) { return\n          bcrypt.compareSync(password, this.local.password); \n          }; \n\n          // create the model for users and expose it to our app \n          module.exports = mongoose.model('User', userSchema); \n\n    ```", "```js\n          // load the things we need \n          var mongoose = require('mongoose'); \n          var Schema = mongoose.Schema; \n\n          var imagesSchema = mongoose.Schema({ \n          created: { \n          type: Date, \n          default: Date.now \n              }, \n          title: { \n          type: String, \n          default: '', \n          trim: true, \n          required: 'Title cannot be blank' \n              }, \n          imageName: { \n          type: String \n              }, \n          user: { \n          type: Schema.ObjectId, \n          ref: 'User' \n              } \n          }); \n\n          module.exports = mongoose.model('Images', imagesSchema); \n\n    ```", "```js\n          // load the things we need \n          var mongoose = require('mongoose'); \n          var Schema = mongoose.Schema; \n\n          var videosSchema = mongoose.Schema({ \n            created: { \n              type: Date, \n              default: Date.now \n            }, \n            title: { \n              type: String, \n              default: '', \n              trim: true, \n              required: 'Title cannot be blank' \n            }, \n            videoName: { \n             type: String \n            }, \n            user: { \n              type: Schema.ObjectId, \n              ref: 'User' \n            } \n          }); \n\n          module.exports = mongoose.model('Videos', videosSchema); \n\n    ```", "```js\n          <footer class=\"footer\"> \n          <div class=\"container\"> \n           <span>&copy 2016\\. Node-Express-MVC-Multimedia-App</span> \n          </div> \n          </footer> \n\n    ```", "```js\n          <!-- Fixed navbar --> \n          <div class=\"pos-f-t\"> \n            <div class=\"collapse\" id=\"navbar-header\"> \n              <div class=\"container bg-inverse p-a-1\"> \n                <h3>Collapsed content</h3> \n                <p>Toggleable via the navbar brand.</p> \n              </div> \n            </div> \n            <nav class=\"navbarnavbar-light navbar-static-top\"> \n            <div class=\"container\"> \n              <button class=\"navbar-toggler hidden-sm-up\" type=\"button\"\n              data-toggle=\"collapse\" data-target=\"#exCollapsingNavbar2\"> \n              Menu \n              </button> \n              <div class=\"collapse navbar-toggleable-xs\"\n                id=\"exCollapsingNavbar2\"> \n                <a class=\"navbar-brand\" href=\"/\">MVC Multimedia App</a> \n                <ul class=\"navnavbar-navnavbar-right\"> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/login\">Sign in</a> \n                  </li> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/signup\">Sign up</a> \n                  </li> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/profile\">Profile</a> \n                  </li> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/comments\">Comments</a> \n                  </li> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/videos\">Videos</a> \n                  </li> \n                  <li class=\"nav-item\"> \n                    <a class=\"nav-link\" href=\"/images-gallery\">Photos</a> \n                  </li> \n                </ul> \n              </div> \n            </div> \n            </nav> \n          </div> \n          <!-- Fixed navbar --> \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head> \n            <title><%= title %></title> \n            <% include ../partials/stylesheet %> \n          </head> \n          <body> \n            <% include ../partials/header %> \n            <div class=\"container\"> \n              <div class=\"row\"> \n                <div class=\"col-lg-6\"> \n                  <h4 class=\"text-muted\">Images</h4> \n                </div> \n              <div class=\"col-lg-6\"> \n                <button type=\"button\" class=\"btnbtn-secondary pull-right\"\n                 data-toggle=\"modal\" data-target=\"#createImage\"> \n                        Image Upload \n                 </button> \n               </div> \n             </div> \n             <!-- Modal --> \n             <div class=\"modal fade\" id=\"createImage\" tabindex=\"-1\"\n              role=\"dialog\" aria-labelledby=\"myModalLabel\"\n              aria-hidden=\"true\"> \n               <div class=\"modal-dialog\" role=\"document\"> \n                 <div class=\"modal-content\"> \n                   <form action=\"/images\" method=\"post\"\n                     enctype=\"multipart/formdata\"> \n                   <div class=\"modal-header\"> \n                     <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n                      aria-label=\"Close\"> \n                       <span aria-hidden=\"true\">&times;</span> \n                     </button> \n                     <h4 class=\"modal-title\" id=\"myModalLabel\">\n                       Upload a imagefile\n                     </h4>\n                   </div> \n\n                   <div class=\"modal-body\"> \n                     <fieldset class=\"form-group\"> \n                     <label  for=\"itle\">Title</label> \n                       <input type=\"text\" id=\"itle\" name=\"title\" class=\"form-\n                        control\" placeholder=\"Image Title\" required=\"\"> \n                     </fieldset> \n                     <label class=\"file\" style=\"width: 100%\"> \n                       <input type=\"file\" id=\"image\" name=\"image\"> \n                       <span class=\"file-custom\"></span> \n                     </label> \n                   </div> \n                   <div class=\"modal-footer\"> \n                     <button type=\"button\" class=\"btnbtnsecondary\" data\n                      dismiss=\"modal\">Close\n                      </button> \n                     <button type=\"submit\" class=\"btnbtn-primary\">\n                        Savechanges\n                     </button> \n                   </div> \n                   </form> \n                 </div> \n               </div> \n             </div> \n             <hr> \n             <div class=\"row\"> \n               <% images.forEach(function(images){ %> \n               <div class=\"col-lg-4\"> \n                 <figure class=\"figure\"> \n                  <img src=\"img/<%= images.imageName %>\" class=\"figure-img\n                   img-fluid img-rounded\" alt=\"<%= images.imageName %>\"> \n                  <figcaption class=\"figure-caption\"><%= images.title%>\n                  </figcaption> \n                  <small>Upload by: <%= images.user.local.email %></small> \n                 </figure> \n               </div> \n               <% }); %> \n             </div> \n           </div> \n           <% include ../partials/footer %> \n           <% include ../partials/javascript %> \n          </body> \n          </html> \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head> \n            <title><%= title %></title> \n            <% include ../partials/stylesheet %> \n          </head> \n          <body> \n          <% include ../partials/header %> \n          <div class=\"container\"> \n          <div class=\"row\"> \n          <div class=\"col-lg-6\"> \n          <h4 class=\"text-muted\">Videos</h4> \n          </div> \n          <div class=\"col-lg-6\"> \n          <button type=\"button\" class=\"btn btn-secondary pull-right\"\n           data-toggle=\"modal\" data-target=\"#createVideo\"> \n                        Video Upload \n           </button> \n          </div> \n          </div> \n          <!-- Modal --> \n          <div class=\"modal fade\" id=\"createVideo\" tabindex=\"-1\" role=\"dialog\"\n           aria-labelledby=\"myModalLabel\" aria-hidden=\"true\"> \n          <div class=\"modal-dialog\" role=\"document\"> \n          <div class=\"modal-content\">  \n          <form action=\"/videos\" method=\"post\" enctype=\"multipart/form-data\"> \n          <div class=\"modal-header\"> \n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n           aria-label=\"Close\"> \n          <span aria-hidden=\"true\">&times;</span> \n          </button> \n          <h4 class=\"modal-title\" id=\"myModalLabel\">Upload a video file</h4> \n           </div> \n\n          <div class=\"modal-body\"> \n          <fieldset class=\"form-group\"> \n          <label  for=\"inputitle\">Title</label> \n          <input type=\"text\" id=\"inputitle\" name=\"title\" class=\"form-control\"\n           placeholder=\"Video Title\" required=\"\"> \n          </fieldset> \n           <label class=\"file\" style=\"width: 100%\"\n             onclick=\"$('input[id=lefile]').click();\"> \n           <input type=\"file\" id=\"video\" name=\"video\"> \n           <span class=\"file-custom\"></span> \n           </label> \n           </div> \n          <div class=\"modal-footer\"> \n          <button type=\"button\" class=\"btnbtn-secondary\"\n           data-dismiss=\"modal\">Close</button> \n          <button type=\"submit\" class=\"btnbtn-primary\">Save changes</button> \n          </div> \n          </form> \n          </div> \n          </div> \n          </div> \n          <hr> \n          <div class=\"row\"> \n          <% videos.forEach(function(videos){ %> \n          <div class=\"col-lg-4\"> \n          <h4 class=\"list-group-item-heading\"><%= videos.title %></h4> \n          <video width=\"320\" height=\"240\" controls preload=\"auto\"\n          codecs=\"avc1.42E01E, mp4a.40.2\"> \n          <source src=\"img/<%= videos.videoName %>\" type=\"video/mp4\" /> \n          </video> \n          <small>Upload by: <%= videos.user.local.email %></small> \n           </div> \n          <% }); %> \n          </div> \n          </div> \n          <% include ../partials/footer %> \n          <% include ../partials/javascript %> \n          </body> \n          </html> \n\n    ```", "```js\n    npm start\n\n    ```", "```js\n      var upload = multer({ \n         dest:'./public/uploads/', \n         limits: {fileSize: 1000000, files:1} \n      }); \n\n```"]