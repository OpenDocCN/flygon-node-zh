["```js\n    npm install strongloop -g\n\n    ```", "```js\n    slc loopback\n\n    ```", "```js\n    slc loopback:model\n\n    ```", "```js\n          Property name: image\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: make\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: description\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: model\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: category\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: year\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n    ```", "```js\n    slc loopback:model\n\n    ```", "```js\n          Property name: name\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: email\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n          Property name: review\n          ? Property type: string\n          ? Required? Yes\n          ? Default value[leave blank for none]:\n\n    ```", "```js\n    { \n      \"name\": \"review\", \n      \"base\": \"PersistedModel\", \n      \"idInjection\": true, \n      \"options\": { \n        \"validateUpsert\": true \n      }, \n      \"properties\": { \n        \"name\": { \n        \"type\": \"string\", \n        \"required\": true \n      }, \n      \"email\": { \n        \"type\": \"string\", \n        \"required\": true \n      }, \n      \"review\": { \n          \"type\": \"string\", \n          \"required\": true \n      } \n    }, \n      \"validations\": [], \n      \"relations\": {}, \n      \"acls\": [], \n      \"methods\": {} \n    } \n\n```", "```js\n    module.exports = function(Review) { \n    }; \n\n```", "```js\n    slc loopback:datasource\n\n    ```", "```js\n    { \n      \"motorcycleDataSource\": { \n        \"host\": \"localhost\", \n        \"port\": 27017, \n        \"database\": \"motorcycle-feedback\", \n        \"password\": \"\", \n        \"name\": \"motorcycleDataSource\", \n        \"user\": \"\", \n        \"connector\": \"mongodb\" \n      } \n    } \n\n```", "```js\n      { \n        \"_meta\": { \n          \"sources\": [ \n            \"loopback/common/models\", \n            \"loopback/server/models\", \n            \"../common/models\", \n            \"./models\" \n          ], \n          \"mixins\": [ \n            \"loopback/common/mixins\", \n            \"loopback/server/mixins\", \n            \"../common/mixins\", \n            \"./mixins\" \n          ] \n        }, \n        \"motorcycle\": { \n          \"dataSource\": \"motorcycleDataSource\", \n          \"public\": true \n        }, \n        \"review\": { \n          \"dataSource\": \"motorcycleDataSource\", \n          \"public\": true \n        } \n      } \n\n```", "```js\n    npm start \n\n    ```", "```js\n          { \n             \"make\": \"Harley Davidson\", \n             \"image\": \"images/heritage.jpg\", \n             \"model\": \"Heritage Softail\", \n             \"description\": \"An Evolution V-twin Engine!\", \n             \"category\": \"Cruiser\", \n             \"year\": \"1986\" \n          } \n\n    ```", "```js\n          { \n              \"name\": \"motorcycle\", \n              \"base\": \"PersistedModel\", \n              \"idInjection\": true, \n              \"options\": { \n                  \"validateUpsert\": true \n              }, \n              \"properties\": { \n                \"image\": { \n                   \"type\": \"string\", \n                   \"required\": true \n                }, \n                \"make\": { \n                  \"type\": \"string\", \n                  \"required\": true \n                }, \n                \"description\": { \n                   \"type\": \"string\", \n                   \"required\": true \n                }, \n                \"model\": { \n                  \"type\": \"string\", \n                  \"required\": true \n                }, \n                \"category\": { \n                  \"type\": \"string\", \n                  \"required\": true \n                }, \n                \"year\": { \n                  \"type\": \"string\", \n                  \"required\": true \n                } \n              }, \n              \"validations\": [], \n              \"relations\": { \n                  \"review\": { \n                    \"type\": \"hasMany\", \n                    \"model\": \"review\", \n                    \"foreignKey\": \"ObjectId\"\n     } \n                }, \n                \"acls\": [], \n                \"methods\": {} \n          }\n\n    ```", "```js\n    npm start\n\n    ```", "```js\n      module.exports = function(app) { \n          // automigrate for models, every time the app will running,\n           db will be replaced with this data. \n         app.dataSources.motorcycleDataSource.automigrate('motorcycle',\n          function(err) { \n          if (err) throw err; \n          // Simple function to create content \n            app.models.Motorcycle.create( \n              [ \n                { \n                  \"make\": \"Harley Davidson\", \n                  \"image\": \"images/heritage.jpg\", \n                  \"model\": \"Heritage Softail\", \n                  \"description\": \"An Evolution V-twin Engine!\", \n                  \"category\": \"Cruiser\", \n                  \"year\": \"1986\", \n                  \"id\": \"57337088fabe969f2dd4078e\" \n                } \n              ], function(err, motorcycles) { \n                  if (err) throw err; \n                 // Show a success msg on terminal \n                   console.log('Created Motorcycle Model: \\n',\n                    motorcycles); \n                  }); \n                }); \n                app.dataSources.motorcycleDataSource.automigrate\n                 ('review', function(err) { \n                if (err) throw err; \n                // Simple function to create content \n                app.models.Review.create( \n                  [ \n                    { \n                      \"name\": \"Jax Teller\", \n                      \"email\": \"jax@soa.com\", \n                      \"id\": \"57337b82e630a9152ed6554d\", \n                      \"review\": \"I love the Engine and sound\", \n                      \"ObjectId\": \"57337088fabe969f2dd4078e\" \n                    }, \n                    { \n                      \"name\": \"Filip Chibs Telford\", \n                      \"email\": \"chibs@soa.com\", \n                      \"review\": \"Emblematic motorcycle of the world\", \n                      \"id\": \"5733845b00f4a48b2edd54cd\", \n                      \"ObjectId\": \"57337088fabe969f2dd4078e\" \n                    }, \n                    { \n                      \"name\": \"Clay Morrow\", \n                      \"email\": \"clay@soa.com\", \n                      \"review\": \"A classic for the eighties, i love\n                        the engine sound\", \n                      \"id\": \"5733845b00f4a48b2edd54ef\", \n                      \"ObjectId\": \"57337088fabe969f2dd4078e\" \n                    } \n                  ], function(err, reviews) { \n                  if (err) throw err; \n                  // Show a success msg on terminal \n                   console.log('Created Review Model: \\n', reviews); \n                  }); \n                }); \n              };  \n\n```", "```js\n{\n started: \"2016-05-15T15:20:24.779Z\",\n uptime: 7.017\n}\n\n```", "```js\n          { \n            \"initial:before\": { \n            \"loopback#favicon\": {} \n          }, \n            \"initial\": { \n              ... \n              }, \n              \"helmet#xssFilter\": {}, \n              \"helmet#frameguard\": { \n               ... \n              }, \n               \"helmet#hsts\": { \n                ... \n               }, \n               \"helmet#hidePoweredBy\": {}, \n              \"helmet#ieNoOpen\": {}, \n              \"helmet#noSniff\": {}, \n              \"helmet#noCache\": { \n                ... \n               } \n            }, \n            \"session\": {}, \n            \"auth\": {}, \n            \"parse\": {}, \n            \"routes\": { \n             ... \n              } \n            }, \n            \"files\": { \n               \"loopback#static\": { \n                  \"params\": \"$!../client\" \n               } \n            }, \n            \"final\": { \n              \"loopback#urlNotFound\": {} \n            }, \n             \"final:after\": { \n                \"loopback#errorHandler\": {} \n            } \n          } \n\n    ```", "```js\n          <!DOCTYPE html> \n          <html> \n          <head><title>Motorcycle Customer feedback</title></head> \n          <link rel='stylesheet' href='https://cdnjs.cloudflare.com/\n           ajax/lib/twitter-bootstrap/4.0.0-alpha/css/bootstrap.min.css'> \n          <style> \n            body { \n              padding-top: 5rem; \n            } \n            .starter-template { \n              padding: 3rem 1.5rem; \n              text-align: center; \n            } \n          </style> \n            <body> \n              <nav class=\"navbar navbar-fixed-top navbar-dark bg-inverse\"> \n              <div class=\"container\"> \n                <a class=\"navbar-brand\" href=\"#\">Custumer Feedback</a> \n                <ul class=\"nav navbar-nav\"> \n                  <li class=\"nav-item active\"> \n                    <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">\n                     (current)</span></a> \n                  </li> \n                </ul> \n              </div> \n              </nav> \n              <div class=\"container\"> \n                <!-- This element's contents will be replaced with \n                  your component. --> \n              <div id=\"title\"> \n                <div class=\"starter-template\"> \n                  <h1>Motorcycle Feedback</h1> \n                  <p class=\"lead\">Add your comments about this model.</p> \n                </div> \n              </div> \n              <div class=\"row\"> \n                <div class=\"col-lg-4\"> \n                  <div id=\"motorcycle\"></div> \n                </div> \n                <div class=\"col-lg-8\"> \n                  <div id=\"content\"></div> \n                </div> \n              </div> \n            </div> \n              <!-- Scripts at bottom --> \n              <script src='https://cdnjs.cloudflare.com/ajax/libs\n                /jquery/2.2.1/jquery.min.js'></script> \n              <script src='https://cdnjs.cloudflare.com/ajax/libs\n               /twitter-bootstrap/4.0.0-alpha/js/bootstrap.min.js'></script> \n              <script src=\"https://cdnjs.cloudflare.com/ajax/libs/\n               babel-core/5.8.24/browser.js\"></script> \n              <script src=\"https://cdnjs.cloudflare.com/ajax/libs\n                /react/15.0.1/react.js\"></script> \n              <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react\n                /15.0.1/react-dom.js\"></script> \n              <script type=\"text/babel\" src=\"img/reviews.js\"> </script> \n              <script type=\"text/babel\" src=\"img/motorcycles.js\"> </script> \n          </body> \n          </html> \n\n    ```", "```js\n          var Review = React.createClass({ \n\n                   render: function() { \n                         return ( \n                             <div className=\"list-group-item\"> \n                               <small className=\"text-muted pull-right\">\n                                  {this.props.email}\n                               </small> \n                               <h4 className=\"list-group-item-heading\"> \n                                     {this.props.name} \n                               </h4> \n                               <p className=\"list-group-item-text\">\n                                 {this.props.review}\n                               </p> \n                             </div> \n                         ); \n                     } \n                   });\n\n    ```", "```js\n         var ReviewBox = React.createClass({ \n               loadReviewsFromServer: function() { \n                     $.ajax({ \n                           url: this.props.api, \n                           type: 'GET', \n                           dataType: 'json', \n                           cache: false, \n                           success: function(data) { \n                                 console.log(data); \n                                 this.setState({data: data}); \n                           }.bind(this), \n                           error: function(xhr, status, err) { \n                                 console.error(this.props.api, status,\n                                   err.toString()); \n                           }.bind(this) \n                     }); \n               }, \n               handleReviewSubmit: function(review) { \n                     var reviews = this.state.data; \n                     // Don' use Date.now() on production, this is here\n                        just for the example. \n                     review.id = Date.now().toString(); \n                     var newReviews = reviews.concat([review]); \n                      this.setState({data: newReviews}); \n                     console.log(review); \n                     $.ajax({ \n                           url: this.props.api, \n                           dataType: 'json', \n                           type: 'POST', \n                          data: review, \n                           success: function(data) { \n                                 console.log(data); \n                           }.bind(this), \n                           error: function(xhr, status, err) { \n                                 this.setState({data: reviews}); \n                                 console.error(this.props.api, status,\n                                   err.toString()); \n                           }.bind(this) \n                     }); \n               }, \n               getInitialState: function() { \n                     return { \n                           data: [] \n                     }; \n               }, \n               componentDidMount: function() { \n                     this.loadReviewsFromServer(); \n               }, \n               render: function() { \n                     return ( \n                           <div> \n                                 <ReviewList data={this.state.data} /> \n                                 <ReviewForm onReviewSubmit=\n                                  {this.handleReviewSubmit} /> \n                           </div> \n                      ); \n              } \n         });\n\n    ```", "```js\n          var ReviewList = React.createClass({ \n                 render: function() { \n                   var reviewNodes = this.props.data.map(function(review)\n                   { \n                     return ( \n                         <Review name={review.name} review={review.review}\n                           email={review.email} key={review.id}> </Review> \n                     ); \n                   }); \n                   return ( \n                       <div className=\"list-group\"> \n                               {reviewNodes} \n                       </div> \n                   ); \n                 } \n          });\n\n    ```", "```js\n          var ReviewForm = React.createClass({ \n              getInitialState: function() { \n                   return {name: '', email: '', review: '', model: ''}; \n              }, \n              handleAuthorChange: function(e) { \n                  this.setState({name: e.target.value}); \n              }, \n              handleEmailChange: function(e) { \n                   this.setState({email: e.target.value}); \n              }, \n              handleTextChange: function(e) { \n                   this.setState({review: e.target.value}); \n              }, \n              handleSubmit: function(e) { \n                   e.preventDefault(); \n                   var name = this.state.name.trim(); \n                   var email = this.state.email.trim(); \n                   var review = this.state.review.trim(); \n                   var model = '57337088fabe969f2dd4078e';\n                    if (!review || !name) { \n                        return; \n                    }\n                    this.props.onReviewSubmit({name: name, email:email,\n                      model:model, review: review}); \n                    this.setState({name: '', email: '', review: '',\n                      model: ''}); \n               }, \n               render: function() { \n                   return ( \n                     <div> \n                       <hr/> \n                         <form onSubmit={this.handleSubmit}> \n                           <div className=\"row\"> \n                             <div className=\"col-lg-6\"> \n                               <fieldset className=\"form-group\"> \n                                 <label for=\"InputName\">Name</label> \n                                 <input type=\"review\" className=\n                                   \"form-control\" id=\"InputName\"\n                                    placeholder=\"Name\" value=\n                                    {this.state.name} \n                                  onChange={this.handleAuthorChange} /> \n                                </fieldset> \n                              </div> \n                              <div className=\"col-lg-6\"> \n                                <fieldset className=\"form-group\"> \n                                  <label for=\"InputEmail\">Email</label> \n                                  <input type=\"review\" className=\"form-control\"\n                                    id=\"InputEmail\" placeholder=\"Email\" value=\n                                    {this.state.email} \n                                  onChange={this.handleEmailChange}/> \n                                </fieldset> \n                              </div> \n                            </div> \n                            <fieldset className=\"form-group\"> \n                            <label for=\"TextareaFeedback\">Feedback</label> \n                            <textarea className=\"form-control\"\n                             id=\"TextareaFeedback\" rows=\"3\" value=\n                             {this.state.review} onChange=\n                             {this.handleTextChange} /> \n                            </fieldset> \n\n                            <button type=\"submit\" className=\n                              \"btn btn-primary\" value=\"Post\">\n                                 Submit\n                            </button> \n                         </form> \n                     </div> \n                     ); \n                } \n          });\n\n    ```", "```js\n          ReactDOM.render( \n             <ReviewBox api=\"/api/reviews\"/>,\n               document.getElementById('content') \n          ); \n\n    ```", "```js\n      render: function() { \n         return ( \n            <div> \n              <ReviewList data={this.state.data} /> \n              <ReviewForm onCommentSubmit={this.handleReviewSubmit} /> \n            </div> \n        ); \n      } \n\n```", "```js\n          // create a interface component for motorcycle item \n          var Motorcycle = React.createClass({ \n            render: function() { \n                return ( \n                  <div className=\"card\"> \n                    <img className=\"card-img-top\" src={this.props.image}\n                      alt={this.props.make} width=\"100%\"/> \n                    <div className=\"card-block\"> \n                      <h4 className=\"card-title\">{this.props.make}</h4> \n                      <p className=\"card-text\">{this.props.description}</p> \n                    </div> \n                    <ul className=\"list-group list-group-flush\"> \n                      <li className=\"list-group-item\"><strong>Model:\n                        </strong> {this.props.model}</li> \n                      <li className=\"list-group-item\"><strong>Category:\n                        </strong> {this.props.category}</li> \n                      <li className=\"list-group-item\"><strong>Year:\n                        </strong> {this.props.year}</li> \n                    </ul> \n                  </div> \n                ); \n            } \n          });\n\n    ```", "```js\n          // create a motorcycle box component \n          var MotorcycleBox = React.createClass({ \n             loadMotorcyclesFromServer: function() { \n                 $.ajax({ \n                   url: this.props.api, \n                   type: 'GET', \n                   dataType: 'json', \n                   cache: false, \n                   success: function(data) { \n                     console.log(data); \n                     this.setState({data: data}); \n                   }\n                   .bind(this), \n                   error: function(xhr, status, err) { \n                     console.error(this.props.api, status,\n                     err.toString()); \n                   }\n                   .bind(this) \n                 }); \n             }, \n             getInitialState: function() { \n                 return { \n                   data: [] \n                 }; \n             }, \n             componentDidMount: function() { \n                 this.loadMotorcyclesFromServer(); \n             }, \n             render: function() { \n               return ( \n                 <div> \n                  <MotorcycleList data={this.state.data} /> \n                </div> \n              ); \n            }\n          });\n\n    ```", "```js\n          // create a motorcycle list component \n          var MotorcycleList = React.createClass({ \n            render: function() { \n              var motorcycleNodes = this.props.data.map(function(motorcycle)\n              { \n                console.log(motorcycle); \n                return ( \n                  <Motorcycle image={motorcycle.image} make=\n                    {motorcycle.make} model={motorcycle.model} description=\n                    {motorcycle.description} category={motorcycle.category}\n                    year={motorcycle.year} key={motorcycle.id}>\n                  </Motorcycle> \n                ); \n              }); \n              return ( \n                <div className=\"motorcycles\"> \n                  {motorcycleNodes} \n                </div> \n              ); \n            }\n          }); \n\n    ```", "```js\n          ReactDOM.render( \n             <MotorcycleBox api=\"/api/motorcycles\"/>, \n               document.getElementById('motorcycle') \n          ); \n\n    ```", "```js\n    npm start\n\n    ```", "```js\n      { \n         count: 4 \n      } \n\n```", "```js\n          module.exports = function(Review) { \n             // Disable endpoint / methods \n             Review.disableRemoteMethod(\"count\", true); \n             Review.disableRemoteMethod(\"exists\", true); \n             Review.disableRemoteMethod(\"findOne\", true); \n             Review.disableRemoteMethod('createChangeStream', true); \n             Review.disableRemoteMethod(\"updateAll\", true); \n          }; \n\n    ```", "```js\n    npm start\n\n    ```"]