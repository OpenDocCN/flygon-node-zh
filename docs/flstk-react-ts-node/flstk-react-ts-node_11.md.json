["```ts\n    console.log(\"hello world\");\n    ```", "```ts\n    node app.js\n    ```", "```ts\n    const fs = require(\"fs\");\n    ```", "```ts\n    fs.writeFile(\"test.txt\", \"Hello World\", () => {\n    \u00a0\u00a0fs.readFile(\"test.txt\", \"utf8\", (err, msg) => {\n    \u00a0\u00a0\u00a0\u00a0console.log(msg);\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    const fs = require(\"fs/promises\");\n    (async function () {\n    \u00a0\u00a0await fs.writeFile(\"test-promise.txt\", \"Hello \u00a0\u00a0\u00a0Promises\");\n    \u00a0\u00a0const readTxt = await fs.readFile(\"test-promise.txt\",\u00a0\u00a0\u00a0\u00a0\"utf-8\");\n    \u00a0\u00a0console.log(readTxt);\n    })();\n    ```", "```ts\n    import fs from \"fs\";\n    ```", "```ts\n    npm init\n    ```", "```ts\n    import http from \"http\";\n    ```", "```ts\n    const server = http.createServer((req, res) => {\n    \u00a0\u00a0console.log(req);\n    \u00a0\u00a0res.end(\"hello world\");\n    });\n    ```", "```ts\n    const port = 8000;\n    server.listen(port, () => {\n    \u00a0\u00a0console.log(`Server started on port ${port}`);\n    });\n    ```", "```ts\n    node server.mjs\n    ```", "```ts\n    const server = http.createServer((req, res) => {\n    \u00a0\u00a0if (req.url === \"/\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"hello world\");\n    \u00a0\u00a0} else if (req.url === \"/a\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"welcome to route a\");\n    \u00a0\u00a0} else if (req.url === \"/b\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"welcome to route b\");\n    \u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"good bye\");\n    \u00a0\u00a0}\n    });\n    ```", "```ts\n    const server = http.createServer((req, res) => {\n    \u00a0\u00a0if (req.url === \"/\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"hello world\");\n    \u00a0\u00a0} else if (req.url === \"/a\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"welcome to route a\");\n    \u00a0\u00a0} else if (req.url === \"/b\") {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"welcome to route b\");\n    \u00a0\u00a0} else if (req.url === \"/c\" && req.method === \"POST\") {\n    \u00a0\u00a0\u00a0\u00a0let body = [];\n    \u00a0\u00a0\u00a0\u00a0req.on(\"data\", (chunk) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body.push(chunk);\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0req.on(\"end\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const params = Buffer.concat(body);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"body\", params.toString());\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res.end(`You submitted these parameters: \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${params.toString()}`);\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0res.end(\"good bye\");\n    \u00a0\u00a0}\n    });\n    ```", "```ts\n    curl --header \"Content-Type: application/json\"\u00a0\u00a0--request POST --data '{\"userid\":\"1\",\"message\":\"hello\"}' \"http://localhost:8000/c\"\n    ```", "```ts\n    nodemon to our entire system. Installing it globally allows all apps to run nodemon without needing to keep installing it. Note that on macOS and Linux, you may need to prefix this command with sudo, which will elevate your rights so that you can install it globally.\n    ```", "```ts\n    package.json \"scripts\" section should look like this now:![Figure 8.18 \u2013 package.json \"scripts\" section\n    ](img/Figure_8.18_B15508.jpg)Figure 8.18 \u2013 package.json \"scripts\" section\n    ```", "```ts\n    npm command, you need to run npm run <file name>. However, for start scripts, we can skip the run sub-command.You should see the app start up as usual.\n    ```", "```ts\nnpm I express -S\n```", "```ts\n    import express from \"express\";\n    const app = express();\n    app.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"Express Node server has loaded!\");\n    });\n    ```", "```ts\n    import express from \"express\";\n    const app = express();\n    app.use((req, res, next) => {\n    \u00a0\u00a0console.log(\"First middleware.\");\n    \u00a0\u00a0next();\n    });\n    app.use((req, res, next) => {\n    \u00a0\u00a0res.send(\"Hello world. I am custom middleware.\");\n    });\n    app.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"Express Node server has loaded!\");\n    });\n    ```", "```ts\n    import express from \"express\";\n    const router = express.Router();\n    ```", "```ts\n    const app = express();\n    app.use((req, res, next) => {\n    \u00a0\u00a0console.log(\"First middleware.\");\n    \u00a0\u00a0next();\n    });\n    app.use((req, res, next) => {\n    \u00a0\u00a0res.send(\"Hello world. I am custom middleware.\");\n    });\n    app.use(router);\n    ```", "```ts\n    router.get(\"/a\", (req, res, next) => {\n    \u00a0\u00a0res.send(\"Hello this is route a\");\n    });\n    router.post(\"/c\", (req, res, next) => {\n    \u00a0\u00a0res.send(\"Hello this is route c\");\n    });\n    ```", "```ts\n    app.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"Express Node server has loaded!\");\n    });\n    ```", "```ts\n    import express from \"express\";\n    /c route handler so that its text message shows the value passed in the message field:\n\n    ```", "```ts\n\n    ```", "```ts\n    import express from \"express\";\n    import bodyParser from \"body-parser\";\n    const router = express.Router();\n    const app = express();\n    app.use(bodyParser.json());\n    app.use((req, res, next) => {\n    \u00a0\u00a0console.log(\"First middleware.\");\n    \u00a0\u00a0throw new Error(\"A failure occurred!\");\n    });\n    ```", "```ts\n    app.use(router);\n    router.get(\"/a\", (req, res, next) => {\n    \u00a0\u00a0res.send(\"Hello this is route a\");\n    });\n    router.post(\"/c\", (req, res, next) => {\n    \u00a0\u00a0res.send(`Hello this is route c. Message is ${req.body.\u00a0\u00a0\u00a0message}`);\n    });\n    app.use((err, req, res, next) => {\n    \u00a0\u00a0res.status(500).send(err.message);\n    });\n    ```", "```ts\n    app.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"Express Node server has loaded!\");\n    });\n    ```", "```ts\n    import express from \"express\";\n    import bodyParser from \"body-parser\";\n    const router = express.Router();\n    const app = express();\n    app.use(bodyParser.json());\n    app.use((req, res, next) => {\n    \u00a0\u00a0console.log(\"First middleware.\");\n    \u00a0\u00a0/api/v1/users path. This type of pathing is fairly standard for web APIs. It indicates the version and a related container of data to query \u2013 in this case, users. For example purposes, we are using a hardcoded array of users and finding only one with a matching ID. Since id is a number and anything coming from req.query is a string, we are using == as opposed to ===. If you load the browser to the URI, you should see this:![Figure 8.28 \u2013 User GET request\n    ](img/Figure_8.28_B15508.jpg)Figure 8.28 \u2013 User GET requestAs you can see, our second user, `jon`, is returned.\n    ```", "```ts\n    router.post(\"/api/v1/groups\", (req, res, next) => {\n    \u00a0\u00a0const groups = [\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: 1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0groupname: \"Admins\",\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: 2,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0groupname: \"Users\",\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: 3,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0groupname: \"Employees\",\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0];\n    \u00a0\u00a0const group = groups.find((grp) => grp.id == req.body.\u00a0\u00a0\u00a0groupid);\n    \u00a0\u00a0res.send(`Group ${group.groupname}`);\n    });\n    ```", "```ts\napp.use((err, req, res, next) => {\n\u00a0\u00a0res.status(500).send(err.message);\n});\napp.listen({ port: 8000 }, () => {\n\u00a0\u00a0console.log(\"Express Node server has loaded!\");\n});\n```"]