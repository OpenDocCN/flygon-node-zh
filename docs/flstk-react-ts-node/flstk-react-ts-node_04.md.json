["```ts\nif (true) {\n\u00a0\u00a0\u00a0\u00a0var val1 = 1;\n}\nfunction go() {\n\u00a0\u00a0\u00a0\u00a0var val2 = 2;\n}\nconsole.log(val1);\nconsole.log(val2);\n```", "```ts\nnamespace constants {\n\u00a0\u00a0\u00a0\u00a0const val1 = 1;\n\u00a0\u00a0\u00a0\u00a0val1 = 2;\n\u00a0\u00a0\u00a0\u00a0const val2 = [];\n\u00a0\u00a0\u00a0\u00a0val2.push('hello');\n}\n```", "```ts\nnamespace lets {\n\u00a0\u00a0\u00a0\u00a0let val1 = 1;\n\u00a0\u00a0\u00a0\u00a0val1 = 2;\n\u00a0\u00a0\u00a0\u00a0if(true) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let val2 = 3;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0val2 = 3;\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0console.log(val1);\n\u00a0\u00a0\u00a0\u00a0console.log(val2);\n}\n```", "```ts\nfunction MyFunction () {\n\u00a0\u00a0\u00a0\u00a0console.log(this);\n}\n\nMyFunction();\nlet test = new MyFunction();\n```", "```ts\nconst myFunc = (message: string): void => {\n\u00a0\u00a0\u00a0\u00a0console.log(message);\n}\n\nmyFunc('hello');\n```", "```ts\nconst func = () => console.log('func');\nconst func1 = () => ({ name: 'dave' });\nconst func2 = () => {\n\u00a0\u00a0\u00a0\u00a0const val = 20;\n\u00a0\u00a0\u00a0\u00a0return val;\n}\nconsole.log(func());\nconsole.log(func1());\nconsole.log(func2());\n```", "```ts\nclass A {\n\u00a0\u00a0\u00a0\u00a0name: string = 'A';\n\u00a0\u00a0\u00a0\u00a0go() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(this.name);\n\u00a0\u00a0\u00a0\u00a0}\n}\nclass B {\n\u00a0\u00a0\u00a0\u00a0name: string = 'B';\n\u00a0\u00a0\u00a0\u00a0go() {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(this.name);\n\u00a0\u00a0\u00a0\u00a0}\n}\nconst a = new A();\na.go();\nconst b = new B();\nb.go = b.go.bind(a);\nb.go();\n```", "```ts\nconst callerObj = {\n\u00a0\u00a0\u00a0\u00a0name: 'jon'\n}\nfunction checkMyThis(age) {\u00a0\u00a0\u00a0\u00a0\n\u00a0\u00a0\u00a0\u00a0console.log(`What is this ${this}`)\n\u00a0\u00a0\u00a0\u00a0console.log(`Do I have a name? ${this.name}`)\n\u00a0\u00a0\u00a0\u00a0this.age = age;\n\u00a0\u00a0\u00a0\u00a0console.log(`What is my age ${this.age}`);\n}\ncheckMyThis();\ncheckMyThis.call(callerObj, 25);\n```", "```ts\nnode call\n```", "```ts\n    namespace NamespaceA {\n    \u00a0\u00a0\u00a0\u00a0class A {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0aname: string = 'A';\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0class B {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bname: string = 'B';\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const a = new A();\n    \u00a0\u00a0\u00a0\u00a0const b = new B();\n    \u00a0\u00a0\u00a0\u00a0c, which is set using the spread operator, \u2026. After that, we create d from the Object.assign call. Let's try running this code. You'll need to target ES6 since Object.assign is only available on that version of JavaScript. Let's compile and then run with the following commands:\n\n    ```", "```ts\n\n    Once these commands run, you will see the following:\n    ```", "```ts\nnamespace SpreadArray {\n\u00a0\u00a0\u00a0\u00a0const a = [1,2,3];\n\u00a0\u00a0\u00a0\u00a0const b = [4,5,6];\n\u00a0\u00a0\u00a0\u00a0const c = [...a, ...b];\n\u00a0\u00a0\u00a0\u00a0const d = a.concat(b);\n\u00a0\u00a0\u00a0\u00a0console.log('c before', c);\n\u00a0\u00a0\u00a0\u00a0console.log('d before', d);\n\u00a0\u00a0\u00a0\u00a0a.push(10);\n\u00a0\u00a0\u00a0\u00a0console.log('a', a);\n\u00a0\u00a0\u00a0\u00a0console.log('c after', c);\n\u00a0\u00a0\u00a0\u00a0console.log('d after', d);\n}\n```", "```ts\nfunction getEmployee(id) {\n\u00a0\u00a0\u00a0\u00a0return {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: 'John',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0age: 35,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0address: '123 St',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0country: 'United States'\n\u00a0\u00a0\u00a0\u00a0}\n}\nconst { name: fullName, age } = getEmployee(22);\nconsole.log('employee', fullName, age);\n```", "```ts\nfunction getEmployeeWorkInfo(id) {\n\u00a0\u00a0\u00a0\u00a0return [\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'Office St',\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'France'\n\u00a0\u00a0\u00a0\u00a0]\n}\nconst [id, officeAddress] = getEmployeeWorkInfo(33);\nconsole.log('employee', id, officeAddress);\n```", "```ts\nnode destructuring.js \n```", "```ts\nfunction doSomething(a, ...others) {\n\u00a0\u00a0\u00a0\u00a0console.log(a, others, others[others.length - 1]);\n}\ndoSomething(1,2,3,4,5,6,7);\n```", "```ts\nconst items = [\n\u00a0\u00a0\u00a0\u00a0{ name: 'jon', age: 20 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'linda', age: 22 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'jon', age: 40}\n]\nconst jon = items.find((item) => {\n\u00a0\u00a0\u00a0\u00a0return item.name === 'jon'\n});\nconsole.log(jon);\n```", "```ts\ntsc find \u2013target 'es6'\nnode find\n```", "```ts\nconst filterItems = [\n\u00a0\u00a0\u00a0\u00a0{ name: 'jon', age: 20 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'linda', age: 22 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'jon', age: 40}\n]\nconst results = filterItems.filter((item, index) => {\n\u00a0\u00a0\u00a0\u00a0return item.name === 'jon'\n});\nconsole.log(results);\n```", "```ts\nconst employees = [\n\u00a0\u00a0\u00a0\u00a0{ name: 'tim', id: 1 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'cindy', id: 2 },\n\u00a0\u00a0\u00a0\u00a0{ name: 'rob', id: 3 },\n]\nconst elements = employees.map((item, index) => {\n\u00a0\u00a0\u00a0\u00a0return `<div>${item.id} - ${item.name}</div>`;\n});\nconsole.log(elements);\n```", "```ts\nconst allTrucks = [\n\u00a0\u00a0\u00a0\u00a02,5,7,10\n]\nconst initialCapacity = 0;\nconst allTonnage = allTrucks.reduce((totalCapacity,\u00a0\u00a0currentCapacity) => {\n\u00a0\u00a0\u00a0\u00a0totalCapacity = totalCapacity + currentCapacity;\n\n\u00a0\u00a0\u00a0\u00a0return totalCapacity;\n}, initialCapacity);\nconsole.log(allTonnage);\n```", "```ts\nconst widgets = [\n\u00a0\u00a0\u00a0\u00a0{ id: 1, color: 'blue' },\n\u00a0\u00a0\u00a0\u00a0{ id: 2, color: 'yellow' },\n\u00a0\u00a0\u00a0\u00a0{ id: 3, color: 'orange' },\n\u00a0\u00a0\u00a0\u00a0{ id: 4, color: 'blue' },\n]\nconsole.log('some are blue', widgets.some(item => {\n\u00a0\u00a0\u00a0\u00a0return item.color === 'blue';\n}));\nconsole.log('every one is blue', widgets.every(item => {\n\u00a0\u00a0\u00a0\u00a0return item.color === 'blue';\n}));\n```", "```ts\nconst userIds = [\n\u00a0\u00a0\u00a0\u00a01,2,1,3\n]\nconst uniqueIds = new Set(userIds);\nconsole.log(uniqueIds);\nuniqueIds.add(10);\nconsole.log('add 10', uniqueIds);\nconsole.log('has', uniqueIds.has(3));\nconsole.log('size', uniqueIds.size);\nfor (let item of uniqueIds) {\n\u00a0\u00a0\u00a0\u00a0console.log('iterate', item);\n}\n```", "```ts\nconst mappedEmp = new Map();\nmappedEmp.set('linda', { fullName: 'Linda Johnson', id: 1 });\nmappedEmp.set('jim', { fullName: 'Jim Thomson', id: 2 });\nmappedEmp.set('pam', { fullName: 'Pam Dryer', id: 4 });\nconsole.log(mappedEmp);\nconsole.log('get', mappedEmp.get('jim'));\nconsole.log('size', mappedEmp.size);\nfor(let [key, val] of mappedEmp) {\n\u00a0\u00a0\u00a0\u00a0console.log('iterate', key, val);\n}\n```", "```ts\nfunction letMeKnowWhenComplete(size, callback) {\n\u00a0\u00a0\u00a0\u00a0var reducer = 0;\n\u00a0\u00a0\u00a0\u00a0for (var i = 1; i < size; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reducer = Math.sin(reducer * i);\n\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0callback();\n}\nletMeKnowWhenComplete(100000000, function () { console.log('Great it completed.'); });\n```", "```ts\n// 1\nconsole.log('Let's begin.');\n// 2\nsetTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0console.log('I waited and am done now.');\n}, 3000);\n// 3\nconsole.log('Did I finish yet?');\n```", "```ts\nconst myPromise = new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//resolve('I completed successfully');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reject('I failed');\n\u00a0\u00a0\u00a0\u00a0}, 500);\n});\nmyPromise\n.then(done => {\n\u00a0\u00a0\u00a0\u00a0console.log(done);\n})\n.catch(err => {\n\u00a0\u00a0\u00a0\u00a0console.log(err);\n});\n```", "```ts\nasync function delayedResult() {\n\u00a0\u00a0\u00a0\u00a0return new Promise((resolve, reject) => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(() => {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resolve('I completed successfully');\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 500);\n\u00a0\u00a0\u00a0\u00a0});\n}\n(async function execAsyncFunc() {\n\u00a0\u00a0\u00a0\u00a0const result = await delayedResult();\n\u00a0\u00a0\u00a0\u00a0console.log(result);\n})();\n```", "```ts\n    npm i node-fetch\n    ```", "```ts\nconst fetch = require('node-fetch');\n(async function getData() {\n\u00a0\u00a0\u00a0\u00a0const response = await fetch('https://pokeapi.co/api/v2/\u00a0\u00a0\u00a0\u00a0\u00a0pokemon/ditto/');\n\u00a0\u00a0\u00a0\u00a0if(response.ok) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const result = await response.json();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(result);\n\u00a0\u00a0\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log('Failed to get anything');\n\u00a0\u00a0\u00a0\u00a0}\n})();\n```"]