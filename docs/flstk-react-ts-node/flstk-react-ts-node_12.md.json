["```ts\n    npm init\n    ```", "```ts\n    npm i express apollo-server-express @types/express\n    ```", "```ts\n    tsconfig.json setting is strict.\n    ```", "```ts\n    import { gql } from \"apollo-server-express\";\n    ```", "```ts\n    const typeDefs = gql`\n    \u00a0\u00a0type User {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0username: String!\n    \u00a0\u00a0\u00a0\u00a0email: String\n    \u00a0\u00a0}\n    \u00a0\u00a0type Todo {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0title: String!\n    \u00a0\u00a0\u00a0\u00a0description: String\n    \u00a0\u00a0}\n    \u00a0\u00a0type Query {\n    \u00a0\u00a0\u00a0\u00a0getUser(id: ID): User\n    \u00a0\u00a0\u00a0\u00a0getTodos: [Todo!]\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    export default typeDefs;\n    ```", "```ts\n    npm i uuid @types/uuid\n    ```", "```ts\n    import express from \"express\";\n    import { ApolloServer, makeExecutableSchema } from \"apollo-server-express\";\n    import typeDefs from \"./typeDefs\";\n    import resolvers from \"./resolvers\";\n    ```", "```ts\n    const app = express();\n    ```", "```ts\n    const schema = makeExecutableSchema({ typeDefs, resolvers });\n    ```", "```ts\n    const apolloServer = new ApolloServer({\n    \u00a0\u00a0schema,\n    \u00a0\u00a0context: ({ req, res }: any) => ({ req, res }),\n    });\n    apolloServer.applyMiddleware({ app, cors: false });\n    ```", "```ts\n    app.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"GraphQL server ready.\");\n    });\n    ```", "```ts\n    import { IResolvers } from \"apollo-server-express\";\n    import { v4 } from \"uuid\";\n    import { GqlContext } from \"./GqlContext\";\n    interface User {\n    \u00a0\u00a0id: string;\n    \u00a0\u00a0username: string;\n    \u00a0\u00a0description?: string;\n    }\n    interface Todo {\n    \u00a0\u00a0id: string;\n    \u00a0\u00a0title: string;\n    \u00a0\u00a0description?: string;\n    }\n    ```", "```ts\n    const resolvers: IResolvers = {\n    \u00a0\u00a0Query: {\n    \u00a0\u00a0\u00a0\u00a0getUser: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: string;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<User> => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username: \"dave\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0},\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0getTodos: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: null,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<Array<Todo>> => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: \"First todo\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"First todo description\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: \"Second todo\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: \"Second todo description\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: \"Third todo\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0];\n    \u00a0\u00a0\u00a0\u00a0},\n    ```", "```ts\n    \u00a0\u00a0},\n    };\n    export default resolvers;\n    ```", "```ts\n    import { Request, Response } from \"express\";\n    export interface GqlContext {\n    \u00a0\u00a0req: Request;\n    \u00a0\u00a0res: Response;\n    }\n    ```", "```ts\n    js versions of all the ts files.\n    ```", "```ts\n    nodemon server.js\n    ```", "```ts\n    import { v4 } from \"uuid\";\n    export const todos = [\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0title: \"First todo\",\n    \u00a0\u00a0\u00a0\u00a0description: \"First todo description\",\n    \u00a0\u00a0},\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0title: \"Second todo\",\n    \u00a0\u00a0\u00a0\u00a0description: \"Second todo description\",\n    \u00a0\u00a0},\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0title: \"Third todo\",\n    \u00a0\u00a0},\n    ];\n    ```", "```ts\n    import { gql } from \"apollo-server-express\";\n    const typeDefs = gql`\n    \u00a0\u00a0type User {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0username: String!\n    \u00a0\u00a0\u00a0\u00a0email: String\n    \u00a0\u00a0}\n    \u00a0\u00a0type Todo {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0title: String!\n    \u00a0\u00a0\u00a0\u00a0description: String\n    \u00a0\u00a0}\n    \u00a0\u00a0type Query {\n    \u00a0\u00a0\u00a0\u00a0getUser(id: ID): User\n    \u00a0\u00a0\u00a0\u00a0getTodos: [Todo!]\n    \u00a0\u00a0}\n    Mutation, which is where any queries that change data will reside. We also added our new mutation called addTodo.\n    ```", "```ts\n    Mutation: {\n    \u00a0\u00a0\u00a0\u00a0addTodo: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0parent: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: string;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: string;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<Todo> => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0todos.push({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: args.title,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: args.description\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return todos[todos.length - 1];\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0},\n    ```", "```ts\n    import express from \"express\";\n    import { PubSub type. Notice we also get createServer; we'll use that later.\n    ```", "```ts\n    const app = express();\n    const pubsub = new PubSub();\n    ```", "```ts\n    const schema = makeExecutableSchema({ typeDefs, resolvers });\n    const apolloServer = new ApolloServer({\n    \u00a0\u00a0schema,\n    \u00a0\u00a0context: ({ req, res }: any) => ({ req, res, pubsub }),\n    });\n    ```", "```ts\n    apolloServer.applyMiddleware({ app, cors: false });\n    const httpServer = createServer(app);\n    apolloServer.installSubscriptionHandlers(httpServer);\n    httpServer.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"GraphQL server ready.\" + \n    \u00a0\u00a0\u00a0\u00a0apolloServer.graphqlPath);\n    \u00a0\u00a0console.log(\"GraphQL subs server ready.\" +\n    \u00a0\u00a0\u00a0\u00a0apolloServer.subscriptionsPath);\n    });\n    ```", "```ts\n    type Subscription {\n    \u00a0\u00a0\u00a0\u00a0newTodo: Todo!\n    \u00a0\u00a0}\n    ```", "```ts\n    import { IResolvers } from \"apollo-server-express\";\n    import { v4 } from \"uuid\";\n    import { GqlContext } from \"./GqlContext\";\n    import { todos } from \"./db\";\n    interface User {\n    \u00a0\u00a0id: string;\n    \u00a0\u00a0username: string;\n    \u00a0\u00a0email?: string;\n    }\n    interface Todo {\n    \u00a0\u00a0id: string;\n    \u00a0\u00a0title: string;\n    \u00a0\u00a0description?: string;\n    }\n    NEW_TODO constant to act as the name of our new subscription. Subscriptions require a unique label, sort of like a unique key, so that they can be correctly subscribed to and published:\n\n    ```", "```ts\n\n    As you can see, nothing in our query changes, but it's included here for completeness:\n\n    ```", "```ts\n\n    Again, our query remains the same:\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<Todo> => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const newTodo = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: v4(),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: args.title,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0description: args.description,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0todos.push(newTodo);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0publish, which is a function to notify us when we have added a new Todo. Notice the newTodo object is being included in the publish call, so it can be provided to the subscriber later:\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0},\n    };\n    export default resolvers;\n    ```", "```ts\n\n    ```", "```ts\n\n    ```"]