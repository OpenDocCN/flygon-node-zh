["```ts\n    <html lang=\"en\">\n    <head>\n    \u00a0\u00a0<meta charset=\"utf-8\">\n    \u00a0\u00a0<title>Learn React</title>\n    \u00a0\u00a0<link rel=\"stylesheet\" href=\"core.css\">\n    </head>\n    <body>\t\n    <label>Enter your name</label>\n    <input id=\"userName\" />\n    <p id=\"welcomeMsg\"></p>\n    \u00a0\u00a0\t<script src=\"img/script.js\"></script>\n    </body>\n    </html>\n    ```", "```ts\n    label {\n    \u00a0\u00a0\u00a0\u00a0color: blue;\n    }\n    p {\n    \u00a0\u00a0\u00a0\u00a0font-size: 2rem;\n    }\n    ```", "```ts\n    const inputEl = document.querySelector(\"#userName\");\n    console.log(\"input\", doesnotexist);\n    ```", "```ts\n    const inputEl = document.querySelector(\"#userName\");\n    console.log(\"input\", inputEl);\n    ```", "```ts\n    const inputEl = document.querySelector(\"#userName\");\n    console.log(\"input\", inputEl);\n    const parEl = document.querySelector(\"#welcomeMsg\");\n    inputEl.addEventListener(\"change\", (e) => {\n    \u00a0\u00a0\u00a0\u00a0parEl.innerHTML = \"Welcome \" + e.target.value;\n    });\n    ```", "```ts\n    Chap6 called ejected-app.\n    ```", "```ts\n    npm run eject\n    ```", "```ts\n    git clone https://github.com/facebook/react.git\n    ```", "```ts\n    git checkout <branch-name>\n    ```", "```ts\n    git add <file name>\n    ```", "```ts\n    git commit -m \"My change to xyz\"\n    ```", "```ts\n    git push origin <branch name>\n    ```", "```ts\n    test. Additionally, this test script is actually running our tests in a:\n    ```", "```ts\nimport React from 'react';\nimport { render } from '@testing-library/react';\nimport App from './App';\ntest('renders learn react link', () => {\n\u00a0\u00a0const { getByText } = render(<App />);\n\u00a0\u00a0const linkElement = getByText(/learn react/i);\n\u00a0\u00a0expect(linkElement).toBeInTheDocument();\n});\n```", "```ts\n    function App() {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<p>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Edit <code>src/App.tsx</code> and save to \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0reload.\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<a\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"App-link\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0href=\"https://reactjs.org\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0target=\"_blank\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rel=\"noopener noreferrer\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0React in Learn React.\n    ```", "```ts\n    import React, { useState } from \"react\";\n    const DisplayText = () => {\n    \u00a0\u00a0\u00a0\u00a0const [txt, setTxt] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const [msg, setMsg] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const onChangeTxt = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>)\n    \u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTxt(e.target.value);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const onClickShowMsg = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setMsg(`Welcome to React testing, ${txt}`);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>Enter your name</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input data-testid=\"user-input\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={txt} onChange={onChangeTxt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button data-testid=\"input-submit\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickShowMsg}>Show \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Message</button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label data-testid=\"final-msg\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>{msg}</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</form>\n    \u00a0\u00a0\u00a0\u00a0)\n    }\n    export default DisplayText;\n    ```", "```ts\n    \"types\": [\"node\", \"jest\"]\n    ```", "```ts\n    import React from 'react';\n    import { render, fireEvent } from '@testing-library/react';\n    import DisplayText from './DisplayText';\n    import \"@testing-library/jest-dom/extend-expect\";\n    describe(\"Test DisplayText\", () => {\n    \u00a0\u00a0\u00a0\u00a0it(\"renders without crashing\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { baseElement } = render(<DisplayText />);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(baseElement).toBeInTheDocument();\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0it(\"receives input text\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const testuser = \"testuser\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { getByTestId } = render(<DisplayText />);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const input = getByTestId(\"user-input\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fireEvent.change(input, { target: { value: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0testuser } });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(input).toBeInTheDocument();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(input).toHaveValue(testuser);\n    \u00a0\u00a0\u00a0\u00a0})\n    });\n    ```", "```ts\n    it(\"receive input text\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const username = \"testuser\";\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { getByTestId } = render(<DisplayText />);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const input = getByTestId(\"user-input\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fireEvent.change(input, { target: { value: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username } });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(input).toBeInTheDocument();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(input).toHaveValue(username);\n    \u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    it(\"shows welcome message\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const testuser = \"testuser\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const msg = `Welcome to React testing, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${testuser}`;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { getByTestId } = render(<DisplayText />);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const input = getByTestId(\"user-input\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const label = getByTestId(\"final-msg\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fireEvent.change(input, { target: { value: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0testuser } });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const btn = getByTestId(\"input-submit\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fireEvent.click(btn);\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(label).toBeInTheDocument();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(label.innerHTML).toBe(msg);\n    \u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    it(\"matches snapshot\", () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const { baseElement } = render(<DisplayText />);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0expect(baseElement).toMatchSnapshot();\n    \u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n        // Jest Snapshot v1, https://goo.gl/fbAQLP\n        exports[`Test DisplayText matches snapshot 1`] = `\n        <body>\n        \u00a0\u00a0<div>\n        \u00a0\u00a0\u00a0\u00a0<form>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Enter your name\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</label>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-testid=\"user-input\"\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value=\"\"\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-testid=\"input-submit\"\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Show Message\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data-testid=\"final-msg\"\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n        \u00a0\u00a0\u00a0\u00a0</form>\n        \u00a0\u00a0</div>\n        </body>\n        `;\n        ```", "```ts\n    const DisplayText = () => {\n    \u00a0\u00a0\u00a0\u00a0const [txt, setTxt] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const [msg, setMsg] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const onChangeTxt = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTxt(e.target.value);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const onClickShowMsg = (e: \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0React.MouseEvent<HTMLButtonElement, MouseEvent>) =>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setMsg(`Welcome to React testing, ${txt}`);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>Enter your name</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input data-testid=\"user-input\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={txt} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeTxt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button data-testid=\"input-submit\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickShowMsg}>Show \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Message</button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label data-testid=\"final-msg\" >{msg}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0DisplayText component UI? In this case, we can force a snapshot update by entering the u character under the w character. If this does not work for you, just stop and restart your test. This is what the Watch Usage list looks like:![Figure 6.14 \u2013 Watch Usage list\n    ](img/Figure_6.14_B15508.jpg)Figure 6.14 \u2013 Watch Usage list\n    ```", "```ts\n    function App() {\n    \u00a0\u00a0const getUserFullname = async (username: string):\u00a0\u00a0\u00a0Promise<string> => {\n    \u00a0\u00a0\u00a0\u00a0getUserFullname and then passing that as a property to our DisplayText component. As you can see, it is based on a network call to the web API of JsonPlaceholder. It calls into the users collection and then it filters the collection using the find array function. The result will get a user's full name from their username by calling userByName.name.\n    ```", "```ts\n    import React, { useState, FC } from \"react\";\n    DisplayTextProps to house our getUserFullname function. This function is being passed in as a prop from our App component. And then we use that function within the onClickShowMsg event handler to show the welcome message with the user's full name:\n\n    ```", "```ts\n\n    The rest of the code is the same but is shown for completeness. So then, now if we run our app, we should see something like this:\n    ```", "```ts\n    import React from 'react';\n    import { render, fireEvent, cleanup, wait from @testing-library/react. This is to handle asynchronous calls within our test items. For example, getUserFullname is an asynchronous call and so we need to await it. But if we do not await it, our test will fail because it will not have waited for the call to finish before moving to the next step: \n\n    ```", "```ts\n        \u00a0\u00a0\u00a0\u00a0\u00a0it(\"renders without crashing\", () => {\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const username = \"testuser\";\n        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getUserFullname function and pass it as a property to DisplayText. They don't otherwise use it, but it's still needed since it's a required property of DisplayText.\n        ```", "```ts\n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0it(\"shows welcome message\", async () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const username = \"testuser\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getUserFullname function provides the user's fullname and that is fed into the welcome message that's shown in our label. In order to test that, we do an assertion with expect and toBe. Additionally, notice the await wait call just above toBe. This call must run first because our getUserFullname function is an async function and needs therefore to be awaited in order to get its results.\n    ```", "```ts\n    import React, { useState, FC } from \"react\";\n    interface DisplayTextProps {\n    \u00a0\u00a0\u00a0\u00a0getUserFullname: (username: string) =>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Promise<string>;\n    }\n    const DisplayText: FC<DisplayTextProps> = ({ getUserFullname })\n    \u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0const [txt, setTxt] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const [msg, setMsg] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const [todos, setTodos] = useState<Array<JSX.\u00a0\u00a0\u00a0\u00a0\u00a0Element>>();\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0const onChangeTxt = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTxt(e.target.value);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0const onClickShowMsg = async (e: \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0React.MouseEvent<HTMLButtonElement, MouseEvent>) => \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setMsg(`Welcome to React testing, ${await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getUserFullname(txt)}`);\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setUsersTodos();\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0}\u00a0\u00a0\u00a0\n    ```", "```ts\n    const setUsersTodos = async () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const usersResponse = await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch('https://jsonplaceholder.typicode.com/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0users');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(usersResponse.ok) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const users = await usersResponse.json();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const userByName = users.find((usr: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return usr.username.toLowerCase() === \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0txt;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"user by username\", userByName);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todosResponse = await\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch('https://jsonplaceholder.typicode.com/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0todos');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(todosResponse.ok) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todos = await todosResponse.json();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const usersTodos = todos.filter((todo:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return todo.userId === userByName.id;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todoList = usersTodos.map((todo: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <li key={todo.id}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{todo.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTodos(todoList);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"user todos\", usersTodos);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>Enter your name</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input data-testid=\"user-input\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={txt} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeTxt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button data-testid=\"input-submit\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickShowMsg}>Show Message</\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label data-testid=\"final-msg\" >{msg}</\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bret has any todos). Note that the text that you see is *lorem ipsum*. It is just placeholder text. It is coming straight from the JSONPlaceholder API:\n    ```", "```ts\n    import React, { useState, FC } from \"react\";\n    import UserTodos from \"./UserTodos\";\n    interface DisplayTextProps {\n    \u00a0\u00a0\u00a0\u00a0getUserFullname: (username: string) =>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Promise<string>;\n    }\n    const DisplayText: FC<DisplayTextProps> = ({ getUserFullname }) => {\n    \u00a0\u00a0\u00a0\u00a0const [txt, setTxt] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0const [msg, setMsg] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0todoControl. The type of this state is the type of our new UserTodos component, which we'll show later. We've gotten this type by using the utility type ReturnType. As you can see, it is a simple way of creating a type definition by using an object: \n\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>Enter your name</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input data-testid=\"user-input\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={txt} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeTxt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button data-testid=\"input-submit\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickShowMsg}>Show Message</\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label data-testid=\"final-msg\" >{msg}</\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0todoControl gets displayed with our UI.\n    ```", "```ts\n\n    ```", "```ts\n    import React, { FC, useState, useEffect } from 'react';\n    interface UserTodosProps {\n    \u00a0\u00a0\u00a0\u00a0username: string;\n    }\n    ```", "```ts\n    const UserTodos: FC<UserTodosProps> = ({ username }) => {\n    \u00a0\u00a0\u00a0\u00a0const [todos, setTodos] = useState<Array<JSX.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Element>>();\n    \u00a0\u00a0\u00a0\u00a0const setUsersTodos = async () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const usersResponse = await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch('https://jsonplaceholder.typicode.com/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0users');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(usersResponse) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const users = await usersResponse.json();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const userByName = users.find((usr: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return usr.username.toLowerCase() === \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"user by username\", userByName);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todosResponse = await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch('https://jsonplaceholder.typicode.com/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0todos');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(userByName && todosResponse) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todos = await todosResponse.json();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const usersTodos = todos.filter((todo: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return todo.userId === userByName.id;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const todoList = usersTodos.map((todo: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <li key={todo.id}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{todo.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTodos(todoList);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"user todos\", usersTodos);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(username) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setUsersTodos();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}, [username]);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0return <ul style={{marginTop: '1rem', listStyleType: \n    \u00a0\u00a0\u00a0\u00a0\u00a0'none'}}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{todos}\n    \u00a0\u00a0\u00a0\u00a0</ul>;\n    }\n    export default UserTodos;\n    ```", "```ts\n    import React, { ReactElement } from 'react';\n    export default (): ReactElement => {\n    \u00a0\u00a0\u00a0\u00a0return <></>;\n    \u00a0\u00a0};\n    ```", "```ts\n    import React from 'react';\n    import { render, fireEvent, cleanup, wait } from '@testing-library/react';\n    import DisplayText from './DisplayText';\n    import \"@testing-library/jest-dom/extend-expect\";\n    jest.mock(\"./UserTodos\");\n    afterEach(cleanup);\n    describe(\"Test DisplayText\", () => {\n    \u00a0\u00a0\u00a0\u00a0const userFullName = \"John Tester\";\n\n    \u00a0\u00a0\u00a0\u00a0const getUserFullnameMock = (username: string): \n    \u00a0\u00a0\u00a0\u00a0[Promise<string>, jest.Mock<Promise<string>, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0[string]>] => {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const promise = new Promise<string>((res, rej) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0res(userFullName);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const getUserFullname = jest.fn(async (username: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Promise<string> => {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return promise;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return [promise, getUserFullname];\n    \u00a0\u00a0\u00a0\u00a0}\n    ```"]