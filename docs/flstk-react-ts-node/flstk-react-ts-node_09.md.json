["```ts\n    create-react-app redux-sample --template typescript\n    ```", "```ts\n    npm i redux react-redux @types/redux @types/react-redux\n    ```", "```ts\n    import { combineReducers } from \"redux\";\n    export const rootReducer = combineReducers({\n    });\n    export type AppState = ReturnType<typeof rootReducer>;\n    ```", "```ts\n    import { createStore } from \"redux\";\n    import { rootReducer } from \"./AppState\";\n    const configureStore = () => {\n    \u00a0\u00a0return createStore(rootReducer, {});\n    };\n    export default configureStore;\n    ```", "```ts\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import './index.css';\n    import App from './App';\n    import { Provider } from \"react-redux\";\n    import configureStore from \"./store/configureStore\";\n    import * as serviceWorker from './serviceWorker';\n    ReactDOM.render(\n    \u00a0\u00a0<React.StrictMode>\n    \u00a0\u00a0\u00a0\u00a0<Provider store={configureStore()}>\n    \u00a0\u00a0\u00a0\u00a0<App />\n    \u00a0\u00a0\u00a0\u00a0</Provider>\n    \u00a0\u00a0</React.StrictMode>,\n    \u00a0\u00a0document.getElementById('root')\n    );\n    ```", "```ts\n    // If you want your app to work offline and load faster, \n    \u00a0\u00a0// you can change\n    // unregister() to register() below. Note this comes with \n    \u00a0\u00a0// some pitfalls.\n    // Learn more about service workers: \n    \u00a0\u00a0// https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n    ```", "```ts\n    export const USER_TYPE = \"USER_TYPE\";\n    ```", "```ts\n    export interface User {\n    \u00a0\u00a0\u00a0\u00a0id: string;\n    \u00a0\u00a0\u00a0\u00a0username: string;\n    \u00a0\u00a0\u00a0\u00a0email: string;\n    \u00a0\u00a0\u00a0\u00a0city: string;\n    }\n    ```", "```ts\n    export interface UserAction {\n    \u00a0\u00a0\u00a0\u00a0type: string;\n    \u00a0\u00a0\u00a0\u00a0payload: User | null;\n    }\n    ```", "```ts\n    export const UserReducer = ( state: User | null = null, action: \n    \u00a0\u00a0UserAction): User | null => {\n    \u00a0\u00a0\u00a0\u00a0switch(action.type) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case USER_TYPE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"user reducer\", action.payload);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return action.payload;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return state;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```ts\n    import { combineReducers } from \"redux\";\n    import { UserReducer } from \"./UserReducer\";\n    export const rootReducer = combineReducers({\n    \u00a0\u00a0user, which is updated by UserReducer. If we had more reducers, we would simply give them a name and add them below user with their reducer, and the combineReducers Redux function would combine all of them into a single aggregate rootReducer.\n    ```", "```ts\n    import React, { useState } from 'react';\n    import ContextTester from './ContextTester';\n    import './App.css';\n    function App() {\n    \u00a0\u00a0const [userid, setUserid] = useState(0);\n    \u00a0\u00a0const onChangeUserId = (e: React.\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>)\n    \u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"userid\", e.target.value);\n    \u00a0\u00a0\u00a0\u00a0setUserid(e.target.value ? Number(e.target.value) : \u00a0\u00a0\u00a0\u00a0\u00a00);\n    \u00a0\u00a0}\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>user id</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={userid} onChange={onChangeUserId} />\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    }\n    export default App;\n    ```", "```ts\n    function App() {\n    \u00a0\u00a0const [userid, setUserid] = useState(0);\n    dispatch. We get an instance of dispatch with the useDispatch Hook. dispatch is a Redux function that sends our action data to Redux. Redux then sends the action to each of our reducers for processing. Then the reducer that recognizes the action type accepts it as its state payload:\n\n    ```", "```ts\n    \u00a0\u00a0}\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>user id</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={userid} onChange={onChangeUserId} />\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    }\n    ```", "```ts\n\n    ```", "```ts\n    import React from 'react';\n    import { AppState } from './store/AppState';\n    import { useSelector } from 'react-redux';\n    const UserDisplay = () => {\n    \u00a0\u00a0\u00a0\u00a0useSelector Hook gets the specific user reducer. It takes a function as a parameter and this function takes the entire aggregated reducer state and only returns the user reducer. Also in this component, we are displaying the properties of our found user but taken from Redux and the user reducer. Notice also how we return null if no user is found.\n    ```", "```ts\n    import React, { useState } from 'react';\n    import './App.css';\n    import { useDispatch } from 'react-redux';\n    import { USER_TYPE } from './store/UserReducer';\n    UserDisplay component:\n\n    ```", "```ts\n\n    No real changes up to here:\n\n    ```", "```ts\n\n    ```", "```ts\n    import React, { useRef } from 'react';\n    import { AppState } from './store/AppState';\n    import { useSelector } from 'react-redux';\n    const PostDisplay = React.memo(() => {\n    \u00a0\u00a0\u00a0\u00a0const renderCount = useRef(0);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"renders PostDisplay\", renderCount.\u00a0\u00a0\u00a0\u00a0\u00a0current++);\n    \u00a0\u00a0\u00a0\u00a0const post = useSelector((state: AppState) => state.\u00a0\u00a0\u00a0\u00a0\u00a0post);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0if(post) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>title:</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&nbsp;{post.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>body:</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&nbsp;{post.body}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</React.Fragment>);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return null;\n    \u00a0\u00a0\u00a0\u00a0}\n    });\n    export default PostDisplay\n    ```", "```ts\n    export const POST_TYPE = \"POST_TYPE\";\n    export interface Post {\n    \u00a0\u00a0\u00a0\u00a0id: number;\n    \u00a0\u00a0\u00a0\u00a0title: string;\n    \u00a0\u00a0\u00a0\u00a0body: string;\n    }\n    export interface PostAction {\n    \u00a0\u00a0\u00a0\u00a0type: string;\n    \u00a0\u00a0\u00a0\u00a0payload: Post | null;\n    }\n    export const PostReducer = ( state: Post | null = null, \n    \u00a0\u00a0action: PostAction): Post | null => {\n    \u00a0\u00a0\u00a0\u00a0switch(action.type) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0case POST_TYPE:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return action.payload;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return state;\n    \u00a0\u00a0\u00a0\u00a0}\n    };\n    ```", "```ts\n    import { combineReducers } from \"redux\";\n    import { UserReducer } from \"./UserReducer\";\n    import { PostReducer } from \"./PostReducer\";\n    export const rootReducer = combineReducers({\n    \u00a0\u00a0user: UserReducer,\n    \u00a0\u00a0PostReducer.\n    ```", "```ts\n    function App() {\n    \u00a0\u00a0const [userid, setUserid] = useState(0);\n    \u00a0\u00a0const dispatch = useDispatch();\n    \u00a0\u00a0const [postid, setPostId] = useState(0);\n    ```", "```ts\n    \u00a0\u00a0const onChangeUserId = async (e: \n    \u00a0\u00a0\u00a0React.ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0const useridFromInput = e.target.value ? \n    \u00a0\u00a0\u00a0\u00a0\u00a0Number(e.target.value) : 0;\n    \u00a0\u00a0\u00a0\u00a0console.log(\"userid\", useridFromInput);\n    \u00a0\u00a0\u00a0\u00a0setUserid(useridFromInput);\n    \u00a0\u00a0\u00a0\u00a0const usersResponse = await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch('https://jsonplaceholder.typicode.com/\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0users');\n    \u00a0\u00a0\u00a0\u00a0if(usersResponse.ok) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const users = await usersResponse.json();\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const usr = users.find((userItem: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return userItem && userItem.id === \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useridFromInput;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: USER_TYPE,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: usr.id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username: usr.username,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email: usr.email,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0city: usr.address.city\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0const onChangePostId = async (e: \n    \u00a0\u00a0\u00a0\u00a0React.ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0const postIdFromInput = e.target.value ? \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Number(e.target.value) : 0;\n    \u00a0\u00a0\u00a0\u00a0setPostId(postIdFromInput);\n    \u00a0\u00a0\u00a0\u00a0const postResponse = await \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetch(\"https://jsonplaceholder.typicode.com/posts/\" \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ postIdFromInput);\n    \u00a0\u00a0\u00a0\u00a0if(postResponse.ok) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const post = await postResponse.json();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"post\", post);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: POST_TYPE,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: post.id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: post.title,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body: post.body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0})\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div style={{width: \"300px\"}}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>user id</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={userid} onChange={onChangeUserId}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<UserDisplay />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div style={{width: \"300px\"}}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>post id</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={postid} onChange={onChangePostId} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<postid, you should see an interesting thing:\n    ```", "```ts\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import './index.css';\n    import App from './App';\n    import { Provider } from \"react-redux\";\n    import configureStore from \"./store/configureStore\";\n    import * as serviceWorker from './serviceWorker';\n    ReactDOM.render(\n    \u00a0\u00a0\u00a0\u00a0<App />\n    \u00a0\u00a0,\n    \u00a0\u00a0document.getElementById('root')\n    );\n    ```", "```ts\n    // If you want your app to work offline and load faster,\u00a0\u00a0\n     // you can change\n    // unregister() to register() below. Note this comes with\n    \u00a0\u00a0// some pitfalls.\n    // Learn more about service workers: \u00a0\u00a0// https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n    ```", "```ts\n    import React, { useContext } from 'react';\n    import { TestContext } from './ContextTester';\n    const UserAgeComp = () => {\n    \u00a0\u00a0\u00a0\u00a0const { userage } = useContext(TestContext);\n\n    \u00a0\u00a0\u00a0\u00a0return <div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{userage}\n    \u00a0\u00a0\u00a0\u00a0</div>\n    };\n    export default UserAgeComp;\n    ```", "```ts\n    import React, { useContext, useRef } from 'react';\n    import { TestContext } from './ContextTester';\n    const UserNameComp = React.memo(() => {\n    \u00a0\u00a0\u00a0\u00a0const renders = useRef(0);\n    \u00a0\u00a0\u00a0\u00a0username (note, I have it commented out), but before we can show the ramifications of using Context, I wanted to show this component working as expected first. So, this component has two main features. One is a ref that counts the number of times this component was rendered, and a variable called username that gets displayed. It will also log the renders count as well in order to show when a re-render is triggered.\n    ```", "```ts\n    import React, { createContext, useState } from 'react';\n    import UserNameComp from './UserNameComp';\n    import UserAgeComp from './UserAgeComp';\n    ```", "```ts\n    export const TestContext = createContext<{ username: \u00a0\u00a0string, userage: number }>({ username: \"\", \u00a0\u00a0userage:0 });\n    const ContextTester = () => {\n    \u00a0\u00a0\u00a0\u00a0const [userage, setUserage] = useState(20);\n    \u00a0\u00a0\u00a0\u00a0const [localState, setLocalState] = useState(0);\n    \u00a0\u00a0\u00a0\u00a0const onClickAge = () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setUserage(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userage + 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0const onClickLocalState = () => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setLocalState(localState + 1);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return (<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button onClick={onClickAge}>Update age</button>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<TestContext.Provider value={{ username: \"dave\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userage }}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0localState, which is incremented by the onClickLocalState handler, and the other is the renders of the two child components, UserNameComp and UserAgeComp. Notice UserNameComp, for now, lives outside of the TestContext Context component, and therefore is not affected by TestContext changes. *This is very important to note*.\n    ```", "```ts\n    import React, { useContext, useRef } from 'react';\n    import { TestContext } from './ContextTester';\n    const UserNameComp = React.memo(() => {\n    \u00a0\u00a0\u00a0\u00a0const renders = useRef(0);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"renders UserNameComp\", renders.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0current++);\n    \u00a0\u00a0\u00a0\u00a0UserNameComp is using the username variable from the TestContext context. It never makes use of the userage variable and you will recall username has a hardcoded value so it never changes. So, theoretically, the username state of UserNameComp never changes and therefore should not cause a re-render. Now we need to place UserNameComp inside the TestContext tag as well. We are doing this because if a component needs to use a Context's state, it must be inside that Context's tag. Edit ContextTester like so:\n\n    ```", "```ts\n\n    ```", "```ts\n    create-react-app try-react-router --template typescript \n    ```", "```ts\n    dom.\n    ```", "```ts\n    import React from \"react\";\n    import ReactDOM from \"react-dom\";\n    import \"./index.css\";\n    import App from \"./App\";\n    import * as serviceWorker from \"./serviceWorker\";\n    import { App component, called BrowserRouter. BrowserRouter is a bit like Redux's Provider in the sense that it is a single parent component that provides various props to child components that are relevant to doing routing. We will go over these props soon, but for now, let's finish our setup of React Router.\n    ```", "```ts\n    import React from \"react\";\n    const ScreenA = () => {\n    \u00a0\u00a0return <div>ScreenA</div>;\n    };\n    export default ScreenA;\n    ```", "```ts\n    import React from \"react\";\n    const ScreenB = () => {\n    \u00a0\u00a0return <div>ScreenB</div>;\n    };\n    export default ScreenB;\n    ```", "```ts\n    import React from \"react\";\n    import \"./App.css\";\n    import { Switch, Route } from \"react-router-dom\";\n    import ScreenA from \"./ScreenA\";\n    import ScreenB from \"./ScreenB\";\n    function App() {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<Switch>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route exact={true} path=\"/\" component={Switch component indicates a parent that determines which route to choose by matching the browser URL to a path property of a Route instance. For example, if we start our app and go to the \"/\" route (the root of our application), we should see this:\n    ```", "```ts\n    import React, { FC } from \"react\";\n    interface ScreenCProps {\n    \u00a0\u00a0message: string;\n    }\n    const ScreenC: FC<ScreenCProps> = ({ message }) => {\n    \u00a0\u00a0return <div>{message}</div>;\n    };\n    export default ScreenC;\n    ```", "```ts\n    import React from \"react\";\n    import \"./App.css\";\n    import { Switch, Route } from \"react-router-dom\";\n    import ScreenA from \"./ScreenA\";\n    import ScreenB from \"./ScreenB\";\n    import ScreenC from \"./ScreenC\";\n    function App() {\n    \u00a0\u00a0const renderScreenC, and it takes props as a parameter and then passes it to the ScreenC component and then returns that component. Along with passing props, we also have it passing the string \"This is Screen C\" into the message property. If we had tried to use the component property of Route, there would be no way to pass the message property and so we are using the render property instead. \n    ```", "```ts\n    <Route path=\"/c/:userid\" render={renderScreenC} />\n    ```", "```ts\n    import React, { FC } from \"react\";\n    interface ScreenCProps {\n    \u00a0\u00a0message: string;\n    \u00a0\u00a0props) => {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>props member without having to write them out. And now our component takes the history and match props members as its own props and it is also handling the userid field by using the match.params.userid property. Since the history object already contains location as a member, we did not add that member to our ScreenCProps interface. The screen should look like this:\n    ```", "```ts\n    import React, { FC, useEffect } from \"react\";\n    interface ScreenCProps {\n    \u00a0\u00a0message: string;\n    \u00a0\u00a0history: any;\n    \u00a0\u00a0match: any;\n    }\n    const ScreenC: FC<ScreenCProps> = (props) => {\n    useEffect and in this function, we are waiting 3 seconds with a timer and then by using the history.push function, we are redirecting our URL to \"/\", which is rendered by the ScreenA component.\n    ```", "```ts\n    import React, { FC } from \"react\";\n    interface ScreenCProps {\n    \u00a0\u00a0message: string;\n    \u00a0\u00a0history: any;\n    \u00a0\u00a0match: any;\n    }\n    const ScreenC: FC<ScreenCProps> = (props) => {\n    \u00a0\u00a0const history.goBack function. In order to test this code, we need to open the web page to URL localhost:3000/b first and then go to URL localhost:3000/c/2. Your screen should then look like this:![Figure 7.10 \u2013 Routed to ScreenC with a Go back button\n    ](img/Figure_7.10_B15508.jpg)Figure 7.10 \u2013 Routed to ScreenC with a Go back button\n    ```", "```ts\n    import React, { FC } from \"react\";\n    import { useHistory, useParams } from \"react-router-dom\";\n    ```", "```ts\n    interface ScreenCProps {\n    \u00a0\u00a0message: string;\n    \u00a0\u00a0history: any;\n    \u00a0\u00a0match: any;\n    }\n    const ScreenC: FC<ScreenCProps> = (props) => {\n    \u00a0\u00a0// useEffect(() => {\n    \u00a0\u00a0//\u00a0\u00a0\u00a0setTimeout(() => {\n    \u00a0\u00a0//\u00a0\u00a0\u00a0\u00a0\u00a0props.history.push(\"/\");\n    \u00a0\u00a0//\u00a0\u00a0\u00a0}, 3000);\n    \u00a0\u00a0// });\n    \u00a0\u00a0const history = useHistory();\n    \u00a0\u00a0const { userid } = useParams();\n    ```", "```ts\n    \u00a0\u00a0const onClickGoback = () => {\n    \u00a0\u00a0\u00a0\u00a0// props.history.goBack();\n    \u00a0\u00a0\u00a0\u00a0history.goBack();\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{/* <div>{\"Your id is \" + props.match.params.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userid}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*/}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>{\"Your id is \" + userid}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>{props.message}</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button onClick={onClickGoback}>Go back</button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    export default ScreenC;\n    ```"]