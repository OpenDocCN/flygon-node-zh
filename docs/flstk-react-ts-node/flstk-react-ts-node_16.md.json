["```ts\n    src/redis-server\n    ```", "```ts\n    ping to check that Redis is running. Then we use the set command to create a new value with the key test and value 1. Then we get that value successfully.\n    ```", "```ts\n    Chapter13 source code folder and copy the contents of the redis/redis.conf file. Then, in the terminal, run the following command:\n\n    ```", "```ts\n    redis.conf, file into this newly created file on /etc/redis/redis.conf.If you view this file and search for the keyword `requirepass`, pressing *Ctrl* + *W* or viewing from VSCode, you will see the password we are going to use for testing purposes only. Please do not use this password in production.For any other settings, we should be fine with the defaults.\n    ```", "```ts\n\n    ```", "```ts\n    Configuration loaded.Note that if you want to test the server again, this time you need to authenticate since we configured a password:\n\n    ```", "```ts\n\n    This is what it looks like:\n    ```", "```ts\n    name field inside of package.json to say super-forum-server. Feel free to also update the author field to your name as well.\n    ```", "```ts\n    express package, but we also installed express-session. This package is what enables sessions in Express. We also installed connect-redis, which is what connects our Express session to a Redis data store. In addition to connect-redis, we need the ioredis package because it is the client that gives us access to the Redis server itself. I'll explain this further once we start coding. The dotenv package will allow us to use a config file, .env, to hold things like server passwords and other configurations. Then, in the second `install` command, we can see our development-related packages, which are mostly TypeScript definition packages like `@types/express`. However, notice in the end, we also install `ts-node-dev`. We use this package to help us start our server through the main `index.ts` file. The `ts-node-dev` package will trigger `tsc`, the TypeScript compiler, and get the final server up and running.WarningNever include your `dotenv` config file, `.env`, in your Git repository. It has sensitive information. You should have an offline process to maintain this file and share it with your developers.\n    ```", "```ts\n    \"start\": \"ts-node-dev --respawn src/index.ts\"\n    ```", "```ts\n    import express from \"express\";\n    ```", "```ts\n    console.log(process.env.NODE_ENV);\n    ```", "```ts\n    dotenv package and set up default configurations. This is what allows our .env file to be used in our project.\n\n    ```", "```ts\n\n    Here, we instantiate our `app` object with `express`. So, we'll add all our middleware onto the `app` object. Since almost everything in Express is middleware, session state is also middleware.\n\n    ```", "```ts\n\n    And here, we have initialized our server and when it is running, it will show the log message shown. Run the following command:\n\n    ```", "```ts\n\n    You should see the following log message on your terminal:![Figure 13.7 First run of the Express server\n    ](img/Figure_13.7_B15508.jpg)Figure 13.7 First run of the Express server\n    ```", "```ts\n    import express from \"express\";\n    import session from \"express-session\";\n    import connectRedis from \"connect-redis\";\n    import Redis from \"ioredis\";\n    ```", "```ts\n    console.log(process.env.NODE_ENV);\n    require(\"dotenv\").config();\n    const app = express();\n    const router = express.Router();\n    ```", "```ts\n    const redis = new Redis({\n    \u00a0\u00a0port: Number(process.env.REDIS_PORT),\n    \u00a0\u00a0host: process.env.REDIS_HOST,\n    \u00a0\u00a0password: process.env.REDIS_PASSWORD,\n    });\n    ```", "```ts\nconst RedisStore = connectRedis(session);\nconst redisStore = new RedisStore({\n\u00a0\u00a0client: redis,\n});\n```", "```ts\napp.use(\n\u00a0\u00a0session({\n\u00a0\u00a0\u00a0\u00a0store: redisStore,\n\u00a0\u00a0\u00a0\u00a0name: process.env.COOKIE_NAME,\n\u00a0\u00a0\u00a0\u00a0sameSite: \"Strict\",\n\u00a0\u00a0\u00a0\u00a0secret: process.env.SESSION_SECRET,\n\u00a0\u00a0\u00a0\u00a0resave: false,\n\u00a0\u00a0\u00a0\u00a0saveUninitialized: false,\n\u00a0\u00a0\u00a0\u00a0cookie: {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: \"/\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0httpOnly: true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secure: false,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0maxAge: 1000 * 60 * 60 * 24,\n\u00a0\u00a0\u00a0\u00a0},\n\u00a0\u00a0} as any)\n);\n```", "```ts\napp.use(router);\nrouter.get(\"/\", (req, res, next) => {\n\u00a0\u00a0if (!req.session!.userid) {\n\u00a0\u00a0\u00a0\u00a0req.session!.userid = req.query.userid;\n\u00a0\u00a0\u00a0\u00a0console.log(\"Userid is set\");\n\u00a0\u00a0\u00a0\u00a0req.session!.loadedCount = 0;\n\u00a0\u00a0} else {\n\u00a0\u00a0\u00a0\u00a0req.session!.loadedCount = Number(req.session!.\u00a0\u00a0\u00a0\u00a0\u00a0loadedCount) + 1;\n\u00a0\u00a0}\n```", "```ts\n\u00a0\u00a0res.send(\n\u00a0\u00a0\u00a0\u00a0`userid: ${req.session!.userid}, loadedCount: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0${req.session!.loadedCount}`\n\u00a0\u00a0);\n```", "```ts\n});\napp.listen({ port: process.env.SERVER_PORT }, () => {\n\u00a0\u00a0console.log(`Server ready on port ${process.env.SERVER_\u00a0\u00a0\u00a0PORT}`);\n});\n```"]