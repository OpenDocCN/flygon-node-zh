["```ts\n    create-react-app super-forum-client --template typescript\n    ```", "```ts\n    npm start\n    ```", "```ts\n    package-lock.json file and the node_modules folder. Then, do a clean install using npm install.\n    ```", "```ts\n    import React from \"react\";\n    import \"./App.css\";\n    function App() {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<nav className=\"navigation\">Nav</nav>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"sidebar\">Sidebar</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"leftmenu\">Left Menu</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<main className=\"content\">Main</main>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"rightmenu\">Right Menu</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    }\n    export default App;\n    ```", "```ts\n    :root {\n    \u00a0\u00a0--min-screen-height: 1000px;\n    }\n    ```", "```ts\n    .App {\n    margin: 0 auto;\n    ```", "```ts\n    \u00a0\u00a0max-width: 1200px;\n    \u00a0\u00a0display: grid;\n    \u00a0\u00a0grid-template-columns: 0.7fr 0.9fr 1.5fr 0.9fr;\n    \u00a0\u00a0grid-template-rows: 2.75rem 3fr;\n    \u00a0\u00a0grid-template-areas:\n    \u00a0\u00a0\u00a0\u00a0\"nav nav nav nav\" \n    \u00a0\u00a0\u00a0\u00a0\"sidebar leftmenu content rightmenu\";\n    \u00a0\u00a0gap: 0.75rem 0.4rem;\n    }\n    ```", "```ts\n    .navigation {\n    \u00a0\u00a0grid-area: nav;\n    }\n    .sidebar {\n    \u00a0\u00a0min-height: var(--min-screen-height);\n    \u00a0\u00a0grid-area: sidebar;\n    \u00a0\u00a0background-color: aliceblue;\n    }\n    .leftmenu {\n    \u00a0\u00a0grid-area: leftmenu;\n    \u00a0\u00a0background-color: skyblue;\n    }\n    .content {\n    \u00a0\u00a0min-height: var(--min-screen-height);\n    \u00a0\u00a0grid-area: content;\n    \u00a0\u00a0background-color: blanchedalmond;\n    }\n    .rightmenu {\n    \u00a0\u00a0grid-area: rightmenu;\n    \u00a0\u00a0background-color: coral;\n    }\n    ```", "```ts\nimport React from \"react\";\nconst Main = () => {\n\u00a0\u00a0return <main className=\"content\">Main</main>;\n};\nexport default Main;\n```", "```ts\n@media screen and (orientation: portrait) and (max-width: 768px) {\n\u00a0\u00a0.App {\n\u00a0\u00a0\u00a0\u00a0grid-template-columns: 1fr;\n\u00a0\u00a0\u00a0\u00a0grid-template-areas:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"nav\"\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"content\";\n\u00a0\u00a0}\n}\n```", "```ts\n    import React from \"react\";\n    import { useWindowDimensions } from \"../hooks/useWindowDimensions\";\n    const SideBar = () => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0if (width <= 768) {\n    \u00a0\u00a0\u00a0\u00a0return null;\n    \u00a0\u00a0}\n    \u00a0\u00a0return <div className=\"sidebar\">Sidebar</div>;\n    };\n    export default SideBar;\n    ```", "```ts\n    const Main = () => {\n    \u00a0\u00a0const test = true;\n    \u00a0\u00a0if (test) throw new Error(\"Main fail\");\n    \u00a0\u00a0else {\n    \u00a0\u00a0\u00a0\u00a0return <main className=\"content\">Main</main>;\n    \u00a0\u00a0}\n    };\n    ```", "```ts\n    npm i @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome\u00a0\u00a0\n    ```", "```ts\n    const SideBarMenus = () => {\n    \u00a0\u00a0const user = useSelector((state: AppState) => state.\u00a0\u00a0\u00a0user);\n    const dispatch = useDispatch();\n    ```", "```ts\n    useEffect(() => { \n    \u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: UserProfileSetType,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: 1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName: \"testUser\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}, [dispatch]);\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ul>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faUser} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span className=\"menu-name\">{user?.userName}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ul>\n    \u00a0\u00a0\u00a0\u00a0</React.Fragment>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    export default SideBarMenus;\n    ```", "```ts\n    ul {\n    \u00a0\u00a0\u00a0\u00a0list-style-type: none \n    }\n    ```", "```ts\n    const SideBar = () => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0if (width <= 768) {\n    \u00a0\u00a0\u00a0\u00a0return null;\n    \u00a0\u00a0}\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"sidebar\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<SideBarMenus />\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    const Nav = () => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0const getMobileMenu = () => {\n    \u00a0\u00a0\u00a0\u00a0if (width <= 768) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faBars} size=\"lg\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"nav-mobile-menu\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return null;\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<nav className=\"navigation\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{getMobileMenu()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>SuperForum</strong>\n    \u00a0\u00a0\u00a0\u00a0</nav>\n    \u00a0\u00a0);\n    };\n    export default Nav;\n    ```", "```ts\n    npm i react-modal\n    npm i @types/react-modal -D\n    ```", "```ts\n    li to the returned JSX and included the new icon and label for the register.\n    ```", "```ts\n    const strongPassword = new RegExp(\n    \u00a0\u00a0\u00a0\u00a0\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(?=.{8,})\"\n    \u00a0\u00a0);\n    \u00a0\u00a0if (!strongPassword.test(password)) {\n    \u00a0\u00a0\u00a0\u00a0passwordTestResult.message =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"Password must contain at least 1 special \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0character, 1 cap letter, and 1 number\";\n    \u00a0\u00a0\u00a0\u00a0passwordTestResult.isValid = false;\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0return passwordTestResult;\n    };\n    ```", "```ts\n    const userReducer = (state: any, action: any) => {\n    \u00a0\u00a0switch (action.type) {\n    \u00a0\u00a0\u00a0\u00a0case \"userName\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, userName: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"password\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, password: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"passwordConfirm\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, passwordConfirm: action.payload \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0case \"email\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, email: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"resultMsg\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, resultMsg: action.payload };\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, resultMsg: \"A failure has \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0occurred.\" };\n    \u00a0\u00a0}\n    };\n    ```", "```ts\n    export interface RegistrationProps {\n    \u00a0\u00a0isOpen: boolean;\n    \u00a0\u00a0onClickToggle: (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<Element, MouseEvent> | React.\u00a0\u00a0\u00a0\u00a0KeyboardEvent<Element>\n    \u00a0\u00a0) => void;\n    }\n    ```", "```ts\n    const Registration: FC<RegistrationProps> = ({ isOpen, onClickToggle }) => {\n    \u00a0\u00a0const [isRegisterDisabled, setRegisterDisabled] = \u00a0\u00a0\u00a0useState(true);\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0{ userName, password, email, passwordConfirm, resultMsg },\n    \u00a0\u00a0\u00a0\u00a0dispatch,\n    \u00a0\u00a0] = useReducer(userReducer, {\n    \u00a0\u00a0\u00a0\u00a0userName: \"davec\",\n    \u00a0\u00a0\u00a0\u00a0password: \"\",\n    \u00a0\u00a0\u00a0\u00a0email: \"admin@dzhaven.com\",\n    \u00a0\u00a0\u00a0\u00a0passwordConfirm: \"\",\n    \u00a0\u00a0\u00a0\u00a0resultMsg: \"\",\n    \u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0const allowRegister = (msg: string, setDisabled: \u00a0\u00a0\u00a0\u00a0boolean) => {\n    \u00a0\u00a0\u00a0\u00a0setRegisterDisabled(setDisabled);\n    \u00a0\u00a0\u00a0\u00a0dispatch({ payload: msg, type: \"resultMsg\" });\n    \u00a0\u00a0};\n    ```", "```ts\n    const onChangeUserName = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0dispatch({ payload: e.target.value, type: \"userName\" });\n    \u00a0\u00a0\u00a0\u00a0if (!e.target.value) allowRegister(\"Username cannot \u00a0\u00a0\u00a0\u00a0be empty\", true);\n    \u00a0\u00a0\u00a0\u00a0else allowRegister(\"\", false);\n    };\n    ```", "```ts\n    const onChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ payload: e.target.value, type: \"email\" });\n    if (!e.target.value) allowRegister(\"Email cannot be empty\", true);\n    else allowRegister(\"\", false);\n    };\n    ```", "```ts\n    const onChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ payload: e.target.value, type: \"password\" });\n    const passwordCheck: PasswordTestResult = isPasswordValid(e.target.value);\n    if (!passwordCheck.isValid) {\n    allowRegister(passwordCheck.message, true);\n    return;\n    }\n    passwordsSame(passwordConfirm, e.target.value);\n    };\n    ```", "```ts\n    const onChangePasswordConfirm = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0dispatch({ payload: e.target.value, type: \u00a0\u00a0\u00a0\u00a0\"passwordConfirm\" });\n    \u00a0\u00a0\u00a0\u00a0passwordsSame(password, e.target.value);\n    };\n    ```", "```ts\n    const passwordsSame = (passwordVal: string, passwordConfirmVal: string) => {\n    if (passwordVal !== passwordConfirmVal) {\n    allowRegister(\"Passwords do not match\", true);\n    return false;\n    } else {\n    allowRegister(\"\", false);\n    return true;\n    }\n    };\n    ```", "```ts\n    const onClickRegister = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n    e.preventDefault();\n    onClickToggle(e);\n    };\n    const onClickCancel = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => {\n    onClickToggle(e);\n    };\n    ```", "```ts\n    return (\n    \u00a0\u00a0\u00a0\u00a0<ReactModal\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"modal-menu\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isOpen={isOpen}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onRequestClose={onClickToggle}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shouldCloseOnOverlayClick={true}\n    \u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0<form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"reg-inputs\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>username</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"text\" value={userName}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeUserName} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    <div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>email</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input type=\"text\" value={email} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeEmail} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>password</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"password\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=\"Password\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={password}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangePassword}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>password confirmation</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"password\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=\"Password Confirmation\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={passwordConfirm}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangePasswordConfirm}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0<div className=\"reg-buttons\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"reg-btn-left\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ marginLeft: \".5em\" }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"action-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0disabled={isRegisterDisabled}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickRegister}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Register\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ marginLeft: \".5em\" }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"cancel-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickCancel}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Close\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span className=\"reg-btn-right\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>{resultMsg}</strong>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</form>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ReactModal>\n    \u00a0\u00a0\u00a0\u00a0);\n    };\n    export default Registration;\n    ```", "```ts\n    const userReducer = (state: any, action: any) => {\n    \u00a0\u00a0switch (action.type) {\n    \u00a0\u00a0\u00a0\u00a0case \"userName\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, userName: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"password\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, password: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"passwordConfirm\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, passwordConfirm: action.payload \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0case \"email\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, email: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"resultMsg\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, resultMsg: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"isSubmitDisabled. This field will replace the existing isRegisterDisabled so that it can be used to disable buttons across any authentication screens.Now, remove `userReducer` from the `Registration.tsx` file and import it from the new `UserReducer.ts` file. Also, replace `isRegisterDisabled` with `isSubmitDisabled` and include `isSubmitDisabled` in your `destructured` object, as well as the state initializer of the `useReducer` Hook call.\n    ```", "```ts\n    import { Dispatch } from \"react\";\n    export const allowSubmit = (\n    \u00a0\u00a0dispatch: Dispatch<any>,\n    \u00a0\u00a0msg: string,\n    \u00a0\u00a0setDisabled: boolean\n    ) => {\n    \u00a0\u00a0dispatch({ type: \"isSubmitDisabled\", payload: setDisabled });\n    \u00a0\u00a0dispatch({ payload: msg, type: \"resultMsg\" });\n    };\n    ```", "```ts\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0{ userName, password, resultMsg, isSubmitDisabled },\n    \u00a0\u00a0\u00a0\u00a0dispatch,\n    \u00a0\u00a0] = useReducer(userReducer, {\n    \u00a0\u00a0\u00a0\u00a0userName: \"\",\n    \u00a0\u00a0\u00a0\u00a0password: \"\",\n    \u00a0\u00a0\u00a0\u00a0resultMsg: \"\",\n    \u00a0\u00a0\u00a0\u00a0isSubmitDisabled: true,\n    \u00a0\u00a0});\n    ```", "```ts\n    import Home from \"./components/routes/Home\";function App() {\n    const renderHome = (props: any) => <Home {...props} />;\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<Switch>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route exact={true} path=\"/\" render={renderHome} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path=\"/categorythreads/:categoryId\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0render={renderHome}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0</Switch>\n    \u00a0\u00a0);\n    }\n    ```", "```ts\n    .screen-root-container {\n    \u00a0\u00a0margin: 0 auto;\n    \u00a0\u00a0max-width: 1200px;\n    \u00a0\u00a0margin-bottom: 2em;\n    \u00a0\u00a0border: var(--border);\n    \u00a0\u00a0border-radius: 0.3em;\n    }\n    ```", "```ts\n    .Home.css file. Once they've been copied over, change the name of the App class to home-container. We're changing the name so that the class' purpose is clearer. Now, let's create our new Home screen component and learn how to use these CSS classes.\n    ```", "```ts\n    import React, { FC } from \"react\";\n    import \"./ThreadCard.css\";\n    import Thread from \"../../../models/Thread\";\n    import { Link, useHistory } from \"react-router-dom\";\n    import { faEye, faHeart, faReplyAll } from \"@fortawesome/free-solid-svg-icons\";\n    import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n    import { useWindowDimensions } from \"../../../hooks/useWindowDimensions\";\n    ```", "```ts\n    interface ThreadCardProps {\n    \u00a0\u00a0Thread object as our parameter. We will use this object and its members as we render our ThreadCard UI:\n\n    ```", "```ts\n\n    Here, we are using the React Router `useHistory` Hook to get the `history` object. When someone clicks on our Thread, we use the `history` object to redirect the app to a new URL by `pushing` the new URL on top of the `history` object. We will build our thread route and component later:\n\n    ```", "```ts\n\n    The `getPoints` function creates the UI for displaying \"likes\" on our post. However, since our UI is responsive, it does not appear in desktop mode when we check the screen's `width` property:\n\n    ```", "```ts\n\n    This function shows the response count, as indicated by the `thread.threadItems.length` property:\n\n    ```", "```ts\n\n    The `getResponses` function shows how many `ThreadItems` responses there are for this `Thread`. However, since our UI is responsive, it does not appear in desktop mode when we check the screen's `width` property:\n\n    ```", "```ts\n\n    This function is getting the likes count, as indicated by the `thread.threadItems.length` property:\n\n    ```", "```ts\n\n    The `getPointsNonMobile` function returns the points column on the right of `ThreadCard`, but only renders it if the device is a desktop or laptop with a screen width bigger than 768 pixels.Remember that every React component that may be used multiple times on the same screen must have a unique `key` value. So, later, when we use this component, you will see that each instance has been given a unique `key` value. The following JSX is returning the `Category` name as a `Link` so that when it's clicked, the user will be sent to the screen showing the Threads for that `Category`:\n\n    ```", "```ts\n\n    `Link` is a React Router component that renders a URL anchor (HTTP link). Notice that `categorythreads` is the second route we created earlier and that it takes `categoryId` as a parameter:\n\n    ```", "```ts\n\n    As you can see, we use the `thread` prop extensively while rendering our UI.Here, we are using the `getPoints` and `getResponses` functions to render a subset of our UI so that it shows points and responses:\n\n    ```", "```ts\n\n    Here, we are using `getPointsNonMobile` to show our response count and likes:\n\n    ```", "```ts\n\n    Notice that we have referenced many CSS classes in this component, all of which can be found in the `ThreadCard.css` and `App.css` files in the source code. I won't go over every single CSS class here, but if you look at the `ThreadCard.css` file, you'll notice that there is a reference to something called `flex`. Flexbox is another method of creating a layout in CSS similar to Grids. However, Flexbox is intended to be used for single-row or single-column layouts; for example:\n\n    ```", "```ts\n\n    In this CSS, the display method is indicated as `flex` and `flex-direction` is column. This means that the layout of all the elements inside `threadcard-txt-container` will be in a single stacked column. So, even if we had elements such as labels or buttons, which are normally set in a horizontal line, if they live inside a column-based flex container, they will be laid out vertically. If we had used the row attribute, then the layout would be horizontal.\n    ```", "```ts\n    import _ from \"lodash\". You will add an enormous amount of code to your project by doing so. Only import the specific call using import groupBy from \"lodash/groupBy\".Now, we can update our `RightMenu.tsx` file as shown in the source code.First, notice that in addition to Lodash, we also imported a new `RightMenu.css` file, along with some minor styling. We also imported the `TopCategory` component, which we'll build after.Next, we have a new state object called `topCategories` that we will use to store our array of top categories.Then, in `useEffect`, we have our top categories from the `getTopCategories` function. Then, we group the results by category and create our array of `TopCategory` elements. The `TopCategory` component elements will display our data. Notice that the `TopCategory` component receives each group of top categories through the `topCategories` prop.The component then returns the `topCategories` elements.\n    ```", "```ts\n    function App() {\n    \u00a0\u00a0const renderHome = (props: any) => <Home {...props} />;\n    \u00a0\u00a0const renderThread = (props: any) => <Thread {...props} />;\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<Switch>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route exact={true} path=\"/\" render={renderHome} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path=\"/categorythreads/:categoryId\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0render={renderHome}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path=\"/thread/:id\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0render={renderThread}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0</Switch>\n    \u00a0\u00a0);\n    }\n    ```", "```ts\n    ThreadCategory.tsx in the thread folder and add the source code to it.Once you've set up the imports, create the `ThreadCategoryProps` interface, which will represent our prop type.Next, we start creating our `ThreadCategory` component and set up a constant variable, `catOptions`, that contains the items that will appear as selectable options in our dropdown. Again, we are only temporarily hardcoding values until our backend is ready.Finally, we are returning the JSX with an initialized `DropDown` control.\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"screen-root-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-nav-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Nav />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadHeader\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={thread?.userName}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={thread ? thread.lastModifiedOn : new Date()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread?.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadCategory categoryName={thread?.category?.name} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadTitle title={thread?.title} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    editor inside our components folder and create a new file called RichTextControls.tsx. This file contains the controls that we will be using in our editor. The source code I am using is from the Slate.js project at https://github.com/ianstormtaylor/slate/blob/master/site/components.tsx. This code is fairly large, so I'll show and explain the relevant code as we use each control. \n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadBody body={thread?.body} />\n    ```", "```ts\nul:not([data-slate-node=\"element\"]) {\n\u00a0\u00a0list-style-type: none;\n}\n```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<UserNameAndTime userName={userName} lastModifiedOn={lastModifiedOn} />\u00a0\u00a0\u00a0\u00a0\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"screen-root-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-nav-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Nav />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadHeader\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={thread?.userName}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={thread ? thread.lastModifiedOn : new Date()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread?.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadCategory categoryName={thread?.category?.name} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadTitle title={thread?.title} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadBody body={thread?.body} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hr, to separate out the Thread post from any responses.Our screen should now look like this:\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"screen-root-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-nav-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Nav />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-post-container\">\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadHeader\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={thread?.userName}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={thread ? thread.lastModifiedOn : new Date()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread?.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadCategory categoryName={thread?.category?.name} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadTitle title={thread?.title} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadBody body={thread?.body} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-points-container\">\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<thread-content-response-container:\n\n    ```", "```ts\n\n    Let's look at our refreshed CSS `Thread.css` file to see what's going on.Near the top of the file, I've explicitly given a definition for `grid-template-rows`. The Grid now has two rows: one for posts and one for responses. Posts take up one part of available space, but responses can take up as much space as needed, which is what `auto` means, since it could have 0 or more responses.We now have this new class, `thread-content-points-container`. We need this to change the layout of our `ThreadPointsBar`, which is now different from the main screen. Notice that it puts itself into the second column start index and first Grid row. The `> div` element on the second definition means to give the `div` elements inside `ThreadPointsBar` and `threadcard-points` a specific height of all available.Now, our main Thread post items, such as `ThreadTitle` and `ThreadBody`, live inside this `thread-content-post-container`.Our responses \u2013 mainly `ThreadResponsesBuilder` \u2013 live inside this `thread-content-response-container`. Notice that `grid-row` is set to 2.After the `thread-content-response-container` class, you'll notice that all the section-related classes no longer need references to any Grid column or Grid since they all live inside `thread-content-post-container`.\n    ```", "```ts\n    <span className=\"menu-name\">{user?.userName}</span>\n    ```", "```ts\n    <span className=\"menu-name\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Link to={`/userprofile/${user?.id}`}>{user?.userName}</Link>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    ```"]