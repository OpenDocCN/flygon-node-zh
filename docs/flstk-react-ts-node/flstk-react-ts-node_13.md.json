["```ts\n    npm init \n    ```", "```ts\n    npm i typescript\n    tsc -init\n    ```", "```ts\n    {\n    \u00a0\u00a0\"compilerOptions\": {\n    \u00a0\u00a0\u00a0\u00a0\"target\": \"es6\",\n    \u00a0\u00a0\u00a0\u00a0\"module\": \"commonjs\",\n    \u00a0\u00a0\u00a0\u00a0\"lib\": [\"ES6\", \"ES2017\", \"ES2018\", \"ES2019\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ES2020\"],\n    \u00a0\u00a0\u00a0\u00a0\"sourceMap\": true,\n    \u00a0\u00a0\u00a0\u00a0\"outDir\": \"./dist\",\n    \u00a0\u00a0\u00a0\u00a0\"rootDir\": \"src\",\n    \u00a0\u00a0\u00a0\u00a0\"moduleResolution\": \"node\",\n    \u00a0\u00a0\u00a0\u00a0\"removeComments\": true,\n    \u00a0\u00a0\u00a0\u00a0\"noImplicitAny\": true,\n    \u00a0\u00a0\u00a0\u00a0\"strictNullChecks\": true,\n    \u00a0\u00a0\u00a0\u00a0\"strictFunctionTypes\": true,\n    \u00a0\u00a0\u00a0\u00a0\"noImplicitThis\": true,\n    \u00a0\u00a0\u00a0\u00a0\"noUnusedLocals\": true,\n    \u00a0\u00a0\u00a0\u00a0\"noUnusedParameters\": false,\n    \u00a0\u00a0\u00a0\u00a0\"noImplicitReturns\": true,\n    \u00a0\u00a0\u00a0\u00a0\"noFallthroughCasesInSwitch\": true,\n    \u00a0\u00a0\u00a0\u00a0\"allowSyntheticDefaultImports\": true,\n    \u00a0\u00a0\u00a0\u00a0\"esModuleInterop\": true,\n    \u00a0\u00a0\u00a0\u00a0\"emitDecoratorMetadata\": true,\n    \u00a0\u00a0\u00a0\u00a0\"experimentalDecorators\": true\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0},\n    \u00a0\u00a0\"exclude\": [\"node_modules\"],\n    \u00a0\u00a0\"include\": [\"./src/**/*.tsx\", \"./src/**/*.ts\"]\n    }\n    ```", "```ts\n    Express and its TypeScript types. \n    ```", "```ts\n    import express from \"express\";\n    import { createServer } from \"http\";\n    const app = express();\n    const server = createServer(app);\n    server.listen({ port: 8000 }, () => {\n    \u00a0\u00a0console.log(\"Our server is running!\");\n    });\n    ```", "```ts\n    \"scripts\": {\n    \u00a0\u00a0\u00a0\u00a0\"test\": \"echo \\\"Error: no test specified\\\" && \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exit 1\",\n    \u00a0\u00a0\u00a0\u00a0\"start\": \"ts-node-dev --respawn src/index.ts\"\n    \u00a0\u00a0},\n    ```", "```ts\n    npm start\n    ```", "```ts\n    npm init\n    ```", "```ts\n    npm i express graphql graphql-tools graphql-middleware apollo-server-express uuid -S\n    ```", "```ts\n    npm i @types/express typescript @types/faker @types/jest faker jest nodemon ts-jest ts-node-dev @types/uuid -D\n    ```", "```ts\n    tsc -init\n    ```", "```ts\n    npm start\n    ```", "```ts\n    export const log = async (\n    \u00a0\u00a0resolver: any,\n    \u00a0\u00a0parent: any,\n    \u00a0\u00a0args: any,\n    \u00a0\u00a0context: any,\n    \u00a0\u00a0info: any\n    ) => {\n    \u00a0\u00a0If(!parent) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"Start logging\");\n    \u00a0\u00a0}\n    \u00a0\u00a0const result = await resolver(parent, args, context,\u00a0\u00a0\u00a0info);\n    \u00a0\u00a0console.log(\"Finished call to resolver\");\n    \u00a0\u00a0return result;\n    };\n    ```", "```ts\n    console.log(\"running getTodos\");\n    ```", "```ts\n    import express from \"express\";\n    import { createServer } from \"http\";\n    import {\n    \u00a0\u00a0ApolloServer,\n    \u00a0\u00a0makeExecutableSchema,\n    \u00a0\u00a0PubSub,\n    } from \"apollo-server-express\";\n    import typeDefs from \"./typeDefs\";\n    import resolvers from \"./resolvers\";\n    import { applyMiddleware } from \"graphql-middleware\";\n    import { log } from \"./Logger\";\n    ```", "```ts\n    const app = express();\n    const pubsub = new PubSub();\n    const schema = makeExecutableSchema({ typeDefs, resolvers });\n    const schemaWithMiddleware = applyMiddleware(schema, log);\n    const apolloServer = new ApolloServer({\n    \u00a0\u00a0schema: schemaWithMiddleware,\n    \u00a0\u00a0context: ({ req, res }: any) => ({ req, res, pubsub }),\n    });\n    ```", "```ts\n    import { graphql, GraphQLSchema } from \"graphql\";\n    ```", "```ts\n    import { Maybe } from \"graphql/jsutils/Maybe\";\n    ```", "```ts\n    interface Options {\n    \u00a0\u00a0schema: GraphQLSchema;\n    \u00a0\u00a0source: string;\n    \u00a0\u00a0variableValues?: Maybe<{ [key: string]: any }>;\n    }\n    ```", "```ts\n    export const testGraphQLQuery = async ({\n    \u00a0\u00a0schema,\n    \u00a0\u00a0source,\n    \u00a0\u00a0variableValues\n    }: Options) => {\n    \u00a0\u00a0return graphql({\n    \u00a0\u00a0\u00a0\u00a0schema,\n    \u00a0\u00a0\u00a0\u00a0source,\n    \u00a0\u00a0\u00a0\u00a0variableValues,\n    \u00a0\u00a0});\n    };\n    ```", "```ts\n    import typeDefs from \"./typeDefs\";\n    import resolvers from \"./resolvers\";\n    import { makeExecutableSchema } from \"graphql-tools\";\n    import faker from \"faker\";\n    import { testGraphQLQuery } from \"./testGraphQLQuery\";\n    import { addMockFunctionsToSchema } from \"apollo-server-express\";\n    ```", "```ts\n    describe(\"Testing getting a user\", () => {\n    \u00a0\u00a0const GetUser = `\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0query GetUser($id: ID!) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getUser(id: $id) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0`;\n    ```", "```ts\n    \u00a0\u00a0it(\"gets the desired user\", async () => {\n    \u00a0\u00a0\u00a0\u00a0const schema = makeExecutableSchema({ typeDefs,\u00a0\u00a0\u00a0\u00a0\u00a0resolvers });\n    \u00a0\u00a0\u00a0\u00a0const userId = faker.random.alphaNumeric(20);\n    \u00a0\u00a0\u00a0\u00a0const username = faker.internet.userName();\n    \u00a0\u00a0\u00a0\u00a0const email = faker.internet.email();\n    \u00a0\u00a0\u00a0\u00a0const mocks = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0User: () => ({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}),\n    \u00a0\u00a0\u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0console.log(\"id\", userId);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"username\", username);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"email\", email);\n    \u00a0\u00a0\u00a0\u00a0addMockFunctionsToSchema({ schema, mocks });\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0const queryResponse = await testGraphQLQuery({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0schema,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source: GetUser,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variableValues: { id: faker.random.alphaNumeric(20)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0const result = queryResponse.data ? queryResponse.\u00a0\u00a0\u00a0\u00a0\u00a0data.getUser : null;\n    \u00a0\u00a0\u00a0\u00a0console.log(\"result\", result);\n    \u00a0\u00a0\u00a0\u00a0expect(result).toEqual({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0username,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0email,\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0});\n    });\n    ```", "```ts\n    \"jest\": {\n    \u00a0\u00a0\u00a0\u00a0\"transform\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\".(ts|tsx)\": \"<rootDir>/node_modules/ts-\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0jest/preprocessor.js\"\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\"testRegex\": \"(/__tests__/.*|\\\\.(test|spec))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\\\\.(ts|tsx|js)$\",\n    \u00a0\u00a0\u00a0\u00a0\"moduleFileExtensions\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"ts\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"tsx\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"js\"\n    \u00a0\u00a0\u00a0\u00a0]\n    \u00a0\u00a0}\n    ```"]