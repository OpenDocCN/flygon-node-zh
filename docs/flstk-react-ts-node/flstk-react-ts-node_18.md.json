["```ts\n    npm install \n    ```", "```ts\n    npm start \n    ```", "```ts\n    npm install\n    ```", "```ts\n    npm start \n    ```", "```ts\n    npm i apollo-server-express graphql graphql-middleware graphql-tools\n    ```", "```ts\n    import { gql } from \"apollo-server-express\";\n    const typeDefs = gql`\n    \u00a0\u00a0scalar Date\n    ```", "```ts\n    \u00a0\u00a0type EntityResult {\n    \u00a0\u00a0\u00a0\u00a0messages: [String!]\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0type User {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0email: String!\n    \u00a0\u00a0\u00a0\u00a0userName: String!\n    \u00a0\u00a0\u00a0\u00a0password: String!\n    \u00a0\u00a0\u00a0\u00a0confirmed: Boolean!\n    \u00a0\u00a0\u00a0\u00a0isDisabled: Boolean!\n    \u00a0\u00a0\u00a0\u00a0threads: [Thread!]\n    \u00a0\u00a0\u00a0\u00a0createdBy: String!\n    \u00a0\u00a0\u00a0\u00a0createdOn: Date!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedBy: String!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedOn: Date!\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0type Thread {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0views: Int!\n    \u00a0\u00a0\u00a0\u00a0isDisabled: Boolean!\n    \u00a0\u00a0\u00a0\u00a0title: String!\n    \u00a0\u00a0\u00a0\u00a0body: String!\n    \u00a0\u00a0\u00a0\u00a0user: User!\n    \u00a0\u00a0\u00a0\u00a0threadItems: [ThreadItem!]\n    \u00a0\u00a0\u00a0\u00a0category: ThreadCategory\n    \u00a0\u00a0\u00a0\u00a0createdBy: String!\n    \u00a0\u00a0\u00a0\u00a0createdOn: Date!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedBy: String!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedOn: Date!\n    }\n    ```", "```ts\n    \u00a0\u00a0union ThreadResult = Thread | EntityResult\n    ```", "```ts\n    \u00a0\u00a0type ThreadItem {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0views: Int!\n    \u00a0\u00a0\u00a0\u00a0isDisabled: Boolean!\n    \u00a0\u00a0\u00a0\u00a0body: String!\n    \u00a0\u00a0\u00a0\u00a0user: User!\n    \u00a0\u00a0\u00a0\u00a0thread: Thread!\n    \u00a0\u00a0\u00a0\u00a0createdBy: String!\n    \u00a0\u00a0\u00a0\u00a0createdOn: Date!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedBy: String!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedOn: Date!\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0type ThreadCategory {\n    \u00a0\u00a0\u00a0\u00a0id: ID!\n    \u00a0\u00a0\u00a0\u00a0name: String!\n    \u00a0\u00a0\u00a0\u00a0description: String\n    \u00a0\u00a0\u00a0\u00a0threads: [Thread!]!\n    \u00a0\u00a0\u00a0\u00a0createdBy: String!\n    \u00a0\u00a0\u00a0\u00a0createdOn: Date!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedBy: String!\n    \u00a0\u00a0\u00a0\u00a0lastModifiedOn: Date!\n    }\n    ```", "```ts\n    \u00a0\u00a0type Query {\n    \u00a0\u00a0\u00a0\u00a0getThreadById(id: ID!): ThreadResult\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    export default typeDefs;\n    ```", "```ts\n    import { IResolvers } from \"apollo-server-express\";\n    interface EntityResult {\n    \u00a0\u00a0messages: Array<string>;\n    }\n    ```", "```ts\n    const resolvers: IResolvers = {\n    \u00a0\u00a0ThreadResult: {\n    \u00a0\u00a0\u00a0\u00a0__resolveType(obj: any, context: GqlContext, info:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0any) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (obj.messages) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"EntityResult\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Thread\";\n    \u00a0\u00a0\u00a0\u00a0},\n    },\n    ```", "```ts\n    \u00a0\u00a0Query: {\n    \u00a0\u00a0\u00a0\u00a0getThreadById: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: { id: string },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<Thread | EntityResult> => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let thread: QueryOneResult<Thread>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread = await getThreadById(args.id);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (thread.entity) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return thread.entity;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: thread.messages ? thread.messages[0] : \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"test\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (ex) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw ex;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0},\n    };\n    export default resolvers;\n    ```", "```ts\n    const schema = makeExecutableSchema({ typeDefs, resolvers });\n    const apolloServer = new ApolloServer({\n    \u00a0\u00a0\u00a0\u00a0schema,\n    \u00a0\u00a0\u00a0\u00a0context: ({ req, res }: any) => ({ req, res }),\n    });\n    apolloServer.applyMiddleware({ app });\n    ```", "```ts\n    type Mutation {\n    \u00a0\u00a0\u00a0\u00a0createThread(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId: ID!\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId: ID!\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: String!\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body: String!\n    \u00a0\u00a0\u00a0\u00a0): EntityResult\n    }\n    ```", "```ts\n    Mutation: {\n    \u00a0\u00a0\u00a0\u00a0createThread: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: { userId: string; categoryId: string; title: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0string; body: string },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<EntityResult> => {\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let result: QueryOneResult<Thread>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = await createThread(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.categoryId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.title,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: result.messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? result.messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: [\"An error has occurred\"],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (ex) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw ex;\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0},\n    ```", "```ts\n    type ThreadArray {\n    \u00a0\u00a0\u00a0\u00a0threads: [Thread!]\n    }\n    union ThreadArrayResult = ThreadArray | EntityResult\n    ```", "```ts\n    getThreadsByCategoryId(categoryId: ID!): ThreadArrayResult!\n    ```", "```ts\n    getThreadsByCategoryId: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: { categoryId: string },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<{ threads: Array<Thread> } | EntityResult> \u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let threads: QueryArrayResult<Thread>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads = await getThreadsByCategoryId(args.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (threads.entities) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads: threads.entities,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: threads.messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0? threads.messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: [\"An error has occurred\"],\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (ex) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw ex;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0},\n    ```", "```ts\n    ThreadArrayResult: {\n    \u00a0\u00a0\u00a0\u00a0__resolveType(obj: any, context: GqlContext, info:\u00a0\u00a0\u00a0\u00a0\u00a0any) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (obj.messages) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"EntityResult\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"ThreadArray\";\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0},\n    ```", "```ts\n    export const updateThreadPoint = async (\n    \u00a0\u00a0userId: string,\n    \u00a0\u00a0threadId: string,\n    \u00a0\u00a0increment: boolean\n    ): Promise<string> => {\n    ```", "```ts\n    \u00a0\u00a0// todo: first check user is authenticated\n    ```", "```ts\n    \u00a0\u00a0let message = \"Failed to increment thread point\";\n    \u00a0\u00a0const thread = await Thread.findOne({\n    \u00a0\u00a0\u00a0\u00a0where: { id: threadId },\n    \u00a0\u00a0\u00a0\u00a0relations: [\"user\"],\n    \u00a0\u00a0});\n    \u00a0\u00a0if (thread!.user!.id === userId) {\n    \u00a0\u00a0\u00a0\u00a0message = \"Error: users cannot increment their own \u00a0\u00a0\u00a0\u00a0\u00a0thread\";\n    \u00a0\u00a0\u00a0\u00a0return message;\n    }\n    ```", "```ts\n    \u00a0\u00a0const user = await User.findOne({ where: { id: userId } });\n    ```", "```ts\n    \u00a0\u00a0const existingPoint = await ThreadPoint.findOne({\n    \u00a0\u00a0\u00a0\u00a0where: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread: { id: threadId },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user: { id: userId },\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0relations: [\"thread\"],\n    });\n    ```", "```ts\n    await getManager().transaction(async (transactionEntityManager) => {\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0if (existingPoint) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (increment) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (existingPoint.isDecrement) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await ThreadPoint.remove(existingPoint);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.points = Number(thread!.points) + 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.lastModifiedOn = new Date();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.save();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!existingPoint.isDecrement) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await ThreadPoint.remove(existingPoint);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.points = Number(thread!.points) - 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.lastModifiedOn = new Date();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.save();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0await ThreadPoint.create({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isDecrement: !increment,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}).save();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (increment) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.points = Number(thread!.points) + 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.points = Number(thread!.points) - 1;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.lastModifiedOn = new Date();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread!.save();\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0message = `Successfully ${\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment ? \"incremented\" : \"decremented\"\n    \u00a0\u00a0\u00a0\u00a0} point.`;\n    \u00a0\u00a0});\n    \u00a0\u00a0return message;\n    };\n    ```", "```ts\n    updateThreadPoint(userId: ID!, threadId: ID!, increment: Boolean!): String!\n    ```", "```ts\n    union UserResult = User | EntityResult\n    ```", "```ts\n    export const me = async (id: string): Promise<UserResult> => {\n    \u00a0\u00a0const user = await User.findOne({\n    \u00a0\u00a0\u00a0\u00a0where: { id },\n    \u00a0\u00a0\u00a0\u00a0relations: [\"threads\", \"threads.threadItems\"],\n    });\n    ```", "```ts\n    \u00a0\u00a0if (!user) {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: [\"User not found.\"],\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    \u00a0\u00a0if (!user.confirmed) {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: [\"User has not confirmed their \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0registration email yet.\"],\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    \u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0user: user,\n    \u00a0\u00a0};\n    };\n    ```", "```ts\n    CLIENT_URL=http://localhost:3000\n    ```", "```ts\n    app.use(\n    \u00a0\u00a0\u00a0\u00a0cors({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0credentials: true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0origin: process.env.CLIENT_URL,\n    \u00a0\u00a0\u00a0\u00a0})\n    );\n    ```", "```ts\n    apolloServer.applyMiddleware({ app, cors, which is enabled by default so we want to disable it.\n    ```", "```ts\n    npm install @apollo/client graphql \n    ```", "```ts\n    const client = new ApolloClient({\n    \u00a0\u00a0uri: 'http://localhost:5000/graphql',\n    \u00a0\u00a0credentials: \"include\",\n    \u00a0\u00a0cache: new InMemoryCache()\n    });\n    ```", "```ts\n    ReactDOM.render(\n    \u00a0\u00a0<Provider store={configureStore()}>\n    \u00a0\u00a0\u00a0\u00a0<BrowserRouter>\n    \u00a0\u00a0\u00a0\u00a0<ApolloProvider client={client}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ErrorBoundary>{[<App key=\"App\" />]}</\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ErrorBoundary>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ApolloProvider>\n    \u00a0\u00a0\u00a0\u00a0</BrowserRouter>\n    \u00a0\u00a0</Provider>,\n    \u00a0\u00a0document.getElementById(\"root\")\n    );\n    ```", "```ts\n    import React, { useEffect, useState } from \"react\";\n    import { useWindowDimensions } from \"../../hooks/useWindowDimensions\";\n    import \"./LeftMenu.css\";\n    import { gql, useQuery } from \"@apollo/client\";\n    ```", "```ts\n    const GetAllCategories = gql`\n    \u00a0\u00a0query getAllCategories {\n    \u00a0\u00a0\u00a0\u00a0getAllCategories {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const LeftMenu = () => {\n    const { loading, error, data } = useQuery(GetAllCategories);\n    ```", "```ts\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0const [categories, setCategories] = useState<JSX.\u00a0\u00a0\u00a0Element>(\n    \u00a0\u00a0\u00a0\u00a0<div>Left Menu</div>\n    \u00a0\u00a0);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (loading) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategories(<span>Loading ...</span>);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0} else if (error) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategories(<span>Error occurred loading \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categories ...</span>);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (data && data.getAllCategories) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cats = data.getAllCategories.map((cat: any)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <li key={cat.id}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Link to={`/categorythreads/${cat.id}`}>{cat.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name}</Link>\n    \u00a0\u00a0\u00a0\u00a0\u00a0</li>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategories(<ul className=\"category\">{cats}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ul>);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// eslint-disable-next-line react-hooks/exhaustive-\u00a0\u00a0\u00a0\u00a0\u00a0//deps\n    \u00a0\u00a0}, [data]);\n    \u00a0\u00a0if (width <= 768) {\n    \u00a0\u00a0\u00a0\u00a0return null;\n    \u00a0\u00a0}\n    \u00a0\u00a0return <div className=\"leftmenu\">{categories}</div>;\n    };\n    export default LeftMenu;\n    ```", "```ts\n    export const getThreadsLatest = async (): Promise<QueryArrayResult<Thread>> => {\n    \u00a0\u00a0const threads = await Thread.createQueryBuilder(\"thread\")\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.category\", \"category\")\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.threadItems\", \u00a0\u00a0\u00a0\u00a0\u00a0\"threadItems\")\n    \u00a0\u00a0\u00a0\u00a0.orderBy(\"thread.createdOn\", \"DESC\")\n    \u00a0\u00a0\u00a0\u00a0.take(10)\n    \u00a0\u00a0\u00a0\u00a0.getMany();\n    ```", "```ts\n    \u00a0\u00a0if (!threads || threads.length === 0) {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: [\"No threads found.\"],\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    \u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0entities: threads,\n    \u00a0\u00a0};\n    };\n    ```", "```ts\n    export const getThreadsByCategoryId = async (\n    \u00a0\u00a0categoryId: string\n    ): Promise<QueryArrayResult<Thread>> => {\n    \u00a0\u00a0const threads = await Thread.\u00a0\u00a0\u00a0createQueryBuilder(\"thread\")\n    \u00a0\u00a0\u00a0\u00a0.where(`thread.\"categoryId\" = :categoryId`, { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId })\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.category\", \"category\")\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.threadItems\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"threadItems\")\n    \u00a0\u00a0\u00a0\u00a0.orderBy(\"thread.createdOn\", \"DESC\")\n    \u00a0\u00a0\u00a0\u00a0.getMany();\n    \u00a0\u00a0if (!threads || threads.length === 0) {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: [\"Threads of category not found.\"],\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    \u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0entities: threads,\n    \u00a0\u00a0};\n    };\n    ```", "```ts\n    const GetThreadsByCategoryId = gql`\n    \u00a0\u00a0query getThreadsByCategoryId($categoryId: ID!) {\n    \u00a0\u00a0\u00a0\u00a0getThreadsByCategoryId(categoryId: $categoryId) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on ThreadArray {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0views\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const GetThreadsLatest = gql`\n    \u00a0\u00a0query getThreadsLatest {\n    \u00a0\u00a0\u00a0\u00a0getThreadsLatest {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on ThreadArray {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0views\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const Main = () => {\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0execGetThreadsByCat,\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//error: threadsByCatErr,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//called: threadsByCatCalled,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data: threadsByCatData,\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0] = useLazyQuery(GetThreadsByCategoryId);\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0execGetThreadsLatest,\n    \u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//error: threadsLatestErr,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//called: threadsLatestCalled,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0data: threadsLatestData,\n    \u00a0\u00a0\u00a0\u00a0},\n    ] = useLazyQuery(GetThreadsLatest);\n    ```", "```ts\n    \u00a0\u00a0const { categoryId } = useParams();\n    \u00a0\u00a0const [category, setCategory] = useState<Category | \u00a0\u00a0undefined>();\n    \u00a0\u00a0const [threadCards, setThreadCards] = \u00a0\u00a0useState<Array<JSX.Element> | null>(\n    \u00a0\u00a0\u00a0\u00a0null\n    \u00a0\u00a0);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (categoryId && categoryId > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadsByCat({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadsLatest();\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// eslint-disable-next-line react-hooks/exhaustive-\u00a0\u00a0\u00a0\u00a0// deps\n    \u00a0\u00a0}, [categoryId]);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData.getThreadsByCategoryId &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData.getThreadsByCategoryId.threads\n    \u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threads = threadsByCatData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getThreadsByCategoryId.threads;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cards = threads.map((th: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <ThreadCard key={`thread-${th.id}`} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread={th} />;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategory(threads[0].category);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadCards(cards);\n    \u00a0\u00a0\u00a0\u00a0}\n    }, [threadsByCatData]);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData.getThreadsLatest &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData.getThreadsLatest.threads\n    \u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threads = threadsLatestData.getThreadsLatest.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cards = threads.map((th: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <ThreadCard key={`thread-${th.id}`} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread={th} />;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategory(new Category(\"0\", \"Latest\"));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadCards(cards);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadsLatestData]);\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<main className=\"content\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MainHeader category={category} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>{threadCards}</div>\n    \u00a0\u00a0\u00a0\u00a0</main>\n    \u00a0\u00a0);\n    };\n    export default Main;\n    ```", "```ts\n    export const rootReducer = combineReducers({\n    \u00a0\u00a0user: UserProfileReducer,\n    \u00a0\u00a0categories: ThreadCategoriesReducer,\n    });\n    ```", "```ts\n    const GetAllCategories = gql`\n    \u00a0\u00a0query getAllCategories {\n    \u00a0\u00a0\u00a0\u00a0getAllCategories {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    function App() {\n    \u00a0\u00a0const { data } = useQuery(GetAllCategories);\n    \u00a0\u00a0const dispatch = useDispatch();\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: UserProfileSetType,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id: 1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName: \"testUser\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0if (data && data.getAllCategories) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: ThreadCategoriesType,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: data.getAllCategories,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [dispatch, data]);\n    \u00a0\u00a0const renderHome = (props: any) => <Home {...props} />;\n    \u00a0\u00a0const renderThread = (props: any) => <Thread {...props} \u00a0\u00a0\u00a0/>;\n    \u00a0\u00a0const renderUserProfile = (props: any) => <UserProfile \u00a0\u00a0\u00a0{...props} />;\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<Switch>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route exact={true} path=\"/\" render={renderHome} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route path=\"/categorythreads/:categoryId\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0render={renderHome} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route path=\"/thread/:id\" render={renderThread} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Route path=\"/userprofile/:id\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0render={renderUserProfile} />\n    \u00a0\u00a0\u00a0\u00a0</Switch>\n    \u00a0\u00a0);\n    }\n    ```", "```ts\n    const defaultLabel = \"Select a category\";\n    const defaultOption = {\n    \u00a0\u00a0value: \"0\",\n    \u00a0\u00a0label: defaultLabel\n    };\n    ```", "```ts\n    class CategoryDropDownProps {\n    \u00a0\u00a0sendOutSelectedCategory?: (cat: Category) => void;\n    \u00a0\u00a0navigate?: boolean = false;\n    \u00a0\u00a0preselectedCategory?: Category;\n    }\n    ```", "```ts\n    const CategoryDropDown: FC<CategoryDropDownProps> = ({\n    \u00a0\u00a0sendOutSelectedCategory,\n    \u00a0\u00a0navigate,\n    \u00a0\u00a0preselectedCategory,\n    }) => {\n    \u00a0\u00a0const categories = useSelector((state: AppState) => \u00a0\u00a0state.categories);\n    \u00a0\u00a0const [categoryOptions, setCategoryOptions] = useState<\n    \u00a0\u00a0\u00a0\u00a0Array<string | Option>\n    \u00a0\u00a0>([defaultOption]);\n    \u00a0\u00a0const [selectedOption, setSelectedOption] = \u00a0\u00a0useState<Option>(defaultOption);\n    \u00a0\u00a0const history = useHistory();\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (categories) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const catOptions: Array<Option> = categories.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0map((cat: Category) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: cat.id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label: cat.name,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategoryOptions(catOptions);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setSelectedOption({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: preselectedCategory ? preselectedCategory.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id : \"0\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0label: preselectedCategory ? preselectedCategory.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name : defaultLabel,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [categories, preselectedCategory]);\n    \u00a0\u00a0const onChangeDropDown = (selected: Option) => {\n    \u00a0\u00a0\u00a0\u00a0setSelectedOption(selected);\n    \u00a0\u00a0\u00a0\u00a0if (sendOutSelectedCategory) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendOutSelectedCategory(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Category(selected.value, selected.label?.valueOf().toString() ?? \"\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0if (navigate) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0history.push(`/categorythreads/${selected.value}`);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<DropDown\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"thread-category-dropdown\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0options={categoryOptions}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeDropDown}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={selectedOption}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=defaultLabel\n    \u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0);\n    };\n    export default CategoryDropDown;\n    ```", "```ts\n    interface MainHeaderProps {\n    \u00a0\u00a0category?: Category;\n    }\n    const MainHeader: FC<MainHeaderProps> = ({ category }) => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    ```", "```ts\n    \u00a0\u00a0const getLabelElement = () => {\n    \u00a0\u00a0\u00a0\u00a0if (width <= 768) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<CategoryDropDown navigate={true} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0preselectedCategory={category} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <strong>{category?.name || \"Placeholder\"}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</strong>;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"main-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"title-bar\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ marginBottom: \".25em\", paddingBottom: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"0\" }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{getLabelElement function.\n\n    ```", "```ts\n\n    ```", "```ts\n    const LoginMutation = gql`\n    \u00a0\u00a0mutation Login($userName: String!, $password: String!)\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0login(userName: $userName, password: $password)\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const Login: FC<ModalProps> = ({ isOpen, onClickToggle }) => {\n    \u00a0\u00a0const [execLogin] = useMutation(LoginMutation, {\n    \u00a0\u00a0\u00a0\u00a0refetchQueries: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0query: Me,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0});\n    ```", "```ts\n    const [\n    \u00a0\u00a0\u00a0\u00a0{ userName, password, resultMsg, isSubmitDisabled },\n    \u00a0\u00a0\u00a0\u00a0dispatch,\n    \u00a0\u00a0] = useReducer(userReducer, {\n    \u00a0\u00a0\u00a0\u00a0userName: \"test1\",\n    \u00a0\u00a0\u00a0\u00a0password: \"Test123!@#\",\n    \u00a0\u00a0\u00a0\u00a0resultMsg: \"\",\n    \u00a0\u00a0\u00a0\u00a0isSubmitDisabled: false,\n    \u00a0\u00a0});\n    \u00a0\u00a0const { execMe, updateMe } = useRefreshReduxMe();\n    \u00a0\u00a0const onChangeUserName = (e: React.\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0dispatch({ type: \"userName\", payload: e.target.value \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0if (!e.target.value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowSubmit(dispatch, \"Username cannot be empty\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true);\n    \u00a0\u00a0\u00a0\u00a0else allowSubmit(dispatch, \"\", false);\n    \u00a0\u00a0};\n    \u00a0\u00a0const onChangePassword = (e: React.\u00a0\u00a0ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0dispatch({ type: \"password\", payload: e.target.value \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0if (!e.target.value)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowSubmit(dispatch, \"Password cannot be empty\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0true);\n    \u00a0\u00a0\u00a0\u00a0else allowSubmit(dispatch, \"\", false);\n    \u00a0\u00a0};\n    ```", "```ts\n    const onClickLogin = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0onClickToggle(e);\n    \u00a0\u00a0\u00a0\u00a0const result = await execLogin({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0password,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0execMe();\n    \u00a0\u00a0\u00a0\u00a0updateMe();\n    \u00a0\u00a0};\n    ```", "```ts\n    function App() {\n    \u00a0\u00a0const { data: categoriesData } = \u00a0\u00a0useQuery(GetAllCategories);\n    \u00a0\u00a0const { execMe, updateMe } = useRefreshReduxMe();\n    ```", "```ts\n    \u00a0\u00a0const dispatch = useDispatch();\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0execMe();\n    \u00a0\u00a0}, [execMe]);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0updateMe();\n    \u00a0\u00a0}, [updateMe]);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (categoriesData && categoriesData.\u00a0\u00a0\u00a0\u00a0getAllCategories) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: ThreadCategoriesType,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: categoriesData.getAllCategories,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [dispatch, categoriesData]);\n    ```", "```ts\n    const LogoutMutation = gql`\n    \u00a0\u00a0mutation logout($userName: String!) {\n    \u00a0\u00a0\u00a0\u00a0logout(userName: $userName)\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const Logout: FC<ModalProps> = ({ isOpen, onClickToggle }) => {\n    \u00a0\u00a0const user = useSelector((state: AppState) => state.\u00a0\u00a0user);\n    \u00a0\u00a0const [execLogout] = useMutation(LogoutMutation, {\n    \u00a0\u00a0\u00a0\u00a0refetchQueries: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0query: Me,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0const { execMe, deleteMe } = useRefreshReduxMe();\n    \u00a0\u00a0const onClickLogin = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0onClickToggle(e);\n    \u00a0\u00a0\u00a0\u00a0await execLogout({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName: user?.userName ?? \"\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0deleteMe();\n    \u00a0\u00a0};\n    ```", "```ts\n    return (\n    \u00a0\u00a0\u00a0\u00a0<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ul>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{user ? (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faUser} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span className=\"menu-name\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Link to={`/userprofile/${user?.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id}`}>{user?.userName}</Link>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) : null}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{user ? null : (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faRegistered} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span onClick={onClickToggleRegister} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"menu-name\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0register\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Registration\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0isOpen={showRegister}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClickToggle={onClickToggleRegister}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{user ? null : (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faSignInAlt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span onClick={onClickToggleLogin}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"menu-name\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0login\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Login isOpen={showLogin} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClickToggle={onClickToggleLogin} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{user ? (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faSignOutAlt} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span onClick={onClickToggleLogout} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"menu-name\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0logout\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Logout isOpen={showLogout} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClickToggle={onClickToggleLogout} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) : null}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</ul>\n    \u00a0\u00a0\u00a0\u00a0</React.Fragment>\n    \u00a0\u00a0);\n    ```", "```ts\n    \u00a0\u00a0threadItems. Note that this is different from threadItems that's part of the threads field, as we are trying to retrieve the ThreadItem entities the user themselves has authored.\n    ```", "```ts\n    \u00a0\u00a0@OneToMany(() => ThreadItem, (threadItem) => \u00a0\u00a0threadItem.user)\n    \u00a0\u00a0threadItems: ThreadItem[];\n    ```", "```ts\n    @ManyToOne(() => User, (user) => user.threadItems)\n    \u00a0\u00a0user: User;\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0relations: [\"threads\", \"threads.threadItems\",\u00a0\u00a0\u00a0\u00a0threadItems and threadItems.thread relations.\n    ```", "```ts\n    changePassword(newPassword: String!): String!\n    ```", "```ts\n    const ChangePassword = gql`\n    \u00a0\u00a0mutation ChangePassword($newPassword: String!) {\n    \u00a0\u00a0\u00a0\u00a0changePassword(newPassword: $newPassword)\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const UserProfile = () => {\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0{ userName, password, passwordConfirm, resultMsg,\u00a0\u00a0\u00a0\u00a0isSubmitDisabled },\n    \u00a0\u00a0\u00a0\u00a0dispatch,\n    \u00a0\u00a0] = useReducer(userReducer, {\n    \u00a0\u00a0\u00a0\u00a0userName: \"\",\n    \u00a0\u00a0\u00a0\u00a0password: \"*********\",\n    \u00a0\u00a0\u00a0\u00a0passwordConfirm: \"*********\",\n    \u00a0\u00a0\u00a0\u00a0resultMsg: \"\",\n    \u00a0\u00a0\u00a0\u00a0isSubmitDisabled: true,\n    \u00a0\u00a0});\n    \u00a0\u00a0const user = useSelector((state: AppState) => state.\u00a0\u00a0\u00a0user);\n    \u00a0\u00a0const [threads, setThreads] = useState<JSX.Element | \u00a0\u00a0\u00a0undefined>();\n    \u00a0\u00a0const [threadItems, setThreadItems] = useState<JSX.\u00a0\u00a0\u00a0Element | undefined>();\n    \u00a0\u00a0const [execChangePassword] = \u00a0\u00a0\u00a0useMutation(ChangePassword Mutation with useMutation.The `useEffect` code shown here is the same as before:\n\n    ```", "```ts\n\n    This `onClickChangePassword` function is new. It triggers the `changePassword` call and then updates the UI status message.\n\n    ```", "```ts\n\n    The `onClickChangePassword` handler is set here onto our Change Password button.\n\n    ```", "```ts\n\n    The remaining code is the same.\n    ```", "```ts\n    public threadItems: Array<ThreadItem>\n    ```", "```ts\n    export const Me = gql`\n    \u00a0\u00a0query me {\n    \u00a0\u00a0\u00a0\u00a0me {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on User {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems from getting the threads' threadItems to getting the user's threadItems. We also now get the threadItems' thread.\n    ```", "```ts\n    useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (user) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"userName\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: user.userName,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threadList = user.threads?.map((th: Thread)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li key={`user-th-${th.id}`}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Link to={`/thread/${th.id}`} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"userprofile-link\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{th.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Link>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreads(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!user.threadItems || user.threadItems.length === \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00 ? undefined : (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ul>{threadList}</ul>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threadItemList = user.threadItems?.map((ti: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ThreadItem) => (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li key={`user-ti-${ti.id}`}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Link to={`/thread/${ti.thread?.id}`} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"userprofile-link\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{ti.body.length <= 40 ? ti.body : ti.body.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0substring(0, 40) + \" ...\"}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Link>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadItems(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0!user.threadItems || user.threadItems.length === \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00 ? undefined : (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ul>{threadItemList}</ul>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"userName\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: \"\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreads(undefined);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadItems(undefined);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [user]);\n    ```"]