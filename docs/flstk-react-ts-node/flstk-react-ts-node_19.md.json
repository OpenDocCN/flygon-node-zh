["```ts\n    points: Int!\n    ```", "```ts\n    export const getThreadById = async (\n    \u00a0\u00a0id: string\n    ): Promise<QueryOneResult<Thread>> => {\n    \u00a0\u00a0const thread = await Thread.findOne({\n    \u00a0\u00a0\u00a0\u00a0where: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0relations: [\"user\", \"threadItems\", \"threadItems.\u00a0\u00a0\u00a0\u00a0\u00a0user\", \"category\"],\n    \u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0if (!thread) {\n    \u00a0\u00a0\u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages: [\"Thread not found.\"],\n    \u00a0\u00a0\u00a0\u00a0};\n    \u00a0\u00a0}\n    \u00a0\u00a0return {\n    \u00a0\u00a0\u00a0\u00a0entity: thread,\n    \u00a0\u00a0};\n    };\n    ```", "```ts\n    const threads = await Thread.createQueryBuilder(\"thread\")\n    \u00a0\u00a0\u00a0\u00a0.where(`thread.\"categoryId\" = :categoryId`, { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId })\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.category\", \"category\")\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.threadItems\", \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"threadItems\")\n    \u00a0\u00a0\u00a0\u00a0.leftJoinAndSelect(\"thread.user\", \"user\")\n    \u00a0\u00a0\u00a0\u00a0.orderBy(\"thread.createdOn\", \"DESC\")\n    \u00a0\u00a0\u00a0\u00a0.getMany();\n    ```", "```ts\n    public threads?: Array<Thread>,\n    public threadItems?: Array<ThreadItem>\n    ```", "```ts\n    public user: User,\n    ```", "```ts\n    const user = new User(\"1\", \"test1@test.com\", \"test1\");\n    ```", "```ts\n    const GetThreadsByCategoryId = gql`\n    \u00a0\u00a0query getThreadsByCategoryId($categoryId: ID!) {\n    \u00a0\u00a0\u00a0\u00a0getThreadsByCategoryId(categoryId: $categoryId) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on ThreadArray {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0views\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points and user fields, as follows:\n\n    ```", "```ts\n\n    ```", "```ts\n    <span className=\"username-header\" style={{ marginLeft: \".5em\" }}>\n    \u00a0\u00a0\u00a0{thread.userName}\n    </span>\n    ```", "```ts\n    <span className=\"username-header\" style={{ marginLeft: \".5em\" }}>\n    \u00a0\u00a0\u00a0{thread.user to get its userName field instead of trying to access it directly.\n    ```", "```ts\n    class RichEditorProps {\n    \u00a0\u00a0existingBody?: string;\n    \u00a0\u00a0false is the normal setting (interfaces don't allow default values). Now, update the parameter list in the RichEditor component, like this:\n\n    ```", "```ts\n    <Editable\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"editor\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderElement={renderElement}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderLeaf={renderLeaf}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=\"Enter some rich text\u2026\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spellCheck\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoFocus\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onKeyDown={(event) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (const hotkey in HOTKEYS) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (isHotkey(hotkey, event as any)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0event.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const mark = HOTKEYS[hotkey];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0toggleMark(editor, mark);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly prop.\n    ```", "```ts\n\n    ```", "```ts\n    const GetThreadById = gql`\n    \u00a0\u00a0query GetThreadById($id: ID!) {\n    \u00a0\u00a0\u00a0\u00a0getThreadById(id: $id) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on Thread {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    const Thread = () => {\n    \u00a0\u00a0const [execGetThreadById, { data: threadData }] =\u00a0\u00a0\u00a0useLazyQuery(GetThreadById);\n    ```", "```ts\n    \u00a0\u00a0const [thread, setThread] = useState<ThreadModel | \u00a0\u00a0\u00a0undefined>();\n    ```", "```ts\n    \u00a0\u00a0const { id } = useParams();\n    ```", "```ts\n    \u00a0\u00a0const [readOnly, setReadOnly] = useState(false);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (id && id > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"id\", id);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadById({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [id, execGetThreadById]);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"threadData\", threadData);\n    \u00a0\u00a0\u00a0\u00a0if (threadData && threadData.getThreadById) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThread(threadData.getThreadById);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThread(undefined);\n    \u00a0\u00a0\u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0}, [threadData]);\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"screen-root-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-nav-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Nav />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-post-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadHeader\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={thread?.user.userName}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={thread ? thread.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn : new Date()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread?.title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadCategory category={thread?.category} />\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadTitle title={thread?.title} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadBody body={thread?.body} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly} />\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-points-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadPointsBar\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points={thread?.points || 0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0responseCount={\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread && thread.threadItems && thread.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems.length\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-response-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<hr className=\"thread-section-divider\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadResponsesBuilder threadItems={thread?.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems} readOnly={readOnly} />\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    interface ThreadCategoryProps {\n    \u00a0\u00a0category?: Category;\n    }\n    ```", "```ts\n    const ThreadCategory: FC<ThreadCategoryProps> = ({ category }) => {\n    \u00a0\u00a0const sendOutSelectedCategory = (cat: Category) => {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"selected category\", cat);\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"thread-category-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>{category?.name}</strong>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div style={{ marginTop: \"1em\" }}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<CategoryDropDown\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0preselectedCategory={category}\n    ```", "```ts\n    sendOutSelectedCategory={sendOutSelectedCategory}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    interface ThreadBodyProps {\n    \u00a0\u00a0body?: string;\n    \u00a0\u00a0readOnly: boolean;\n    }\n    ```", "```ts\n    const ThreadBody: FC<ThreadBodyProps> = ({ body, readOnly prop to our RichEditor.\n    ```", "```ts\n    interface ThreadResponsesBuilderProps {\n    \u00a0\u00a0threadItems?: Array<ThreadItem>;\n    \u00a0\u00a0readOnly: boolean;\n    }\n    ```", "```ts\n    const ThreadResponsesBuilder: FC<ThreadResponsesBuilderProps> = ({\n    \u00a0\u00a0threadItems,\n    \u00a0\u00a0readOnly,\n    }) => {\n    \u00a0\u00a0const [responseElements, setResponseElements] = \u00a0\u00a0useState<\n    \u00a0\u00a0\u00a0\u00a0JSX.Element | undefined\n    \u00a0\u00a0>();\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (threadItems) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const thResponses = threadItems.map((ti) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li key={`thr-${ti.id}`}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadResponse\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body={ti.body}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={ti.user.userName}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={ti.createdOn}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points={ti.points}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setResponseElements(<ul>{thResponses}</ul>);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadItems, readOnly]);\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"thread-body-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong style={{ marginBottom: \".75em\" }}>Responses</strong>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{responseElements}\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    interface ThreadResponseProps {\n    \u00a0\u00a0body?: string;\n    \u00a0\u00a0userName?: string;\n    \u00a0\u00a0lastModifiedOn?: Date;\n    \u00a0\u00a0points: number;\n    \u00a0\u00a0readOnly: boolean;\n    ```", "```ts\n    }\n    const ThreadResponse: FC<ThreadResponseProps> = ({\n    \u00a0\u00a0body,\n    \u00a0\u00a0userName,\n    \u00a0\u00a0lastModifiedOn,\n    \u00a0\u00a0points,\n    \u00a0\u00a0readOnly prop in.\n\n    ```", "```ts\n\n    And here, we've passed `readOnly` into our `RichEditor` component.\n\n    ```", "```ts\n\n    ```", "```ts\n    import React, { FC } from \"react\";\n    import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n    import {\n    \u00a0\u00a0faHeart,\n    \u00a0\u00a0faReplyAll,\n    \u00a0\u00a0faChevronDown,\n    \u00a0\u00a0faChevronUp,\n    } from \"@fortawesome/free-solid-svg-icons\";\n    import { useWindowDimensions } from \"../../hooks/useWindowDimensions\";\n    import { gql, useMutation } from \"@apollo/client\";\n    const UpdateThreadPoint = gql`\n    \u00a0\u00a0mutation UpdateThreadPoint(\n    \u00a0\u00a0\u00a0\u00a0$userId: ID!\n    \u00a0\u00a0\u00a0\u00a0$threadId: ID!\n    \u00a0\u00a0\u00a0\u00a0$increment: Boolean!\n    \u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0updateThreadPoint(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId: $userId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadId: $threadId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: $increment\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    export class ThreadPointsBarProps {\n    \u00a0\u00a0points: number = 0;\n    \u00a0\u00a0responseCount?: number;\n    \u00a0\u00a0userId?: string;\n    \u00a0\u00a0threadId?: string;\n    \u00a0\u00a0allowUpdatePoints?: boolean = false;\n    \u00a0\u00a0refreshThread?: () => void;\n    }\n    ```", "```ts\n    const ThreadPointsBar: FC<ThreadPointsBarProps> = ({\n    \u00a0\u00a0points,\n    \u00a0\u00a0responseCount,\n    \u00a0\u00a0userId,\n    \u00a0\u00a0threadId,\n    \u00a0\u00a0allowUpdatePoints,\n    \u00a0\u00a0refreshThread,\n    }) => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0const [execUpdateThreadPoint] = useMutation(UpdateThreadPoint);\n    ```", "```ts\n    \u00a0\u00a0const onClickIncThreadPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    \u00a0\u00a0const onClickDecThreadPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: false,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0if (width > 768) {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"ThreadPointsBar points\", points);\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"threadcard-points\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"threadcard-points-item\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadcard-points-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"block\" : \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronUp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickIncThreadPoint}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{points}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadcard-points-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"block\" : \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronDown}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickDecThreadPoint}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faHeart}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"points-icon\" />\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"threadcard-points-item\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{responseCount}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faReplyAll} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"points-icon\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0}\n    \u00a0\u00a0return null;\n    };\n    export default ThreadPointsBar;\n    ```", "```ts\n    .threadcard-points-item {\n    \u00a0\u00a0display: flex;\n    \u00a0\u00a0flex-direction: column;\n    \u00a0\u00a0justify-content: space-between;\n    \u00a0\u00a0align-items: center;\n    \u00a0\u00a0color: var(--point-color);\n    \u00a0\u00a0font-size: var(--sm-med-font-size);\n    \u00a0\u00a0text-align: center;\n    }\n    ```", "```ts\n    .threadcard-points-item-btn {\n    \u00a0\u00a0cursor: pointer;\n    \u00a0\u00a0margin-top: 0.35em;\n    \u00a0\u00a0margin-bottom: 0.35em;\n    }\n    ```", "```ts\n    const client = new ApolloClient({\n    \u00a0\u00a0uri: \"http://localhost:5000/graphql\",\n    \u00a0\u00a0credentials: \"include\",\n    \u00a0\u00a0cache: new InMemoryCache({\n    \u00a0\u00a0\u00a0\u00a0resultCaching: false,\n    \u00a0\u00a0}),\n    });\n    ```", "```ts\n    const GetThreadById = gql`\n    \u00a0\u00a0query GetThreadById($id: ID!) {\n    \u00a0\u00a0\u00a0\u00a0getThreadById(id: $id) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on Thread {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fetchPolicy, which controls the caching policy for our individual call. In this case, we want no caching at all. Again, I had to use fetchPolicy and resultCaching together to get the desired no-cache effect.\n\n    ```", "```ts\n\n    Here, we have defined a function, called `refreshThread`, that calls our `execGetThreadById` executable. This function will be passed to our `ThreadPointBar` component later.\n\n    ```", "```ts\n\n    You're probably wondering why we haven't reused `refreshThread` in the first `useEffect` call. To reuse it, we would have to include `refreshThread` in our `useEffect` call list and make an additional call to `useCallback` so that changes to `refreshThread` do not trigger a re-render. The tiny benefit this brings does not justify the extra code:\n\n    ```", "```ts\n\n    Here, in our `ThreadPointsBar`, we are passing the new props we defined earlier:\n\n    ```", "```ts\n\n    ```", "```ts\n    useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (threadItems) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const thResponses = threadItems.map((ti) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<li key={`thr-${ti.id}`}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadResponse\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body={ti.body}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={ti.user.userName}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={ti.createdOn}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points={ti.points}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId={ti?.user.id || \"0\"}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId={ti?.id || \"0\"}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</li>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setResponseElements(<ul>{thResponses}</ul>);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadItems, readOnly]);\n    ```", "```ts\n    \u00a0\u00a0userId: string;\n    \u00a0\u00a0threadItemId: string;\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<UserNameAndTime userName={userName} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={lastModifiedOn} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{threadItemId}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<span style={{ marginLeft: \"1em\" }}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadPointsInline\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points={points || 0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId and threadItemId data to the ThreadPointsInline component. Note that this component will display points for either Threads or ThreadItems eventually. Also, note that I put threadItemId in there just so we could distinguish between each ThreadItem for now:\n\n    ```", "```ts\n\n    ```", "```ts\n    import \"./ThreadPointsInline.css\";\n    ```", "```ts\n    const UpdateThreadItemPoint = gql`\n    \u00a0\u00a0mutation UpdateThreadItemPoint(\n    \u00a0\u00a0\u00a0\u00a0$userId: ID!\n    \u00a0\u00a0\u00a0\u00a0$threadItemId: ID!\n    \u00a0\u00a0\u00a0\u00a0$increment: Boolean!\n    \u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0updateThreadItemPoint(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId: $userId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId: $threadItemId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: $increment\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    class ThreadPointsInlineProps {\n    \u00a0\u00a0points: number = 0;\n    \u00a0\u00a0userId?: string;\n    \u00a0\u00a0threadId?: string;\n    \u00a0\u00a0threadItemId?: string;\n    \u00a0\u00a0allowUpdatePoints?: boolean = false;\n    \u00a0\u00a0refreshThread?: () => void;\n    }\n    ```", "```ts\n    const ThreadPointsInline: FC<ThreadPointsInlineProps> = ({\n    \u00a0\u00a0points,\n    \u00a0\u00a0userId,\n    \u00a0\u00a0threadId,\n    \u00a0\u00a0threadItemId,\n    \u00a0\u00a0allowUpdatePoints,\n    \u00a0\u00a0refreshThread,\n    }) => {\n    \u00a0\u00a0const [execUpdateThreadItemPoint] =\u00a0\u00a0\u00a0useMutation(UpdateThreadItemPoint);\n    \u00a0\u00a0const onClickIncThreadItemPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadItemPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0const onClickDecThreadItemPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadItemPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: false,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<span className=\"threadpointsinline-item\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadpointsinline-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \"block\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronUp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickIncThreadItemPoint}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{points}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadpointsinline-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \"block\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronDown}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickDecThreadItemPoint}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"threadpointsinline-item-btn\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faHeart} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"points-icon\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0);\n    };\n    export default ThreadPointsInline;\n    ```", "```ts\n    await threadItem.save();\n    ```", "```ts\n    updateThreadPoint: async (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0obj: any,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args: { threadId: string; increment: boolean },\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx: GqlContext,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0info: any\n    \u00a0\u00a0\u00a0\u00a0): Promise<string> => {\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0let result = \"\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (!ctx.req.session || !ctx.req.session?.userId) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"You must be logged in to set likes.\";\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = await updateThreadPoint(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ctx.req.session!.userId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.threadId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args.increment\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} catch (ex) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw ex;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0},\n    ```", "```ts\n    if (!userId || userId === \"0\") {\n    \u00a0\u00a0\u00a0\u00a0return \"User is not authenticated\";\n    }\n    ```", "```ts\n    import useUpdateThreadPoint from \"../../hooks/useUpdateThreadPoint\";\n    ```", "```ts\n    export class ThreadPointsBarProps {\n    \u00a0\u00a0points: number = 0;\n    \u00a0\u00a0responseCount?: number;\n    \u00a0\u00a0threadId?: string;\n    \u00a0\u00a0allowUpdatePoints?: boolean = false;\n    \u00a0\u00a0refreshThread?: () => void;\n    }\n    const ThreadPointsBar: FC<ThreadPointsBarProps> = ({\n    \u00a0\u00a0points,\n    \u00a0\u00a0responseCount,\n    \u00a0\u00a0threadId,\n    \u00a0\u00a0allowUpdatePoints,\n    \u00a0\u00a0refreshThread,\n    }) => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0const { onClickDecThreadPoint, onClickIncThreadPoint } \u00a0\u00a0\u00a0= useUpdateThreadPoint(\n    \u00a0\u00a0\u00a0\u00a0refreshThread,\n    \u00a0\u00a0\u00a0\u00a0threadId\n    \u00a0\u00a0);\n    ```", "```ts\n    import React, { FC } from \"react\";\n    import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n    import {\n    \u00a0\u00a0faHeart,\n    \u00a0\u00a0faChevronDown,\n    \u00a0\u00a0faChevronUp,\n    } from \"@fortawesome/free-solid-svg-icons\";\n    import { gql, useMutation } from \"@apollo/client\";\n    import \"./ThreadPointsInline.css\";\n    import useUpdateThreadPoint from \"../../hooks/useUpdateThreadPoint\";\n    const UpdateThreadItemPoint = gql`\n    \u00a0\u00a0mutation UpdateThreadItemPoint($threadItemId: ID!, \u00a0\u00a0\u00a0$increment: Boolean!) {\n    \u00a0\u00a0\u00a0\u00a0updateThreadItemPoint(threadItemId: $threadItemId, \u00a0\u00a0\u00a0\u00a0increment: $increment)\n    \u00a0\u00a0}\n    `;\n    class ThreadPointsInlineProps {\n    \u00a0\u00a0points: number = 0;\n    \u00a0\u00a0threadId?: string;\n    \u00a0\u00a0threadItemId?: string;\n    \u00a0\u00a0allowUpdatePoints?: boolean = false;\n    \u00a0\u00a0refreshThread?: () => void;\n    }\n    const ThreadPointsInline: FC<ThreadPointsInlineProps> = ({\n    \u00a0\u00a0points,\n    \u00a0\u00a0threadId,\n    \u00a0\u00a0threadItemId,\n    \u00a0\u00a0allowUpdatePoints,\n    \u00a0\u00a0refreshThread,\n    }) => {\n    \u00a0\u00a0const [execUpdateThreadItemPoint] = \u00a0\u00a0\u00a0useMutation(UpdateThreadItemPoint);\n    \u00a0\u00a0const { onClickDecThreadPoint, onClickIncThreadPoint } \u00a0\u00a0\u00a0= useUpdateThreadPoint(\n    \u00a0\u00a0\u00a0\u00a0refreshThread,\n    \u00a0\u00a0\u00a0\u00a0threadId\n    \u00a0\u00a0);\n    ```", "```ts\n    \u00a0\u00a0const onClickIncThreadItemPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadItemPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: true,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    \u00a0\u00a0const onClickDecThreadItemPoint = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<SVGSVGElement, MouseEvent>\n    \u00a0\u00a0) => {\n    \u00a0\u00a0\u00a0\u00a0e.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0await execUpdateThreadItemPoint({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItemId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0increment: false,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0refreshThread && refreshThread();\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<span className=\"threadpointsinline-item\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadpointsinline-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \"block\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronUp}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={threadId ? onClickIncThreadPoint : \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClickIncThreadItemPoint}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{points}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"threadpointsinline-item-btn\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{ display: `${allowUpdatePoints ? \"block\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: \"none\"}` }}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0icon={faChevronDown}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"point-icon\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={threadId ? onClickDecThreadPoint : \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClickDecThreadItemPoint}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"threadpointsinline-item-btn\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<FontAwesomeIcon icon={faHeart} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"points-icon\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</span>\n    \u00a0\u00a0);\n    };\n    export default ThreadPointsInline;\n    ```", "```ts\n    return { messages: [\"Thread created successfully.\"] };\n    ```", "```ts\n    return { messages: [thread.id] };\n    ```", "```ts\n    <Route path=\"/thread/? immediately after the id parameter. This will allow the Thread route to load with no parameters, which is what tells the screen that we want to make a new Thread post.\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (categoryId && categoryId > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadsByCat({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadsLatest();\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// eslint-disable-next-line react-hooks/exhaustive-\u00a0\u00a0\u00a0\u00a0\u00a0// deps\n    \u00a0\u00a0}, [categoryId]);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"main threadsByCatData\", \u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData);\n    \u00a0\u00a0\u00a0\u00a0if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData.getThreadsByCategoryId &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsByCatData.getThreadsByCategoryId.threads\n    \u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threads = threadsByCatData.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0getThreadsByCategoryId.threads;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cards = threads.map((th: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <ThreadCard key={`thread-${th.id}`} thread={th} />;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategory(threads[0].category);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadCards(cards);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategory(undefined);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadCards(null);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadsByCatData]);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData.getThreadsLatest &&\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadsLatestData.getThreadsLatest.threads\n    \u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const threads = threadsLatestData.getThreadsLatest.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threads;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const cards = threads.map((th: any) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <ThreadCard key={`thread-${th.id}`} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0thread={th} />;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setCategory(new Category(\"0\", \"Latest\"));\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThreadCards(cards);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadsLatestData]);\n    \u00a0\u00a0const onClickPostThread = () => {\n    \u00a0\u00a0\u00a0\u00a0history.push(\"/thread\");\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<main className=\"content\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button className=\"action-btn\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickPostThread}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Post\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MainHeader category={category} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>{threadCards}</div>\n    \u00a0\u00a0\u00a0\u00a0</main>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    export const getTextFromNodes = (nodes: Node[]) => {\n    \u00a0\u00a0return nodes.map((n: Node) => Node.string(n)).\u00a0\u00a0\u00a0join(\"\\n\");\n    };\n    ```", "```ts\n    const HOTKEYS: { [keyName: string]: string } = {\n    \u00a0\u00a0\"mod+b\": \"bold\",\n    \u00a0\u00a0\"mod+i\": \"italic\",\n    \u00a0\u00a0\"mod+u\": \"underline\",\n    \u00a0\u00a0\"mod+`\": \"code\",\n    };\n    const initialValue = [\n    \u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0type: \"paragraph\",\n    \u00a0\u00a0\u00a0\u00a0children: [{ text: \"\" }],\n    ```", "```ts\n    \u00a0\u00a0},\n    ];\n    const LIST_TYPES = [\"numbered-list\", \"bulleted-list\"];\n    class RichEditorProps {\n    \u00a0\u00a0existingBody?: string;\n    \u00a0\u00a0readOnly?: boolean = false;\n    \u00a0\u00a0sendOutBody?: (body: Node[]) => void;\n    ```", "```ts\n    }\n    const RichEditor: FC<RichEditorProps> = ({\n    \u00a0\u00a0existingBody,\n    \u00a0\u00a0readOnly,\n    \u00a0\u00a0sendOutBody,\n    }) => {\n    \u00a0\u00a0const [value, setValue] =\u00a0\u00a0\u00a0useState<Node[]>(initialValue);\n    \u00a0\u00a0const renderElement = useCallback((props) => <Element {...props} />, []);\n    \u00a0\u00a0const renderLeaf = useCallback((props) => <Leaf {...\u00a0\u00a0\u00a0props} />, []);\n    \u00a0\u00a0const editor = useMemo(() => \u00a0\u00a0\u00a0withHistory(withReact(createEditor())), []);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"existingBody\", existingBody);\n    \u00a0\u00a0\u00a0\u00a0if (existingBody) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setValue(JSON.parse(existingBody));\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0// eslint-disable-next-line react-hooks/exhaustive-\u00a0\u00a0\u00a0\u00a0// deps\n    \u00a0\u00a0}, [existingBody]);\n    \u00a0\u00a0const onChangeEditorValue = (val: Node[]) => {\n    \u00a0\u00a0\u00a0\u00a0setValue(val);\n    \u00a0\u00a0\u00a0\u00a0sendOutBody && sendOutBody(val);\n    ```", "```ts\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<Slate editor={editor} value={value} \u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeEditorValue}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Toolbar>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MarkButton format=\"bold\" icon=\"bold\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MarkButton format=\"italic\" icon=\"italic\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MarkButton format=\"underline\" icon=\"underlined\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<MarkButton format=\"code\" icon=\"code\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BlockButton format=\"heading-one\" icon=\"header1\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BlockButton format=\"block-quote\" icon=\"in_\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0quotes\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BlockButton format=\"numbered-list\" icon=\"list_\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0numbered\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<BlockButton format=\"bulleted-list\" icon=\"list_\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bulleted\" />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</Toolbar>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Editable\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0className=\"editor\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderElement={renderElement}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderLeaf={renderLeaf}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0placeholder=\"Enter your post here.\"\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spellCheck\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoFocus\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onKeyDown={(event) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for (const hotkey in HOTKEYS) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (isHotkey(hotkey, event as any)) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0event.preventDefault();\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const mark = HOTKEYS[hotkey];\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0toggleMark(editor, mark);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0</Slate>\n    \u00a0\u00a0);\n    };\n    ```", "```ts\n    interface ThreadCategoryProps {\n    \u00a0\u00a0category?: Category;\n    \u00a0\u00a0sendOutSelectedCategory: (cat: Category) => void;\n    ```", "```ts\n    }\n    const ThreadCategory: FC<ThreadCategoryProps> = ({\n    \u00a0\u00a0category,\n    \u00a0\u00a0sendOutSelectedCategory,\n    }) => {\n    ```", "```ts\n    import React, { FC, useEffect, useState } from \"react\";\n    interface ThreadTitleProps {\n    \u00a0\u00a0title?: string;\n    \u00a0\u00a0readOnly: boolean;\n    ```", "```ts\n    \u00a0\u00a0sendOutTitle: (title: string) => void;\n    ```", "```ts\n    }\n    const ThreadTitle: FC<ThreadTitleProps> = ({\n    \u00a0\u00a0title,\n    \u00a0\u00a0readOnly,\n    \u00a0\u00a0sendOutTitle,\n    }) => {\n    \u00a0\u00a0const [currentTitle, setCurrentTitle] = useState(\"\");\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0setCurrentTitle(title || \"\");\n    \u00a0\u00a0}, [title]);\n    \u00a0\u00a0const onChangeTitle = (e: React.\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0setCurrentTitle(e.target.value);\n    \u00a0\u00a0\u00a0\u00a0sendOutTitle(e.target.value);\n    ```", "```ts\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"thread-title-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>Title</strong>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"field\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type=\"text\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value={currentTitle}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeTitle}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    export default ThreadTitle;\n    ```", "```ts\n    import React, { FC } from \"react\";\n    import RichEditor from \"../../editor/RichEditor\";\n    import { Node } from \"slate\";\n    interface ThreadBodyProps {\n    \u00a0\u00a0body?: string;\n    \u00a0\u00a0readOnly: boolean;\n    \u00a0\u00a0sendOutBody: (body: Node[]) => void;\n    ```", "```ts\n    }\n    const ThreadBody: FC<ThreadBodyProps> = ({ body, readOnly, sendOutBody }) => {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"thread-body-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>Body</strong>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-body-editor\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<RichEditor\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0existingBody={body}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={readOnly}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendOutBody={sendOutBody}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0);\n    };\n    export default ThreadBody;\n    ```", "```ts\n    const GetThreadById = gql`\n    \u00a0\u00a0query GetThreadById($id: ID!) {\n    \u00a0\u00a0\u00a0\u00a0getThreadById(id: $id) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on EntityResult {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0... on Thread {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadItems {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    const CreateThread = gql`\n    \u00a0\u00a0mutation createThread(\n    \u00a0\u00a0\u00a0\u00a0$userId: ID!\n    \u00a0\u00a0\u00a0\u00a0$categoryId: ID!\n    \u00a0\u00a0\u00a0\u00a0$title: String!\n    \u00a0\u00a0\u00a0\u00a0$body: String!\n    \u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0createThread(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userId: $userId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0categoryId: $categoryId\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title: $title\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body: $body\n    \u00a0\u00a0\u00a0\u00a0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}\n    `;\n    ```", "```ts\n    const threadReducer = (state: any, action: any) => {\n    \u00a0\u00a0switch (action.type) {\n    \u00a0\u00a0\u00a0\u00a0case \"userId\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, userId: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"category\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, category: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"title\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, title: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"body\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, body: action.payload };\n    \u00a0\u00a0\u00a0\u00a0case \"bodyNode\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, bodyNode: action.payload };\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Error(\"Unknown action type\");\n    \u00a0\u00a0}\n    };\n    ```", "```ts\n    const Thread = () => {\n    \u00a0\u00a0const { width } = useWindowDimensions();\n    \u00a0\u00a0const [execGetThreadById, { data: threadData }] = \u00a0\u00a0\u00a0useLazyQuery(\n    \u00a0\u00a0\u00a0\u00a0GetThreadById,\n    \u00a0\u00a0\u00a0\u00a0{ fetchPolicy: \"no-cache\" }\n    \u00a0\u00a0);\n    \u00a0\u00a0const [thread, setThread] = useState<ThreadModel | \u00a0\u00a0\u00a0undefined>();\n    \u00a0\u00a0const { id } = useParams();\n    \u00a0\u00a0const [readOnly, setReadOnly] = useState(false);\n    \u00a0\u00a0const user = useSelector((state: AppState) => state.\u00a0\u00a0\u00a0user);\n    ```", "```ts\n    \u00a0\u00a0const [\n    \u00a0\u00a0\u00a0\u00a0{ userId, category, title, body, bodyNode },\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch,\n    \u00a0\u00a0] = useReducer(threadReducer, {\n    \u00a0\u00a0\u00a0\u00a0userId: user ? user.id : \"0\",\n    \u00a0\u00a0\u00a0\u00a0category: undefined,\n    \u00a0\u00a0\u00a0\u00a0title: \"\",\n    \u00a0\u00a0\u00a0\u00a0body: \"\",\n    \u00a0\u00a0\u00a0\u00a0bodyNode: undefined,\n    \u00a0\u00a0});\n    ```", "```ts\n    \u00a0\u00a0const [postMsg, setPostMsg] = useState(\"\");\n    ```", "```ts\n    \u00a0\u00a0const [execCreateThread] = useMutation(CreateThread);\n    ```", "```ts\n    \u00a0\u00a0const history = useHistory();\n    ```", "```ts\n    \u00a0\u00a0const refreshThread = () => {\n    \u00a0\u00a0\u00a0\u00a0if (id && id > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadById({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0};\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"id\");\n    \u00a0\u00a0\u00a0\u00a0if (id && id > 0) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0execGetThreadById({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0variables: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [id, execGetThreadById]);\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"userId\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: user ? user.id : \"0\",\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0}, [user]);\n    ```", "```ts\n    \u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0if (threadData && threadData.getThreadById) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThread(threadData.getThreadById);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setReadOnly(true);\n    \u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setThread(undefined);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setReadOnly(false);\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0}, [threadData]);\n    \u00a0\u00a0const receiveSelectedCategory = (cat: Category) => {\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"category\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: cat,\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0const receiveTitle = (updatedTitle: string) => {\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"title\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: updatedTitle,\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0};\n    \u00a0\u00a0const receiveBody = (body: Node[]) => {\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"bodyNode\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: body,\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0threadReducerDispatch({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: \"body\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: getTextFromNodes(body),\n    \u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0};\n    ```", "```ts\n    \u00a0\u00a0const onClickPost = async (\n    \u00a0\u00a0\u00a0\u00a0e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    \u00a0\u00a0) => {\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setPostMsg(createThreadMsg.createThread.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0messages[0]);\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0};\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"screen-root-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-nav-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Nav />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"thread-content-post-container\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{width <= 768 && thread ? (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadPointsInline\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0points={thread?.points || 0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0threadId={thread?.id}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0refreshThread={refreshThread}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0allowUpdatePoints={true}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) : null}\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadHeader\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0userName={thread ? thread.user.userName :\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0user?.userName}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn={thread ? thread.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0lastModifiedOn : new Date()}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread ? thread.title : title}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadCategory\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category={thread ? thread.category : \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0category}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendOutSelectedCategory=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{receiveSelectedCategory} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadTitle\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0title={thread ? thread.title : \"\"}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={thread ? readOnly : false}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendOutTitle={receiveTitle}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<ThreadBody\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0body={thread ? thread.body : \"\"}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly={thread ? readOnly : false}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendOutBody={receiveBody}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{thread ? null : (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div style={{ marginTop: \".5em\" }}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button className=\"action-btn\" \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onClick={onClickPost}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Post\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<strong>{postMsg}</strong>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0)}\n    ```", "```ts\n    {readOnly mode, this Toolbar does not appear.\n    ```", "```ts\n    <RichEditor existingBody={thread.body} readOnly={true} />\n    ```", "```ts\n    return { messages: [`${threadItem.id}`] };\n    ```", "```ts\n    const thread = await Thread.findOne({\n    \u00a0\u00a0\u00a0\u00a0where: {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0id,\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0relations: [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"user\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"threadItems\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"threadItems.user\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ThreadItem response, we can associate it with the correct parent Thread.\n    ```", "```ts\n    public thread: Thread\n    ```", "```ts\n    type CategoryThread {\n    \u00a0\u00a0\u00a0\u00a0threadId: ID!\n    \u00a0\u00a0\u00a0\u00a0categoryId: ID!\n    \u00a0\u00a0\u00a0\u00a0categoryName: String!\n    \u00a0\u00a0\u00a0\u00a0title: String!\n    \u00a0\u00a0\u00a0\u00a0titleCreatedOn: Date!\n    \u00a0\u00a0}\n    ```", "```ts\n    export default class CategoryThread {\n    \u00a0\u00a0constructor(\n    \u00a0\u00a0\u00a0\u00a0public threadId: string,\n    \u00a0\u00a0\u00a0\u00a0public categoryId: string,\n    \u00a0\u00a0\u00a0\u00a0public categoryName: string,\n    \u00a0\u00a0\u00a0\u00a0public title: string,\n    \u00a0\u00a0\u00a0\u00a0public titleCreatedOn: Date\n    \u00a0\u00a0) {}\n    }\n    ```", "```ts\n    <strong>{topCategories[0].category}</strong>\n    ```"]