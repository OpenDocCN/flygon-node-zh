["```ts\n    npx create-react-app class-components -\u2013template typescript\n    ```", "```ts\n    import React from \"react\";\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0tsx. When using TypeScript and creating a React component you must use tsx as your file's extension. Next, when we look at the code we see the import of React, which provides not only the Component to inherit from but also access to JSX syntax. Next, we see two new interfaces: GreetingProps and GreetingState. Again, because we are using TypeScript and want type safety we are creating the expected types for both any props that come into our component and the state that is being used inside of our component. Also take note that the name field in the GreetingProps interface is optional, which means it can also be set to undefined, as we'll use it later. Again, avoid having local state in your non-parent non-root components when possible. I am doing this for example purposes here.\n    ```", "```ts\n    import React from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    Greeting class. Since our Greeting class is the default export of the Greeting.tsx module file (we don't need to indicate the extension) we need not use {} in between import and from. If the Greeting class was not the default export, for example, if we had many exports in the same module file, then we would need to use this syntax: import { Greeting } from \"./Greeting\".\n    ```", "```ts\n    name property to our Greeting component. As we saw, it was possible to leave this property empty because of the ? next to the field's type definition. \n    ```", "```ts\n    import React from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    import Greeting from \"./Greeting\";\n    function App() {\n    \u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name with a value of my own name. Feel free to enter your name instead and then save the file. Since React includes an auto-updating test server, the browser page should update with your new code automatically. You should see your name like this on the screen:\n    ```", "```ts\n    import React from \"react\";\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0name?: string\n    }\n    interface GreetingState {\n    \u00a0\u00a0\u00a0\u00a0message: string\n    }\n    export default class Greeting extends \n     React.Component<GreetingProps> {\n    \u00a0\u00a0\u00a0\u00a0constructor(props: GreetingProps){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(props);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.state = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: `Hello from, ${props.name}`\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0state: GreetingState;\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0render function we are console logging the fact that the render function was called. \n    ```", "```ts\n    import React from 'react';\n    import logo from './logo.svg';\n    import './App.css';\n    import Greeting from \"./Greeting\";\n    class App extends React.Component {\n    \u00a0\u00a0constructor(props:any) {\n    \u00a0\u00a0\u00a0\u00a0super(props);\n    \u00a0\u00a0\u00a0\u00a0state object with a field called enteredName. We also create a new function called onChangeName and bind it to the current this class instance, like we learned in *Chapter 3**, Building Better Apps with ES6+ Features*.\n    ```", "```ts\n    \u00a0\u00a0render() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"rendering App\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={this.state.enteredName} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={this.onChangeName} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Greeting name={this.state.enteredName} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</header>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    }\n    export default App;\n    ```", "```ts\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n    import './index.css';\n    import App from './App';\n    import * as serviceWorker from './serviceWorker';\n    ReactDOM.render(\n    \u00a0\u00a0StrictMode with Fragment. We don't actually need Fragment as it's only used to wrap a set of JSX elements that don't have a parent wrapping element such as div, but it's fine for our testing, and I want to leave a placeholder to put back the StrictMode tags. \n    ```", "```ts\n    export default class Greeting extends React. Component<GreetingProps> {\n    \u00a0\u00a0\u00a0\u00a0constructor(props: GreetingProps){\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0super(props);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0this.state = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message: Greeting.getNewMessage(props.name)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0state: GreetingState;\n    ```", "```ts\n    \u00a0\u00a0\u00a0\u00a0static getDerivedStateFromProps(props: GreetingProps, \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state:GreetingState) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(props, state);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(props.name && props.name !== state.message) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0const newState = {...state};\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newState.message =\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Greeting.getNewMessage(props.name);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return newState;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return state;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0static getNewMessage(name: string = \"\") {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return `Hello from, ${name}`;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0render() {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"rendering Greeting\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(!this.props.name) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div>no name given</div>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{this.state.message}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>;\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```ts\n    class App extends React.Component {\n    \u00a0\u00a0constructor(props:any) {\n    \u00a0\u00a0\u00a0\u00a0super(props);\n    \u00a0\u00a0\u00a0\u00a0this.state = {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enteredName: \"\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0App class since that's all we're changing. As you can see, we add a new property to our state object called message (we'll be removing message from Greeting shortly) and we update it whenever the user enters a new username into the input element:\n\n    ```", "```ts\n\n    ```", "```ts\n    import React from \"react\";\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0message: string\n    }\n    export default function Greeting(props: GreetingProps) {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"rendering Greeting\")\n    \u00a0\u00a0\u00a0\u00a0return (<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{props.message}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>);\u00a0\u00a0\u00a0\u00a0\n    }\n    ```", "```ts\n    import Greeting from \"./GreetingFunctional\";\n    ```", "```ts\n    npx create-react-app hooks-components \u2013template typescript\n    ```", "```ts\n    import React, { FC, useState, useEffect } from 'react';\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0name?: string\n    }\n    const Greeting: FC<GreetingProps> = ({name}:GreetingProps) => {\n    \u00a0\u00a0\u00a0\u00a0const [message, setMessage] = useState(\"\");\n    \u00a0\u00a0\u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(name) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setMessage(`Hello from, ${name}`);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0}, [name])\n    \u00a0\u00a0\u00a0\u00a0if(!name) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div>no name given</div>;\n    \u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return <div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{message}\n    \u00a0\u00a0\u00a0\u00a0</div>;\n    }\n    export default Greeting;\n    ```", "```ts\n    import React from \"react\";\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0message: string\n    }\n    export default function Greeting(props: GreetingProps) {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"rendering Greeting\")\n    \u00a0\u00a0\u00a0\u00a0return (<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{props.message}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>);\u00a0\u00a0\u00a0\u00a0\n    }\n    ```", "```ts\n    const reducer = (state: any, action: any) => {\n    \u00a0\u00a0console.log(\"enteredNameReducer\");\n    \u00a0\u00a0switch(action.type) {\n    \u00a0\u00a0\u00a0\u00a0case \"enteredName\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(state.enteredName === action.payload) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return state;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, enteredName: action.payload}\n    \u00a0\u00a0\u00a0\u00a0case \"message\":\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return { ...state, message: `Hello, ${action.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload}` }\n    \u00a0\u00a0\u00a0\u00a0default:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0throw new Error(\"Invalid action type \" + action.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type);\n    \u00a0\u00a0}\n    }\n    const initialState = {\n    \u00a0\u00a0enteredName: \"\",\n    \u00a0\u00a0message: \"\",\n    };\n    ```", "```ts\n    function App() {\u00a0\u00a0\n    \u00a0\u00a0\u00a0\u00a0const [{ message, enteredName }, dispatch] = \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0useReducer(reducer, initialState);\n\n    \u00a0\u00a0\u00a0\u00a0const onChangeName = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0=> {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch ({ type: \"enteredName\", payload: e.target.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dispatch ({ type: \"message\", payload: e.target.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value });\n    \u00a0\u00a0\u00a0\u00a0}\n\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={enteredName}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeName} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Greeting message={message} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</header>\n    \u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0}\n    \u00a0\u00a0export default App;\n    ```", "```ts\n    import React from \"react\";\n    interface GreetingProps {\n    \u00a0\u00a0\u00a0\u00a0enteredName: string;\n    \u00a0\u00a0\u00a0\u00a0message: string;\n    \u00a0\u00a0\u00a0\u00a0\u00a0greetingDispatcher: React.Dispatch<{ type: string,\u00a0\u00a0\u00a0\u00a0\u00a0payload: string }>;\n    }\n    export default function Greeting(props: GreetingProps) {\n    \u00a0\u00a0\u00a0\u00a0console.log(\"rendering Greeting\")\n    \u00a0\u00a0\u00a0\u00a0const onChangeName = (e: React.\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0props. greetingDispatcher ({ type: \"enteredName\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: e.target.value });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0props. greetingDispatcher ({ type: \"message\", \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0payload: e.target.value });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0return (<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={props.enteredName} onChange=\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{onChangeName} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{props.message}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>);\u00a0\u00a0\u00a0\u00a0\n    }\n    ```", "```ts\n    function App() {\u00a0\u00a0\n    const [{ message, enteredName }, dispatch] = useReducer(reducer, initialState);\n    \u00a0\u00a0return (\n    \u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Greeting \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message={message} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enteredName={enteredName} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0greetingDispatcher={ dispatch } />\n    \u00a0\u00a0\u00a0\u00a0</header>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0)\n    }\n    ```", "```ts\n    function App() {\u00a0\u00a0\n    const [{ message, enteredName }, dispatch] = useReducer(reducer, initialState);\n    \u00a0\u00a0const [startCount, setStartCount] = useState(0);\n    \u00a0\u00a0const [count, setCount] = useState(0);\n    \u00a0\u00a0const setCountCallback = useCallback(() => {\n    \u00a0\u00a0\u00a0\u00a0const inc = count + 1 > startCount ? count + 1 : \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Number(count + 1) + startCount;\n    \u00a0\u00a0\u00a0\u00a0setCount(inc);\n    \u00a0\u00a0}, [count, startCount]);\n    \u00a0\u00a0const onWelcomeBtnClick = () => {\n    \u00a0\u00a0\u00a0\u00a0setCountCallback();\n    \u00a0\u00a0}\n    \u00a0\u00a0const onChangeStartCount = (e: \n    \u00a0\u00a0\u00a0React.ChangeEvent<HTMLInputElement>) => {\n    \u00a0\u00a0\u00a0\u00a0setStartCount(Number(e.target.value));\n    \u00a0\u00a0}\n    ```", "```ts\n    \u00a0\u00a0console.log(\"App.tsx render\");\n    \u00a0\u00a0return (\u00a0\u00a0\u00a0\u00a0\n    \u00a0\u00a0<div className=\"App\">\n    \u00a0\u00a0\u00a0\u00a0<header className=\"App-header\">\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Greeting \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0message={message} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0enteredName={enteredName} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0greetingDispatcher={dispatch} />\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<div style={{marginTop: '10px'}}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>Enter a number and we'll increment \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0it</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<input value={startCount}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0onChange={onChangeStartCount} \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0style={{width: '.75rem'}} />&nbsp;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<label>{count}</label>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<br/>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<button onClick={onWelcomeBtnClick}>Increment \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0count</button>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>\n    \u00a0\u00a0\u00a0\u00a0</header>\n    \u00a0\u00a0</div>\n    \u00a0\u00a0)\n    }\n    ```", "```ts\n    import React, { FC, useEffect, useRef } from 'react';\n    export interface ListItem {\n    \u00a0\u00a0\u00a0\u00a0id: number;\n    }\n    export interface ListItems {\n    \u00a0\u00a0\u00a0\u00a0listItems?: Array<ListItem>;\n    }\n    const ListCreator: FC<ListItems> = ({listItems}:ListItems) => {\n    \u00a0\u00a0\u00a0\u00a0let renderItems = useRef<Array<JSX.Element> |\u00a0\u00a0\u00a0\u00a0\u00a0undefined>();\n    \u00a0\u00a0\u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"listItems updated\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderItems.current = listItems?.map((item,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div key={item.id}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{item.id}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}, [listItems]);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"ListCreator render\");\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{renderItems.current}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0);\n    }\n    export default ListCreator;\n    ```", "```ts\n    function App() {\u00a0\u00a0\n    const [{ message, enteredName }, dispatch] = useReducer(reducer, initialState);\n    \u00a0\u00a0const [startCount, setStartCount] = useState(0);\n    \u00a0\u00a0const [count, setCount] = useState(0);\n    \u00a0\u00a0const setCountCallback = useCallback(() => {\n    \u00a0\u00a0\u00a0\u00a0const inc = count + 1 > startCount ? count + 1 : \u00a0\u00a0\u00a0\u00a0\u00a0Number(count\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0+ 1) + startCount;\n    \u00a0\u00a0\u00a0\u00a0setCount(inc);\n    \u00a0\u00a0}, [count, startCount]);\n    \u00a0\u00a0listItems and a new useEffect function to populate that list. The list is updated any time count is updated:\n\n    ```", "```ts\n\n    If you run this example, you will see that not only do we get new list item elements when we increment the number, but we also get them when we type our name. This is because whenever the parent component renders, as its state was updated, so do any children.\n    ```", "```ts\n    const ListCreator: FC<ListItems> = \n    \u00a0\u00a0React.memo(({listItems}:ListItems) => {\n    \u00a0\u00a0\u00a0\u00a0let renderItems = useRef<Array<JSX.Element> |\u00a0\u00a0\u00a0\u00a0\u00a0undefined>();\n    \u00a0\u00a0\u00a0\u00a0useEffect(() => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"listItems updated\");\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0renderItems.current = listItems?.map((item, \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0index) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return <div key={item.id}>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{item.id}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</div>;\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0}, [listItems]);\n    \u00a0\u00a0\u00a0\u00a0console.log(\"ListCreator render\");\n    \u00a0\u00a0\u00a0\u00a0return (\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{renderItems.current}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</React.Fragment>\n    \u00a0\u00a0\u00a0\u00a0);\n    });\n    ```"]