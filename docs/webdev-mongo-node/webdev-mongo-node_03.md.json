["```js\nvar myVariable;    // declaring a variable with no value \nvar myFirstName = \"Jason\";   \nvar myLastName = \"Krol\"; \nvar myFullName = myFirstName + ' ' + myLastName;  \n// => Jason Krol \n```", "```js\nconst loopOver = [1,2,3];\n```", "```js\nloopOver = [4,5,6];\n```", "```js\nUncaught TypeError: Assignment to constant variable\n```", "```js\nvar outer = 10; \nfunction myFunction() { \n   var inner = 2; \n   console.log(inner);// 2 \n   console.log(outer);// 10 \n}myFunction();console.log(inner); \n```", "```js\n(function (){   \n    (function (){  \n          a = 10;   \n    })();  \n})();  \nconsole.log(a);// 10 \n```", "```js\nfor(let i=0;i<loopOver.length;i++){\nconsole.log(`Iteration : \", i)\n}\nConsole.log(`Let value of ${ i}`)\n```", "```js\nfor(var i=0;i<loopOver.length;i++){\nconsole.log(`Iteration : \", i)\n}\nConsole.log(`Let value of ${ i}`)\n```", "```js\nvar a = \"some value\"; \nif(a === \"other value\") { \n  //do something \n} else if (a === \"another value\") { \n  //do something \n} else { \n  //do something \n} \n```", "```js\n// for loop example \n\nvar myVar = 0; \nfor(let i = 0; i < 100; i += 1) {  \n  myVar = i; \n  console.log(myVar); // => 0 1 ... 99 \n} \n\n// do while example \nvar x = 0; \ndo { \n  x += 1; \n  console.log(x); // => 1 2 ... 100 \n} while (x < 100); \n\n// while example \nwhile (x > 90) { \n  x -= 1; \n  console.log(x); // => 99 98 ... 90 \n} \n//switch example \n\nvar x = 0; \nswitch(x) { \n  case 1 :  \nconsole.log(\"\"one\"\"); \nbreak; \n  case 2 :  \nconsole.log(\"two\"\"); \nbreak; \n  default: \nconsole.log(\"none\"); \n\n} // => \"none\" \n```", "```js\nconst a = '5'; \nconst b = 5; \nif(a == b) { \n  //do something \n} \nif(a === b) { \n  //do something \n} \n```", "```js\nvar myObject = {};    // that's it! \n```", "```js\nvar person = {}; \nperson.firstName = 'Jason';    // via dot operator \nperson['lastName'] = 'Krol';   // via square brackets \n```", "```js\nvar person = {}; \nperson.firstName = 'Jason';    // properties \nperson.lastName = 'Krol'; \nperson.fullName = function() {  // methods \n  return this.firstName + ' ' + this.lastName; \n}; \nperson.colors = ['red', 'blue', 'green'];  // array property \n```", "```js\n// define properties during declaration \nvar book = { \n  title: 'Web Development with MongoDB and NodeJS', \n  author: 'Jason Krol', \n  publisher: 'Packt Publishing' \n}; \nconsole.log(book.title); \n// => Web Development with MongoDB and NodeJS \nbook.pageCount = 150;    // add new properties \n```", "```js\nlet publisher = 'Packt Publishing';\nlet book = { publisher };\nconsole.log(book.publisher);\n```", "```js\nlet edition = 3;\nlet book = {publisher,[ `Whats new in ${edition} ? `] : \"es6 and other improvisation\"}\n```", "```js\nvar person = { \n        firstName : 'Jason', \n        lastName : 'Krol', // properties \n       fullName() {  // method notation \n                      return this.firstName + ' ' + this.lastName; \n} \n}; \n```", "```js\nvar favFoods = ['pizza', 'cheeseburgers', 'french fries']; \nvar stuff = [];        // empty array \nvar moreStuff = new Array();       // empty array \nvar firstFood = favFoods[0];    // => pizza\n\n// array functions: \nfavFoods.push('salad');    // add new item\n\n// => ['pizza', 'cheeseburgers', 'french fries', 'salad'] \nfavFoods.pop();        // remove the last item \n// => ['pizza', 'cheeseburgers', 'french fries'] \nvar first = favFoods.shift();     // remove the first item \n// => first = 'pizza';  \n// => favFoods = ['cheeseburgers', 'french fries'] \n```", "```js\nvar myFunction = function() { \n  if(this.timesRun) \n    this.timesRun += 1; \n  else \n    this.timesRun = 1; \n  // do some actual work \n\n  console.log(this.timesRun); \n}; \nmyFunction(); \n// => 1; \nmyFunction(); \n// => 2; \nmyFunction(); \n// => 3;  \n```", "```js\nfunction sayHello() {\n console.log('Hello!');\n}\n// or \nvar sayHello = function() {\n console.log('Hello!');\n};\n```", "```js\none();//will display Hello  \ntwo();//will trigger error as its definition is yet to happen. \n\nfunction one() { \n    console.log('Hello!'); \n} \n\nvar two = function() { \n  console.log('Hello!'); \n}; \ntwo ();//will display Hello \n```", "```js\nconsole.log('Hello...'); \nsetTimeout(function() { \n  console.log('World!'); \n}, 5000); \n// => Hello... \n// (5000 milliseconds i.e. 5 second delay) \n// => World! \n```", "```js\nvar sayWorld = function() { \n  console.log('World!'); \n} \nsetTimeout(sayWorld, 5000); \n// (5 second delay) \n// => World! \n```", "```js\n{ \n  \"title\": \"This is the title\", \n  \"description\": \"Here is where the description would be\", \n  \"page-count\": 150, \n  \"authors\": [ \n    { \"name\": \"John Smith\" }, \n    { \"name\": \"Jane Doe\" }, \n    { \"name\": \"Andrea Johnson\" } \n  ], \n  \"id\": \"1234-567-89012345\" \n} \n```", "```js\nmongoose.connect('); \nmongoose.connection.on('open', function() { \nconsole.log(\"Connected to Mongoose...\"); \n}); \n```", "```js\n// ** file: dowork.js \nmodule.exports = { \n  doWork: function(param1, param2) { \n    return param1 + param2; \n  }   \n} \n\n// ** file: testing.js \nvar worker = require('./dowork'); // note: no .js in the file \n\nvar something = 1; \nvar somethingElse = 2; \n\nvar newVal = worker.doWork(something, somethingElse); \nconsole.log(newVal); \n// => 3 \n```", "```js\nconst http = require('http');\n//create a server object\nhttp.createServer((req, res)=>{\n  res.write('Hello Readers!'); //write a response to the client\n  res.end(); //end the response\n}).listen(3000); //the server object listens on port 3000\n```", "```js\nconst http = require('http');\nhttp.get({\n hostname: 'localhost',\n port: 3000,\n path: '/'\n}, (res) => {\n res.setEncoding('utf8');\n res.on('data', (chunk)=>{\n console.log(`BODY: ${chunk}`);\n });\n});\n```", "```js\n    $ npm install express\n    // ** file: usingnpm.js\n    var express = require('express');  \n```", "```js\n    $ npm init\n\n    $ npm install express --save\n    $ npm install grunt --save-dev\n    $ cat package.json\n    {\n     \"name\": \"chapter3\",\n     \"version\": \"0.0.0\",\n     \"description\": \"\",\n     \"main\": \"index.js\",\n     \"scripts\": {\n       \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n     },\n     \"author\": \"\",\n     \"license\": \"ISC\",\n     \"dependencies\": {\n       \"express\": \"^3.5.1\"\n     },\n     \"devDependencies\": {\n       \"grunt\": \"^0.4.4\"\n     }\n    }\n\n```", "```js\n    $ mongo\n    MongoDB shell version: 2.4.5\n    connecting to: test\n    >\n```", "```js\n    > show dbs\n```", "```js\n    > use chapter3\n    switched to db chapter3\n```", "```js\n    > show collections\n```", "```js\n> db.newCollection.find() \n> \n```", "```js\n> db.newCollection.insert({ name: 'Jason Krol', website: \n 'http://kroltech.com' }) \n> db.newCollection.find().pretty() \n{ \n  \"_id\" : ObjectId(\"5338b749dc8738babbb5a45a\"), \n  \"name\" : \"Jason Krol\", \n  \"website\" : \"http://kroltech.com\" \n} \n```", "```js\n> db.newCollection.find({ name: 'Jason Krol' }) \n{ \"_id\" : ObjectId(\"533dfb9433519b9339d3d9e1\"), \"name\" : \"Jason \n Krol\", \"website\" : \"http://kroltech.com\" }\n```", "```js\n> db.newCollection.find({ name: 'Jason Krol', website: \n 'http://kroltech.com'}){ \"_id\" : ObjectId(\"533dfb9433519b9339d3d9e1\"), \"name\" : \"Jason \n Krol\", \"website\" : \"http://kroltech.com\" }\n```", "```js\n> db.newCollection.find({ name: 'Jason Krol' }, { name: true }) \n{ \"_id\" : ObjectId(\"533dfb9433519b9339d3d9e1\"), \"name\" : \"Jason Krol\" \n }> db.newCollection.find({ name: 'Jason Krol' }, { name: true, _id: \n false }) \n{ \"name\" : \"Jason Krol\" } \n```", "```js\n> db.homework_scores.find({ score: { $gte: 80, $lt: 90 } }) \n```", "```js\n> db.newCollection.find({ name: { $regex: 'Krol'} }) \n```", "```js\n> db.newCollection.update({ name: 'Jason Krol' }, { website: \n                           'http://jasonkrol.com' })\n```", "```js\n> db.newCollection.update({ name: 'Jason Krol' }, { $set: { website: \n 'http://jasonkrol.com'} })\n```", "```js\n> db.newCollection.update({ name: 'Joe Smith' }, { name: 'Joe Smith', \n                     website: 'http://google.com' }, { upsert: true })\n```", "```js\n> db.newCollection.remove({ name: 'Jason Krol' }) \n```", "```js\n> db.newCollection.drop() \n```"]