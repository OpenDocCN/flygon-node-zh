["```js\n    $ npm install -g mocha\n```", "```js\n cannot resolve path\n```", "```js\nconst expect = require('chai').expect; \ndescribe('The code', ()=>{ \n    beforeEach(()=>{ \n        // optional preparation for each test \n    }); \n    afterEach(()=>{ \n        // optional cleanup after each test \n    }); \n\n    it('should test something', ()=>{ \n        const something = 1; \n        // here we \"expect\" some condition to declare our test \n        // in this case, we expect the variable to exist \n        // more on the assertion syntax a little later \n        expect(something).to.exist; \n    }); \n    it('should test something_else', ()=>{ \n        const something_else = false; \n        // now we test a different variable against its value \n        // and expect that value to equal false \n        expect(something_else).to.equal(false); \n    }); \n}); \n```", "```js\n      The code\n         should test something\n         should test something_else\n\n      2 passing (5ms)\n```", "```js\n    $ npm install --save-dev chai\n```", "```js\nconst chai = require('chai'); \nconst expect = chai.expect; \nconst should = chai.should(); \nconst assert = chai.assert; \nconst animals = { pets: [ 'dog', 'cat', 'mouse' ] }; \nconst foo = 'bar'; \n\nexpect(foo).to.be.a('string').and.equal('bar'); \nexpect(animals).to.have.property('pets').with.length(4); \nanimals.should.have.property('pets').with.length(4); \nassert.equal(foo, 'bar', 'Foo equal bar'); \n```", "```js\n    $ npm install --save-dev sinon sinon-chai\n```", "```js\nlet sum = (a, b) => {\n    return a + b;\n}\nlet doWork = () => {\n    console.log(\"asdasd\")\n    const x = 1,\n        y = 2;\n    console.log(sum(x, y));\n} \n```", "```js\nconst chai = require('chai');\nconst expect = chai.expect; \nconst sinon = require(\"sinon\"); \nconst sinonChai = require(\"sinon-chai\"); \nchai.use(sinonChai); \n\ndescribe('doWork', ()=>{ \n    let sum; \n\n    it('should call sum', ()=>{ \n        sum = sinon.spy(); \n        doWork(); \n        expect(sum).to.be.calledWith(1,2); \n    }); \n}); \n```", "```js\ndescribe('doWork', ()=>{ \n    let sum; \n    console.log = sinon.spy(); \n\n    it('should call sum', ()=>{ \n        sum = sinon.spy().andCallThrough(); \n        doWork(); \n        expect(sum).to.be.calledWith(1,2); \n        expect(console.log).to.be.calledWith(3); \n    }); \n}); \n```", "```js\nit('should console.log sum response', ()=>{ \n    // replace the existing sum function with a new stub, \n    // a generic function that does exactly what we specify \n    // in this case always just return the number 2 \n    sum = sinon.stub(()=>{ \n        return 2; \n    });\n\n    // lets replace the standard console.log function \n    // with a spy \n    console.log = sinon.spy(); \n    // call our doWork function (which itself uses console.log) \n    doWork(); \n    // and if doWork executed the way its supposed to, console.log \n    // should have been called and the parameter 2 passed to it \n    expect(console.log).to.be.calledWith(2); \n}); \n```", "```js\n// google.js \nconst request = require('request'),\n  sinon = require(\"sinon\"),\n  log = sinon.spy();\n\nmodule.exports =()=>{ \n    request('http://www.google.com', (err, res, body)=>{ \n        log(body); \n    }); \n} \n```", "```js\n//google.spy.js\nconst sinon = require(\"sinon\"),\nproxyquire = require('proxyquire'),\nlog = sinon.spy(), \nrequestStub = sinon.stub().callsArgWith(1, null, null, 'google.com'), \ngoogle = proxyquire('./google', { 'request': requestStub }); \n\ndescribe('google module', ()=>{ \n    beforeEach(()=>{ \n        google(); \n    }); \n    it('should request google.com', ()=>{ \n        expect(reqstub).to.be.called(); \n    }); \n    it('should log google body', ()=>{ \n        expect(callback).to.be.calledWith(null, null, 'google.com'); \n    }); \n}); \n```", "```js\n    $ npm install --save-dev proxyquire\n```", "```js\n/(existing app root) \ntests/ \n----/controllers/ \n----/models/ \n----/server/ \n```", "```js\nconst chai = require('chai'), \n    sinon = require('sinon'), \n    sinonChai = require('sinon-chai'); \n\nglobal.expect = chai.expect; \nglobal.sinon = sinon; \nchai.use(sinonChai); \n```", "```js\n    $ mocha -r tests/testhelper.js -R spec tests/**/*.test.js\n```", "```js\ndescribe('Mocha', ()=>{\n    'use strict';\n\n    beforeEach(()=>{});\n\n    describe('First Test', ()=>{\n        it('should assert 1 equals 1', ()=>{\n            expect(1).to.eql(1);\n        });\n    });\n});\n\n```", "```js\n    $ mocha -r tests/testhelper.js -R spec tests/mocha.test.js\n    Mocha\n      First Test\n         should assert 1 equals 1\n\n    1 passing (5ms)\n\n```", "```js\n\"scripts\": { \n    \"start\": \"node server.js\", \n    \"test\": \"mocha -r tests/testhelper.js -R spec \n      tests/**/*.test.js\" \n  }, \n```", "```js\n    $ npm test\n    > chapter9@0.0.0 test /Users/jasonk/repos/nodebook/chapter9\n    > mocha -r tests/testhelper.js -R spec tests/**/*.test.js\n\n    Mocha\n      First Test\n         should assert 1 equals 1\n\n    1 passing (5ms)\n\n```", "```js\nconst home = require('../../controllers/home'), \n    image = require('../../controllers/image'), \n    routes = require('../../server/routes'); \n```", "```js\ndescribe('Routes',()=>{ \n    let app = { \n        get: sinon.spy(), \n        post: sinon.spy(), \n        delete: sinon.spy() \n    }; \n    beforeEach(()=>{ \n        routes.initialize(app); \n    }); \n\n    // to do: write tests... \n}); \n```", "```js\ndescribe('GETs',()=>{ \n    it('should handle /', function(){ \n        expect(app.get).to.be.calledWith('/', home.index); \n    }); \n    it('should handle /images/:image_id', ()=>{ \n        expect(app.get).to.be.calledWith('/images/:image_id', \n         image.index); \n    }); \n}); \n```", "```js\ndescribe('POSTs', ()=>{\n    it('should handle /images', ()=>{\n        expect(app.post).to.be.calledWith('/images', image.create);\n    });\n    it('should handle /images/:image_id/like', ()=>{\n        expect(app.post).to.be.calledWith('/images/:image_id/like', image.like);\n    });\n    it('should handle /images/:image_id/comment', ()=>{\n        expect(app.post).to.be.calledWith('/images/:image_id/comment', image.comment);\n    });\n}); \n```", "```js\ndescribe('DELETEs', ()=>{\n    it('should handle /images/:image_id', ()=>{\n        expect(app.delete).to.be.calledWith('/images/:image_id', image.remove);\n    });\n}); \n```", "```js\n    $ npm test\n    Routes\n        GETs\n           should handle /\n           should handle /images/:image_id\n        POSTs\n           should handle /images\n           should handle /images/:image_id/like\n           should handle /images/:image_id/comment\n        DELETEs\n           should handle /images/:image_id\n\n      6 passing (14ms)\n```", "```js\nlet proxyquire, expressStub, configStub, mongooseStub, app, \n    server = function() { \n        proxyquire('../../server', { \n            'express': expressStub, \n            './server/configure': configStub, \n            'mongoose': mongooseStub \n        }); \n    }; \n\ndescribe('Server',()=>{ \n    beforeEach(()=>{\n        proxyquire = require('proxyquire'),\n        app = {\n            set: sinon.spy(),\n            get: sinon.stub().returns(3300),\n            listen: sinon.spy()\n        },\n        expressStub = sinon.stub().returns(app),\n        configStub = sinon.stub().returns(app),\n        mongooseStub = {\n            connect: sinon.spy(),\n            connection: {\n                on: sinon.spy()\n            }\n        };\n\n        delete process.env.PORT;\n    }); \n\n    // to do: write tests... \n}); \n```", "```js\ndescribe('Bootstrapping', ()=>{\n    it('should create the app', ()=>{\n        server();\n        expect(expressStub).to.be.called;\n    });\n    it('should set the views', ()=>{\n        server();\n        expect(app.set.secondCall.args[0]).to.equal('views');\n    });\n    it('should configure the app', ()=>{\n        server();\n        expect(configStub).to.be.calledWith(app);\n    });\n    it('should connect with mongoose', ()=>{\n        server();\n        expect(mongooseStub.connect).to.be.calledWith(sinon.match.string);\n    });\n    it('should launch the app', ()=>{\n        server();\n        expect(app.get).to.be.calledWith('port');\n        expect(app.listen).to.be.calledWith(3300, sinon.match.func);\n    });\n}); \n```", "```js\ndescribe('Port', ()=>{\n    it('should be set', ()=>{\n        server();\n        expect(app.set.firstCall.args[0]).to.equal('port');\n    });\n    it('should default to 3300', ()=>{\n        server();\n        expect(app.set.firstCall.args[1]).to.equal(3300);\n    });\n    it('should be configurable', ()=>{\n        process.env.PORT = '5500';\n        server();\n        expect(app.set.firstCall.args[1]).to.equal('5500');\n    });\n}); \n```", "```js\n    $ npm test \n    Server\n        Bootstrapping\n           should create the app (364ms)\n           should set the views\n           should configure the app\n           should connect with mongoose\n           should launch the app\n        Port\n           should be set\n           should default to 3300\n           should be configurable\n\n```", "```js\nlet ImageModel = require('../../models/image'); \n\ndescribe('Image Model',()=>{ \n    var image; \n\n    it('should have a mongoose schema',()=>{ \n        expect(ImageModel.schema).to.be.defined; \n    }); \n\n    beforeEach(()=>{ \n        image = new ImageModel({ \n            title: 'Test', \n            description: 'Testing', \n            filename: 'testfile.jpg' \n        }); \n    }); \n\n    // to do: write tests... \n}); \n```", "```js\ndescribe('Schema', ()=>{\n    it('should have a title string', ()=>{\n        expect(image.title).to.be.defined;\n    });\n    it('should have a description string', ()=>{\n        expect(image.description).to.be.defined;\n    });\n    it('should have a filename string', ()=>{\n        expect(image.filename).to.be.defined;\n    });\n    it('should have a views number default to 0', ()=>{\n        expect(image.views).to.be.defined;\n        expect(image.views).to.equal(0);\n    });\n    it('should have a likes number default to 0', ()=>{\n        expect(image.likes).to.be.defined;\n        expect(image.likes).to.equal(0);\n    });\n    it('should have a timestamp date', ()=>{\n        expect(image.timestamp).to.be.defined;\n    });\n}); \n```", "```js\ndescribe('Virtuals', ()=>{\n    describe('uniqueId', ()=>{\n        it('should be defined', ()=>{\n            expect(image.uniqueId).to.be.defined;\n        });\n        it('should get filename without extension', ()=>{\n            expect(image.uniqueId).to.equal('testfile');\n        });\n    });\n}); \n```", "```js\n    $ npm test\n    Image Model\n         should have a mongoose schema\n        Schema\n           should have a title string\n           should have a description string\n           should have a filename string\n           should have a views number default to 0\n           should have a likes number default to 0\n           should have a timestamp date\n        Virtuals\n          uniqueId\n             should be defined\n             should get filename without extension\n\n```", "```js\nlet proxyquire = require('proxyquire'), \n    callback = sinon.spy(), \n    sidebarStub = sinon.stub(), \n    fsStub = {}, \n    pathStub = {}, \n    md5Stub = {}, \n    ModelsStub = { \n        Image: { \n            findOne: sinon.spy() \n        }, \n        Comment: { \n            find: sinon.spy() \n        } \n    }, \n    image = proxyquire('../../controllers/image', { \n        '../helpers/sidebar': sidebarStub, \n        '../models': ModelsStub, \n        'fs': fsStub, \n        'path': pathStub, \n        'md5': md5Stub \n    }), \n    res = {}, \n    req = {}, \n    testImage = {}; \n```", "```js\ndescribe('Image Controller', function(){ \n    beforeEach(()=>{ \n        res = { \n            render: sinon.spy(), \n            json: sinon.spy(), \n            redirect: sinon.spy() \n        }; \n        req.params = { \n            image_id: 'testing' \n        }; \n        testImage = { \n            _id: 1, \n            title: 'Test Image', \n            views: 0, \n            likes: 0, \n            save: sinon.spy() \n        }; \n    }); \n    // to do: write tests... \n}); \n```", "```js\ndescribe('Index',()=>{ \n        it('should be defined', ()=>{\n            expect(image.index).to.be.defined;\n        });\n        it('should call Models.Image.findOne', ()=>{\n            ModelsStub.Image.findOne = sinon.spy();\n            image.index(req, res);\n            expect(ModelsStub.Image.findOne).to.be.called;\n        });\n        it('should find Image by parameter id', ()=>{\n            ModelsStub.Image.findOne = sinon.spy();\n            image.index(req, res);\n            expect(ModelsStub.Image.findOne).to.be.calledWith(\n                { filename: { $regex: 'testing' } },\n                 sinon.match.func\n            );\n        }); \n    // to do: write more tests... \n}); \n```", "```js\ndescribe('with found image model', ()=>{\n    beforeEach(function(){\n        ModelsStub.Image.findOne =\n            sinon.stub().callsArgWith(1,null,testImage);\n    });\n    it('should incremement views by 1 and save', ()=>{\n        image.index(req, res);\n        expect(testImage.views).to.equal(1);\n        expect(testImage.save).to.be.called;\n    });\n    it('should find related comments', ()=>{\n        image.index(req, res);\n        expect(ModelsStub.Comment.find).to.be.calledWith(\n            {image_id: 1},\n            {},\n            { sort: { 'timestamp': 1 }},\n            sinon.match.func\n        );\n    });\n    it('should execute sidebar', ()=>{\n        ModelsStub.Comment.find =\n            sinon.stub().callsArgWith(3, null, [1,2,3]);\n        image.index(req, res);\n        expect(sidebarStub).to.be.calledWith(\n            {image: testImage, comments: [1,2,3]}, sinon.match.func);\n    });\n    it('should render image template with image and comments', ()=>{\n        ModelsStub.Comment.find = sinon.stub().callsArgWith(3, null, [1,2,3]);\n        sidebarStub.callsArgWith(1, {image: testImage, comments: [1,2,3]});\n        image.index(req, res);\n        expect(res.render).to.be.calledWith('image', {image: testImage, comments: [1,2,3]});\n    });\n}); \n```", "```js\n    $ npm test\n    Image Controller\n        Index\n           should be defined\n           should call Models.Image.findOne\n           should find Image by parameter id\n          with found image model\n             should incremement views by 1 and save\n             should find related comments\n             should execute sidebar\n             should render image template with image and comments\n\n```", "```js\nnpm install gulp-cli -g\nnpm install gulp --save-dev\ntouch test/gulpfile.js\ngulp --help\n```", "```js\nvar gulp = require('gulp');\ngulp.task('default', function() {\nconsole.log(\"Lets start the automation!\")\n});\n```", "```js\nnpm install gulp-mocha --save-dev\n```", "```js\nconst gulp = require('gulp');\nconst gulpMocha = require('gulp-mocha')\ngulp.task('test-helper',()=>gulp.src('./testhelper.js'))\ngulp.task('test-server', ['test-helper'],()=>{\nreturn gulp.src('./server/server.test.js')\n.pipe(gulpMocha())\n});\n```", "```js\ngulp.task('test-routes', ['test-helper', 'test-server'],()=>{\nreturn gulp.src('./server/routes.test.js')\n.pipe(gulpMocha())\n});\n```", "```js\ngulp.task('build', ['test-helper', 'test-server','test-routes'])\n```"]