["```js\n    $ cd mongotest\n    $ npm install mongodb\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/mongotest',\n  (err, db)=>{\n      console.log('Connected to MongoDB!');\n      db.close();\n  });\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/mongotest', (err, db)=>{\n    console.log('Connected to MongoDB!');\n\n    var collection = db.collection('testing');\n    collection.insert({'title': 'Snowcrash'}, (err, docs)=>{\n        /**\n        * on successful insertion, log to the screen\n        * the new collection's details: \n        **/\n        console.log(`${docs.ops.length} records inserted.`);\n        console.log(`${docs.ops[0]._id} - ${docs.ops[0].title}`);\n\n        db.close();\n\n    });\n});\n```", "```js\nconst MongoClient = require('mongodb').MongoClient;\n\nMongoClient.connect('mongodb://localhost:27017/mongotest', (err, db)=>{\n    console.log('Connected to MongoDB!');\n\n    var collection = db.collection('testing');\n    collection.insert({'title': 'Snowcrash'}, (err, docs)=>{\n        console.log(`${docs.ops.length} records inserted.`);\n        console.log(`${docs.ops[0]._id} - ${docs.ops[0].title}`);\n\n        collection.findOne({title: 'Snowcrash'}, (err, doc)=>{\n            console.log(`${doc._id} - ${doc.title}`);\n            db.close();\n        });\n    });\n});\n```", "```js\n    $ node test.js\n    Connected to MongoDB!\n    1 record inserted.\n    538bc3c1a39448868f7013b4 - Snowcrash\n    538bc3c1a39448868f7013b4 - Snowcrash\n```", "```js\n    $ npm install mongoose\n```", "```js\nconst mongoose = require('mongoose'),\n    Schema = mongoose.Schema;\n\nvar Account = new Schema({\n    username: { type: String },\n    date_created: { type: Date, default: Date.now },\n    visits: { type: Number, default: 0 },\n    active: { type: Boolean, default: false }\n}); \n```", "```js\nconst mongoose = require('mongoose'),\n    Schema = mongoose.Schema;\n\nmongoose.connect('mongodb://localhost:27017/mongotest');\nmongoose.connection.on('open', function() {\n    console.log('Mongoose connected.');\n});\n\nvar Account = new Schema({\n    username: { type: String },\n    date_created: { type: Date, default: Date.now },\n    visits: { type: Number, default: 0 },\n    active: { type: Boolean, default: false }\n});\n\nvar AccountModel = mongoose.model('Account', Account);\nvar newUser = new AccountModel({ username: 'randomUser' });\nconsole.log(newUser.username);\nconsole.log(newUser.date_created);\nconsole.log(newUser.visits);\nconsole.log(newUser.active);\n```", "```js\n    $ node test2.js\n    randomUser\n    Mon Jun 02 2014 13:23:28 GMT-0400 (EDT)\n    0\n    false\n```", "```js\nvar AccountModel = mongoose.model('Account', Account);\nvar newUser = new AccountModel({\n    username: 'randomUser'\n});\nnewUser.save();\n```", "```js\n> use mongotest\nswitched to db mongotest\n> db.accounts.find()\n{ \"username\" : \"randomUser\", \"_id\" : ObjectId(\"538cb4cafa7c430000070f66\"), \"active\" : false, \"visits\" : 0, \n\"date_created\" : ISODate(\"2014-06-02T17:30:50.330Z\"), \"__v\" : 0 }\n```", "```js\n// assuming our collection has the following 4 records: \n// { username: 'randomUser1', age: 21 } \n// { username: 'randomUser2', age: 25 } \n// { username: 'randomUser3', age: 18 } \n// { username: 'randomUser4', age: 32 } \n\nAccountModel.find({ age: { $gt: 18, $lt: 30 } }, function(err, accounts) {\n    console.log(accounts.length); // => 2 \n    console.log(accounts[0].username); // => randomUser1 \n    mongoose.connection.close();\n});\n```", "```js\nvar Account = new Schema({\n    username: { type: String, required: true },\n    date_created: { type: Date, default: Date.now },\n    visits: { type: Number, default: 0 },\n    active: { type: Boolean, default: false },\n    age: { type: Number, required: true, min: 13, max: 120 }\n}); \n```", "```js\nvar AccountModel = mongoose.model('Account', Account);\nvar newUser = new AccountModel({ username: 'randomUser', age: 11 });\nnewUser.validate(function(err) {\n    console.log(err);\n});\n// the same error would occur if we executed: \n// newUser.save(); \n```", "```js\n{\n message: 'Validation failed',\n name: 'ValidationError',\n errors: {\n age: {\n message: 'Path '\n age ' (11) is less than minimum allowed value (13).', \n name: 'ValidatorError',\n path: 'age',\n type: 'min',\n value: 11\n }\n }\n} \n```", "```js\nvar Account = new Schema({\n    username: { type: String },\n    date_created: { type: Date, default: Date.now },\n    visits: { type: Number, default: 0 },\n    active: { type: Boolean, default: false },\n    age: { type: Number, required: true, min: 13, max: 120 }\n});\n\nAccount.statics.findByAgeRange = function(min, max, callback) {\n    this.find({ age: { $gt: min, $lte: max } }, callback);\n};\n\nvar AccountModel = mongoose.model('Account', Account);\n\nAccountModel.findByAgeRange(18, 30, function(err, accounts) {\n    console.log(accounts.length); // => 2 \n});\n```", "```js\n// assuming the Account schema has firstname and lastname defined: \n\nAccount.virtual('fullname')\n    .get(function() {\n        return this.firstname + ' ' + this.lastname;\n    })\n    .set(function(fullname) {\n        var parts = fullname.split(' ');\n        this.firstname = parts[0];\n        this.lastname = parts[1];\n    });\n```", "```js\nfunction getData() {\n    console.log(this.a); // global \n}\ngetData.a = 'hello';\nvar a = 'world';\ngetData(); \n```", "```js\nAccount.virtual('fullname') \n.get(()=>{ \nreturn this.firstname + ' ' + this.lastname; \n}) \n```", "```js\n    $ cd ~/projects/imgPloadr\n    $ npm install mongoose --save\n```", "```js\ncons express = require('express'), \nconfig = require('./server/configure'), \nmongoose = require('mongoose'); \nvar app = express(); \n```", "```js\nmongoose.connect('mongodb://localhost/imgPloadr', { \n    useMongoClient : true \n}); \nmongoose.connection.on('open',()=>{ \n    console.log('Mongoose connected.'); \n}); \n```", "```js\nconst mongoose = require('mongoose'),\n    Schema = mongoose.Schema,\n    path = require('path');\n\nconst ImageSchema = new Schema({\n    title: { type: String },\n    description: { type: String },\n    filename: { type: String },\n    views: { type: Number, 'default': 0 },\n    likes: { type: Number, 'default': 0 },\n    timestamp: { type: Date, 'default': Date.now }\n});\n\nImageSchema.virtual('uniqueId')\n.get(function() {\n    return this.filename.replace(path.extname(this.filename), '');\n});\n\nmodule.exports = mongoose.model('Image', ImageSchema); \n```", "```js\nconst mongoose = require('mongoose'), \n    Schema = mongoose.Schema, \n    ObjectId = Schema.ObjectId; \n\nconst CommentSchema = new Schema({ \nimage_id:   { type: ObjectId }, \nemail:      { type: String }, \nname:       { type: String }, \ngravatar:   { type: String }, \ncomment:    { type: String }, \ntimestamp:  { type: Date, 'default': Date.now } \n}); \n\nCommentSchema.virtual('image') \n.set(function(image){ \n    this._image = image; \n})\n.get(function() { \n    return this._image; \n}); \n\nmodule.exports = mongoose.model('Comment', CommentSchema);\n```", "```js\nmodule.exports = { \n    'Image': require('./image'), \n    'Comment': require('./comment') \n};\n```", "```js\nvar viewModel = { \nimages: [ \n        { \nuniqueId:       1, \ntitle:          'Sample Image 1', \ndescription:    '', \nfilename:       'sample1.jpg', \nviews:          0, \nlikes:          0, \ntimestamp:      Date.now() \n        }, { \nuniqueId:       2, \ntitle:          'Sample Image 2', \ndescription:    '', \nfilename:       'sample2.jpg', \nviews:          0, \nlikes:          0, \ntimestamp:      Date.now() \n        }, { \nuniqueId:       3, \ntitle:          'Sample Image 3', \ndescription:    '', \nfilename:       'sample3.jpg', \nviews:          0, \nlikes:          0, \ntimestamp:      Date.now() \n        }, { \nuniqueId:       4, \ntitle:          'Sample Image 4', \ndescription:    '', \nfilename:       'sample4.jpg', \nviews:          0, \nlikes:          0, \ntimestamp:      Date.now() \n        } \n    ] \n}; \n```", "```js\nvar viewModel = {\n    images: []\n}; \n```", "```js\nconst sidebar = require('../helpers/sidebar'), \nImageModel = require('../models').Image;\n```", "```js\nImageModel.find({}, {}, { sort: { timestamp: -1 } },\n    (err, images) => {\n        if (err) { throw err; }\n\n        viewModel.images = images;\n        sidebar(viewModel, (viewModel) => {\n            res.render('index', viewModel);\n        });\n    }); \n```", "```js\nconst sidebar = require('../helpers/sidebar'), \n    ImageModel = require('../models').Image; \n\nmodule.exports = { \n    index: (req, res)=>{ \n        var viewModel = { \n            images: [] \n        }; \n\n        ImageModel.find({}, {}, { sort: { timestamp: -1 }}, (err, images)=>{ \n            if (err) { throw err; } \n\n            viewModel.images = images; \n            sidebar(viewModel, (viewModel)=>{ \n                res.render('index', viewModel); \n            }); \n        }); \n\n    } \n}; \n```", "```js\nconst fs = require('fs'), \npath = require('path'), \nsidebar = require('../helpers/sidebar'), \nModels = require('../models');\n```", "```js\nvar viewModel = { \nimage: {}, \ncomments: [] \n}; \n```", "```js\nModels.Image.findOne({\n        filename: { $regex: req.params.image_id }\n    },\n    (err, image) => {\n        if (err) { throw err; }\n        if (image) {\n            // to do... \n        } else {\n            res.redirect('/');\n        }\n    }); \n```", "```js\nimage.views = image.views + 1; \nviewModel.image = image; \nimage.save(); \n```", "```js\nModels.Comment.find({ image_id: image._id }, {}, {\n        sort: {\n            'timestamp': 1\n        }\n    },\n    (err, comments) => {\n        if (err) { throw err; }\n\n        viewModel.comments = comments;\n\n        sidebar(viewModel, (viewModel) => {\n            res.render('image', viewModel);\n        });\n    }\n);\n```", "```js\nindex: (req, res)=>{ \n        var viewModel = { \n            image: {}, \n            comments: [] \n        }; \n\n        Models.Image.findOne({ filename: { $regex: req.params.image_id } }, \n            (err, image)=>{ \n                if (err) { throw err; } \n                if (image) { \n                    image.views = image.views + 1; \n                    viewModel.image = image; \n                    image.save(); \n\n                    Models.Comment.find( \n                        { image_id: image._id}, \n                        {}, \n                        { sort: { 'timestamp': 1 }}, \n                        (err, comments)=>{ \n                            viewModel.comments = comments; \n                            sidebar(viewModel, (viewModel)=>{ \n                                res.render('image', viewModel); \n                            }); \n                        } \n                    ); \n                } else { \n                    res.redirect('/'); \n                } \n            }); \n    }\n```", "```js\nModels.Image.find({ filename: imgUrl }, (err, images)=>{ \nif (images.length> 0) { \nsaveImage(); \n    } else { \n        // do all the existing work... \n    } \n});\n```", "```js\nres.redirect('/images/${ imgUrl}'); \n```", "```js\nvar newImg = new Models.Image({\n    title: req.body.title,\n    description: req.body.description,\n    filename: imgUrl + ext\n});\nnewImg.save((err, image) => {\n    console.log('Successfully inserted image: ' + image.filename);\n    res.redirect(`/images/${image.uniqueId}`);\n}); \n```", "```js\nvar saveImage = function() {\n    var possible = 'abcdefghijklmnopqrstuvwxyz0123456789',\n        imgUrl = '';\n    for (var i = 0; i < 6; i += 1) {\n        imgUrl += possible.charAt(Math.floor(Math.random() *\n            possible.length));\n    }\n    /* Start new code: */\n    // search for an image with the same filename by performing a find: \n    Models.Image.find({ filename: imgUrl }, (err, images) => {\n        if (images.length > 0) {\n            // if a matching image was found, try again (start over): \n            saveImage();\n        } else {\n            /* end new code:*/\n            var tempPath = req.files.file.path,\n                ext = path.extname(req.files.file.name).toLowerCase(),\n                targetPath = path.resolve(`./public/upload/${imgUrl}${ext}`);\n\n            if (ext === '.png' || ext === '.jpg' || ext === '.jpeg' || ext ===\n                '.gif') {\n                fs.rename(tempPath, targetPath, (err) => {\n                    if (err) { throw err; }\n\n                    /* Start new code: */\n                    // create a new Image model, populate its details: \n                    var newImg = new Models.Image({\n                        title: req.body.title,\n                        filename: imgUrl + ext,\n                        description: req.body.description\n                    });\n                    // and save the new Image \n                    newImg.save((err, image) => {\n                        res.redirect(`/images/${image.uniqueId}`);\n                    });\n                    /* End new code: */\n                });\n            } else {\n                fs.unlink(tempPath, () => {\n                    if (err) { throw err; }\n\n                    res.json(500, { error: 'Only image files are allowed.' });\n                });\n            }\n            /* Start new code: */\n        }\n    });\n    /* End new code: */\n};\n\nsaveImage();\n```", "```js\n    $ node server.js\n    Server up: http://localhost:3300\n    Mongoose connected.\n```", "```js\nres.json({likes: 1}); \n```", "```js\nModels.Image.findOne({\n        filename: { $regex: req.params.image_id }\n    },\n    (err, image) => {\n        if (!err && image) {\n            image.likes = image.likes + 1;\n            image.save((err) => {\n                if (err) {\n                    res.json(err);\n                } else {\n                    res.json({ likes: image.likes });\n                }\n            });\n        }\n    }); \n```", "```js\nres.send('The image:comment POST controller'); \n```", "```js\nModels.Image.findOne({\n        filename: { $regex: req.params.image_id }\n    },\n    (err, image) => {\n        if (!err && image) {\n            var newComment = new Models.Comment(req.body);\n            newComment.gravatar = md5(newComment.email);\n            newComment.image_id = image._id;\n            newComment.save((err, comment) => {\n                if (err) { throw err; }\n\n                res.redirect(`/images/${image.uniqueId}#${comment._id}`);\n            });\n        } else {\n            res.redirect('/');\n        }\n    }); \n```", "```js\n{ \nname: 'Jason Krol', \nemail: 'jason@kroltech.com', \ncomment: 'This is what a comment looks like?!' \n} \n```", "```js\n    $ npm install md5 --save\n```", "```js\nconst fs = require('fs'), \npath = require('path'), \nsidebar = require('../helpers/sidebar'), \nModels = require('../models'), \nmd5 = require('md5'); \n```", "```js\n    $ npm install --save async\n```", "```js\nvar models = require('../models'), \nasync = require('async'); \nmodule.exports = { \nnewest: (callback)=>{ \n        // to do... \n    } \n}; \n```", "```js\nmodels.Comment.find({}, {}, {\n        limit: 5,\n        sort: { 'timestamp': -1 }\n    },\n    (err, comments) => {\n        // to do - attach an image to each comment... \n    }); \n```", "```js\nvar attachImage = (comment, next) => {\n    models.Image.findOne({ _id: comment.image_id },\n        (err, image) => {\n            if (err) throw err;\n            comment.image = image;\n            next(err);\n        });\n}; \n```", "```js\nasync.each(comments, attachImage,\n    (err) => {\n        if (err) throw err;\n        callback(err, comments);\n    });\n```", "```js\n/* jshint node: true */ \n\"use strict\" \n\nvar models = require('../models'), \n    async = require('async'); \n\nmodule.exports = { \n    newest: (callback)=>{ \n        models.Comment.find({}, {}, { limit: 5, sort: { 'timestamp': -1 } }, \n            (err, comments)=>{ \n                //console.log(\"COCOCO\"); \n                //console.log(comments); \n                var attachImage = (comment, next)=>{ \n                    models.Image.findOne({ _id : comment.image_id}, \n                        (err, image)=>{ \n                            if (err) throw err; \n\n                            comment.image = image; \n                            next(err); \n                        }); \n                }; \n\n                async.each(comments, attachImage, \n                    (err)=>{ \n                        if (err) throw err; \n                        callback(err, comments); \n                    }); \n            }); \n    } \n};\n```", "```js\nconst Stats = require('./stats'),\n    Images = require('./images'),\n    Comments = require('./comments'),\n    async = require('async');\n\nmodule.exports = (viewModel, callback) => {\n    async.parallel([\n        (next) => {\n            next(null, Stats());\n        },\n        (next) => {\n            next(null, Images.popular());\n        },\n        (next) => {\n            Comments.newest(next);\n        }\n    ], (err, results) => {\n        viewModel.sidebar = {\n            stats: results[0],\n            popular: results[1],\n            comments: results[2]\n        };\n\n        callback(viewModel);\n    });\n};\n```", "```js\nviewModel.sidebar = {\n    stats: Stats(),\n    popular: Images.popular(),\n    comments: Comments.newest()\n}; \n```", "```js\nviewModel.sidebar = {\n    stats: results[0],\n    popular: results[1],\n    comments: results[2]\n}; \n```", "```js\nconst models = require('../models'),\n    async = require('async');\n\nmodule.exports = (callback) => {\n    async.parallel([\n        (next) => {\n            next(null, 0);\n        },\n        (next) => {\n            next(null, 0);\n        },\n        (next) => {\n            next(null, 0);\n        },\n        (next) => {\n            next(null, 0);\n        }\n    ], (err, results) => {\n        callback(null, {\n            images: results[0],\n            comments: results[1],\n            views: results[2],\n            likes: results[3]\n        });\n    });\n}; \n```", "```js\nmodels.Image.count({}, next); \n```", "```js\nmodels.Image.count({}, (err, total) => {\n    next(err, total);\n}); \n```", "```js\nmodels.Comment.count({}, next); \n```", "```js\nmodels.Image.aggregate({\n    $group: {\n        _id: '1',\n        viewsTotal: { $sum: '$views' }\n    }\n}, (err, result) => {\n    var viewsTotal = 0;\n    if (result.length > 0) {\n        viewsTotal += result[0].viewsTotal;\n    }\n    next(null, viewsTotal);\n}); \n```", "```js\nmodels.Image.aggregate({\n    $group: {\n        _id: '1',\n        likesTotal: { $sum: '$likes' }\n    }\n}, (err, result) => {\n\n    var likesTotal = 0;\n    if (result.length > 0) {\n        likesTotal += result[0].likesTotal;\n    }\n    next(null, likesTotal);\n});\n```", "```js\nnext(null, Stats()); \n```", "```js\nStats(next); \n```", "```js\nvar models = require('../models');\n\nmodule.exports = {\n    popular: (callback) => {\n        models.Image.find({}, {}, { limit: 9, sort: { likes: -1 } },\n            (err, images) => {\n                if (err) throw err;\n\n                callback(null, images);\n            });\n    }\n};\n```", "```js\nnext(null, Images.popular()); \n```", "```js\nImages.popular(callback);\n```", "```js\nrouter.delete('/images/:image_id', image.remove);\n```", "```js\nremove: (req, res) => {\n    Models.Image.findOne({\n            filename: { $regex: req.params.image_id }\n        },\n        (err, image) => {\n            if (err) { throw err; }\n\n            fs.unlink(path.resolve(`./public/upload/${image.filename}`),\n                (err) => {\n                    if (err) { throw err; }\n\n                    Models.Comment.remove({ image_id: image._id },\n                        (err) => {\n                            image.remove((err) => {\n                                if (!err) {\n                                    res.json(true);\n                                } else {\n                                    res.json(false);\n                                }\n                            });\n                        });\n                });\n        });\n} \n```", "```js\n<div class=\"col-md-8\"> \n<button class=\"btnbtn-success\" id=\"btn-like\" ... \n    // existing HTML for Like button and misc details \n</div> \n<div class=\"col-md-4 text-right\"> \n<button class=\"btnbtn-danger\" id=\"btn-delete\" data-id=\"{{ \n image.uniqueId }}\"> \n<i class=\"fafa-times\"></i> \n</button> \n</div> \n```", "```js\n$('#btn-delete').on('click', function(event) {\n    event.preventDefault();\n    var $this = $(this);\n\n    var remove = confirm('Are you sure you want to delete this image ? ');\n    if (remove) {\n        var imgId = $(this).data('id');\n        $.ajax({\n            url: '/images/' + imgId,\n            type: 'DELETE'\n        }).done(function(result) {\n            if (result) {\n                $this.removeClass('btn-danger').addClass('btn-success ');\n                $this.find('i').removeClass('fa -times ').addClass('fa - check ');\n                $this.append('<span> Deleted!</span>');\n            }\n        });\n    }\n}); \n```"]