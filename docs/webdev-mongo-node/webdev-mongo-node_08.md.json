["```js\n    $ npm init\n    $ npm install --save express body-parser underscore\n```", "```js\nconst express = require('express'), \n    bodyParser = require('body-parser'), \n    _ = require('underscore'), \n    json = require('./movies.json'), \n    app = express(); \n\napp.set('port', process.env.PORT || 3500); \n\napp.use(bodyParser.urlencoded({ extended: false })) \napp.use(bodyParser.json()); \n\nlet router = new express.Router(); \n// TO DO: Setup endpoints ... \napp.use('/', router); \n\nconst server = app.listen(app.get('port'), ()=>{ \n    console.log(`Server up: http://localhost:${app.get('port')}`); \n}); \n```", "```js\n[{ \n    \"Id\": \"1\", \n    \"Title\": \"Aliens\", \n    \"Director\": \"James Cameron\", \n    \"Year\": \"1986\", \n    \"Rating\": \"8.5\" \n}, \n{ \n    \"Id\": \"2\", \n    \"Title\": \"Big Trouble in Little China\", \n    \"Director\": \"John Carpenter\", \n    \"Year\": \"1986\", \n    \"Rating\": \"7.3\" \n}, \n{ \n    \"Id\": \"3\", \n    \"Title\": \"Killer Klowns from Outer Space\", \n    \"Director\": \"Stephen Chiodo\", \n    \"Year\": \"1988\", \n    \"Rating\": \"6.0\" \n}, \n{ \n    \"Id\": \"4\", \n    \"Title\": \"Heat\", \n    \"Director\": \"Michael Mann\", \n    \"Year\": \"1995\", \n    \"Rating\": \"8.3\" \n}, \n{ \n    \"Id\": \"5\", \n    \"Title\": \"The Raid: Redemption\", \n    \"Director\": \"Gareth Evans\", \n    \"Year\": \"2011\", \n    \"Rating\": \"7.6\" \n}] \n```", "```js\n    $ node server.js\n    Server up: http://localhost:3500\n```", "```js\nrouter.get('/test', (req, res)=>{ \n    var data = { \n        name: 'Jason Krol', \n        website: 'http://kroltech.com' \n    }; \n    res.json(data); \n}); \n```", "```js\nrouter.get('/', (req, res)=>res.json(json)); \n```", "```js\nrouter.post('/', (req, res)=>{ \n    // insert the new item into the collection \n    if(req.body.Id && req.body.Title && req.body.Director && req.body.Year && req.body.Rating) { \n        json.push(req.body); \n        res.json(json); \n    } else { \n        res.json(500, { error: 'There was an error!' }); \n    } \n}); \n```", "```js\nrouter.put('/:id', (req, res)=>{ \n    // update the item in the collection \n    if(req.params.id && req.body.Title && req.body.Director && req.body.Year && req.body.Rating) { \n        _.each(json, (elem, index)=>{ \n            // find and update: \n            if (elem.Id === req.params.id) { \n                elem.Title = req.body.Title; \n                elem.Director = req.body.Director; \n                elem.Year = req.body.Year; \n                elem.Rating = req.body.Rating; \n            } \n        }); \n\n        res.json(json); \n    } else { \n        res.json(500, { error: 'There was an error!' }); \n    } \n}); \n```", "```js\nrouter.delete('/:id', (req, res)=>{ \n    let indexToDel = -1; \n    _.each(json, (elem, index)=>{ \n        if (elem.Id === req.params.id) { \n            indexToDel = index; \n        } \n    }); \n    if (~indexToDel) { \n        json.splice(indexToDel, 1); \n    } \n    res.json(json); \n}); \n```", "```js\n    $ npm install --save request\n```", "```js\nconst express = require('express'), \n    bodyParser = require('body-parser'), \n    _ = require('underscore'), \n    json = require('./movies.json'), \n    app = express(), \n    request = require('request'); \n```", "```js\nrouter.get('/external-api', (req, res)=>{ \n    request.get({ \n            uri: `http://localhost:${(process.env.PORT || 3500)}` \n        }, (error, response, body)=>{ \n            if (error) { throw error; } \n\n            var movies = []; \n            _.each(JSON.parse(body), (elem, index)=>{ \n                movies.push({ \n                    Title: elem.Title, \n                    Rating: elem.Rating \n                }); \n            }); \n            res.json(_.sortBy(movies, 'Rating').reverse()); \n        }); \n}); \n```", "```js\nrouter.get('/imdb', (req, res)=>{ \n    //console.log(\"err1\") \n    request.get({ \n            uri: 'http://sg.media-imdb.com/suggests/a/aliens.json' \n        }, (err, response, body)=>{ \n            let data = body.substring(body.indexOf('(')+1); \n            data = JSON.parse(data.substring(0,data.length-1)); \n            let related = []; \n            _.each(data.d, (movie, index)=>{ \n                related.push({ \n                    Title: movie.l, \n                    Year: movie.y, \n                    Poster: movie.i ? movie.i[0] : '' \n                }); \n            }); \n\n            res.json(related); \n        }); \n}); \n```"]