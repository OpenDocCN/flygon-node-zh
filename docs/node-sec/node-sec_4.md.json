["```js\napp.use(express.limit(\"5mb\"));\n```", "```js\n// module dependencies\nvar express = require(\"express\"),\n    app = express();\n\n// limiting the allowed size of request bodies (by content-type)\napp.use(express.urlencoded({ limit: \"1kb\" })); // application/x-www-form-urlencoded\napp.use(express.json({ limit: \"1kb\" }));       // application/json\napp.use(express.multipart({ limit: \"5mb\" }));  // multipart/form-data\napp.use(express.limit(\"2kb\"));                 // everything else\n```", "```js\nvar fs = require(\"fs\");\n\n// handle a PUT request against /file/:name\napp.put(\"/file/:name\", function (req, res, next) {\n    var data = \"\", // data buffer\n        filename = req.params.name; // the URL parameter\n\n    req.on(\"data\", function (chunk) {\n        data += chunk; // each data event appends to the buffer\n    });\n\n    req.on(\"end\", function () {\n        // write the buffered data to a file\n        fs.writeFile(filename, data, function (err) {\n            if (err) return next(err); // handle a write error\n\n            res.send(\"Upload Successful\"); // success message\n        });\n    });\n});\n```", "```js\nvar fs = require(\"fs\");\n\n// handle a PUT request against /file/:name\napp.put(\"/file/:name\", function (req, res, next) {\n    var filename = req.params.name, // the URL parameter\n        // open a writable stream for our uploaded data\n        destination = fs.createWriteStream(filename);\n\n    // if our destination could not be written to, throw an error\n    destination.on(\"error\", next);\n\n    req.pipe(destination).on(\"end\", function () {\n        res.send(\"Upload Successful\"); // success message\n    });\n});\n```", "```js\nvar toobusy = require(\"toobusy\"),\n    express = require(\"express\"),\n    app = express();\n\n// middleware which blocks requests when we're too busy\napp.use(function(req, res, next) {\n    if (toobusy()) {\n        res.send(503, \"I'm busy right now, sorry.\");\n    } else {\n        next();\n    }\n});\n\napp.get(\"/\", function(req, res) {\n    // each request blocks the event loop\n    var start = (new Date()).getTime(), now;\n    while (((new Date()).getTime() - start) <= 5000); // run for 5 seconds\n    res.send(\"Hello World\");\n});\n\nvar server = app.listen(3000);\nprocess.on(\"SIGINT\", function() {\n    server.close();\n    // calling .shutdown allows your process to exit normally\n    toobusy.shutdown();\n    process.exit();\n});\n```", "```js\nvar express = require(\"express\"),\n    app = express();\n\napp.use(express.cookieParser()); // required for session support\napp.use(express.bodyParser());   // required by csrf\napp.use(express.session({ secret: \"secret goes here\" })); // required by csrf\napp.use(express.csrf());\n\n// landing page, just links to the 2 different sample forms\napp.get(\"/\", function (req, res) {\n    res.send('<a href=\"/valid\">Valid</a> <a href=\"/invalid\">Invalid</a>')\n});\n\n// valid form, includes the required _csrf token in the HTML Form (hidden input)\napp.get(\"/valid\", function (req, res) {\n    var output = \"\";\n    output += '<form method=\"post\" action=\"/\">'\n    output += '<input type=\"hidden\" name=\"_csrf\" value=\"' + req.csrfToken() + '\">';\n    output += '<input type=\"submit\">';\n    output += '</form>';\n    res.send(output);\n});\n// invalid form, does not have the required token\n// throws a \"Forbidden\" error when submitted\napp.get(\"/invalid\", function (req, res) {\n    var output = \"\";\n    output += '<form method=\"post\" action=\"/\">'\n    output += '<input type=\"submit\">';\n    output += '</form>';\n    res.send(output);\n});\n\n// POST target, redirects back to home if successful\napp.post(\"/\", function (req, res) {\n    res.redirect(\"/\");\n});\n\napp.listen(2500);\n```", "```js\n<form method=\"post\">\n    <div>\n        <label>Name</label>\n        <input type=\"text\" name=\"name\">\n    </div>\n    <div>\n        <label>Email</label>\n        <input type=\"email\" name=\"email\">\n    </div>\n    <div>\n        <label>Website</label>\n        <input type=\"url\" name=\"website\">\n    </div>\n    <div>\n        <label>Age</label>\n        <input type=\"number\" name=\"age\">\n    </div>\n    <div>\n        <label>Gender</label>\n        <select name=\"gender\">\n            <option>-- choose --</option>\n            <option value=\"M\">Male</option>\n            <option value=\"F\">Female</option>\n        </select>\n    </div>\n\n    <button type=\"submit\">Validate</button>\n</form>\n```", "```js\n// module dependencies\nvar express = require(\"express\"),\n    app = module.exports = express();\n\napp.use(express.bodyParser());           // required by csrf\napp.use(require(\"express-validator\")()); // the validation middleware\n\n// an HTML form to be validated\napp.get(\"/\", function (req, res) {\n    res.sendfile(__dirname + \"/views/validate-input.html\");\n});\n\n/**\n * Validates the input, will either:\n *  - sends a 403 Forbidden response in the event of validation errors\n *  - send a 200 OK response if the data validates successfully\n */\napp.post(\"/\", function (req, res, next) {\n    // validation\n    req.checkBody(\"name\").notEmpty().is(/\\w+/);\n    req.checkBody(\"email\").notEmpty().isEmail();\n    req.checkBody(\"website\").isUrl();\n    req.checkBody(\"age\").isInt().min(0).max(100);\n    req.checkBody(\"gender\").isIn([ \"M\", \"F\" ]);\n    // filtering\n    req.sanitize(\"name\").trim();\n    req.sanitize(\"email\").trim();\n    req.sanitize(\"age\").toInt();\n\n    var errors = req.validationErrors(true);\n\n    if (errors) {\n        res.json(403, {\n            message: \"There were validation errors\",\n            errors: errors\n        });\n    } else {\n        res.json({\n            name: req.param(\"name\"),\n            email: req.param(\"email\"),\n            website: req.param(\"website\"),\n            age: req.param(\"age\"),\n            gender: req.param(\"gender\")\n        });\n    }\n});\n```"]