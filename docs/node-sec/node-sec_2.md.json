["```js\n// these variables are available to eval()'d code\n// assume these variables are user input from a POST request\nvar a = req.body.a; // => 1\nvar b = req.body.b; // => 2\nvar sum = eval(a + \"+\" + b); // same as '1 + 2'\n```", "```js\nvar a = req.body.a; // => 1\nvar b = req.body.b; // => 2; console.log(\"corrupted\");\nvar sum = eval(a + \"+\" + b); // same as '1 + 2; console.log(\"corrupted\");\n```", "```js\n// creates a function that returns the sum of 2 arguments\nvar adder = new Function(\"a\", \"b\", \"return a + b\");\nadder(1, 2); // => 3\n```", "```js\nfunction sayHello(name) {\n    \"use strict\"; // enables strict mode for this function scope\n    console.log(\"hello\", name);\n}\n```", "```js\n\"use strict\";\neval(\"var a = true\");\nconsole.log(a); // ReferenceError thrown \u2013 a does not exist\n```", "```js\n// all of the examples below are syntax errors\n\"use strict\";\neval = 1;\n++eval;\nvar eval;\nfunction eval() { }\n```", "```js\n\"use strict\";\nfunction restricted() {\n    restricted.caller;    // TypeError thrown\n    restricted.arguments; // TypeError thrown\n}\n```", "```js\n\"use strict\";\nfunction fun() {\n    arguments.callee; // TypeError thrown\n}\n```", "```js\n\"use strict\";\n(function () {\n    console.log(this); // => null\n}).call(null);\n```", "```js\nvar o = {};\n\n// the next 2 statements are completely identical in result\n\no.a = \"A\";\n\nObject.defineProperty(o, \"a\", {\n    writable: true,\n    enumerable: true,\n    configurable: true,\n    value: \"A\"\n});\n```", "```js\nvar o = {};\n\nObject.defineProperty(o, \"a\", {\n    value: \"A\"\n});\n```", "```js\nvar person = {\n    firstName: \"Dominic\",\n    lastName: \"Barnes\"\n};\n\nObject.defineProperty(person, \"name\", {\n    enumerable: true,\n    get: function () {\n        return this.firstName + \" \" + this.lastName;\n    },\n    set: function (input) {\n        var names = input.split(\" \");\n        this.firstName = names[0];\n        this.lastName = names[1];\n    }\n});\n\nconsole.log(person.name); // => \"Dominic Barnes\"\n```", "```js\nvar letters = {};\n\nObject.defineProperties(letters, {\n    a: {\n        enumerable: true,\n        value: \"A\"\n    },\n    b: {\n        enumerable: true,\n        value: \"B\"\n    }\n});\n\nconsole.log(letters.a); // => \"A\"\nconsole.log(letters.b); // => \"B\"\n```", "```js\nvar constants = Object.create(null, {\n    PI: {\n        enumerable: true,\n        value: 3.14\n    },\n    e: {\n        enumerable: true,\n        value: 2.72\n    }\n});\n```", "```js\nvar o = {\n    a: \"A\",\n    b: \"B\",\n    c: \"C\"\n};\n\no.d = \"D\"; // works as expected\n\nObject.preventExtensions(o);\n\no.e = \"E\"; // will not work\n```", "```js\nvar o = {\n    a: \"A\",\n    b: \"B\",\n    c: \"C\"\n};\n\ndelete o.c; // works as expected\n\nObject.seal(o);\n\ndelete o.b; // will not work\n```", "```js\nvar o = {\n    a: \"A\",\n    b: \"B\",\n    c: \"C\"\n};\n\n// works as expected\no.a = 1;\ndelete o.c;\n\nObject.freeze(o);\n\n// will not work\no.a = \"A\";\ndelete o.b;\n```", "```js\nvar fs = require(\"fs\");\n\nfs.readFile(\"/some/file\", \"utf8\", function (err, contents) {\n    // err will be...\n    // null if no error has occurred \u2026 or\n    // an Error object with information about the error\n});\n```", "```js\nvar http = require(\"http\");\n\nhttp.get(\"http://nodejs.org/\", function (res) {\n    // res is an EventEmitter that represents the HTTP response\n\n    res.on(\"data\", function (chunk) {\n        // this event occurs many times\n        // each with a small chunk of the response data\n    });\n\n    res.on(\"error\", function (err) {\n        // this event occurs if an error occurs during transmission\n    });\n});\n```", "```js\nprocess.on(\"uncaughtException\", function (err) {\n    // we're just executing the default behavior\n    // but you can implement your own custom logic here instead\n    console.error(err);\n    console.trace();\n    process.exit();\n});\n```", "```js\nvar http = require(\"http\"),\n    domain = require(\"domain\"),\n    server = http.createServer(),\n    counter = 0;\nserver.on(\"request\", function (req, res) {\n    // this domain will cover this entire request/response cycle\n    var d = domain.create();\n    d.on(\"error\", function (err) {\n        // outputs all relevant context for this error\n        console.error(\"Error:\", err);\n\n        res.writeHead(500, { \"content-type\": \"text/plain\" });\n        res.end(err.message);\n\n        // stops the server from accepting new connections/requests\n        console.warn(\"closing server to new connections\");\n        server.close(function () {\n            console.warn(\"terminating process\");\n            process.exit(1);\n        });\n    });\n\n    // adding the req and res objects to the domain allows\n    // errors they encounter to be handled by the domain\n    // automatically\n    d.add(req);\n    d.add(res);\n\n    d.run(function () {\n        if (++counter === 4) {\n            throw new Error(\"Unexpected Error\");\n        }\n\n        res.writeHead(200, { \"content-type\": \"text/plain\" });\n        res.end(\"Hello World\\n\");\n    });\n});\n\nserver.listen(3000);\n```"]