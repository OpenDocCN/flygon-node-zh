["```js\n5 should be equal to A\n```", "```js\nnpm install chai\n\n```", "```js\n{\n  \"name\": \"chai-test\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A test script\",\n  \"main\": \"chai.js\",\n  \"dependencies\": {\n  },\n  \"devDependencies\": {\n    \"chai\": \"*\"\n  },\n  \"author\": \"David Gonzalez\",\n  \"license\": \"ISC\"\n}\n```", "```js\nmyVar.should.be.a('string')\n```", "```js\nvar chai = require('chai');\n\nchai.should();\n\nvar foo = \"Hello world\";\nconsole.log(foo);\n\nfoo.should.equal('Hello world');\n```", "```js\nvar expect = require('chai').expect;\n\nvar foo = \"Hello world\";\n\nexpect(foo).to.equal(\"Hello world\");\n```", "```js\nvar expect = require('chai').expect;\nvar animals = ['cat', 'dog', 'parrot'];\nexpect(animals).to.have.length(4);\n```", "```js\ncode/node_modules/chai/lib/chai/assertion.js:107\n throw new AssertionError(msg, {\n ^\nAssertionError: expected [ 'cat', 'dog', 'parrot' ] to have a length of 4 but got 3\n at Object.<anonymous> (/Users/dgonzalez/Dropbox/Microservices with Node/Writing Bundle/Chapter 6/code/chai.js:24:25)\n at Module._compile (module.js:460:26)\n at Object.Module._extensions..js (module.js:478:10)\n at Module.load (module.js:355:32)\n at Function.Module._load (module.js:310:12)\n at Function.Module.runMain (module.js:501:10)\n at startup (node.js:129:16)\n at node.js:814:3\n\n```", "```js\nvar assert = require('chai').assert;\nvar myStringVar = 'Here is my string';\n// No message:\nassert.typeOf(myStringVar, 'string');\n// With message:\nassert.typeOf(myStringVar, 'string', 'myStringVar is not string type.');\n// Asserting on length:\nassert.lengthOf(myStringVar, 17);\n```", "```js\nnpm install mocha -g\n\n```", "```js\nfunction rollDice() {\n  return Math.floor(Math.random() * 6) + 1;\n}\n\nrequire('chai').should();\nvar expect = require('chai').expect;\n\ndescribe('When a customer rolls a dice', function(){\n\n  it('should return an integer number', function() {\n    expect(rollDice()).to.be.an('number');\n  });\n\n  it('should get a number below 7', function(){\n    rollDice().should.be.below(7);\n  });\n\n  it('should get a number bigger than 0', function(){\n    rollDice().should.be.above(0);\n  });\n\n  it('should not be null', function() {\n    expect(rollDice()).to.not.be.null;\n  });\n\n  it('should not be undefined', function() {\n    expect(rollDice()).to.not.be.undefined;\n  });\n});\n```", "```js\nmocha tests.js\n\n```", "```js\nfunction rollDice() {\n  return -1 * Math.floor(Math.random() * 6) + 1;\n}\n\nrequire('chai').should();\nvar expect = require('chai').expect;\n\ndescribe('When a customer rolls a dice', function(){\n\n  it('should return an integer number', function() {\n    expect(rollDice()).to.be.an('number');\n  });\n\n  it('should get a number below 7', function(){\n    rollDice().should.be.below(7);\n  });\n\n  it('should get a number bigger than 0', function(){\n    rollDice().should.be.above(0);\n  });\n\n  it('should not be null', function() {\n    expect(rollDice()).to.not.be.null;\n  });\n\n  it('should not be undefined', function() {\n    expect(rollDice()).to.not.be.undefined;\n  });\n});\n```", "```js\nnpm install sinon\n\n```", "```js\nfunction calculateHypotenuse(x, y, callback) {\n  callback(null, Math.sqrt(x*x + y*x));\n}\n\ncalculateHypotenuse(3, 3, function(err, result){\n  console.log(result);\n});\n```", "```js\nvar sinon = require('sinon');\n\nrequire('chai').should();\n\nfunction calculateHypotenuse(x, y, callback) {\n  callback(null, Math.sqrt(x*x + y*x));\n}\n\ndescribe(\"When the user calculates the hypotenuse\", function(){\n  it(\"should execute the callback passed as argument\", function() {\n    var callback = sinon.spy();\n    calculateHypotenuse(3, 3, callback);\n    callback.called.should.be.true;\n  });\n});\n```", "```js\nvar callback = sinon.spy();\n```", "```js\nvar sinon = require('sinon');\nvar expect = require('chai').expect;\n\nfunction rollDice() {\n  return -1 * Math.floor(Math.random() * 6) + 1;\n}\ndescribe(\"When rollDice gets called\", function() {\n  it(\"Math#random should be called with no arguments\", function() {\n    sinon.stub(Math, \"random\");\n    rollDice();\n    console.log(Math.random.calledWith());\n  });\n})\n```", "```js\nvar sinon = require('sinon');\nvar expect = require('chai').expect;\n\nvar sinon = require('sinon');\nvar expect = require('chai').expect;\n\nfunction rollDice() {\n  return -1 * Math.floor(Math.random() * 6) + 1;\n}\ndescribe(\"When rollDice gets called\", function() {\n\n  it(\"Math#random should be called with no arguments\", function() {\n    sinon.stub(Math, \"random\");\n    rollDice();\n    console.log(Math.random.calledWith());\n  });\nafter(function(){\n Math.random.restore();\n });\n});\n```", "```js\nvar sinon = require('sinon');\nvar expect = require('chai').expect\n\nfunction areWeThereYet(callback) {\n\n  setTimeout(function() {\n    callback.apply(this);\n  }, 10);\n\n}\n\nvar clock;\n\nbefore(function(){\n  clock = sinon.useFakeTimers();\n});\n\nit(\"callback gets called after 10ms\", function () {\n  var callback = sinon.spy();\n  var throttled = areWeThereYet(callback);\n\n  areWeThereYet(callback);\n\n  clock.tick(9);\n  expect(callback.notCalled).to.be.true;\n\n  clock.tick(1);\n  expect(callback.notCalled).to.be.false;\n});\n\nafter(function(){\n  clock.restore();\n});\n```", "```js\nvar _ = require('lodash');\nvar express = require('express');\n\nvar bannedWords = [\"kitten\", \"puppy\", \"parrot\"];\n\nfunction removeStopWords (text, callback) {\n  var words = text.split(' ');\n  var validWords = [];\n  _(words).forEach(function(word, index) {\n    var addWord = true;\n\n    if (word.length < 3) {\n      addWord = false;\n    }\n\n    if(addWord && bannedWords.indexOf(word) > -1) {\n      addWord = false;\n    }\n\n    if (addWord) {\n      validWords.push(word); \n    }\n\n    // Last iteration:\n    if (index == (words.length - 1)) {\n      callback(null, validWords.join(\" \"));\n    }\n  });\n}\nvar app = express();\n\napp.get('/filter', function(req, res) {\n  removeStopWords(req.query.text, function(err, response){\n    res.send(response);\n  });\n});\n\napp.listen(3000, function() {\n  console.log(\"app started in port 3000\");\n});\n```", "```js\nvar _ = require('lodash');\nvar express = require('express');\n\nmodule.exports = function(options) {\n  bannedWords = [];\n  if (typeof options !== 'undefined') {\n    console.log(options);\n    bannedWords = options.bannedWords || [];\n  }\n\n  return function bannedWords(text, callback) {\n    var words = text.split(' ');\n    var validWords = [];\n    _(words).forEach(function(word, index) {\n      var addWord = true;\n\n      if (word.length < 3) {\n        addWord = false;\n      }\n\n      if(addWord && bannedWords.indexOf(word) > -1) {\n        addWord = false;\n      }\n\n      if (addWord) {\n        validWords.push(word); \n      }\n\n      // Last iteration:\n      if (index == (words.length - 1)) {\n        callback(null, validWords.join(\" \"));\n      }\n    });\n  }\n}\n```", "```js\nvar _ = require('lodash');\nvar express = require('express');\n\nvar removeStopWords = require('./remove-stop-words')({bannedWords: [\"kitten\", \"puppy\", \"parrot\"]});\n\nvar app = express();\n\napp.get('filter', function(req, res) {\n  res.send(removeStopWords(req.query.text));\n});\n\napp.listen(3000, function() {\n  console.log(\"app started in port 3000\");\n});\n```", "```js\nvar removeStopWords = require('./remove-stop-words')({bannedWords: [\"kitten\", \"parrot\"]});\n\nvar chai = require('chai');\nvar assert = chai.assert;\nchai.should();\nvar expect = chai.expect;\n\ndescribe('When executing \"removeStopWords\"', function() {\n\n  it('should remove words with less than 3 chars of length', function() {\n    removeStopWords('my small list of words', function(err, response) {\n      expect(response).to.equal(\"small list words\");\n    });\n  });\n\n  it('should remove extra white spaces', function() {\n    removeStopWords('my small       list of words', function(err, response) {\n      expect(response).to.equal(\"small list words\");\n    });\n  });\n\n  it('should remove banned words', function() {\n    removeStopWords('My kitten is sleeping', function(err, response) {\n      expect(response).to.equal(\"sleeping\");\n    });\n  });\n\n  it('should not fail with null as input', function() {\n    removeStopWords(null, function(err, response) {\n      expect(response).to.equal(\"small list words\");\n    });\n  });\n\n  it('should fail if the input is not a string', function() {\n    try {\n      removeStopWords(5, function(err, response) {});\n      assert.fail();\n    }\n    catch(err) {\n    }\n  });\n});\n```", "```js\nnpm install -g istanbul\n\n```", "```js\nistanbul cover _mocha my-tests.js\n\n```", "```js\nnode stop-words.js\n\n```", "```js\nvar express = require('express');\n\nvar myServer = express();\n\nvar chai = require('chai');\n\nmyServer.get('/endpoint', function(req, res){\n  res.send('endpoint reached');\n});\n\nvar serverHandler;\n\nbefore(function(){\n  serverHandler = myServer.listen(3000);\n});\n\ndescribe(\"When executing 'GET' into /endpoint\", function(){\n  it(\"should return 'endpoint reached'\", function(){\n    // Your test logic here. http://localhost:3000 is your server.\n  });\n});\n\nafter(function(){\n  serverHandler.close();\n});\n```", "```js\nvar chai = require('chai');\nvar chaiHttp = require('chai-http');\nvar expect = chai.expect;\nchai.use(chaiHttp);\n\ndescribe(\"when we issue a 'GET' to /filter with text='aaaa bbbb cccc'\", function(){\n  it(\"should return HTTP 200\", function(done) {\n    chai.request('http://localhost:3000')\n      .get('/filter')\n      .query({text: 'aa bb ccccc'}).end(function(req, res){\n        expect(res.status).to.equal(200);\n        done();\n      });\n  });\n});\n\ndescribe(\"when we issue a 'GET' to /filter with text='aa bb ccccc'\", function(){\n  it(\"should return 'ccccc'\", function(done) {\n    chai.request('http://localhost:3000')\n      .get('/filter')\n      .query({text: 'aa bb ccccc'}).end(function(req, res){\n        expect(res.text).to.equal('ccccc');\n        done();\n      });\n  });\n});\n\ndescribe(\"when we issue a 'GET' to /filter with text='aa bb cc'\", function(){\n  it(\"should return ''\", function(done) {\n    chai.request('http://localhost:3000')\n      .get('/filter')\n      .query({text: 'aa bb cc'}).end(function(req, res){\n        expect(res.text).to.equal('');\n        done();\n      });\n  });\n});\n```", "```js\n it(\"should return 'ccccc'\", function(done) {\n    chai.request('http://localhost:3000')\n      .get('/filter')\n      .query({text: 'aa bb ccccc'}).end(function(req, res){\n        expect(res.text).to.equal('ccccc');\n done();\n      });\n  });\n```", "```js\nchai.request('http://mydomain.com')\n  .post('/myform')\n  .field('_method', 'put')\n  .field('username', 'dgonzalez')\n  .field('password', '123456').end(...)\n```", "```js\nvar http = require('http');\nvar httpProxy = require('http-proxy');\nvar proxy = httpProxy.createProxyServer({});\n\nhttp.createServer(function(req, res) {\n  console.log(req.rawHeaders);\n  proxy.web(req, res, { target: 'http://localhost:3000' });\n}).listen(4000);\n```", "```js\ncurl http://localhost:4000/filter?text=aaa\n\n```", "```js\nvar http = require(\"http\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"localhost\",\n  \"port\": \"3000\",\n  \"path\": \"/filter?text=aaa%20bb%20cc\",\n  \"headers\": {\n    \"cache-control\": \"no-cache\",\n    \"postman-token\": \"912cacd8-bcc0-213f-f6ff-f0bcd98579c0\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();\n```", "```js\nnpm install -g swagger\n\n```", "```js\nswagger project create my-project\n\n```", "```js\nSwagger project edit\n\n```", "```js\n/hello:\n  # binds a127 app logic to a route\n  x-swagger-router-controller: hello_world\n  get:\n    description: Returns 'Hello' to the caller\n    # used as the method name of the controller\n    operationId: hello\n    parameters:\n      - name: name\n        in: query\n        description: The name of the person to whom to say hello\n        required: false\n        type: string\n    responses:\n      \"200\":\n        description: Success\n        schema:\n          # a pointer to a definition\n          $ref: \"#/definitions/HelloWorldResponse\"\n      # responses may fall through to errors\n      default:\n        description: Error\n        schema:\n          $ref: \"#/definitions/ErrorResponse\"\n```", "```js\n'use strict';\n\nvar util = require('util');\n\nmodule.exports = {\n  hello: hello\n};\n\nfunction hello(req, res) {\n  var name = req.swagger.params.name.value || 'stranger';\n  var hello = util.format('Hello, %s!', name);\n  res.json(hello);\n}\n```", "```js\ndefinitions:\n  HelloWorldResponse:\n    required:\n      - message\n    properties:\n      message:\n        type: string\n  ErrorResponse:\n    required:\n      - message\n    properties:\n      message:\n        type: string\n```", "```js\nswagger project start\n\n```", "```js\nStarting: C:\\my-project\\app.js...\n project started here: http://localhost:10010/\n project will restart on changes.\n to restart at any time, enter `rs`\ntry this:\ncurl http://127.0.0.1:10010/hello?name=Scott\n\n```", "```js\ncurl http://127.0.0.1:10010/hello?name=David\n\"Hello David!\"\n\n```", "```js\nswagger: \"2.0\"\ninfo:\n  version: \"0.0.1\"\n  title: Stop Words Filtering App\nhost: localhost:8000\nbasePath: /\nschemes:\n  - http\n  - https\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /stop-words:\n    x-swagger-router-controller: stop_words\n    get:\n      description: Removes the stop words from an arbitrary input text.\n      operationId: stopwords\n      parameters:\n        - name: text\n          in: query\n          description: The text to be sanitized\n          required: false\n          type: string\n      responses:\n        \"200\":\n          description: Success\n          schema:\n            $ref: \"#/definitions/StopWordsResponse\"\n  /swagger:\n    x-swagger-pipe: swagger_raw\ndefinitions:\n  StopWordsResponse:\n    required:\n      - message\n    properties:\n      message:\n        type: string\n```", "```js\nmvn package\n\n```", "```js\njava -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i my-project.yaml -l nodejs -o my-project\n\n```"]