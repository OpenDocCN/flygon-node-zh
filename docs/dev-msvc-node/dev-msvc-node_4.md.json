["```js\n/**\n * Fetch the list of all the products.\n */\nseneca.add({area: \"product\", action: \"fetch\"}, function(args, done) {\n  var products = this.make(\"products\");\n  products.list$({}, done);\n});\n```", "```js\nseneca.add({area: \"product\", action: \"fetch\"}, function(args, done) {\n  var products = this.make(\"products\");\n  products.list$({}, function(err, result) {\n    done(err, result);\n  });\n});\n```", "```js\n/**\n * Fetch the list of products by category.\n */\nseneca.add({area: \"product\", action: \"fetch\", criteria: \"byCategory\"}, function(args, done) {\n  var products = this.make(\"products\");\n  products.list$({category: args.category}, done);\n});\n```", "```js\n/**\n * Fetch a product by id.\n */\nseneca.add({area: \"product\", action: \"fetch\", criteria: \"byId\"}, function(args, done) {\n  var product = this.make(\"products\");\n  product.load$(args.id, done);\n});\n```", "```js\n/**\n * Adds a product.\n */\nseneca.add({area: \"product\", action: \"add\"}, function(args, done) {\n  var products = this.make(\"products\");\n  products.category = args.category;\n  products.name = args.name;\n  products.description = args.description;\n  products.category = args.category;\n  products.price = args.price\n  products.save$(function(err, product) {\n    done(err, products.data$(false));\n  });\n});\n```", "```js\n/**\n * Removes a product by id.\n */\nseneca.add({area: \"product\", action: \"remove\"}, function(args, done) {\n  var product = this.make(\"products\");\n  product.remove$(args.id, function(err) {\n  done(err, null);\n  });\n});\n```", "```js\n/**\n * Edits a product fetching it by id first.\n */\nseneca.edit({area: \"product\", action: \"edit\"}, function(args, done) {\n  seneca.act({area: \"product\", action: \"fetch\", criteria: \"byId\", id: args.id}, function(err, result) {\n  result.data$(\n  {\n    name: args.name, \n    category: args.category, \n    description: args.description,\n    price: args.price \n  }\n  );\n  result.save$(function(err, product){\n    done(product.data$(false));\n    });\n  });\n});\n```", "```js\nvar plugin = function(options) {\n  var seneca = this;\n\n  /**\n   * Fetch the list of all the products.\n   */\n  seneca.add({area: \"product\", action: \"fetch\"}, function(args, done) {\n    var products = this.make(\"products\");\n    products.list$({}, done);\n  });\n\n  /**\n   * Fetch the list of products by category.\n   */\n  seneca.add({area: \"product\", action: \"fetch\", criteria: \"byCategory\"}, function(args, done) {\n    var products = this.make(\"products\");\n    products.list$({category: args.category}, done);\n  });\n\n  /**\n   * Fetch a product by id.\n   */\n  seneca.add({area: \"product\", action: \"fetch\", criteria: \"byId\"}, function(args, done) {\n    var product = this.make(\"products\");\n    product.load$(args.id, done);\n  });\n\n  /**\n   * Adds a product.\n   */\n  seneca.add({area: \"product\", action: \"add\"}, function(args, done) {\n    var products = this.make(\"products\");\n    products.category = args.category;\n    products.name = args.name;\n    products.description = args.description;\n    products.category = args.category;\n    products.price = args.price\n    products.save$(function(err, product) {\n      done(err, products.data$(false));\n    });\n  });\n\n  /**\n   * Removes a product by id.\n   */\n  seneca.add({area: \"product\", action: \"remove\"}, function(args, done) {\n    var product = this.make(\"products\");\n    product.remove$(args.id, function(err) {\n      done(err, null);\n    });\n  });\n\n  /**\n   * Edits a product fetching it by id first.\n   */\n  seneca.add({area: \"product\", action: \"edit\"}, function(args, done) {\n    seneca.act({area: \"product\", action: \"fetch\", criteria: \"byId\", id: args.id}, function(err, result) {\n      result.data$(\n        {\n          name: args.name, \n          category: args.category, \n          description: args.description,\n          price: args.price            \n        }\n      );\n      result.save$(function(err, product){\n        done(err, product.data$(false));\n      });\n    });\n  });\n}\nmodule.exports = plugin;\n\nvar seneca = require(\"seneca\")();\nseneca.use(plugin);\nseneca.use(\"mongo-store\", {\n  name: \"seneca\",\n  host: \"127.0.0.1\",\n  port: \"27017\"\n});\n\nseneca.ready(function(err){\n\n  seneca.act('role:web',{use:{\n    prefix: '/products',\n    pin: {area:'product',action:'*'},\n    map:{\n    fetch: {GET:true},\n    edit: {GET:false,POST:true},\n    delete: {GET: false, DELETE: true}\n    }\n  }});\n  var express = require('express');\n  var app = express();\n  app.use(require(\"body-parser\").json());\n\n  // This is how you integrate Seneca with Express\n  app.use( seneca.export('web') );\n\n  app.listen(3000);\n\n});\n```", "```js\n{\n  \"name\": \"Product Manager\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Product Management sub-system\",\n  \"main\": \"index.js\",\n  \"keywords\": [\n    \"microservices\",\n    \"products\"\n  ],\n  \"author\": \"David Gonzalez\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n  \"body-parser\": \"^1.14.1\",\n  \"debug\": \"^2.2.0\",\n  \"express\": \"^4.13.3\",\n  \"seneca\": \"^0.8.0\",\n  \"seneca-mongo-store\": \"^0.2.0\",\n  \"type-is\": \"^1.6.10\"\n  }\n}\n```", "```js\n  seneca.act('role:web',{use:{\n    prefix: '/products',\n    pin: {area:'product',action:'*'},\n    map:{\n    fetch: {GET:true},      \n    edit: {PUT:true},\n    delete: {GET: false, DELETE: true}\n    }\n  }});\n  var express = require('express');\n  var app = express();\n  app.use(require(\"body-parser\").json());\n\n  // This is how you integrate Seneca with Express\n  app.use( seneca.export('web') );\n\n  app.listen(3000);\n```", "```js\nvar plugin = function(options) {\n  var seneca = this;\n  /**\n   * Sends an email using a template email.\n   */\n  seneca.add({area: \"email\", action: \"send\", template: \"*\"}, function(args, done) {\n// TODO: More code to come.\n  });\n\n  /**\n   * Sends an email including the content.\n   */\n  seneca.add({area: \"email\", action: \"send\"}, function(args, done) {\n// TODO: More code to come.\n  });\n};\n```", "```js\nvar mandrill = require(\"mandrill-api/mandrill\");\nvar mandrillClient = new mandrill.Mandrill(\"<YOUR-KEY-HERE>\");\n\nmandrillClient.users.info({}, function(result){\n  console.log(result);\n}, function(e){\n  console.log(e);\n});\n```", "```js\n/**\n   * Sends an email including the content.\n   */\n  seneca.add({area: \"email\", action: \"send\"}, function(args, done) {\n    console.log(args);\n    var message = {\n      \"html\": args.content,\n      \"subject\": args.subject,\n      \"to\": [{\n        \"email\": args.to,\n        \"name\": args.toName,\n        \"type\": \"to\"\n      }],\n      \"from_email\": \"info@micromerce.com\",\n      \"from_name\": \"Micromerce\"\n    }\n    mandrillClient.messages.send({\"message\": message}, function(result) {\n      done(null, {status: result.status});\n    }, function(e) {\n      done({code: e.name}, null);\n    });\n  });\n```", "```js\n  /**\n   * Sends an email using a template email.\n   */\n  seneca.add({area: \"email\", action: \"send\", template: \"*\"}, function(args, done) {\n    console.log(\"sending\");\n    var message = {\n      \"subject\": args.subject,\n      \"to\": [{\n        \"email\": args.to,\n        \"name\": args.toName,\n        \"type\": \"to\"\n      }],\n      \"from_email\": \"info@micromerce.com\",\n      \"from_name\": \"Micromerce\",\n      \"global_merge_vars\": args.vars,\n    }\n    mandrillClient.messages.sendTemplate(\n      {\"template_name\": args.template, \"template_content\": {}, \"message\": message}, \n    function(result) {\n      done(null, {status: result.status});\n    }, function(e) {\n      done({code: e.name}, null);\n    });\n  });\n```", "```js\n  /**\n   * Sends an email including the content.\n   */\n  seneca.add({area: \"email\", action: \"send\", cc: \"*\"}, function(args, done) {\n    var message = {\n      \"html\": args.content,\n      \"subject\": args.subject,\n      \"to\": [{\n        \"email\": args.to,\n        \"name\": args.toName,\n        \"type\": \"to\"\n      },{\n        \"email\": args.cc,\n        \"name\": args.ccName,\n        \"type\": \"cc\"\n      }],\n      \"from_email\": \"info@micromerce.com\",\n      \"from_name\": \"Micromerce\"\n    }\n    mandrillClient.messages.send({\"message\": message}, function(result) {\n      done(null, {status: result.status});\n    }, function(e) {\n      done({code: e.name}, null);\n    });\n  });\n```", "```js\nseneca.act({area: \"email\", action: \"send\", subject: \"The Subject\", to: \"test@test.com\", toName: \"Test Testingtong\"}, function(err, result){\n// More code here\n});\n```", "```js\nseneca.act({area: \"email\", action: \"send\", subject: \"The Subject\", to: \"test@test.com\", toName: \"Test Testingtong\", cc: \"test2@test.com\", ccName: \"Test 2\"}, function(err, result){\n// More code here\n});\n```", "```js\n{\n  \"name\": \"emailing\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Emailing sub-system\",\n  \"main\": \"index.js\",\n  \"keywords\": [\n  \"microservices\",\n  \"emailing\"\n  ],\n  \"author\": \"David Gonzalez\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n  \"mandrill-api\": \"^1.0.45\",\n  \"seneca\": \"^0.8.0\"\n  }\n}\n```", "```js\nvar nodemailer = require('nodemailer');\nvar seneca = require(\"seneca\")();\nvar transporter = nodemailer.createTransport({\n  service: 'Gmail',\n  auth: {\n    user: 'info@micromerce.com',\n    pass: 'verysecurepassword'\n  }\n});\n\n/**\n * Sends an email including the content.\n */\nseneca.add({area: \"email\", action: \"send\"}, function(args, done) {\n  var mailOptions = {\n    from: 'Micromerce Info <info@micromerce.com>',\n    to: args.to, \n    subject: args.subject,\n    html: args.body\n  };\n  transporter.sendMail(mailOptions, function(error, info){\n    if(error){\n      done({code: e}, null);\n    }\n    done(null, {status: \"sent\"});\n  });\n});\n```", "```js\nvar plugin = function(options) {\n  var seneca = this;\n\n  seneca.add({area: \"orders\", action: \"fetch\"}, function(args, done) {\n    var orders = this.make(\"orders\");\n    orders.list$({id: args.id}, done);\n  });\n\n  seneca.add({area: \"orders\", action: \"delete\"}, function(args, done) {\n    var orders = this.make(\"orders\");\n    orders.remove$({id: args.id}, function(err) {\n        done(err, null);\n    });\n  });\n}\nmodule.exports = plugin;\n```", "```js\nvar senecaEmailer = require(\"seneca\")().client({host: \"192.168.0.2\", port: 8080});\n```", "```js\n  seneca.add({area: \"orders\", action: \"create\"}, function(args, done) {\n    var products = args.products;\n    var total = 0.0;\n    products.forEach(function(product){\n      total += product.price;\n    });\n    var orders = this.make(\"orders\");\n    orders.total = total;\n    orders.customer_email = args.email;\n    orders.customer_name = args.name;\n    orders.save$(function(err, order) {\n      var pattern = {\n        area: \"email\", \n        action: \"send\", \n        template: \"new_order\", \n        to: args.email,\n        toName: args.name,\n        vars: {\n          // ... vars for rendering the template including the products ...\n        }\n      }\n      senecaEmailer.act(pattern, done);\n    });\n  });\n```", "```js\nvar senecaEmailer = require(\"seneca\")().client({\n  host: \"192.168.0.2\", \n  port: 8080\n});\nvar senecaProductManager = require(\"seneca\")().client({\n  host: \"192.168.0.3\", \n  port: 8080\n});\nvar senecaOrderProcessor = require(\"seneca\")().client({\n  host: \"192.168.0.4\", \n  port: 8080\n});\n```", "```js\ncurl -d '<valid Seneca pattern>' -v http://192.168.0.2:8080/act\n\n```", "```js\nvar seneca = require(\"seneca\")();\nseneca.add({cmd: \"test\"}, function(args, done) {\n  done(null, {response: \"Hello World!\"});\n});\n\nseneca.listen({port: 3000});\n```", "```js\ncurl -d '{\"cmd\": \"test\"}' -v http://127.0.0.1:3000/act\n\n```", "```js\nvar express = require(\"express\");\nvar bodyParser = require('body-parser');\nvar senecaEmailer = require(\"seneca\")().client({\n  host: \"192.168.0.2\", \n  port: 8080\n});\nvar senecaProductManager = require(\"seneca\")().client({\n  host: \"192.168.0.3\", \n  port: 8080\n});\nvar senecaOrderProcessor = require(\"seneca\")().client({\n  host: \"192.168.0.4\", \n  port: 8080\n});\n\nfunction api(options) {\n  var seneca = this;\n\n  /**\n   * Gets the full list of products\n   */\n  seneca.add({area: \"ui\", action: \"products\"}, function(args, done) {\n    // More code to come\n  });\n  /**\n   * Get a product by id\n   */\n  seneca.add({area: \"ui\", action: \"productbyid\"}, function(args, done) {\n    // More code to come\n  });\n\n  /**\n   * Creates an order\n   */\n  seneca.add({area: \"ui\", action: \"createorder\"}, function(args, done) {\n    // More code to come\n  });\n\n  this.add(\"init:api\", function(msg, respond){\n    seneca.act('role:web',{ use: {\n      prefix: '/api',\n      pin:  'area:ui,action:*',\n      map: {\n        products:  {GET:true}  \n        productbyid: {GET:true, suffix:'/:id'}\n        createorder: {POST:true}\n      }\n    }}, respond)\n  });\n}\nmodule.exports = api;\nvar seneca = require(\"seneca\")();\nseneca.use(api);\n\nvar app = require(\"express\")();\napp.use( require(\"body-parser\").json());\napp.use(seneca.export(\"web\"));\napp.listen(3000);\n```", "```js\n  this.add(\"init:api\", function(msg, respond){\n    seneca.act('role:web',{ use: {\n      prefix: '/api',\n      pin:  'area:ui,action:*',\n      map: {\n        products:  {GET:true}  \n        productbyid: {GET:true, suffix:'/:id'}\n        createorder: {POST:true}\n      }\n    }}, respond)\n  });\n```", "```js\n  /**\n   * Gets the full list of products.\n   */\n  seneca.add({area: \"ui\", action: \"products\"}, function(args, done) {\n    senecaProductManager.act({area: \"product\", action: \"fetch\"}, function(err, result) {\n      done(err, result);\n    });\n  });\n\n  /**\n   * Get a product by id.\n   */\n  seneca.add({area: \"ui\", action: \"productbyid\"}, function(args, done) {\n    senecaProductManager.act({area: \"product\", action: \"fetch\", criteria: \"byId\", id: args.id}, function(err, result) {\n      done(err, result);\n    });\n  });\n\n  /**\n   * Creates an order to buy a single prodct.\n   */\n  seneca.add({area: \"ui\", action: \"createorder\"}, function(args, done) {\n    senecaProductManager.act({area: \"product\", action: \"fetch\", criteria: \"byId\", id: args.id}, function(err, product) {\n      if(err) done(err, null);\n      senecaOrderProcessor.act(area: \"orders\", action: \"create\", products: [product], email: args.email, name: args.name, function(err, order) {\n        done(err, order);\n      });\n    });\n  });\n```", "```js\nmyFunction().then(function() {\n// Code here\n}).then(function(){\n// More code here\n}).catch(function(error){\n// Handle the error.\n});\n```", "```js\n  seneca.add({role: 'transport', hook: 'listen', type: 'rabbitmq'}, hook_listen_rabbitmq)\n  seneca.add({role: 'transport', hook: 'client', type: 'rabbitmq'}, hook_client_rabbitmq)\n```", "```js\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>promise demo</title>\n<script src=\"img/jquery-1.10.2.js\"></script>\n</head>\n<body>\n\n<button>Go</button>\n<p>Ready...</p>\n<div></div>\n<div></div>\n<div></div>\n<div></div>\n\n<script>\nvar effect = function() {\n  return $( \"div\" ).fadeIn( 800 ).delay( 1200 ).fadeOut();\n};\n\n$( \"button\" ).on( \"click\", function() {\n  $( \"p\" ).append( \" Started... \" );\n\n  $.when( effect() ).done(function() {\n  $( \"p\" ).append( \" Finished! \" );\n  });\n});\n</script>\n\n</body>\n</html>\n```", "```js\ncallhttp(url1, data1).then(function(result1) {\n   // result1 is available here\n   return callhttp(url2, data2);\n}).then(function(result2) {\n   // only result2 is available here\n   return callhttp(url3, data3);\n}).then(function(result3) {\n   // all three are done now, final result is in result3\n});\n```", "```js\nvar Promise = require('bluebird');\nvar seneca = require('seneca')();\n\n// Promisify the .act() method; to learn more about this technique see:\n// http://bluebirdjs.com/docs/features.html#promisification-on-steroids\nvar act = Promise.promisify(seneca.act, seneca);\n\n// Return no error and a success message to illustrate a resolved promise\nseneca.add({cmd: 'resolve'}, function (args, done) {\n  done(null, {message: \"Yay, I've been resolved!\"});\n});\n\n// Return an error to force a rejected promise\nseneca.add({cmd: 'reject'}, function (args, done) {\n  done(new Error(\"D'oh! I've been rejected.\"));\n});\n\n// Use the new promisified act() with no callback\nact({cmd: 'resolve'})\n  .then(function (result) {\n  // result will be {message: \"Yay, I've been resolved!\"} since \n  // its guaranteed to resolve\n  })\n  .catch(function (err) {\n  // Catch any error as usual if it was rejected\n  });\n\nact({cmd: 'reject'})\n  .then(function (result) {\n  // Never reaches here since we throw an error on purpose\n  })\n  .catch(function (err) {\n  // err will be set with message \"D'oh! I've been rejected.\"\n  });\n```", "```js\nvar act = Promise.promisify(seneca.act, seneca);\n```", "```js\nact({cmd: 'reject'})\n  .then(function (result) {\n  // Never reaches here since we throw an error on purpose\n  })\n  .catch(function (err) {\n  // err will be set with message \"D'oh! I've been rejected.\"\n  });\n```", "```js\nact({cmd: 'timeout'})\n  .then(function (result) {\n  // Never reaches here since the gate executer times out\n  })\n  .catch(function (err) {\n  // err will be set with a timeout error thrown by the gate executer\n  });\n```", "```js\n    npm install \u2013g node-inspector\n\n    ```", "```js\n    var seneca = require( 'seneca' )()\n    seneca.add({role: 'math', cmd: 'sum'}, function (msg, respond) {\n      var sum = msg.left + msg.right\n      respond(null, {answer: sum})\n    })\n\n    seneca.add({role: 'math', cmd: 'product'}, function (msg, respond) {\n      var product = msg.left * msg.right\n      respond( null, { answer: product } )\n    })\n\n    seneca.act({role: 'math', cmd: 'sum', left: 1, right: 2}, console.log)\n    seneca.act({role: 'math', cmd: 'product', left: 3, right: 4}, console.log)\n    ```", "```js\n    node index.js --debug-brk\n\n    ```"]