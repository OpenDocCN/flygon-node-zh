["```js\npm2 ecosystem\n\n```", "```js\n[PM2] Spawning PM2 daemon\n[PM2] PM2 Successfully daemonized\nFile /path/to/your/app/ecosystem.json generated\n\n```", "```js\n{\n  apps : [\n\n    {\n      name      : \"My Application\",\n      script    : \"app.js\"\n    },\n\n    {\n      name      : \"Test Web Server\",\n      script    : \"proxy-server.js\"\n    }\n  ],\n\n*/\n  deploy : {\n    production : {\n      user : \"admin\",\n      host : \"10.0.0.1\",\n      ref  : \"remotes/origin/master\",\n      repo : \"git@github.com:the-repository.git\",\n      path : \"/apps/repository\",\n      \"post-deploy\" : \"pm2 startOrRestart ecosystem.json --env production\"\n    },\n    dev : {\n      user : \"devadmin\",\n      host : \"10.0.0.1\",\n      ref  : \"remotes/origin/master\",\n      repo : \"git@github.com:the-repository.git\",\n      path : \"/home/david/development/test-app/\",\n      \"post-deploy\" : \"pm2 startOrRestart ecosystem.json --env dev\",\n    }\n  }\n}\n```", "```js\nssh-keygen -t rsa\n\n```", "```js\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/youruser/.ssh/id_rsa): /Users/youruser/.ssh/pm2_rsa\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in pm2_rsa.\nYour public key has been saved in pm2_rsa.pub.\nThe key fingerprint is:\neb:bc:24:fe:23:b2:6e:2d:58:e4:5f:ab:7b:b7:ee:38 dgonzalez@yourmachine.local\nThe key's randomart image is:\n+--[ RSA 2048]----+\n|                 |\n|                 |\n|                 |\n|    .            |\n|   o    S        |\n|    o   ..       |\n|   o o..o.       |\n|  . +.+=E..      |\n|   oo++**B+.     |\n+-----------------+\n\n```", "```js\ncat pm2_rsa.pub | ssh youruser@yourremoteserver 'cat >> .ssh/authorized_keys'\n\n```", "```js\nssh-add pm2_rsa\n\n```", "```js\npm2 deploy ecosystem.json production setup\npm2 deploy ecosystem.json production\n\n```", "```js\ndocker search -s 1000 centos\n\n```", "```js\ndocker pull centos\n\n```", "```js\ndocker run -i -t centos /bin/bash\n\n```", "```js\ndocker ps\n\n```", "```js\ncurl --silent --location https://rpm.nodesource.com/setup_4.x | bash -\n\n```", "```js\nyum install -y nodejs\n\n```", "```js\nyum install -y gcc-c++ make\n\n```", "```js\ndocker ps -a\n\n```", "```js\ndocker commit -a dgonzalez 62e7336a4627 centos-microservices:1.0\n\n```", "```js\ndocker run -i -t centos-microservices:1.0 /bin/bash\n\n```", "```js\nvar express = require('express');\nvar myApplication = express();\n\napp.get('/hello', function (req, res) {\n  res.send('Hello Earth!');\n});\n\nvar port = 80;\n\napp.listen(port, function () {\n  console.log('Listeningistening on port '+ port);\n});\n```", "```js\ndocker run -i -t -v /app/test:/test_app -p 8000:3000 centos-microservices:1.0 /bin/bash\n\n```", "```js\nall: my-awesome-app\n\nmy-awesome-app: main.o external-module.o app-core.o\n  g++ main.o external-module.o app-core.o -o my-awesome-app\n\nmain.o: main.cc\n  g++ -c main.cc\n\nexternal-module.o: external-module.cc\n  g++ -c external-module.cc\n\napp-core.o: app-core.cc\n  g++ -c hello.cc\n\nclean:\n  rm *.o my-awesome-app\n```", "```js\nFROM centos\nMAINTAINER David Gonzalez\nRUN curl --silent --location https://rpm.nodesource.com/setup_4.x | bash -\nRUN yum -y install nodejs\n\n```", "```js\n    ENV UPLOAD_PATH=/tmp/\n\n    ```", "```js\n<div id=\"target\">\n  Click here\n</div>\n<div id=\"other\">\n  Trigger the handler\n</div>\n```", "```js\n$( \"#target\" ).click(function() {\n  alert( \"Handler for .click() called.\" );\n});\n```", "```js\nvar http = require(\"http\");\nhttp.createServer(function (request, response) {\n  response.writeHead(200, {\n    'Content-Type': 'text/plain'\n  });\n  response.write('Here we are!')\n  response.end();\n}).listen(3000);\n```", "```js\nnode app.js\n\n```", "```js\nvar cluster = require('cluster');\nvar http = require('http');\nvar cpus = require('os').cpus().length;\n\n// Here we verify if the we are the master of the cluster: This is the root process\n// and needs to fork al the childs that will be executing the web server.\nif (cluster.isMaster) {\n  for (var i = 0; i < cpus; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', function (worker, code, signal) {\n    console.log(\"Worker \" + worker.proces.pid + \" has finished.\");\n  });\n} else {\n  // Here we are on the child process. They will be executing the web server.\n  http.createServer(function (request, response) {\n    response.writeHead(200);\n    response.end('Here we are!d\\n');\n  }).listen(80);\n}\n```", "```js\npm2 start app.js -i 1\n\n```", "```js\npm2 stop all\n\n```", "```js\npm2 delete all\n\n```", "```js\npm2 start app.js -i 0\n\n```", "```js\nuser  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n  worker_connections  1024;\n}\n\nhttp {\n  include                     /etc/nginx/mime.types;\n  default_type                application/octet-stream;\n\n  log_format          main '$remote_addr - $remote_user [$time_local] \"$request\" '\n     '$status $body_bytes_sent \"$http_referer\" '\n     '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n     '$request_time';\n\n  access_log                  /var/log/nginx/access.log  main;\n  server_tokens               off;\n  sendfile                    on;\n  #tcp_nopush                 on;\n  keepalive_timeout           65s;\n  send_timeout                15s;\n  client_header_timeout       15s;\n  client_body_timeout         15s;\n  client_max_body_size        5m;\n  ignore_invalid_headers      on;\n  fastcgi_buffers             16 4k;\n  #gzip                       on;\n  include                     /etc/nginx/sites-enabled/*.conf;\n}\n```", "```js\nhttp {\n  upstream app {\n    server 10.0.0.1:3000;\n    server 10.0.0.2:3000;\n  }\n  server {\n    listen 80;\n    location / {\n      proxy_pass http://app;\n    }\n  }\n}\n```", "```js\n  upstream app {\n    least_conn;\n    server 10.0.0.1:3000;\n    server 10.0.0.2:3000;\n  }\n```", "```js\n  upstream app {\n    ip_hash;\n    server 10.0.0.1:3000;\n    server 10.0.0.2:3000;\n  }\n```", "```js\n  upstream app {\n    server 10.0.0.1:3000 weight=5;\n    server 10.0.0.2:3000;\n  }\n```", "```js\nsudo /etc/init.d/nginx reload\n\n```", "```js\nhttp {\n  upstream app {\n    zone app test;\n    server 10.0.0.1:3000;\n    server 10.0.0.2:3000;\n  }\n  server {\n    listen 80;\n    location / {\n      proxy_pass http://app;\n      health_check;\n    }\n  }\n}\n```"]