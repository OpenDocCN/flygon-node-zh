["```js\nnpm install --save-dev jest ts-jest @types/jest\n\n```", "```js\n{\n  \"moduleFileExtensions\": [\"js\", \"ts\", \"json\"],\n  \"transform\": {\n    \"^.+\\\\.ts\": \"<rootDir>/node_modules/ts-jest/preprocessor.js\"\n  },\n  \"testRegex\": \"/src/.*\\\\.(test|spec).ts\",\n  \"collectCoverageFrom\": [\n    \"src/**/*.ts\",\n    \"!**/node_modules/**\",\n    \"!**/vendor/**\"\n  ],\n  \"coverageReporters\": [\"json\", \"lcov\", \"text\"]\n}\n\n```", "```js\n{\n  ...\n  \"scripts\": {\n    ...\n    \"test\": \"jest --config=jest.json\",\n    \"test:watch\": \"jest --watch --config=jest.json\",\n    ...\n  }\n}\n\n```", "```js\nNo tests found\nIn /nest-book-example\n  54 files checked.\n  testMatch:  - 54 matches\n  testPathIgnorePatterns: /node_modules/ - 54 matches\n  testRegex: /src/.*\\.(test|spec).ts - 0 matches\nPattern:  - 0 matches\nnpm ERR! Test failed.  See above for more details.\n\n```", "```js\nimport { Controller, Get, Post, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entry.service';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(private readonly entriesSrv: EntriesService) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n  ...\n}\n\n```", "```js\nimport { Test } from '@nestjs/testing';\nimport { EntriesController } from './entry.controller';\nimport { EntriesService } from './entry.service';\n\ndescribe('EntriesController', () => {\n  let entriesController: EntriesController;\n  let entriesSrv: EntriesService;\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      controllers: [EntriesController],\n    })\n      .overrideComponent(EntriesService)\n      .useValue({ findAll: () => null })\n      .compile();\n\n    entriesSrv = module.get<EntriesService>(EntriesService);\n    entriesController = module.get<EntriesController>(EntriesController);\n  });\n});\n\n```", "```js\n.overrideComponent(EntriesService)\n.useValue({ findAll: () => null })\n\n```", "```js\nimport { Test } from '@nestjs/testing';\nimport { EntriesController } from './entry.controller';\nimport { EntriesService } from './entry.service';\n\ndescribe('EntriesController', () => {\n  let entriesController: EntriesController;\n  let entriesSrv: EntriesService;\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      controllers: [EntriesController],\n    })\n      .overrideComponent(EntriesService)\n      .useValue({ findAll: () => null })\n      .compile();\n\n    entriesSrv = module.get<EntriesService>(EntriesService);\n    entriesController = module.get<EntriesController>(EntriesController);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of entries', async () => {\n      expect(Array.isArray(await entriesController.findAll())).toBe(true);\n    });\n  });\n});\n\n```", "```js\nFAIL  src/modules/entry/entry.controller.spec.ts\n  EntriesController\n    findAll\n      \u2715 should return an array of entries (4ms)\n\n  \u25cf EntriesController \u203a findAll \u203a should return an array of entries\n\n    expect(received).toBe(expected) // Object.is equality\n\n    Expected value to be:\n      true\n    Received:\n      false\n\n      30 |       ];\n      31 |       // jest.spyOn(entriesSrv, 'findAll').mockImplementation(() => result);\n    > 32 |       expect(Array.isArray(await entriesController.findAll())).toBe(true);\n      33 |     });\n      34 |\n      35 |     // it('should return the entries retrieved from the service', async () => {\n\n      at src/modules/entry/entry.controller.spec.ts:32:64\n      at fulfilled (src/modules/entry/entry.controller.spec.ts:3:50)\n\nTest Suites: 1 failed, 1 total\nTests:       1 failed, 1 total\nSnapshots:   0 total\nTime:        1.112s, estimated 2s\nRan all test suites related to changed files.\n\n```", "```js\n...\n.overrideComponent(EntriesService)\n.useValue({ findAll: () => null })\n.compile();\n...\n\n```", "```js\n...\ndescribe('findAll', () => {\n  it('should return an array of entries', async () => {\n    jest.spyOn(entriesSrv, 'findAll').mockImplementationOnce(() => [{}]);\n    expect(Array.isArray(await entriesController.findAll())).toBe(true);\n  });\n});\n...\n\n```", "```js\n PASS  src/modules/entry/entry.controller.spec.ts\n  EntriesController\n    findAll\n      \u2713 should return an array of entries (3ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\nSnapshots:   0 total\nTime:        1.134s, estimated 2s\nRan all test suites related to changed files.\n\n```", "```js\nimport { Test } from '@nestjs/testing';\nimport { EntriesController } from './entry.controller';\nimport { EntriesService } from './entry.service';\n\ndescribe('EntriesController', () => {\n  let entriesController: EntriesController;\n  let entriesSrv: EntriesService;\n\n  beforeEach(async () => {\n    const module = await Test.createTestingModule({\n      controllers: [EntriesController],\n    })\n      .overrideComponent(EntriesService)\n      .useValue({ findAll: () => null })\n      .compile();\n\n    entriesSrv = module.get<EntriesService>(EntriesService);\n    entriesController = module.get<EntriesController>(EntriesController);\n  });\n\n  describe('findAll', () => {\n    it('should return an array of entries', async () => {\n      jest.spyOn(entriesSrv, 'findAll').mockImplementationOnce(() => [{}]);\n      expect(Array.isArray(await entriesController.findAll())).toBe(true);\n    });\n\n    it('should return the entries retrieved from the service', async () => {\n      const result = [\n        {\n          uuid: '1234567abcdefg',\n          title: 'Test title',\n          body:\n            'This is the test body and will serve to check whether the controller is properly doing its job or not.',\n        },\n      ];\n      jest.spyOn(entriesSrv, 'findAll').mockImplementationOnce(() => result);\n\n      expect(await entriesController.findAll()).toEqual(result);\n    });\n  });\n});\n\n```", "```js\n PASS  src/modules/entry/entry.controller.spec.ts\n  EntriesController\n    findAll\n      \u2713 should return an array of entries (2ms)\n      \u2713 should return the entries retrieved from the service (1ms)\n\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        0.935s, estimated 2s\nRan all test suites related to changed files.\n\n```", "```js\n{\n  ...\n  \"scripts\": {\n    ...\n    \"test:coverage\":\"jest --config=jest.json --coverage --coverageDirectory=coverage\",\n    ...\n  }\n}\n\n```", "```js\n PASS  src/modules/entry/entry.controller.spec.ts\n  EntriesController\n    findAll\n      \u2713 should return an array of entries (9ms)\n      \u2713 should return the entries retrieved from the service (2ms)\n\n---------------------|----------|----------|----------|----------|-------------------|\nFile                 |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\n---------------------|----------|----------|----------|----------|-------------------|\nAll files            |      100 |    66.67 |      100 |      100 |                   |\n entry.controller.ts |      100 |    66.67 |      100 |      100 |                 6 |\n---------------------|----------|----------|----------|----------|-------------------|\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        4.62s\nRan all test suites.\n\n```", "```js\n{\n  ...\n  \"coverageThreshold\": {\n    \"global\": {\n      \"branches\": 80,\n      \"functions\": 80,\n      \"lines\": 80,\n      \"statements\": 80\n    }\n  }\n}\n\n```", "```js\n PASS  src/modules/entry/entry.controller.spec.ts\n  EntriesController\n    findAll\n      \u2713 should return an array of entries (9ms)\n      \u2713 should return the entries retrieved from the service (1ms)\n\n---------------------|----------|----------|----------|----------|-------------------|\nFile                 |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |\n---------------------|----------|----------|----------|----------|-------------------|\nAll files            |      100 |    66.67 |      100 |      100 |                   |\n entry.controller.ts |      100 |    66.67 |      100 |      100 |                 6 |\n---------------------|----------|----------|----------|----------|-------------------|\nJest: \"global\" coverage threshold for branches (80%) not met: 66.67%\nTest Suites: 1 passed, 1 total\nTests:       2 passed, 2 total\nSnapshots:   0 total\nTime:        2.282s, estimated 4s\nRan all test suites.\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! nest-book-example@1.0.0 test:coverage: `jest --config=jest.json --coverage --coverageDirectory=coverage`\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the nest-book-example@1.0.0 test:coverage script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\n```", "```js\n{\n  \"moduleFileExtensions\": [\"js\", \"ts\", \"json\"],\n  \"transform\": {\n    \"^.+\\\\.tsx?$\": \"<rootDir>/node_modules/ts-jest/preprocessor.js\"\n  },\n  \"testRegex\": \"/e2e/.*\\\\.(e2e-test|e2e-spec).ts|tsx|js)$\",\n  \"coverageReporters\": [\"json\", \"lcov\", \"text\"]\n}\n\n```", "```js\n{\n  ...\n  \"scripts\": {\n    ...\n    \"e2e\": \"jest --config=e2e/jest-e2e.json --forceExit\"\n  }\n  ...\n}\n\n```", "```js\nimport { INestApplication } from '@nestjs/common';\nimport { Test } from '@nestjs/testing';\nimport * as request from 'supertest';\n\nimport { EntriesModule } from '../../src/modules/entry/entry.module';\nimport { EntriesService } from '../../src/modules/entry/entry.service';\n\ndescribe('Entries', () => {\n  let app: INestApplication;\n  const mockEntriesService = { findAll: () => ['test'] };\n\n  beforeAll(async () => {\n    const module = await Test.createTestingModule({\n      imports: [EntriesModule],\n    })\n      .overrideComponent(EntriesService)\n      .useValue(mockEntriesService)\n      .compile();\n\n    app = module.createNestApplication();\n    await app.init();\n  });\n\n  it(`/GET entries`, () => {\n    return request(app.getHttpServer())\n      .get('/entries')\n      .expect(200)\n      .expect({\n        data: mockEntriesService.findAll(),\n      });\n  });\n\n  afterAll(async () => {\n    await app.close();\n  });\n});\n\n```"]