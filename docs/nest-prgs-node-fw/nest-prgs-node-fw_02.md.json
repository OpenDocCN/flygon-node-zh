["```js\nimport { Controller, Get } from '@nestjs/common';\n\n@Controller('entries')\nexport class EntryController {\n    @Get()\n    index(): Entry[] {\n        const entries: Entry[] = this.entriesService.findAll();\n        return entries;\n    }\n\n```", "```js\n@Injectable()\nexport class AuthenticationService {\n    constructor(private readonly userService: UserService) {}\n\n    async validateUser(payload: {\n        email: string;\n        password: string;\n    }): Promise<boolean> {\n        const user = await this.userService.findOne({\n            where: { email: payload.email }\n        });\n        return !!user;\n    }\n}\n\n```", "```js\n@Module({\n    components: [],\n    controllers: [],\n    imports: [\n        DatabaseModule,\n        AuthenticationModule.forRoot('jwt'),\n        UserModule,\n        EntryModule,\n        CommentModule,\n        UserGatewayModule,\n        CommentGatewayModule\n    ],\n    exports: [],\n})\nexport class AppModule implements NestModule {}\n\n```", "```js\n@Module({\n    components: [entryProvider, EntryService],\n    controllers: [EntryController],\n    imports: [],\n    exports: [EntryService],\n})\nexport class EntryModule implements NestModule {}\n\n```", "```js\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n}\nbootstrap();\n\n```", "```js\nimport {\n    MiddlewareFunction,\n    HttpStatus,\n    Injectable,\n    NestMiddleware\n} from '@nestjs/common';\nimport * as passport from 'passport';\nimport { UserService } from '../../modules/user/user.service';\n\n@Injectable()\nexport class AuthenticationMiddleware implements NestMiddleware {\n    constructor(private userService: UserService) {}\n\n    async resolve(strategy: string): Promise<MiddlewareFunction> {\n        return async (req, res, next) => {\n            return passport.authenticate(strategy, async (...args: any[]) => {\n                const [, payload, err] = args;\n                if (err) {\n                    return res\n                        .status(HttpStatus.BAD_REQUEST)\n                        .send('Unable to authenticate the user.');\n                }\n\n                const user = await this.userService.findOne({\n                    where: { email: payload.email }\n                });\n                req.user = user;\n                return next();\n            })(req, res, next);\n        };\n    }\n}\n\n```", "```js\n@Module({\n    imports: [\n        DatabaseModule,\n        AuthenticationModule.forRoot('jwt'),\n        UserModule,\n        EntryModule,\n        CommentModule,\n        UserGatewayModule,\n        CommentGatewayModule,\n        KeywordModule\n    ],\n    controllers: [],\n    providers: []\n})\nexport class AppModule implements NestModule {\n    public configure(consumer: MiddlewareConsumer) {\n        const userControllerAuthenticatedRoutes = [\n            { path: '/users', method: RequestMethod.GET },\n            { path: '/users/:id', method: RequestMethod.GET },\n            { path: '/users/:id', method: RequestMethod.PUT },\n            { path: '/users/:id', method: RequestMethod.DELETE }\n        ];\n\n        consumer\n            .apply(AuthenticationMiddleware)\n            .with(strategy)\n            .forRoutes(\n                ...userControllerAuthenticatedRoutes,\n                EntryController,\n                CommentController\n            );\n    }\n}\n\n```", "```js\nimport { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CheckLoggedInUserGuard implements CanActivate {\n    canActivate(\n        context: ExecutionContext\n    ): boolean | Promise<boolean> | Observable<boolean> {\n        const req = context.switchToHttp().getRequest();\n        return Number(req.params.userId) === req.user.id;\n    }\n}\n\n```", "```js\n@Controller('users')\nexport class UserController {\n    constructor(private readonly userService: UserService) { }\n\n    @Get(':userId')\n    @UseGuards(CheckLoggedInUserGuard)\n    show(@Param('userId') userId: number) {\n        const user: User = this.userService.findById(userId);\n        return user;\n    }\n\n```"]