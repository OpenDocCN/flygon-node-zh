["```js\nexport interface IDatabaseConfigAttributes {\n    username: string;\n    password: string;\n    database: string;\n    host: string;\n    port: number;\n    dialect: string;\n    logging: boolean | (() => void);\n    force: boolean;\n    timezone: string;\n}\n\nexport interface IDatabaseConfig {\n    development: IDatabaseConfigAttributes;\n}\n\n```", "```js\nexport const databaseConfig: IDatabaseConfig = {\n    development: {\n        username: process.env.POSTGRES_USER ||             'postgres',\n        password: process.env.POSTGRES_PASSWORD || null,\n        database: process.env.POSTGRES_DB || 'postgres',\n        host: process.env.DB_HOST || '127.0.0.1',\n        port: Number(process.env.POSTGRES_PORT) || 5432,\n        dialect: 'postgres',\n        logging: false,\n        force: true,\n        timezone: '+02:00',\n    }\n};\n\n```", "```js\nexport const databaseProvider = {\n    provide: 'SequelizeInstance',\n    useFactory: async () => {\n        let config;\n        switch (process.env.NODE_ENV) {\n            case 'prod':\n            case 'production':\n            case 'dev':\n            case 'development':\n            default:\n                config = databaseConfig.development;\n        }\n\n        const sequelize = new Sequelize(config);\n        sequelize.addModels([User]);\n        return sequelize;\n    }\n};\n\n```", "```js\n@Global()\n@Module({\n    providers: [databaseProvider],\n    exports: [databaseProvider],\n})\nexport class DatabaseModule {}\n\n```", "```js\n@Inject('SequelizeInstance`) private readonly sequelizeInstance\n\n```", "```js\n{\n\n    timestamps:  true,\n    paranoid:  true,\n    underscored:  false,\n    freezeTableName:  true,\n    tableName:  'my_very_custom_table_name'\n}\n\n```", "```js\n@Column({\n    type: DataType.STRING,\n    allowNull: false,\n    validate: {\n        isEmail: true,\n        isUnique: async (value: string, next: any): Promise<any> => {\n            const isExist = await User.findOne({ where: { email: value }});\n            if (isExist) {\n                const error = new Error('The email is already used.');\n                next(error);\n            }\n            next();\n        },\n    },\n})\n\n```", "```js\nexport class User extends Model<User> {...}\n\n```", "```js\n@Table({ timestamp: true, tableName: 'users' } as IDefineOptions)\nexport class User extends Model<User> {...}\n\n```", "```js\n@Column(DataTypes.STRING)\npublic email: string;\n\n```", "```js\n@Column({\n    type: DataType.STRING,\n    allowNull: false,\n    validate: {\n        isEmail: true,\n        isUnique: async (value: string, next: any): Promise<any> => {\n            const isExist = await User.findOne({\n                where: { email: value }\n            });\n            if (isExist) {\n                const error = new Error('The email is already used.');\n                next(error);\n            }\n            next();\n        },\n    },\n})\npublic email: string;\n\n```", "```js\n@Table(tableOptions)\nexport class User extends Model<User> {\n    @PrimaryKey\n    @AutoIncrement @Column(DataType.BIGINT)\n    public id: number;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false,\n    })\n    public firstName: string;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false,\n    })\n    public lastName: string;\n\n    @Column({\n        type: DataType.STRING,\n        allowNull: false,\n        validate: {\n            isEmail: true,\n            isUnique: async (value: string, next: any): Promise<any> => {\n                const isExist = await User.findOne({\n                    where: { email: value }\n                });\n                if (isExist) {\n                    const error = new Error('The email is already used.');\n                    next(error);\n                }\n                next();\n            },\n        },\n    })\n    public email: string;\n\n    @Column({\n        type: DataType.TEXT,\n        allowNull: false,\n    })\n    public password: string;\n\n    @CreatedAt\n    public createdAt: Date;\n\n    @UpdatedAt\n    public updatedAt: Date;\n\n    @DeletedAt\n    public deletedAt: Date;\n}\n\n```", "```js\n  beforeBulkCreate(instances, options)\n  beforeBulkDestroy(options)\n  beforeBulkUpdate(options)\n\n  beforeValidate(instance, options)\n  afterValidate(instance, options)\n\n  beforeCreate(instance, options)\n  beforeDestroy(instance, options)\n  beforeUpdate(instance, options)\n  beforeSave(instance, options)\n  beforeUpsert(values, options)\n\n  afterCreate(instance, options)\n  afterDestroy(instance, options)\n  afterUpdate(instance, options)\n  afterSave(instance, options)\n  afterUpsert(created, options)\n\n  afterBulkCreate(instances, options)\n  afterBulkDestroy(options)\n  afterBulkUpdate(options)\n\n```", "```js\n@Table(tableOptions)\nexport class User extends Model<User> {\n    ...\n    @BeforeCreate\n    public static async hashPassword(user: User, options: any) {\n        if (!options.transaction) throw new Error('Missing transaction.');\n\n        user.password = crypto.createHmac('sha256', user.password).digest('hex');\n    }\n}\n\n```", "```js\nexport const userProvider = {\n    provide: 'UserRepository',\n    useValue: User\n};\n\n```", "```js\n@Injectable()\nexport class UserService implements IUserService {\n    constructor(@Inject('UserRepository') private readonly UserRepository: typeof User) { }\n    ...\n}\n\n```", "```js\n@Module({\n    imports: [],\n    providers: [userProvider, UserService],\n    exports: [UserService]\n})\nexport class UserModule {}\n\n```", "```js\n@Injectable()\nexport class UserService implements IUserService {\n    constructor(@Inject('UserRepository') private readonly UserRepository: typeof User,\n                @Inject('SequelizeInstance') private readonly sequelizeInstance) { }\n    ...\n}\n\n```", "```js\npublic async create(user: IUser): Promise<User> {\n    return await this.sequelizeInstance.transaction(async transaction => {\n        return await this.UserRepository.create<User>(user, {\n            returning: true,\n            transaction,\n        });\n    });\n}\n\n```", "```js\nconst umzug = new Umzug({\n    storage: 'sequelize',\n    storageOptions: { sequelize },\n\n    migrations: {\n        params: [\n            sequelize,\n            sequelize.constructor, // DataTypes\n        ],\n        path: './migrations',\n        pattern: /\\.ts$/\n    },\n\n    logging: function () {\n        console.log.apply(null, arguments);\n    }\n});\n\n```", "```js\nexport async function up(sequelize) {\n    // language=PostgreSQL\n    sequelize.query(`\n        CREATE TABLE \"users\" (\n            \"id\" SERIAL UNIQUE PRIMARY KEY NOT NULL,\n            \"firstName\" VARCHAR(30) NOT NULL,\n            \"lastName\" VARCHAR(30) NOT NULL,\n            \"email\" VARCHAR(100) UNIQUE NOT NULL,\n            \"password\" TEXT NOT NULL,\n            \"birthday\" TIMESTAMP,\n            \"createdAt\" TIMESTAMP NOT NULL,\n            \"updatedAt\" TIMESTAMP NOT NULL,\n            \"deletedAt\" TIMESTAMP\n        );\n    `);\n\n    console.log('*Table users created!*');\n}\n\nexport async function down(sequelize) {\n    // language=PostgreSQL\n    sequelize.query(`DROP TABLE users`);\n}\n\n```"]