["```js\nexport class UserService() {\n    private users: Array<User> = [{\n        id: 1,\n        email: 'userService1@email.com',\n        password: 'pass'\n    ]};\n\n    public findOne({ where }: any): Promise<User> {\n        return this.users\n        .filter(u => {\n            return u.email === where.email &&\n            u.password === where.password;\n        });\n    }\n}\n\n```", "```js\nexport class AuthenticationService {\n    public userService: UserService;\n\n    constructor() {\n        this.userService = new UserService();\n    }\n\n    async validateAUser(payload: { email: string; password: string }): Promise<boolean> {\n        const user = await this.userService.findOne({\n            where: payload\n        });\n        return !!user;\n    }\n}\n\n```", "```js\nconst authenticationService = new AuthenticationService();\n\n```", "```js\n// Rewritted AuthenticationService\nexport class AuthenticationService {\n    /* \n Declare at the same time the public \n properties belongs to the class\n */\n    constructor(public userService: UserService) { }\n}\n\n```", "```js\n// Now you can instanciate the AutheticationService like that\nconst userService = new UserService();\nconst authenticationService = new AuthenticationService(userService);\n\n```", "```js\n@Injectable()\nexport class UserService { /*...*/ }\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(private userService: UserService) { }\n}\n\n```", "```js\nexport Component = () => {\n    return (target: Type<object>) => {\n        CustomInjector.set(target);\n    };\n}\n\n```", "```js\nexport const CustomInjector = new class {\n  protected services: Map<string, Type<any>> = new Map<string, Type<any>>();\n\n  resolve<T>(target: Type<any>): T {\n    const tokens = Reflect.getMetadata('design:paramtypes', target) || [];\n    const injections = tokens.map(token => CustomInjector.resolve<any>(token));\n    return new target(/*...*/injections);\n  }\n\n  set(target: Type<any>) {\n    this.services.set(target.name, target);\n  }\n};\n\n```", "```js\nconst authenticationService = CustomInjector.resolve<AuthenticationService>(AuthenticationService);\nconst isValid = authenticationService.validateUser(/* payload */);\n\n```", "```js\nexport interface ModuleMetadata {  \n    imports?: any[];  \n    providers?: any[];  \n    controllers?: any[];  \n    exports?: any[];\n    modules?: any[]; // this one is deprecated.\n}\n\n```", "```js\n@Module({\n    imports: [UserModule, AuthenticationModule]\n})\nexport class ApplicationModule {/*...*/}\n\n```", "```js\n@Module({\n    imports: [UserModule],\n    providers: [AuthenticationService]\n})\nexport class AuthenticationModule {/*...*/}\n\n@Injectable()\nexport class AuthenticationService {\n    constructor(private userService: UserService) {}\n}\n\n```", "```js\n@Module({\n    providers: [UserService],\n    exports: [UserService]\n})\nexport class UserModule {/*...*/}\n\n@Injectable()\nexport class UserService {/*...*/}\n\n```", "```js\nconst app = await NestFactory.create(ApplicationModule);\n\n```", "```js\n@Module({\n    imports: [DatabaseModule, UserModule]\n})\nexport class ApplicationModule {/*...*/}\n\n```", "```js\n@Global()\n@Module({\n    providers: [databaseProvider],\n    exports: [databaseProvider]\n})\nexport class DatabaseModule {/*...*/}\n\n```", "```js\n@Module({\n    providers: [UserService],\n    exports: [UserService]\n})\nexport class UserModule {/*...*/}\n\n@Injectable()\nexport class UserService {\n    // SequelizeInstance is provided by the DatabaseModule store as a global module\n    constructor(@Inject('SequelizeInstance') private readonly sequelizeInstance) {}\n}\n\n```"]