["```js\nversion: '3'\n\nvolumes:\n  mongo_data:\n\nservices:\n  mongo:\n    image: mongo:latest\n    ports:\n    - \"27017:27017\"\n    volumes:\n    - mongo_data:/data/db\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - NODE_ENV=development\n    depends_on:\n      - mongo\n    links:\n      - mongo\n    environment:\n      PORT: 3000\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    command: >\n      npm run start:dev\n\n```", "```js\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(),\n    ...\n  ],\n})\nexport class AppModule {}\n\n```", "```js\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://mongo:27017/nest'),\n    ...\n  ],\n})\nexport class AppModule {}\n\n```", "```js\nimport { Schema } from 'mongoose';\n\nexport const EntrySchema = new mongoose.Schema({\n  _id: Schema.Types.ObjectId,\n  title: String,\n  body: String,\n  image: String,\n  created_at: Date,\n});\n\n```", "```js\nimport { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { EntrySchema } from './entry.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: 'Entry', schema: EntrySchema }]),\n  ],\n})\nexport class EntriesModule {}\n\n```", "```js\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { EntriesModule } from './entries/entries.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot('mongodb://mongo:27017/nest'),\n    EntriesModule,\n    ...\n  ],\n})\nexport class AppModule {}\n\n```", "```js\nimport { Document } from 'mongoose';\n\nexport interface Entry extends Document {\n  readonly _id: string;\n  readonly title: string;\n  readonly body: string;\n  readonly image: string;\n  readonly created_at: Date;\n}\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\n\nimport { EntrySchema } from './entry.schema';\nimport { Entry } from './entry.interface';\n\n@Injectable()\nexport class EntriesService {\n  constructor(\n    @InjectModel(EntrySchema) private readonly entryModel: Model<Entry>\n  ) {}\n\n  // this method retrieves all entries\n  findAll() {\n    return this.entryModel.find().exec();\n  }\n\n  // this method retrieves only one entry, by entry ID\n  findById(id: string) {\n    return this.entryModel.findById(id).exec();\n  }\n\n  // this method saves an entry in the database\n  create(entry) {\n    entry._id = new Types.ObjectId();\n    const createdEntry = new this.entryModel(entry);\n    return createdEntry.save();\n  }\n}\n\n```", "```js\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entry.service';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(private readonly entriesSrv: EntriesService) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n\n  @Get(':entryId')\n  findById(@Param('entryId') entryId) {\n    return this.entriesSrv.findById(entryId);\n  }\n\n  @Post()\n  create(@Body() entry) {\n    return this.entriesSrv.create(entry);\n  }\n}\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n< HTTP/1.1 200 OK\n\n[]\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n| {\n|   \"title\": \"This is our first post\",\n|   \"body\": \"Bla bla bla bla bla\",\n|   \"image\": \"http://lorempixel.com/400\",\n|   \"created_at\": \"2018-04-15T17:42:13.911Z\"\n| }\n\n< HTTP/1.1 201 Created\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n< HTTP/1.1 200 OK\n\n[{\n  \"id\": 1,\n  \"title\": \"This is our first post\",\n  \"body\": \"Bla bla bla bla bla\",\n  \"image\": \"http://lorempixel.com/400\",\n  \"created_at\": \"2018-04-15T17:42:13.911Z\"\n}]\n\n```", "```js\nimport * as mongoose from 'mongoose';\n\nexport const CommentSchema = new mongoose.Schema({\n  _id: Schema.Types.ObjectId,\n  body: String,\n  created_at: Date,\n  entry: { type: Schema.Types.ObjectId, ref: 'Entry' },\n});\n\n```", "```js\nimport * as mongoose from 'mongoose';\n\nexport const EntrySchema = new mongoose.Schema({\n  _id: Schema.Types.ObjectId,\n  title: String,\n  body: String,\n  image: String,\n  created_at: Date,\n  comments: [{ type: Schema.Types.ObjectId, ref: 'Comment' }],\n});\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\n\nimport { EntrySchema } from './entry.schema';\nimport { Entry } from './entry.interface';\n\nimport { CommentSchema } from './comment.schema';\nimport { Comment } from './comment.interface';\n\n@Injectable()\nexport class EntriesService {\n  constructor(\n    @InjectModel(EntrySchema) private readonly entryModel: Model<Entry>,\n    @InjectModel(CommentSchema) private readonly commentModel: Model<Comment>\n  ) {}\n\n  // this method retrieves all entries\n  findAll() {\n    return this.entryModel.find().exec();\n  }\n\n  // this method retrieves only one entry, by entry ID\n  findById(id: string) {\n    return this.entryModel.findById(id).exec();\n  }\n\n  // this method saves an entry and a related comment in the database\n  async create(input) {\n    const { entry, comment } = input;\n\n    // let's first take care of the entry (the owner of the relationship)\n    entry._id = new Types.ObjectId();\n    const entryToSave = new this.entryModel(entry);\n    await entryToSave.save();\n\n    // now we are ready to handle the comment\n    // this is how we store in the comment the reference\n    // to the entry it belongs to\n    comment.entry = entryToSave._id;\n\n    comment._id = new Types.ObjectId();\n    const commentToSave = new this.commentModel(comment);\n    commentToSave.save();\n\n    return { success: true };\n  }\n}\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\n\nimport { EntrySchema } from './entry.schema';\nimport { Entry } from './entry.interface';\n\nimport { CommentSchema } from './comment.schema';\nimport { Comment } from './comment.interface';\n\n@Injectable()\nexport class EntriesService {\n  constructor(\n    @InjectModel(EntrySchema) private readonly entryModel: Model<Entry>,\n    @InjectModel(CommentSchema) private readonly commentModel: Model<Comment>\n  ) {}\n\n  // this method retrieves all entries\n  findAll() {\n    return this.entryModel.find().exec();\n  }\n\n  // this method retrieves only one entry, by entry ID,\n  // including its related documents with the \"comments\" reference\n  findById(id: string) {\n    return this.entryModel\n      .findById(id)\n      .populate('comments')\n      .exec();\n  }\n\n  // this method saves an entry and a related comment in the database\n  async create(input) {\n    ...\n  }\n}\n\n```"]