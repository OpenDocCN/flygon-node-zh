["```js\nconst swaggerOptions = new DocumentBuilder()\n    .setTitle('Blog Application')\n    .setDescription('APIs for the example blog application.')\n    .setVersion('1.0.0')\n    .setTermsOfService('http://swagger.io/terms/')\n    .setContactEmail('admin@example.com')\n    .setLicense('Apache 2.0', 'http://www.apache.org/licenses/LICENSE-2.0.html')\n    .build();\n\n```", "```js\nconst swaggerOptions = new DocumentBuilder()\n    .setHost('localhost:3000')\n    .setBasePath('/')\n    .setSchemes('http')\n    .build();\n\n```", "```js\nconst swaggerOptions = new DocumentBuilder()\n    .setExternalDoc('For more information', 'http://swagger.io')\n    .addTag('blog', 'application purpose')\n    .addTag('nestjs', 'framework')\n    .build();\n\n```", "```js\nconst swaggerOptions = new DocumentBuilder()\n    .addBearerAuth('Authorization', 'header', 'apiKey')\n    .build();\n\n```", "```js\nconst swaggerOptions = new DocumentBuilder()\n    .addBearerAuth('token', 'query', 'apiKey')\n    .addBearerAuth('appId', 'query', 'apiKey')\n    .build();\n\n```", "```js\nconst swaggerOptions = new DocumentBuilder()\n    .addOAuth2('password', 'https://example.com/oauth/authorize', 'https://example.com/oauth/token', {\n      read: 'Grants read access',\n      write: 'Grants write access',\n      admin: 'Grants delete access'\n    })\n    .build();\n\n```", "```js\nexport const swaggerOptions = new DocumentBuilder()\n    .setTitle('Blog Application')\n    .setDescription('APIs for the example blog application.')\n    .setVersion('1.0.0')\n    .setHost('localhost:3000')\n    .setBasePath('/')\n    .setSchemes('http')\n    .setExternalDoc('For more information', 'http://swagger.io')\n    .addTag('blog', 'application purpose')\n    .addTag('nestjs', 'framework')\n    .addBearerAuth('Authorization', 'header', 'apiKey')\n    .build();\n\n```", "```js\nasync function bootstrap() {\n    const app = await NestFactory.create(AppModule);\n\n    const document = SwaggerModule.createDocument(app, swaggerOptions);\n    SwaggerModule.setup('/swagger', app, document);\n\n    await app.listen(process.env.PORT || 3000);\n}\n\n```", "```js\n@Controller('entries/:entryId')\nexport class CommentController {\n    @Put('comments/:commentId')\n    public async update(\n        @Body() body: UpdateCommentRequest,\n        @Param('commentId') comment: string,\n        @Query('testQuery') testQuery: string,\n        @Headers('testHeader') testHeader: string\n    ) {\n    }\n}\n\n```", "```js\nexport class UpdateCommentRequest {\n    @ApiModelPropertyOptional()\n    public body: string;\n}\n\n```", "```js\nexport class UpdateCommentRequest {\n    @ApiModelProperty({ required: false })\n    public body: string;\n}\n\n```", "```js\nexport class UpdateCommentParams {\n    @ApiModelProperty()\n    public entryId: string;\n\n    @ApiModelProperty()\n    public commentId: string;\n}\n\n```", "```js\n@Put('comments/:commentId')\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param() params: UpdateCommentParams,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitParam({ name: 'entryId' })\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitParam({ name: 'entryId' })\n@ApiImplicitParam({ name: 'commentId' })\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\nexport class UpdateCommentQuery {\n    @ApiModelPropertyOptional()\n    public testQueryA: string;\n\n    @ApiModelPropertyOptional()\n    public testQueryB: string;\n}\n\n```", "```js\n@Put('comments/:commentId')\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query() queryParameters: UpdateCommentQuery,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitQuery({ name: 'testQueryA' })\n@ApiImplicitQuery({ name: 'testQueryB' })\npublic async update(\n    @Param('commentId') comment: string,\n    @Body() body: UpdateCommentRequest,\n    @Query() testQuery: any,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitQuery({ name: 'testQueryA' })\n@ApiImplicitQuery({ name: 'testQueryB' })\npublic async update(\n    @Param('commentId') comment: string,\n    @Body() body: UpdateCommentRequest,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\nexport class UpdateCommentHeaders {\n    @ApiModelPropertyOptional()\n    public testHeaderA: string;\n\n    @ApiModelPropertyOptional()\n    public testHeaderB: string;\n}\n\n```", "```js\n@Put('comments/:commentId')\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers() headers: UpdateCommentHeaders\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitHeader({ name: 'testHeader' })\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers() headers: any\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiImplicitHeader({ name: 'testHeaderA' })\n@ApiImplicitHeader({ name: 'testHeaderB' })\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n) {\n}\n\n@Put('comments/:commentId')\n@ApiImplicitHeader([\n    { name: 'testHeaderA' },\n    { name: 'testHeaderB' }\n])\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiBearerAuth()\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiOAuth2Auth(['test'])\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiConsumes('image/png')\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiProduces('image/png')\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Controller('entries/:entryId')\n@ApiResponse({\n    status: 500,\n    description: 'An unknown internal server error occurred'\n})\nexport class CommentController {\n    @Put('comments/:commentId')\n    @ApiResponse({\n        status: 200,\n        description: 'The comment was successfully updated',\n        type: UpdateCommentResponse\n    })\n    public async update(\n        @Body() body: UpdateCommentRequest,\n        @Param('commentId') comment: string,\n        @Query('testQuery') testQuery: string,\n        @Headers('testHeader') testHeader: string\n    ) {\n    }\n}\n\n```", "```js\nexport class UpdateCommentResponse {\n  @ApiModelPropertyOptional()\n  public success?: boolean;\n}\n\n```", "```js\n@Put('comments/:commentId')\n@ApiOperation({\n    title: 'Comment Update',\n    description: 'Updates a specific comment with new content',\n    operationId: 'commentUpdate'\n})\npublic async update(\n    @Body() body: UpdateCommentRequest,\n    @Param('commentId') comment: string,\n    @Query('testQuery') testQuery: string,\n    @Headers('testHeader') testHeader: string\n) {\n}\n\n```", "```js\n@Controller('entries/:entryId')\n@ApiUseTags('comments')\nexport class CommentController {\n\n}\n\n```", "```js\nimport * as fs from 'fs-extra';\n\nasync function writeDoc() {\n    const app = await NestFactory.create(AppModule);\n    const document = SwaggerModule.createDocument(app, swaggerOptions);\n\n    fs.ensureDirSync(path.join(process.cwd(), 'dist'));\n    fs.writeJsonSync(path.join(process.cwd(), 'dist', 'api-doc.json'), document, { spaces: 2 });\n}\n\nwriteDoc();\n\n```"]