["```js\ngit clone https://github.com/backstopmedia/nest-book-example\n\n```", "```js\nhttps://github.com/patrickhousley/nest-angular-universal.git\n\n```", "```js\nasync function bootstrap() {\n  if (environment.production) {\n    enableProdMode();\n  }\n\n  const app = await NestFactory.create(ApplicationModule.moduleFactory());\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(() => app.close());\n  }\n\n  await app.listen(environment.port);\n}\n\nbootstrap()\n  .then(() => console.log(`Server started on port ${environment.port}`))\n  .catch(err => console.error(`Server startup failed`, err));\n\n```", "```js\nif (environment.production) {\n    enableProdMode();\n  }\n\n```", "```js\nconst app = await NestFactory.create(ApplicationModule.moduleFactory());\n\n```", "```js\nif (module.hot) {\n  module.hot.accept();\n  module.hot.dispose(() => app.close());\n}\n\n```", "```js\nawait app.listen(environment.port);\n\n```", "```js\n@Module({\n  imports: [\n    HeroesModule,\n    ClientModule.forRoot()\n  ],\n})\nexport class ApplicationModule {}\n\n```", "```js\n@Module({\n  controllers: [ClientController],\n  components: [...clientProviders],\n})\nexport class ClientModule implements NestModule {\n  constructor(\n    @Inject(ANGULAR_UNIVERSAL_OPTIONS)\n    private readonly ngOptions: AngularUniversalOptions,\n    @Inject(HTTP_SERVER_REF) private readonly app: NestApplication\n  ) {}\n\n  static forRoot(): DynamicModule {\n    const requireFn = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\n    const options: AngularUniversalOptions = {\n      viewsPath: environment.clientPaths.app,\n      bundle: requireFn(join(environment.clientPaths.server, 'main.js'))\n    };\n\n    return {\n      module: ClientModule,\n      components: [\n        {\n          provide: ANGULAR_UNIVERSAL_OPTIONS,\n          useValue: options,\n        }\n      ]\n    };\n  }\n\n  configure(consumer: MiddlewareConsumer): void {\n    this.app.useStaticAssets(this.ngOptions.viewsPath);\n  }\n}\n\n```", "```js\n@Controller()\nexport class ClientController {\n  constructor(\n    @Inject(ANGULAR_UNIVERSAL_OPTIONS) private readonly ngOptions: AngularUniversalOptions,\n  ) { }\n\n  @Get('*')\n  render(@Res() res: Response, @Req() req: Request) {\n    res.render(join(this.ngOptions.viewsPath, 'index.html'), { req });\n  }\n}\n\n```", "```js\nexport const clientProviders = [\n  {\n    provide: 'UNIVERSAL_INITIALIZER',\n    useFactory: async (\n      app: NestApplication,\n      options: AngularUniversalOptions\n    ) => await setupUniversal(app, options),\n    inject: [HTTP_SERVER_REF, ANGULAR_UNIVERSAL_OPTIONS]\n  }\n];\n\n```", "```js\nexport function setupUniversal(\n  app: NestApplication,\n  ngOptions: AngularUniversalOptions\n) {\n  const { AppServerModuleNgFactory, LAZY_MODULE_MAP } = ngOptions.bundle;\n\n  app.setViewEngine('html');\n  app.setBaseViewsDir(ngOptions.viewsPath);\n  app.engine(\n    'html',\n    ngExpressEngine({\n      bootstrap: AppServerModuleNgFactory,\n      providers: [\n        provideModuleMap(LAZY_MODULE_MAP),\n        {\n          provide: APP_BASE_HREF,\n          useValue: `http://localhost:${environment.port}`\n        }\n      ]\n    })\n  );\n}\n\n```", "```js\nexport interface AngularUniversalOptions {\n  viewsPath: string;\n  bundle: {\n    AppServerModuleNgFactory: any,\n    LAZY_MODULE_MAP: any\n  };\n}\n\n```", "```js\nconst options: AngularUniversalOptions = {\n  viewsPath: environment.clientPaths.app,\n  bundle: requireFn(join(environment.clientPaths.server, 'main.js'))\n};\n\n```", "```js\nbundle: {\n    AppServerModuleNgFactory: any,\n    LAZY_MODULE_MAP: any\n  };\n\n```", "```js\nconfigure(consumer: MiddlewareConsumer): void {\n    this.app.useStaticAssets(this.ngOptions.viewsPath);\n  }\n\n```"]