["```js\n@Module({\n    imports: [UserModule, CommentModule],\n    providers: [CommentGateway]\n})\nexport class CommentGatewayModule { }\n\n```", "```js\n@WebSocketGateway({\n    middlewares: [AuthenticationGatewayMiddleware]\n})  \nexport class UserGateway { /*....*/ }\n\n```", "```js\nexport class CommentGateway {  \n    @WebSocketServer() server; \n\n    /* ... */\n}\n\n```", "```js\nexport class CommentGateway {\n    /* ... */\n\n    constructor(private readonly commentService: CommentService) { }\n\n    /* ... */\n}\n\n```", "```js\nexport class CommentGateway {\n    /* ... */\n\n    @SubscribeMessage('indexComment')\n    async index(client, data): Promise<WsResponse<any>> {\n        if (!data.entryId) throw new WsException('Missing entry id.');\n\n        const comments = await this.commentService.findAll({\n            where: {entryId: data.entryId}\n        });\n\n        return { event: 'indexComment', data: comments };\n    }\n\n    @SubscribeMessage('showComment')\n    async show(client, data): Promise<WsResponse<any>> {\n        if (!data.entryId) throw new WsException('Missing entry id.');\n        if (!data.commentId) throw new WsException('Missing comment id.');\n\n        const comment = await this.commentService.findOne({\n            where: {\n                id: data.commentId,\n                entryId: data.entryId\n            }\n        });\n\n        return { event: 'showComment', data: comment };\n    }\n}\n\n```", "```js\n@Injectable()\nexport class AuthenticationGatewayMiddleware implements GatewayMiddleware {\n    constructor(private readonly userService: UserService) { }\n    resolve() {\n        return (socket, next) => {\n            if (!socket.handshake.query.auth_token) {\n                throw new WsException('Missing token.');\n            }\n\n            return jwt.verify(socket.handshake.query.auth_token, 'secret', async (err, payload) => {\n                if (err) throw new WsException(err);\n\n                const user = await this.userService.findOne({ where: { email: payload.email }});\n                socket.handshake.user = user;\n                return next();\n            });\n        }\n    }\n}\n\n```", "```js\nexport class WsAdapter implements WebSocketAdapter {\n    constructor(private app: INestApplication) { }\n\n    /* ... */\n}\n\n```", "```js\nexport class WsAdapter implements WebSocketAdapter {\n    /* ... */\n\n    create(port: number) {\n        return new WebSocket.Server({\n            server: this.app.getHttpServer(),\n            verifyClient: ({ origin, secure, req }, next) => { \n                return (new WsAuthenticationGatewayMiddleware(this.app.select(UserModule).\n                get(UserService))).resolve()(req, next);\n            }\n        });\n    }   \n\n    /* ... */\n}\n\n```", "```js\n@Injectable()\nexport class WsAuthenticationGatewayMiddleware implements GatewayMiddleware {\n    constructor(private userService: UserService) { }\n    resolve() {\n        return (req, next) => {\n            const matches = req.url.match(/token=([^&].*)/);\n            req['token'] = matches && matches[1];\n\n            if (!req.token) {\n                throw new WsException('Missing token.');\n            }\n\n            return jwt.verify(req.token, 'secret', async (err, payload) => {\n                if (err) throw new WsException(err);\n\n                const user = await this.userService.findOne({ where: { email: payload.email }});\n                req.user = user;\n                return next(true);\n            });\n        }\n    }\n}\n\n```", "```js\nexport class WsAdapter implements WebSocketAdapter {\n    /* ... */\n\n    bindClientConnect(server, callback: (...args: any[]) => void) {\n        server.on('connection', callback);\n    }\n\n    /* ... */\n}\n\n```", "```js\nexport class WsAdapter implements WebSocketAdapter {\n    /* ... */\n\n        bindMessageHandlers(client: WebSocket, handlers: MessageMappingProperties[], process: (data) => Observable<any>) {\n            Observable.fromEvent(client, 'message')\n                .switchMap((buffer) => this.bindMessageHandler(buffer, handlers, process))\n                .filter((result) => !!result)\n                .subscribe((response) => client.send(JSON.stringify(response)));\n        }\n\n        bindMessageHandler(buffer, handlers: MessageMappingProperties[], process: (data) => Observable<any>): Observable<any> {\n            const data = JSON.parse(buffer.data);\n            const messageHandler = handlers.find((handler) => handler.message === data.type);\n            if (!messageHandler) {\n                return Observable.empty();\n            }\n            const { callback } = messageHandler;\n            return process(callback(data));\n        }\n\n    /* ... */\n}\n\n```", "```js\napp.useWebSocketAdapter(new WsAdapter(app));\n\n```", "```js\n<script>\n    const socket = io('http://localhost:3000',  {\n        query: 'auth_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.\n eyJlbWFpbCI6InRlc3QzQHRlc3QuZnIiLCJpYXQiOjE1MjQ5NDk3NTgs\n ImV4cCI6MTUyNDk1MzM1OH0.QH_jhOWKockuV-w-vIKMgT_eLJb3dp6a\n ByDbMvEY5xc'\n    });\n</script>\n\n```", "```js\nsocket.on('connect', function () {\n    socket.emit('showUser', { userId: 4 });\n    socket.emit('indexComment', { entryId: 2 });\n    socket.emit('showComment', { entryId: 2, commentId: 1 });\n});\n\n```", "```js\nsocket.on('indexComment', function (data) {\n    console.log('indexComment', data);\n});\nsocket.on('showComment', function (data) {\n    console.log('showComment', data);\n});\nsocket.on('showUser', function (data) {\n    console.log('showUser', data);\n});\nsocket.on('exception', function (data) {\n    console.log('exception', data);\n});\n\n```", "```js\nconst ws = new WebSocket(\"ws://localhost:3000?token=eyJhbGciO\niJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InRlc3QzQHRlc3QuZnIiL\nCJpYXQiOjE1MjUwMDc2NjksImV4cCI6MTUyNTAxMTI2OX0.GQjWzdKXAFTAtO\nkpLjId7tPliIpKy5Ru50evMzf15YE\");\n\n```", "```js\nws.onopen = function() {\n    console.log('open');\n    ws.send(JSON.stringify({ type: 'showComment', entryId: 2, commentId: 1 }));\n};\n\n```", "```js\nws.onmessage = function(ev) {\n    const _data = JSON.parse(ev.data);\n    console.log(_data);\n};\n\n```"]