["```js\nversion: '3'\n\nvolumes:\n  # for persistence between restarts\n  mariadb_data:\n\nservices:\n  mariadb:\n    image: mariadb:latest\n    restart: always\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: secret\n      MYSQL_DATABASE: nestbook\n      MYSQL_USER: nest\n      MYSQL_PASSWORD: nest\n    volumes:\n        - mariadb_data:/var/lib/mysql\n\n  api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n      args:\n        - NODE_ENV=development\n    depends_on:\n      - mariadb\n    links:\n      - mariadb\n    environment:\n      PORT: 3000\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    command: >\n      npm run start:dev\n\n```", "```js\n{\n  \"type\": \"mariadb\",\n  \"host\": \"mariadb\",\n  \"port\": 3306,\n  \"username\": \"nest\",\n  \"password\": \"nest\",\n  \"database\": \"nestbook\",\n  \"synchronize\": true,\n  \"entities\": [\"src/**/*.entity.ts\"]\n}\n\n```", "```js\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    ...\n  ]\n})\n\nexport class AppModule {}\n\n```", "```js\nimport { Entity } from 'typeorm';\n\n@Entity()\nexport class Entry {}\n\n```", "```js\nimport { Entity, Column } from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @Column() created_at: Date;\n}\n\n```", "```js\nimport { Entity, Column, PrimaryColumn } from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryColumn() id: number;\n\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @Column() created_at: Date;\n}\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Entry } from './entry.entity';\n\n@Injectable()\nexport class EntriesService {\n  constructor(\n    // we create a repository for the Entry entity\n    // and then we inject it as a dependency in the service\n    @InjectRepository(Entry) private readonly entry: Repository<Entry>\n  ) {}\n\n  // this method retrieves all entries\n  findAll() {\n    return this.entry.find();\n  }\n\n  // this method retrieves only one entry, by entry ID\n  findOneById(id: number) {\n    return this.entry.findOneById(id);\n  }\n\n  // this method saves an entry in the database\n  create(newEntry: Entry) {\n    this.entry.save(newEntry);\n  }\n}\n\n```", "```js\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entry.service';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(private readonly entriesSrv: EntriesService) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n\n  @Get(':entryId')\n  findOneById(@Param('entryId') entryId) {\n    return this.entriesSrv.findOneById(entryId);\n  }\n\n  @Post()\n  create(@Body() entry) {\n    return this.entriesSrv.create(entry);\n  }\n}\n\n```", "```js\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n\nimport { Entry } from './entry.entity';\nimport { EntriesController } from './entry.controller';\nimport { EntriesService } from './entry.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Entry])],\n  controllers: [EntriesController],\n  components: [EntriesService],\n})\nexport class EntriesModule {}\n\n```", "```js\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { EntriesModule } from './entries/entries.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    EntriesModule,\n    ...\n  ]\n})\n\nexport class AppModule {}\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n< HTTP/1.1 200 OK\n\n[]\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n| {\n|   \"id\": 1,\n|   \"title\": \"This is our first post\",\n|   \"body\": \"Bla bla bla bla bla\",\n|   \"image\": \"http://lorempixel.com/400\",\n|   \"created_at\": \"2018-04-15T17:42:13.911Z\"\n| }\n\n< HTTP/1.1 201 Created\n\n```", "```js\n> GET /entries/1 HTTP/1.1\n> Host: localhost:3000\n< HTTP/1.1 200 OK\n\n{\n  \"id\": 1,\n  \"title\": \"This is our first post\",\n  \"body\": \"Bla bla bla bla bla\",\n  \"image\": \"http://lorempixel.com/400\",\n  \"created_at\": \"2018-04-15T17:42:13.911Z\"\n}\n\n```", "```js\n> GET /entries HTTP/1.1\n> Host: localhost:3000\n< HTTP/1.1 200 OK\n\n[{\n  \"id\": 1,\n  \"title\": \"This is our first post\",\n  \"body\": \"Bla bla bla bla bla\",\n  \"image\": \"http://lorempixel.com/400\",\n  \"created_at\": \"2018-04-15T17:42:13.911Z\"\n}]\n\n```", "```js\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn() id: number;\n\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @Column() created_at: Date;\n}\n\n```", "```js\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @Column() created_at: Date;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  CreateDateColumn,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @CreateDateColumn() created_at: Date;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column() body: string;\n\n  @Column() image: string;\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\n@Column() title: string;\n\n```", "```js\n@Column('text') body: string;\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column('text') body: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n  OneToMany,\n} from 'typeorm';\n\nimport { Comment } from '../comments/comment.entity';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @OneToMany(type => Comment, comment => comment.id)\n  comments: Comment[];\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n  ManyToOne,\n} from 'typeorm';\n\nimport { Entry } from '../entries/entry.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column('text') body: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @ManyToOne(type => Entry, entry => entry.comments)\n  entry: Entry;\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Comment } from './comment.entity';\n\n@Injectable()\nexport class CommentsService {\n  constructor(\n    @InjectRepository(Comment) private readonly comment: Repository<Comment>\n  ) {}\n\n  findAll() {\n    return this.comment.find();\n  }\n\n  findOneById(id: number) {\n    return this.comment.findOneById(id);\n  }\n\n  create(comment: Comment) {\n    return this.comment.save(comment);\n  }\n}\n\n```", "```js\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entries.service';\nimport { CommentsService } from '../comments/comments.service';\n\nimport { Entry } from './entry.entity';\nimport { Comment } from '../comments/comment.entity';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(\n    private readonly entriesSrv: EntriesService,\n    private readonly commentsSrv: CommentsService\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n\n  @Get(':entryId')\n  findOneById(@Param('entryId') entryId) {\n    return this.entriesSrv.findOneById(entryId);\n  }\n\n  @Post()\n  async create(@Body() input: { entry: Entry; comments: Comment[] }) {\n    const { entry, comments } = input;\n    entry.comments: Comment[] = [];\n    await comments.forEach(async comment => {\n      await this.commentsSrv.create(comment);\n      entry.comments.push(comment);\n    });\n    return this.entriesSrv.create(entry);\n  }\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n  OneToMany,\n} from 'typeorm';\n\nimport { Comment } from '../comments/comment.entity';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @OneToMany(type => Comment, comment => comment.id, {\n    cascade: true,\n  })\n  comments: Comment[];\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entries.service';\n\nimport { Entry } from './entry.entity';\nimport { Comment } from '../comments/comment.entity';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(private readonly entriesSrv: EntriesService) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n\n  @Get(':entryId')\n  findAll(@Param('entryId') entryId) {\n    return this.entriesSrv.findOneById(entryId);\n  }\n\n  @Post()\n  async create(@Body() input: { entry: Entry; comments: Comment[] }) {\n    const { entry, comments } = input;\n    entry.comments = comments;\n    return this.entriesSrv.create(entry);\n  }\n}\n\n```", "```js\nimport { Component } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\nimport { Entry } from './entry.entity';\n\n@Injectable()\nexport class EntriesService {\n  constructor(\n    @InjectRepository(Entry) private readonly entry: Repository<Entry>\n  ) {}\n\n  findAll() {\n    return this.entry.find();\n  }\n\n  findOneById(id: number) {\n    return this.entry.findOneById(id, { relations: ['comments'] });\n  }\n\n  create(newEntry: Entry) {\n    this.entry.save(newEntry);\n  }\n}\n\n```", "```js\n// This relationship will be treated as eager\n@OneToMany(type => Comment, comment => comment.id)\ncomments: Comment[];\n\n// This relationship will be treated as lazy\n@OneToMany(type => Comment, comment => comment.id)\ncomments: Promise<Comment[]>;\n\n```", "```js\nimport { Controller, Get, Post, Body, Param } from '@nestjs/common';\n\nimport { EntriesService } from './entries.service';\nimport { CommentsService } from '../comments/comments.service';\n\nimport { Entry } from './entry.entity';\nimport { Comment } from '../comments/comment.entity';\n\n@Controller('entries')\nexport class EntriesController {\n  constructor(\n    private readonly entriesSrv: EntriesService,\n    private readonly commentsSrv: CommentsService\n  ) {}\n\n  @Get()\n  findAll() {\n    return this.entriesSrv.findAll();\n  }\n\n  @Get(':entryId')\n  findAll(@Param('entryId') entryId) {\n    return this.entriesSrv.findOneById(entryId);\n  }\n\n  @Post()\n  async create(@Body() input: { entry: Entry; comments: Comment[] }) {\n    const { entry, comments } = input;\n    const resolvedComments = [];\n    await comments.forEach(async comment => {\n      await this.commentsSrv.create(comment);\n      resolvedComments.push(comment);\n    });\n    entry.comments = Promise.resolve(resolvedComments);\n    return this.entriesSrv.create(entry);\n  }\n}\n\n```", "```js\nimport { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n@Entity()\nexport class EntryMetadata {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() likes: number;\n\n  @Column() shortlink: string;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n  OneToMany,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\n\nimport { EntryMetadata } from './entry-metadata.entity';\nimport { Comment } from '../comments/comment.entity';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @OneToOne(type => EntryMetadata)\n  @JoinColumn()\n  metadata: EntryMetadata;\n\n  @OneToMany(type => Comment, comment => comment.id, {\n    cascade: true,\n  })\n  comments: Comment[];\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport { Entity, PrimaryGeneratedColumn, Column, OneToOne } from 'typeorm';\n\nimport { Entry } from './entry.entity';\n\n@Entity()\nexport class EntryMetadata {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() likes: number;\n\n  @Column() shortlink: string;\n\n  @OneToOne(type => Entry, entry => entry.metadata)\n  entry: Entry;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n  VersionColumn,\n  OneToMany,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\n\nimport { EntryMetadata } from './entry-metadata.entity';\nimport { Comment } from '../comments/comment.entity';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @OneToOne(type => EntryMetadata, entryMetadata => entryMetadata.entry)\n  @JoinColumn()\n  metadata: EntryMetadata;\n\n  @OneToMany(type => Comment, comment => comment.id, {\n    cascade: true,\n  })\n  comments: Comment[];\n\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\n@Entity\nexport class User {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() username: string;\n\n  @Column() password: string;\n\n  @BeforeInsert()\n  encryptPassword() {\n    this.password = crypto.createHmac('sha256', this.password).digest('hex');\n  }\n}\n\n```", "```js\nimport { CreateDateColumn, UpdateDateColumn, VersionColumn } from 'typeorm';\n\nexport class Versioning {\n  @CreateDateColumn() created_at: Date;\n\n  @UpdateDateColumn() modified_at: Date;\n\n  @VersionColumn() revision: number;\n}\n\n```", "```js\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  OneToMany,\n  OneToOne,\n  JoinColumn,\n} from 'typeorm';\n\nimport { EntryMetadata } from './entry-metadata.entity';\nimport { Comment } from '../comments/comment.entity';\nimport { Versioning } from '../common/versioning.entity';\n\n@Entity()\nexport class Entry {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column() title: string;\n\n  @Column('text') body: string;\n\n  @Column() image: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @OneToOne(type => EntryMetadata, entryMetadata => entryMetadata.entry)\n  @JoinColumn()\n  metadata: EntryMetadata;\n\n  @OneToMany(type => Comment, comment => comment.id, {\n    cascade: true,\n  })\n  comments: Comment[];\n\n  @Column(type => Versioning)\n  versioning: Versioning;\n}\n\n```", "```js\nimport { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\nimport { Versioning } from '../common/versioning.entity';\n\n@Entity()\nexport class Comment {\n  @PrimaryGeneratedColumn('uuid') id: string;\n\n  @Column('text') body: string;\n\n  @Column('simple-json') author: { first_name: string; last_name: string };\n\n  @Column(type => Versioning)\n  versioning: Versioning;\n}\n\n```", "```js\nimport { Entity, Column } from 'typeorm';\n\nimport { Entry } from './entry.entity';\n\n@Entity()\nexport class SponsoredEntry extends Entry {\n  @Column() sponsorName: string;\n\n  @Column() sponsorUrl: string;\n}\n\n```", "```js\n{\n  \"type\": \"mariadb\",\n  \"host\": \"db\",\n  \"port\": 3306,\n  \"username\": \"nest\",\n  \"password\": \"nest\",\n  \"database\": \"nestbook\",\n  \"synchronize\": true,\n  \"entities\": [\"src/**/*.entity.ts\"],\n  \"cache\": true\n}\n\n```", "```js\nthis.entry.find({ cache: true });\n\n```", "```js\n{\n  \"type\": \"mariadb\",\n  ...\n  \"cache\": {\n    \"type\": \"redis\",\n    \"options\": {\n      \"host\": \"localhost\",\n      \"port\": 6379\n    }\n  }\n}\n\n```", "```js\nimport {getRepository} from \"typeorm\";\n...\n\nfindOneById(id: number) {\n  return getRepository(Entry)\n    .createQueryBuilder('entry')\n    .where('entry.id = :id', { id })\n    .getOne();\n}\n\n...\n\n```", "```js\nimport {getRepository} from \"typeorm\";\n...\n\nfindOneById(id: number) {\n  return getRepository(Entry)\n    .createQueryBuilder('entry')\n    .where('entry.id = :id', { id })\n    .leftJoinAndSelect('entry.comments', 'comment')\n    .getOne();\n}\n\n...\n\n```"]