["```js\nnpm install -g @nestjs/cli\n\n```", "```js\ndocker pull nestjs/cli:[version]\n\n```", "```js\nnest new [project-name]\n\n```", "```js\nnest generate service [service-name]\n\n```", "```js\nnest g s [service-name]\n\n```", "```js\n[System Information]\nOS Version     : macOS High Sierra\nNodeJS Version : v8.9.0\nYARN Version    : 1.5.1\n[Nest Information]\nmicroservices version : 5.0.0\nwebsockets version    : 5.0.0\ntesting version       : 5.0.0\ncommon version        : 5.0.0\ncore version          : 5.0.0\n\n```", "```js\n@Injectable()\nexport class UserService implements IUserService {\n    constructor(@Inject('UserRepository') private readonly UserRepository: typeof User) { }\n    ...\n}\n\n```", "```js\n@Injectable()  \nexport class AuthenticationMiddleware implements NestMiddleware {  \n   constructor(private userService: UserService) { }  \n\n   async resolve(strategy: string): Promise<ExpressMiddleware> {  \n       return async (req, res, next) => {  \n           return passport.authenticate(strategy, async (/*...*/args: any[]) => {  \n               const [, payload, err] = args;  \n                if (err) {  \n                    return res.status(HttpStatus.BAD_REQUEST).send('Unable to authenticate the user.');  \n                }  \n\n               const user = await this.userService.findOne({\n                    where: { email: payload.email }\n               });  \n                req.user = user;  \n                return next();  \n            })(req, res, next);  \n        };  \n    }  \n}\n\n```", "```js\n@Controller('hello')\nexport class HelloWorldController {\n  @Get(\u2018world\u2019)\n  printHelloWorld() {\n    return \u2018Hello World\u2019;\n  }\n}\n\n```"]