["```js\nvar nodemailer = require('nodemailer');\n\nvar transport = nodemailer.createTransport('SMTP', {\n    host: 'smtp.gmail.com',\n    secureConnection: true,\n    port: 465,\n    auth: {\n      user: \"ourGmailAddress@googlemail.com\",\n      pass: \"ourPassword\"\n    }\n  });\n\n```", "```js\nvar msg = {\n  transport: transport,\n  text:    \"Hello! This is your newsletter, :D\",\n  from:    \"Definitely Not Spammers <spamnot@ok.com>\",\n  subject: \"Your Newsletter\"\n};\n\n```", "```js\nvar maillist = [\n  'Mr One <mailtest1@mailinator.com>',\n  'Mr Two <mailtest2@mailinator.com>',\n  'Mr Three <mailtest3@mailinator.com>',\n  'Mr Four <mailtest4@mailinator.com>',\n  'Mr Five <mailtest5@mailinator.com>'\n];\n\n```", "```js\nvar i = 0;\nmaillist.forEach(function (to) {\n  msg.to = to;\n  nodemailer.sendMail(msg, function (err) {\n\n    if (err) { console.log('Sending to ' + to + ' failed: ' + err); }\n\n    console.log('Sent to ' + to);\n\n    i += 1\n    if (i === maillist.length) { msg.transport.close();  }\n  });\n});\n\n```", "```js\nvar transport = nodemailer.createTransport(\"Sendmail\");\n\n```", "```js\nvar transport = nodemailer.createTransport(\"Sendmail\", \"/to/sendmail\");\n\n```", "```js\nvar msg = {\n//prior properties: transport\n text:    \"Hello! This is your newsletter, :D\",\n html: \"<b>Hello!</b><p>This is your newsletter, :D</p>\",\n//following properties: from, subject\n};\n\n```", "```js\nvar msg = {\n  transport: transport,\n  html: \"<b>Hello!</b><p>This is your newsletter, :D</p>\",\n  createTextFromHtml: true,\n  from:    \"Definitely Not Spammers <spamnot@ok.com>\",\n  subject: \"Your Newsletter\"\n};\n\n```", "```js\nvar nodemailer = require('nodemailer');\n\nvar msg = {\n  transport: nodemailer.createTransport('SMTP', {\n    host: 'smtp.gmail.com',\n    secureConnection: true,\n    port: 465,\n    auth: {\n      user: \"ourGmailAddress@googlemail.com\",\n      pass: \"ourPassword\"\n    }\n  }),\n  text:    \"Answer in the attachment\",\n  from:    \"The Attacher <attached@files.com>\",\n  subject: \"What do you call a deer with no eyes?\",\n  to: \"anyemail@anyaddress.com\",\n  attachments: [\n    {fileName: 'deer.txt', contents:'no eye deer.'},\n    {fileName: 'deerWithEyes.jpg', filePath: 'deer.jpg'}\n  ]\n};\n\nnodemailer.sendMail(msg, function (err) {\n  if (err) { console.log('Sending to ' + msg.to + ' failed: ' + err); }\n  console.log('Sent to ' + msg.to);\n  msg.transport.close();\n});\n\n```", "```js\nnpm install twilio \n\n```", "```js\nvar twilio = require('twilio');\nvar settings =  {\n  sid : 'Ad054bz5be4se5dd211295c38446da2ffd',\n  token: '3e0345293rhebt45r6erta89xc89v103',\n  hostname : 'dummyhost',\n  phonenumber: '+14155992671' //sandbox number\n}\n\n```", "```js\nvar restClient = new (twilio.RestClient)(settings.sid, settings.token);\n\nvar client = new (twilio.Client)(settings.sid,\n                                  settings.token,\n                                  settings.hostname);\n\nvar phone = client.getPhoneNumber(settings.phonenumber);\n\n```", "```js\nvar smslist = [\n  '+44770xxxxxx1',\n  '+44770xxxxxx2',\n  '+44770xxxxxx3',  \n  '+44770xxxxxx4',  \n  '+44770xxxxxx5'  \n];\n\n```", "```js\nvar msg = 'SMS Ahoy!';\nsmslist.forEach(function (to) {\n  phone.sendSms(to, msg, {}, function(sms) { console.log(sms);  });\n});\n\n```", "```js\n  phone.sendSms(to, msg, {}, function(sms) {\n      restClient.getSmsInstance(sms.smsDetails.sid, function (presentSms) {\n\t\t//process presentSms using it's status property.\n      });\n  });\n\n```", "```js\nvar msg = 'SMS Ahoy!',  i = 0;\nsmslist.forEach(function (to) {\n  phone.sendSms(to, msg, {}, function (sms) {\n\n  function checkStatus(smsInstance) {  \n      restClient.getSmsInstance(smsInstance.sid, function (presentSms) {\n       if (presentSms.status === 'sent') {  \n          console.log('Sent to ' + presentSms.to);\n        } else {\n          if (isNaN(presentSms.status)) {\n            //retry: if its not a number (like 404, 401), it's not an error\n            setTimeout(checkStatus, 1000, presentSms);\n            return;\n          }\n          //it seems to be a number, let's notify, but carry on\n          console.log('API error: ', presentSms.message);\n        }\n        i += 1;\n        if (i === smslist.length) { process.exit(); }\n      });\n    };\n\n    checkStatus(sms.smsDetails);\n\n  });\n});\n\n```", "```js\nvar settings =  {\n  sid : 'Ad054bz5be4se5dd211295c38446da2ffd',\n  token: '3e0345293rhebt45r6erta89xc89v103',\n  hostname : 'nodecookbook.com',\n  phonenumber: '+14155992671' //sandbox number\n};\n\n```", "```js\nvar i = 0;\nsmslist.forEach(function (to) {\n  phone.sendSms(to, msg, {}, function(sms) {\n    sms.on('processed', function(req) {  \n      i += 1;  \n      console.log('Message to ' + req.To +\n      ' processed with status: ' + req.SmsStatus);\n      if (i === smslist.length) {process.exit();}\n    });\n  });\n});\n\n```", "```js\nvar twilio = require('twilio');\n\nvar settings =  {\n  sid : 'Ad054bz5be4se5dd211295c38446da2ffd',\n  token: '3e0345293rhebt45r6erta89xc89v103',\n  hostname : 'nodecookbook.com',\n  phonenumber: '+14155992671' //sandbox number\n};\n\nvar client = new (twilio.Client)(settings.sid,\n                                  settings.token,\n                                  settings.hostname);\n\nvar phone = client.getPhoneNumber(settings.phonenumber);\n\n```", "```js\nphone.makeCall('+4477xxxxxxx1', {}, function(call) {\n  call.on('answered', function (req, res) {\n    console.log('answered');\n    res.append(new (twilio.Twiml).Say('Meet us in the abandoned factory'));\n    res.append(new (twilio.Twiml).Say('Come alone', {voice: 'woman'}));\n    res.send();\n  }).on('ended', function (req) {\n    console.log('ended', req);\n    process.exit();\n  })\n});\n\n```", "```js\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<Response>\n  <Say>\n\t  Meet us in the abandoned factory\n  </Say>\n  <Say voice=\"woman\">\n\t  Come alone\n  </Say>\n</Response>\n\n```", "```js\nvar net = require('net');\nvar fauxHttp = net.createServer(function(socket) {\n    socket.write('Hello, this is TCP\\n');\n    socket.end();\n\n   socket.on('data', function (data) {\n    console.log(data.toString());\n  });\n\n}).listen(8080);\n\n```", "```js\necho \"testing 1 2 3\" | nc localhost 8080 \n\n```", "```js\nvar net = require('net'),\n  stats = new (require('events').EventEmitter),\n  filter = 'User-Agent';\n\nvar fauxHttp = net.createServer(function(socket) {\n    socket.write('Hello, this is TCP\\n');\n    socket.end();    \n\n   socket.on('data', function (data) {\n    stats.emit('stats', data.toString());\n  });\n\n}).listen(8080);\n\n```", "```js\nvar monitorInterface = net.createServer(function(socket) {\n\n  stats.on('stats', function (stats) {\n    var header = stats.match(filter + ':') || stats.match('');\n    header = header.input.substr(header.index).split('\\r\\n')[0];\n    socket.write(header);\n  });\n\n  socket.write('Specify a filter [e.g. User-Agent]');\n  socket.on('data', function(data) {\n    filter = data.toString().replace('\\n','');\n\n    socket.write('Attempting to filter by: ' + filter);\n  });\n\n}).listen(8081);\n\n```", "```js\nvar net = require('net');\nvar client = net.connect(8081, 'localhost', function () {\n  process.stdin.resume();\n  process.stdin.pipe(client);\n}).on('data', function (data) {\n  console.log(data.toString());\n}).on('end', function () {\n  console.log('session ended');\n});\n\n```", "```js\nvar client = net.connect(8081, 'nodecookbook.com', function () {\n\n```", "```js\nvar net = require('net');\nvar fromPort = process.argv[2] || 9000;\nvar toPort = process.argv[3] || 22;\n\n```", "```js\nnet.createServer(function (socket) {\n  var client;\n  socket.on('connect', function () {\n    client = net.connect(toPort);\n    client.on('data', function (data) {\n      socket.write(data);\n    });\n  })\n  .on('data', function (data) {\n    client.write(data);\n   })\n  .on('end', function() {\n      client.end();\n  });\n}).listen(fromPort, function () {\n  console.log('Forwarding ' + this.address().port + ' to ' + toPort);\n});\n\n```", "```js\nssh -l username domain -p 9000 \n\n```", "```js\nnpm install pcap \n\n```", "```js\nvar pcap = require('pcap');\nvar pcapSession = pcap.createSession(\"\",\"tcp\"); //may need to put wlan0, \n                                                                             //eth0, etc. as 1st arg.\nvar tcpTracker = new pcap.TCP_tracker();\n\ntcpTracker.on('end', function (session) {\n    console.log(session);\n});\n\npcapSession.on('packet', function (packet) {\n  tcpTracker.track_packet(pcap.decode.packet(packet));\n});\n\n```", "```js\nsudo node tcp_stats.js \n\n```", "```js\nvar simplesmtp = require('simplesmtp');\nvar fs = require('fs');\nvar path = require('path');\nvar users = [{user: 'node', pass: 'cookbook'}],\n  mailboxDir = './mailboxes/',\n  catchall = fs.createWriteStream(mailboxDir + 'caught', {flags : 'a'});\n\n```", "```js\nvar smtp = simplesmtp\n  .createServer({requireAuthentication: true})\n  .on('authorizeUser', function (envelope, user, pass, cb) {\n    var authed;\n    users.forEach(function (userObj) {\n      if (userObj.user === user && userObj.pass === pass) {\n        authed = true;\n      }\n});\n    cb(null, authed);\n  });\n\n```", "```js\nsmtp.on('startData', function (envelope) {\n  var rcpt, saveTo;\n  envelope.mailboxes = [];\n  envelope.to.forEach(function (to) {\n    path.exists(mailboxDir + to.split('@')[0], function (exists) {\n      rcpt = to.split('@')[0];\n          if (exists) {\n        envelope.mailboxes.unshift(rcpt);\n        saveTo = mailboxDir + rcpt + '/' + envelope.from\n          + ' - ' + envelope.date;\n        envelope[rcpt] = fs.createWriteStream(saveTo, {flags: 'a'});\n        return;\n      }\n      console.log(rcpt + ' has no mailbox, sending to caught file');\n      envelope[rcpt] = catchall;  \n    });\n  });\n});\n\n```", "```js\nsmtp.on('data', function (envelope, chunk) {\n  envelope.mailboxes.forEach(function (rcpt) {\n    envelope[rcpt].write(chunk);\n  });\n}).on('dataReady', function (envelope, cb) {\n  envelope.mailboxes.forEach(function (rcpt) {\n      envelope[rcpt].end();\n  });\n\n  cb(null, Date.now());\n});\n\n```", "```js\nsmtp.listen(2525);\n\n```", "```js\nvar transport = nodemailer.createTransport('SMTP', {\n    host: 'localhost',\n    secureConnection: false,\n    port: 2525,\n    auth: {\n      user: \"node\",\n      pass: \"cookbook\"\n    }\n  });\n\n```", "```js\nvar maillist = [\n  'Bob <bob@nodecookbook.com>, Bib <bib@nodecookbook.com>',\n  'Miss Susie <susie@nodecookbook.com>',\n  'Mr Nobody <nobody@nodecookbook.com>',\n];\n\n```", "```js\nSent to Miss Susie <susie@nodecookbook.com>\nSent to Mr Nobody <nobody@nodecookbook.com>\nSent to Bob <bob@nodecookbook.com>, Bib <bib@nodecookbook.com> \n\n```", "```js\nnobody has no mailbox, sending to caught file \n\n```", "```js\nvar simplesmtp = require('simplesmtp');\nvar fs = require('fs');\nvar path = require('path');\nvar  mailboxDir = './mailboxes/',\n    catchall = fs.createWriteStream(mailboxDir + 'caught', {flags : 'a'});\nvar smtp = simplesmtp.createServer();\n\n```", "```js\nsmtp.listen(25);\n\n```", "```js\nnpm install simplesmtp \n\n```", "```js\n<b> This is localhost </b>\n\n```", "```js\n<h1>Welcome to the Node Cookbook Site!</h1>\n\n```", "```js\n127.0.0.1 localhost nodecookbook\n\n```", "```js\nnpm install node-static \n\n```", "```js\nvar static = require('node-static');\n\nfunction staticServe (dir) {\n  return new (static.Server)('sites/' + dir)\n}\n\nexports.sites = {\n  'nodecookbook' : staticServe('nodecookbook'),\n  'localhost' : staticServe('localhost-site')\n} ;\n\n```", "```js\nvar http = require('http');\n\nvar port = 8080,\n  mappings = require('./mappings');\n\nvar server = http.createServer(function (req, res) {\n  var domain = req.headers.host.replace(new RegExp(':' + port + '$'), ''),\n    site = mappings.sites[domain] ||\n      mappings.sites[mappings.aliases[domain]];\n\n  if (site) { site.serve(req, res); return; }\n  res.writeHead(404);\n  res.end('Not Found\\n');\n\n}).listen(port);\n\n```", "```js\n  if (site) { site.serve(req, res); return; }\n\n```", "```js\nrm -fr nodecookbook && express nodecookbook\nrm -fr localhost-site && express localhost-site\ncd nodecookbook && npm -d install\ncd ../localhost-site && npm -d install \n\n```", "```js\nif (!module.parent) {\n\n  app.listen(3000);\n  console.log(\"Express server listening on port %d in %s mode\",        \tapp.address().port, app.settings.env);\n\n}\n\n```", "```js\nh1 Welcome to the Node Cookbook site!\n\n```", "```js\nb this is localhost\n\n```", "```js\nfunction appServe (dir) {\n  return require('./sites/' + dir + '/app.js')\n}\n\nexports.sites = {\n  'nodecookbook' : appServe('nodecookbook'),\n  'localhost' : appServe('localhost-site')\n};\n\n```", "```js\nvar express = require('express'),\n  mappings = require('./mappings'),\n  app = express.createServer();\n\nObject.keys(mappings.sites).forEach(function (domain) {\n  app.use(express.vhost(domain, mappings.sites[domain]));\n});\n\napp.listen(8080);\n\n```", "```js\nfunction secureShare(domain) {\n  var site = {\n    content: staticServe(domain),\n    cert: fs.readFileSync('sites/' + domain + '/certs/cert.pem'),\n    key: fs.readFileSync('sites/' + domain + '/certs/key.pem')\n  };\n  return site;\n} ;\n\n```", "```js\nexports.sites = {\n  'nodecookbook.com' : secureShare('nodecookbook.com'),\n  'davidmarkclements.com' : secureShare('davidmarkclements.com')\n};\n\n```", "```js\n<b>This is DavidMarkClements.com virtually AND secure</b>\n\n```", "```js\nvar https = require('https');\nvar fs = require('fs');\n\n```", "```js\nvar server = https.createServer({}, function (req, res) {\n\n```", "```js\n  if (site) { site.serve(req, res); return; }\n\n```", "```js\n  if (site) { site.content.serve(req, res); return; }\n\n```", "```js\n}).listen(port, '0.0.0.0');\n\n```", "```js\nObject.keys(mappings.sites).forEach(function (hostname) {\n  server.addContext(hostname, {key: mappings.sites[hostname].key,\n    cert: mappings.sites[hostname].cert});    \n});\n\n```"]