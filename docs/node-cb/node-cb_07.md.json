["```js\nvar http = require('http');\n\nvar username = 'dave',\n  password = 'ILikeBrie_33',\n  realm = \"Node Cookbook\";\n\n```", "```js\nhttp.createServer(function (req, res) {\n  var auth, login;\n\n  if (!req.headers.authorization) {\n    authenticate(res);\n    return;\n  }\n\n  //extract base64 encoded username:password string from client\n  auth = req.headers.authorization.replace(/^Basic /, '');\n  //decode base64 to utf8\n  auth = (new Buffer(auth, 'base64').toString('utf8'));\n\n  login = auth.split(':'); //[0] is username [1] is password\n\n  if (login[0] === username && login[1] === password) {\n    res.end('Someone likes soft cheese!');\n    return;\n  }\n\n  authenticate(res);\n\n}).listen(8080);\n\n```", "```js\nfunction authenticate(res) {\n  res.writeHead(401,\n     {'WWW-Authenticate' : 'Basic realm=\"' + realm + '\"'});\n  res.end('Authorization required.');\n}\n\n```", "```js\nAuthorization: Basic ZGF2ZTpJTGlrZUJyaWVfMzM=\n\n```", "```js\ndave:ILikeBrie_33\n\n```", "```js\nvar express = require('express');\n\nvar username = 'dave',\n  password = 'ILikeBrie_33',\n  realm = \"Node Cookbook\";\n\nvar app = express.createServer();\n\napp.use(express.basicAuth(function (user, pass) {\n  return username === user && password === pass;\n}, realm));\n\napp.get('/:route?', function (req, res) {\n  res.end('Somebody likes soft cheese!');\n});\n\napp.listen(8080);\n\n```", "```js\n<form method=post>\n  User  <input name=user>\n  Pass <input type=password name=pass>\n  <input type=submit>\n</form>\n\n```", "```js\nvar express = require('express');\nvar crypto = require('crypto');\n\nvar userStore = {},\n  app = express.createServer().listen(8080);\n\napp.use(express.bodyParser());\n\n```", "```js\napp.get('/', function (req, res) {\n  res.sendfile('regform.html');\n});\n\n```", "```js\napp.post('/', function (req, res) {\n  if (req.body && req.body.user && req.body.pass) {  \n    var hash = crypto\n      .createHash(\"md5\")\n      .update(req.body.pass)\n      .digest('hex');\n\n    userStore[req.body.user] = hash;\n    res.send('Thanks for registering ' + req.body.user);\n    console.log(userStore);\n  }\n});\n\n```", "```js\n    var hash = crypto\n      .createHash(\"md5\")\n      .update(req.body.pass)\n      .digest('hex');\n\n```", "```js\n    var hash = crypto\n        .createHmac(\"md5\",'SuperSecretKey')\n        .update(req.body.pass)\n        .digest('hex');\n\n```", "```js\napp.post('/', function (req, res) {\n  if (req.body && req.body.user && req.body.pass) {\n    crypto.randomBytes(128, function (err, salt) {\n      if (err) { throw err;}\n      salt = new Buffer(salt).toString('hex');\n      crypto.pbkdf2(req.body.pass, salt, 7000, 256, function (err, hash) {\n        if (err) { throw err; }\n        userStore[req.body.user] = {salt : salt,\n          hash : (new Buffer(hash).toString('hex')) };\n        res.send('Thanks for registering ' + req.body.user);\n        console.log(userStore);\n      });\n    });\n  }\n});\n\n```", "```js\nvar http = require('http');\nvar crypto = require('crypto');\n\nvar username = 'dave',\n  password = 'digestthis!',\n  realm = \"Node Cookbook\",\n  opaque;\n\nfunction md5(msg) {\n  return crypto.createHash('md5').update(msg).digest('hex');\n}\n\nopaque = md5(realm);\n\n```", "```js\nfunction authenticate(res) {\n  res.writeHead(401, {'WWW-Authenticate' : 'Digest realm=\"' + realm + '\"'\n    + ',qop=\"auth\",nonce=\"' + Math.random() + '\"'\n    + ',opaque=\"' + opaque + '\"'});\n\n  res.end('Authorization required.');\n}\n\nfunction parseAuth(auth) {\n  var authObj = {};\n  auth.split(', ').forEach(function (pair) {\n    pair = pair.split('=');\n    authObj[pair[0]] = pair[1].replace(/\"/g, '');\n  });\n  return authObj;\n}\n\n```", "```js\nhttp.createServer(function (req, res) {\n  var auth, user, digest = {};\n\n  if (!req.headers.authorization) {\n    authenticate(res);\n    return;\n  }\n  auth = req.headers.authorization.replace(/^Digest /, '');\n  auth = parseAuth(auth); //object containing digest headers from client\n  //don't waste resources generating MD5 if username is wrong\n  if (auth.username !== username) { authenticate(res); return; }\n\n  digest.ha1 = md5(auth.username + ':' + realm + ':' + password);\n  digest.ha2 = md5(req.method + ':' + auth.uri);\n  digest.response = md5([\n    digest.ha1,\n    auth.nonce, auth.nc, auth.cnonce, auth.qop,\n    digest.ha2\n  ].join(':'));\n\n  if (auth.response !== digest.response) { authenticate(res); return; }\n  res.end('You made it!');\n\n}).listen(8080);\n\n```", "```js\nvar users = {\n              'dave' : {password : 'digestthis!'},\n              'bob' : {password : 'MyNamesBob:-D'},\n            },\n  realm = \"Node Cookbook\",\n  opaque;\n\n```", "```js\nffunction authenticate(res, username) {\n  var uRealm = realm, uOpaque = opaque;\n  if (username) {\n    uRealm = users[username].uRealm;\n    uOpaque = users[username].uOpaque;\n  }\n  res.writeHead(401, {'WWW-Authenticate' :\n     'Digest realm=\"' + uRealm + '\"'\n    + ',qop=\"auth\",nonce=\"' + Math.random() + '\"'\n    + ',opaque=\"' + uOpaque + '\"'});\n\n  res.end('Authorization required.');\n}\n\n```", "```js\n  //don't waste resources generating MD5 if username is wrong\n  if (auth.username !== username) { authenticate(res); return; }\n\n```", "```js\n  //don't waste resources generating MD5 if username is wrong\n  if (!users[auth.username]) { authenticate(res); return; }\n\n  if (req.url === '/logout') {\n    users[auth.username].uRealm = realm + ' [' + Math.random() + ']';\n    users[auth.username].uOpaque = md5(users[auth.username].uRealm);\n    users[auth.username].forceLogOut = true;\n    res.writeHead(302, {'Location' : '/'});\n    res.end();\n    return;\n  }\n\n  if (users[auth.username].forceLogOut) {\n    delete users[auth.username].forceLogOut;\n    authenticate(res, auth.username);\n  }\n\n```", "```js\n  digest.ha1 = md5(auth.username + ':'\n    + (users[auth.username].uRealm || realm) + ':'\n    + users[auth.username].password);\n\n```", "```js\nif (auth.response !== digest.response) {\n    users[auth.username].uRealm = realm + ' [' + Math.random() + ']';\n    users[auth.username].uOpaque = md5(users[auth.username].uRealm);\n    authenticate(res, (users[auth.username].uRealm && auth.username));\n    return;\n  }\n  res.writeHead(200, {'Content-type':'text/html'});\n  res.end('You made it! <br> <a href=\"logout\"> [ logout ] </a>');\n\n```", "```js\nopenssl req -new -newkey rsa:1024 -nodes -subj '/O=Node Cookbook' -keyout key.pem -out csr.pem && openssl x509 -req -in csr.pem -signkey key.pem -out cert.pem \n\n```", "```js\nvar https = require('https');\nvar fs = require('fs');\n\nvar opts = {key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')};\n\nhttps.createServer(opts, function (req, res) {\n  res.end('secured!');\n}).listen(4443); //443 for prod\n\n```", "```js\nvar express = require('express'),\n  fs = require('fs');\n\nvar opts = {key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')};\n\nvar app = express.createServer(opts).listen(8080);\n\napp.get('/', function (req, res) {\n  res.send('secured!');\n});\n\n```", "```js\nhttps.createServer(function (req, res) {\n\n```", "```js\nvar opts = {key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')};\n\nhttps.createServer(opts, function (req, res) {\n\n```", "```js\nsudo mongod --dbpath [PATH TO DB] \n\n```", "```js\nvar express = require('express')\n  , routes = require('./routes')\n    , fs = require('fs');\n\nvar opts = {key: fs.readFileSync('key.pem'),\n  cert: fs.readFileSync('cert.pem')};\n\nvar app = module.exports = express.createServer(opts);\n\n```", "```js\napp.configure(function(){\n  app.set('views', __dirname + '/views');\n  app.set('view engine', 'jade');\n\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n\n  app.use(express.cookieParser()); \n  app.use(express.session({secret: 'kooBkooCedoN'}));\n\n  app.use(express.csrf());\n//rest of configure callback\n\n```", "```js\napp.dynamicHelpers({ //Express 3.x.x would use app.locals.use instead\n  user: function (req, res) { //see Chapter 6 for details. \n    return req.session.user;\n  },\n  flash: function (req, res) {\n    return req.flash();\n  },\n  _csrf: function (req) {\n    return req.session._csrf;\n  }\n});\n\n```", "```js\ninput(type=\"hidden\", name=\"_csrf\", value=_csrf);\n\n```", "```js\n//prior login jade code above\nif user\n  form(method='post')\n    input(name=\"_method\", type=\"hidden\", value=\"DELETE\")\n    include csrf\n    p Hello #{user.name}!\n      a(href='javascript:', onClick='forms[0].submit()') [logout]\n\n  include admin\n  include ../../views/profiles\n\nelse\n  p Please log in\n  form(method=\"post\")\n    include csrf\n    fieldset\n      legend Login\n//rest of login.jade\n\n```", "```js\nfields = ['Name', 'Irc', 'Twitter', 'Github', 'Location', 'Description'];\nform#addfrm(method='post', action='/admin/add')\n  include csrf\n  fieldset\n    legend Add\n//rest of addfrm.jade\n\n```", "```js\nexports.delprof = function (req, res) {\n  if (req.query._csrf !== req.session._csrf) {\n    res.send(403);\n    return;\n  };\n    profiles.del(req.query.id, function (err) {\n      if (err) { console.log(err); }\n        profiles.pull(req.query.p, function (err, profiles) {\n          req.app.helpers({profiles: profiles});\n          res.redirect(req.header('Referrer') || '/');\n        });\n    });\n\n}\n\n```", "```js\nmixin del(id)\n  td\n    a.del(href='/admin/del?id=#{id}&p=#{page}&_csrf=#{_csrf}') \n      &#10754;\n//rest of admin.jade\n\n```", "```js\n  app.set('view options', {compiler: require('./customJadeCompiler')});\n\n```", "```js\nvar jade = require('jade');\nvar util = require('util');\n\n//inherit from Jades Compiler\nvar CompileWithCsrf = function (node, options) {\n  jade.Compiler.call(this, node, options);\n};\n\n```", "```js\n//inherit from the prototype\nutil.inherits(CompileWithCsrf, jade.Compiler);\n\n```", "```js\nCompileWithCsrf.prototype.visitTag = function (tag) {\n\n   if (tag.name === 'form' && tag.getAttribute('method').match(/post/i)) {\n\n    var csrfInput = new jade.nodes.Tag('input')\n      .setAttribute('type', '\"hidden\"')\n      .setAttribute('name', '\"csrf\"')\n      .setAttribute('value', '_csrf');\n\n    tag.block.push(csrfInput);\n\n  }\n  jade.Compiler.prototype.visitTag.call(this, tag);\n};\n\n```", "```js\nmodule.exports = CompileWithCsrf;\n\n```", "```js\nCompileWithCsrf.prototype = new jade.Compiler();\n\n```", "```js\nCompileWithCsrf = Object.create(jade.Compiler);\n\n```", "```js\nCompileWithCsrf.prototype.__proto__ = jade.Compiler.prototype;\n\n```", "```js\na (href=username) !{username}\n\n```", "```js\n<script>alert('This is where you get hacked!')</script>\n\n```", "```js\n&lt;script&gt;alert('This is where you get hacked!')&lt;/script&gt;\n\n```", "```js\n<a href=profile>some text</a>\n\n```", "```js\n<a href=profile onClick=javascript:alert('gotcha')>some text</a>\n\n```", "```js\na (href=username) !{username}\n\n```", "```js\n<a href=\"javascript:alert('oh oh!')\"> javascript:alert('oh oh!') </a>\n\n```"]