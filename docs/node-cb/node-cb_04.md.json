["```js\nvar data = [['a','b','c','d','e','f','g'], ['h','i','j','k','l','m','n']];\nvar csv = data.join(\"\\r\\n\");  /* renders:  a,b,c,d,e,f,g \n                                                             h,i,j,k,l,m,n   */\n\n```", "```js\nnpm install ya-csv \n\n```", "```js\nvar csv = require('ya-csv'); \nvar writer = csv.createCsvFileWriter('data.csv'); \n\nvar data = [['a','b','c','d','e','f','g'], ['h','i','j','k','l','m','n']]; \n\ndata.forEach(function(rec) { \n  writer.writeRecord(rec); \n});\n\n```", "```js\n\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\n\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"\n\n```", "```js\nvar writer = csv.createCsvFileWriter('custom_data.csv', { \n    'separator': '~', \n    'quote': '|', \n    'escape': '|' \n});\n\n```", "```js\nvar data = [['a','b','c','d','e|','f','g'], ['h','i','j','k','l','m','n']];\n\n```", "```js\n|a|~|b|~|c|~|d|~|e|||~|f|~|g|\n|h|~|i|~|j|~|k|~|l|~|m|~|n|\n\n```", "```js\nvar csv = require('ya-csv'); \nvar reader = csv.createCsvFileReader('data.csv'); \nvar data = []; \n\nreader.on('data', function(rec) { \n  data.push(rec); \n}).on('end', function() { \n  console.log(data); \n}); \n\n```", "```js\nvar reader = csv.createCsvFileReader('custom_data.csv', { \n    'separator': '~', \n    'quote': '|', \n    'escape': '|' \n});\n\n```", "```js\nvar csv = require('ya-csv'); \nvar http = require('http'); \n\nhttp.createServer(function (request, response) { \n     response.write('['); \n      csv.createCsvFileReader('big_data.csv') \n      .on('data', function(data) { \n        response.write(((this.parsingStatus.rows > 0) ? ',' : '') + JSON.stringify(data)); \n      }).on('end', function() { \n        response.end(']'); \n      }); \n}).listen(8080);\n\n```", "```js\nnpm install mysql \n\n```", "```js\nwhereis mysql \n\n```", "```js\nps -ef | grep mysqld \n\n```", "```js\nsudo service mysql start \n\n```", "```js\nvar mysql = require('mysql'); \nvar client = mysql.createClient({ \n  user: 'root', \n  password: 'OURPASSWORD' ,\n//debug: true\n});\n\n```", "```js\nclient.query('CREATE DATABASE quotes');\nclient.useDatabase('quotes');\n\n```", "```js\nclient.query('CREATE TABLE quotes.quotes (' + \n             'id INT NOT NULL AUTO_INCREMENT, ' + \n             'author VARCHAR( 128 ) NOT NULL, ' + \n             'quote TEXT NOT NULL, PRIMARY KEY (  id )' + \n             ')');\n\n```", "```js\nvar ignore = [mysql.ERROR_DB_CREATE_EXISTS, \n                      mysql.ERROR_TABLE_EXISTS_ERROR]; \n\nclient.on('error', function (err) { \n  if (ignore.indexOf(err.number) > -1) { return; } \n  throw err; \n}); \n\n```", "```js\nclient.query('INSERT INTO  quotes.quotes (' + \n              'author, quote) ' + \n             'VALUES (\"Bjarne Stroustrup\", \"Proof by analogy is fraud.\");');\n\nclient.end();\n\n```", "```js\nnode quotes.js \"Author Name\" \"Quote Text Here\" \n\n```", "```js\nvar params = {author: process.argv[2], quote: process.argv[3]};\n\n```", "```js\nif (params.author && params.quote) {             \n  client.query('INSERT INTO  quotes.quotes (' + \n                'author, quote) ' + \n                'VALUES (?, ?);', [ params.author, params.quote ]); \n}\nclient.end(); \n\n```", "```js\nif (params.author) { \n  client.query('SELECT *  FROM quotes WHERE ' + \n    'author LIKE ' + client.escape(params.author)) \n    .on('row', function (rec) { \n      console.log('%s: %s \\n', rec.author, rec.quote); \n    }); \n}\nclient.end();\n\n```", "```js\nmongod --dbpath [a folder for the database] \n\n```", "```js\nmongod --fork --logpath [p] --logappend dbpath [p] \n\n```", "```js\nnpm install mongodb \n\n```", "```js\nvar mongo = require('mongodb'); \nvar server = new mongo.Server(\"localhost\", 27017); \nvar client = new mongo.Db('quotes', server);\n\nvar params = {author: process.argv[2], quote: process.argv[3]};\n\n```", "```js\nclient.open(function (err, client) { \n  if (err) { throw err; } \n  var collection = new mongo.Collection(client, 'quotes');\n  client.close();\n});\n\n```", "```js\nclient.open(function (err, client) { \n  if (err) { throw err; } \n\n  var collection = new mongo.Collection(client, 'quotes'); \n\n  if (params.author && params.quote) { \n    collection.insert({author: params.author, quote: params.quote}); \n  }\n\n if (params.author) { \n\n    collection.find({author: params.author}).each(function (err, doc) { \n      if (err) { throw err; } \n      if (doc) { console.log('%s: %s \\n', doc.author, doc.quote); return; } \n      client.close(); \n    }); \n\n    return; \n  }\n\nclient.close();\n\n});\n\n```", "```js\nvar mongo = require('mongodb'); \nvar server = new mongo.Server(\"localhost\", 27017); \nvar client = new mongo.Db('quotes', server); \n\nclient.open(function (err, client) { \n  if (err) { throw err; } \n  var collection = new mongo.Collection(client, 'quotes');  \n  collection.ensureIndex('author', {safe: true}, function (err) { \n    if (err) { throw err; } \n    collection.distinct('author', function (err, result) { \n        if (err) { throw err; } \n        console.log(result.join('\\n')); \n        client.close(); \n      });  \n    }); \n\n});\n\n```", "```js\nvar mongo = require('mongodb'); \nvar server = new mongo.Server(\"localhost\", 27017); \nvar client = new mongo.Db('quotes', server); \nvar params = {id: process.argv[2], voter: process.argv[3]}; \nclient.open(function (err, client) { \n  if (err) { throw err; } \n  var collection = new mongo.Collection(client, 'quotes');  \n\n//vote handling to go here\n\n collection.find().each(function (err, doc) { \n      if (err) { throw err; } \n      if (doc) { console.log(doc._id, doc.quote); return; } \n      client.close(); \n    }); \n});\n\n```", "```js\n  if (params.id) { \n    collection.update({_id : new mongo.ObjectID(params.id)}, \n      {$inc: {votes: 1}}, {safe: true}\n      function (err) { \n        if (err) { throw err; } \n\n        collection.find().sort({votes: -1}).limit(10).each(function (err, doc) { \n          if (err) { throw err; } \n          if (doc) { \n            var votes = (doc.votes) || 0; \n            console.log(doc.author, doc.quote, votes); \n            return; \n          } \n          client.close(); \n        }); \n      }); \n    return; \n  }\n\n```", "```js\nnpm install mongoskin \n\n```", "```js\nvar mongo = require('mongoskin');\nvar client = mongo.db('localhost:27017/quotes');\nvar collection = client.collection('quotes');\nvar params = {author: process.argv[2], quote: process.argv[3]};\n\n```", "```js\nif (params.author && params.quote) { \n  collection.insert({author: params.author, quote: params.quote}); \n} \nif (params.author) { \n  collection.findEach({}, function (err, doc) { \n    if (err) { throw err; } \n    if (doc) { console.log('%s: %s \\n', doc.author, doc.quote); return; } \n    client.close(); \n  }); \n  return; \n} \nclient.close();\n\n```", "```js\nclient.bind('quotes');\n\n```", "```js\nclient.quotes.store(params.author, params.quote);\n\n```", "```js\nvar mongo = require('mongoskin');\nvar client = mongo.db('localhost:27017/quotes');\nvar params = {author: process.argv[2], quote: process.argv[3]};\n\n```", "```js\nclient.bind('quotes', { \n  store: function (author, quote) { \n    if (quote) { this.insert({author: author, quote: quote}); } \n  }, \n  show: function (author, cb) { \n    this.findEach({author: author}, function (err, doc) { \n      if (err) { throw err; } \n      if (doc) { console.log('%s: %s \\n', doc.author, doc.quote); return; } \n      cb(); \n    }); \n  } \n});\n\n```", "```js\nclient.quotes.store(params.author, params.quote); \n\nif (params.author) { \n  client.quotes.show(params.author, function () { \n    client.close(); \n  }); \n  return; \n} \n\nclient.close();\n\n```", "```js\nnpm install cradle@0.6.3 \n\n```", "```js\nvar cradle = require('cradle'); \nvar db = new(cradle.Connection)().database('quotes'); \nvar params = {author: process.argv[2], quote: process.argv[3]};\nfunction errorHandler(err) { \n  if (err) { console.log(err); process.exit(); } \n//checkAndSave function here\n\n```", "```js\ndb.exists(function (err, exists) { \n  errorHandler(err); \n  if (!exists) { db.create(checkAndSave); return; } \n  checkAndSave(); \n});\n\n```", "```js\nfunction checkAndSave(err) { \n  errorHandler(err); \n\n  if (params.author && params.quote) { \n    db.save({author: params.author, quote: params.quote}, errorHandler); \n\n  } \n\n} \n\n```", "```js\ncurl -Is http://localhost:5984/quotes | grep -c \"200 OK\" \n\n```", "```js\ncurl -X PUT http://localhost:5984/quote \n\n```", "```js\nnode quotes.js \"Albert Einstein\" \"Never lose a holy curiosity.\" \n\n```", "```js\n{\"author\": \"Albert Einstein\", \"quote\": \"Never lose a holy curiosity\"}\n\n```", "```js\nfunction checkAndSave(err) { \n  errorHandler(err); \n  if (params.author && params.quote) { \n    db.save({author: params.author, quote: params.quote}, outputQuotes); \n    return; \n  } \n\n  outputQuotes(); \n} \n\n```", "```js\nfunction createQuotesView(err) { \n  errorHandler(err); \n  db.save('_design/quotes', { \n    views: { byAuthor: { map: 'function (doc) { emit(doc.author, doc) }'}} \n  }, outputQuotes); \n}\n\n```", "```js\nfunction outputQuotes(err) { \n  errorHandler(err); \n\n  if (params.author) { \n    db.view('quotes/byAuthor', {key: params.author}, \n    function (err, rowsArray) { \n      if (err && err.error === \"not_found\") { \n        createQuotesView(); \n        return; \n      } \n      errorHandler(err); \n\n      rowsArray.forEach(function (doc) { \n        console.log('%s: %s \\n', doc.author, doc.quote); return; \n      }); \n    }); \n  } \n}\n\n```", "```js\ncurl -X PUT http://localhost:5984/_config/admins/dave -d '\"cookit\"' \n\n```", "```js\ncurl http://localhost:5984/_config/admins \n\n```", "```js\n{\"error\":\"unauthorized\", \"reason\":\"You are not a server admin.\"} \n\n```", "```js\ncurl http://dave:cookit@localhost:5984/_config/admins \n\n```", "```js\n{\"dave\":\"-hashed-42e68653895a4c0a5c67baa3cfb9035d01057b0d,44c62ca1bfd4872b773543872d78e950\"} \n\n```", "```js\nvar db = new (cradle.Connection)({secure:true, \n\t\t\t\t\t\t\t\t\t     auth: { username: 'dave', \n\t\t\t\t\t\t\t\t\t                 password: 'cookit' }})\n\t\t            .database('quotes'); \n\n```", "```js\nvar cradle = require('cradle'); \nvar db = new (cradle.Connection)({auth: \n\t\t\t\t\t\t\t\t\t     { username: 'dave', \n\t\t\t\t\t\t\t\t\t\t  password: 'cookit' }})\n     \t\t            .database('quotes'); \n\n```", "```js\nvar admin_lock = function (newDoc, savedDoc, userCtx) { \n  if (userCtx.roles.indexOf('_admin') === -1) { \n    throw({unauthorized : 'Only for admin users'}); \n  } \n} \n  db.save('_design/_auth', { \n    views: {}, \n    validate_doc_update: admin_lock.toString() \n  }); \n\n```", "```js\nnode database_lockdown.js \n\n```", "```js\ncurl -X PUT https://u:p@localhost:5984/_config/httpd/bind_address -d '\"0.0.0.0\"' \n\n```", "```js\nvar db = new (cradle.Connection)({ auth: { username: 'dave', \n\t\t\t\t\t\t\t\t\t                 password: 'cookit' }})\n\t\t      .database('quotes'); \n\n```", "```js\nvar cradle = require('cradle');\nvar db = new (cradle.Connection)().database('quotes');\n\n```", "```js\ndb.changes().on('response', function (response) {\n\n  response.on('data', function (change) {\n    var changeIsObj = {}.toString.call(change) === '[object Object]';\n    if (change.deleted !changeIsObj) { return; }\n    db.get(change.id, function (err, doc) { \n      if (!doc) {return;}\n      if (doc.author && doc.quote) { \n        console.log('%s: %s \\n', doc.author, doc.quote); \n      } \n    }); \n  });\n\n});\n\n```", "```js\nnode quotes_stream.js \n\n```", "```js\nnode quotes.js \"Yogi Berra\" \"I never said most of the things I said\"\nnode quotes.js \"Woody Allen\" \"I'd call him a sadistic hippophilic necrophile, but that would be beating a dead horse\"\nnode quotes.js \"Oliver Wendell Holmes\" \"Man's mind, once stretched by a new idea, never regains its original dimensions\" \n\n```", "```js\nnpm install redis\n\n```", "```js\nvar redis = require('redis'); \nvar client = redis.createClient(); \nvar params = {author: process.argv[2], quote: process.argv[3]};\n\nclient.on('ready', function () { \n  //quotes insertion and retrieval code to go here...\n});\n\n```", "```js\nif (params.author && params.quote) { \n  var randKey = \"Quotes:\" + (Math.random() * Math.random()) \n                           .toString(16).replace('.', ''); \n\n  client.hmset(randKey, {\"author\": params.author, \n                                        \"quote\": params.quote}); \n\n  client.sadd('Author:' + params.author, randKey); \n}\n\n```", "```js\n  if (params.author) { \n    client.smembers('Author:' + params.author, function (err, keys) { \n      keys.forEach(function (key) { \n        client.hgetall(key, function (err, hash) { \n          console.log('%s: %s \\n', hash.author, hash.quote); \n        }); \n      }); \n      client.quit(); \n    }); \n    return; \n  } \n  client.quit(); \n\n}); // closing brackets of the ready event callback function\n\n```", "```js\nHMSET author \"Steve Jobs\" quote \"Stay hungry, stay foolish.\" \n\n```", "```js\nnpm install hiredis \n\n```", "```js\n//top variables, client.ready...\n\n if (params.author && params.quote) { \n    var randKey = \"Quote:\" + (Math.random() * Math.random()) \n                  .toString(16).replace('.', ''); \n\n    client.multi() \n      .hmset(randKey, {\"author\": params.author, \n                                    \"quote\": params.quote}) \n      .sadd('Author:' + params.author, randKey) \n      .exec(function (err, replies) { \n        if (err) { throw err; }; \n        if (replies[0] == \"OK\") { console.log('Added...\\n'); } \n      }); \n  } \n\n//if params.author, client.smembers, client.quit\n\n```", "```js\n  if (params.author && params.quote) { \n    var randKey = \"Quote:\" + (Math.random() * Math.random()) \n                                               .toString(16).replace('.', '');               \n    client.hmset(randKey, {\"author\": params.author, \n                           \"quote\": params.quote}); \n\n    client.sadd('Author:' + params.author, randKey); \n\n    client.publish(params.author, params.quote); \n\n  }\n\n```", "```js\nvar redis = require('redis');\nvar client = redis.createClient();\n\n```", "```js\nprocess.argv.slice(2).forEach(function (authorChannel, i) { \n\n    client.subscribe(authorChannel, function () { \n      console.log('Subscribing to ' + authorChannel + ' channel'); \n    }); \n\n});\n\n```", "```js\nclient.on('message', function (channel, msg) { \n\tconsole.log(\"\\n%s: %s\", channel, msg); \n});\n\n```", "```js\nnode quotes_subscribe.js \"Sun Tzu\" \"Steve Jobs\" \"Ronald Reagan\" \n\n```", "```js\nnode quotes_publish.js \"Ronald Reagan\" \"One picture is worth 1,000 denials.\"\n\nnode quotes_publish.js \"Sun Tzu\" \"Know thy self, know thy enemy. A thousand battles, a thousand victories.\"\n\nnode quotes_publish.js \"David Clements\" \"Redis is a speed freak's dream\"\n\nnode quotes_publish.js \"Steve Jobs\" \"Design is not just what it looks like and feels like. Design is how it works.\" \n\n```", "```js\n./redis-server ../redis.conf \n\n```", "```js\necho \"requirepass ourpassword\" | ./redis-server - \n\n```", "```js\nclient.config('SET', 'requirepass', 'ourpassword');\n\n```", "```js\nclient.auth('ourpassword');\n\n```", "```js\nbind 127.0.0.1\n\n```", "```js\n./redis-server ../redis.conf \n\n```", "```js\necho \"bind 127.0.0.1\" | ./redis-server - \n\n```", "```js\nclient.config('set', 'bind', '127.0.0.1');\n\n```"]