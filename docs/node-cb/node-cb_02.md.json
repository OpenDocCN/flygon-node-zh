["```js\n<form method=post>\n  <input type=text name=userinput1><br>\n  <input type=text name=userinput2><br>\n  <input type=submit>\n</form>\n\n```", "```js\nvar http = require('http');\nvar form = require('fs').readFileSync('form.html');\nhttp.createServer(function (request, response) {\n  if (request.method === \"GET\") {\n    response.writeHead(200, {'Content-Type': 'text/html'});\n    response.end(form);\n  }\n}).listen(8080);\n\n```", "```js\n  if (request.method === \"POST\") {\n  \tvar postData = '';\nrequest.on('data', function (chunk) {\n    \t\tpostData += chunk;\n \t}).on('end', function() {\n \t   console.log('User Posted:\\n' + postData);\n  \t   response.end('You Posted:\\n' + postData);\n});\n  }\n\n```", "```js\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\nvar form = require('fs').readFileSync('form.html');\n\nhttp.createServer(function (request, response) {\n  if (request.method === \"POST\") {\n    var postData = '';\n    request.on('data', function (chunk) {\n      postData += chunk;\n    }).on('end', function () {\n      var postDataObject = querystring.parse(postData);\n      console.log('User Posted:\\n', postData);\n      response.end('You Posted:\\n' + util.inspect(postDataObject));\n    });\n\n  }\n  if (request.method === \"GET\") {\n    response.writeHead(200, {'Content-Type': 'text/html'});\n    response.end(form);\n  }\n}).listen(8080);\n\n```", "```js\nvar http = require('http');\nvar querystring = require('querystring');\nvar util = require('util');\nvar form = require('fs').readFileSync('form.html');\nvar maxData = 2 * 1024 * 1024; //2mb\nhttp.createServer(function (request, response) {\n  if (request.method === \"POST\") {\n    var postData = '';\n    request.on('data', function (chunk) {\n      postData += chunk;\n      if (postData.length > maxData) {\n        postData = '';\n        this.pause();\n        response.writeHead(413); // Request Entity Too Large\n        response.end('Too large');\n      }\n    }).on('end', function () {\n      if (!postData) { response.end(); return; } //prevents empty post requests from crashing the server\n      var postDataObject = querystring.parse(postData);\n\n      console.log('User Posted:\\n', postData);\n\n      response.end('You Posted:\\n' + util.inspect(postDataObject));\n\n    });\n//rest of our code....\n\n```", "```js\nnpm install connect \n\n```", "```js\nvar connect = require('connect');\nvar util = require('util');\nvar form = require('fs').readFileSync('form.html');\nconnect(connect.limit('64kb'), connect.bodyParser(),\n  function (request, response) {\n    if (request.method === \"POST\") {\n      console.log('User Posted:\\n', request.body);\n      response.end('You Posted:\\n' + util.inspect(request.body));\n    }\n    if (request.method === \"GET\") {\n      response.writeHead(200, {'Content-Type': 'text/html'});\n      response.end(form);\n    }\n  }).listen(8080);\n\n```", "```js\nconsole.log(require('connect').bodyParser.toString()); \n\n```", "```js\nnpm install formidable@1.x.x \n\n```", "```js\n<form method=POST enctype=multipart/form-data>\n  <input type=file name=userfile1><br>\n  <input type=file name=userfile2><br>\n  <input type=submit>\n</form>\n\n```", "```js\nvar http = require('http');\nvar formidable = require('formidable');\nvar form = require('fs').readFileSync('form.html');\n\nhttp.createServer(function (request, response) {\n  if (request.method === \"POST\") {\n    var incoming = new formidable.IncomingForm();\n    incoming.uploadDir = 'uploads';\n    incoming.on('file', function (field, file) {\n      if (!file.size) { return; }\n      response.write(file.name + ' received\\n');\n    }).on('end', function () {\n      response.end('All files received');\n    });\n    incoming.parse(request);\n  }\n  if (request.method === \"GET\") {\n    response.writeHead(200, {'Content-Type': 'text/html'});\n    response.end(form);\n  }\n}).listen(8080);\n\n```", "```js\n incoming.on('file', function (field, file) {\n      response.write(file.name + ' received\\n');\n    })\n    .on('field', function (field, value) {\n      response.write(field + ' : ' + value + '\\n');\n    })\n    .on('end', function () {\n      response.end('All files received');\n    });\n\n```", "```js\n  if (request.method === \"POST\") {\n  var incoming = new formidable.IncomingForm();\n  incoming.uploadDir = 'uploads';\n   incoming.on('fileBegin', function (field, file) {\n    if (file.name){\n      file.path += \"-\" + file.name;\n    } //...rest of the code\n  }).on('file', function (field, file) {\n//...rest of the code\n\n```", "```js\n<form id=frm>\n  <input type=file id=userfile name=userfile><br>\n  <input type=submit>\n</form>\n<script>\n(function () {\n  var userfile = document.getElementById('userfile'),\n    frm = document.getElementById('frm'),\n    file;\n  userfile.addEventListener('change', function () {\n    file = this.files[0];\n  });\n  frm.addEventListener('submit', function (e) {\n    e.preventDefault();\n    if (file) {\n      var xhr = new XMLHttpRequest();\n      xhr.file = file;\n      xhr.open('put', window.location, true);\n      xhr.setRequestHeader(\"x-uploadedfilename\", file.fileName || file.name);\n      xhr.send(file);\n      file = '';\n      frm.reset();\n    }\n  });\n}());\n</script>\n\n```", "```js\nvar http = require('http');\nvar fs = require('fs');\nvar form = fs.readFileSync('put_upload.html');\nhttp.createServer(function (request, response) {\n  if (request.method === \"PUT\") {\n    var fileData = new Buffer(+request.headers['content-length']);\n    var bufferOffset = 0;\n    request.on('data', function(chunk) {\n      chunk.copy(fileData, bufferOffset);\n      bufferOffset += chunk.length;\n    }).on('end', function() {\n        var rand = (Math.random()*Math.random())\n                          .toString(16).replace('.','');\n      var to = 'uploads/' + rand + \"-\" +\n                     request.headers['x-uploadedfilename'];\n      fs.writeFile(to, fileData, function(err) {\n        if (err) { throw err; }\n\t  console.log('Saved file to ' + to);\n        response.end();\n      });\n    });\n  }\n  if (request.method === \"GET\") {\n  response.writeHead(200, {'Content-Type': 'text/html'});\n  response.end(form);\n  }\n}).listen(8080);\n\n```", "```js\nvar http = require('http');\nvar urlOpts = {host: 'www.nodejs.org', path: '/', port: '80'};\nhttp.get(urlOpts, function (response) {\n  response.on('data', function (chunk) {\n    console.log(chunk.toString());\n  });\n});\n\n```", "```js\nnode fetch.js \n\n```", "```js\nvar http = require('http');\nvar url = require('url');\nvar urlOpts = {host: 'www.nodejs.org', path: '/', port: '80'};\nif (process.argv[2]) {\n  if (!process.argv[2].match('http://')) {\n    process.argv[2] = 'http://' + process.argv[2];\n  }\n  urlOpts = url.parse(process.argv[2]);\n}\nhttp.get(urlOpts, function (response) {\n  response.on('data', function (chunk) {\n    console.log(chunk.toString());\n  });\n}).on('error', function (e) {\n  console.log('error:' + e.message);\n});\n\n```", "```js\nnode fetch.js www.google.com \n\n```", "```js\nvar http = require('http');\nvar urlOpts = {host: 'localhost', path: '/', port: '8080', method: 'POST'};\nvar request = http.request(urlOpts, function (response) {\n    response.on('data', function (chunk) {\n      console.log(chunk.toString());\n    });\n  }).on('error', function (e) {\n    console.log('error:' + e.stack);\n  });\nprocess.argv.forEach(function (postItem, index) {\n  if (index > 1) { request.write(postItem + '\\n'); }\n});\nrequest.end();\n\n```", "```js\nnode post.js foo=bar&x=y&anotherfield=anothervalue \n\n```", "```js\nvar http = require('http');\nvar fs = require('fs');\nvar urlOpts = { host: 'localhost', path: '/', port: '8080', method: 'POST'};\nvar boundary = Date.now();\nurlOpts.headers = {\n  'Content-Type': 'multipart/form-data; boundary=\"' + boundary + '\"'\n};\n\n```", "```js\nboundary = \"--\" + boundary;\nvar request = http.request(urlOpts, function (response) {\n    response.on('data', function (chunk) {\n      console.log(chunk.toString());\n    });\n  }).on('error', function (e) {\n    console.log('error:' + e.stack);\n  });\n\n```", "```js\n(function multipartAssembler(files) {\n  var f = files.shift(), fSize = fs.statSync(f).size;\n  fs.createReadStream(f)\n    .on('end', function () {\n      if (files.length) { multipartAssembler(files); return; //early finish}\n\t//any code placed here wont execute until no files are left\n\t//due to early return from function.\n    });\n}(process.argv.splice(2, process.argv.length)));\n\n```", "```js\nnode upload.js file1 file2 fileN \n\n```", "```js\n(function multipartAssembler(files) {\n  var f = files.shift(), fSize = fs.statSync(f).size,\n\tprogress = 0;\n  fs.createReadStream(f)\n    .once('open', function () {\n      request.write(boundary + '\\r\\n' +\n                   'Content-Disposition: ' +\n                   'form-data; name=\"userfile\"; filename=\"' + f + '\"\\r\\n' +\n                   'Content-Type: application/octet-stream\\r\\n' +\n                   'Content-Transfer-Encoding: binary\\r\\n\\r\\n');\n    }).on('data', function(chunk) {\n      request.write(chunk);\n      progress += chunk.length;\n      console.log(f + ': ' + Math.round((progress / fSize) * 10000)/100 + '%');\n    }).on('end', function () {\n      if (files.length) { multipartAssembler(files); return; //early finish }\n      request.end('\\r\\n' + boundary + '--\\r\\n\\r\\n\\r\\n');    \n    });\n}(process.argv.splice(2, process.argv.length)));\n\n```", "```js\ndd if=/dev/zero of=50meg count=50 bs=1048576 \n\n```", "```js\nvar http = require('http');\nvar fs = require('fs');\n\nvar options = {}\noptions.file = '50meg';\noptions.fileSize = fs.statSync(options.file).size;\noptions.kbps = 32;\n\n```", "```js\nhttp.createServer(function(request, response) {\n  var download = Object.create(options);\n  download.chunks = new Buffer(download.fileSize);\n  download.bufferOffset = 0;\n\n  response.writeHeader(200, {'Content-Length': options.fileSize});\n\n   fs.createReadStream(options.file)\n    .on('data', function(chunk) {  \n      chunk.copy(download.chunks,download.bufferOffset);\n      download.bufferOffset += chunk.length;\n    })\n    .once('open', function() {\n    \t //this is where the throttling will happen\n     });    \n}).listen(8080);\n\n```", "```js\nfunction throttle(download, cb) {\n  var chunkOutSize = download.kbps * 1024,\n      timer = 0;\n\n  (function loop(bytesSent) {\n    var remainingOffset;\n    if (!download.aborted) {\n      setTimeout(function () {      \n        var bytesOut = bytesSent + chunkOutSize;\n\n        if (download.bufferOffset > bytesOut) {\n          timer = 1000;         \n          cb(download.chunks.slice(bytesSent,bytesOut));\n          loop(bytesOut);\n          return;\n        }\n\n        if (bytesOut >= download.chunks.length) {\n            remainingOffset = download.chunks.length - bytesSent;\n            cb(download.chunks.slice(remainingOffset,bytesSent));\n            return;\n        }\n\n          loop(bytesSent); //continue to loop, wait for enough data\n      },timer);\n    }  \n   }(0));\n\n   return function () { //return a function to handle an abort scenario\n    download.aborted = true;\n   };\n\n}\n\n```", "```js\n//...previous code\n  fs.createReadStream(options.file)\n      .on('data', function (chunk) {  \n        chunk.copy(download.chunks,download.bufferOffset);\n        download.bufferOffset += chunk.length;\n      })\n      .once('open', function () {\n         var handleAbort = throttle(download, function (send) {\n                       \t\t\t      response.write(send);\n                           \t\t    });\n\n         request.on('close', function () {\n            handleAbort();\n         }); \n       });    \n\n}).listen(8080);\n\n```", "```js\nRange: bytes=512-1024\n\n```", "```js\nContent-Range: bytes 512-1024/1024\n\n```", "```js\n//requires, options object, throttle function, create server etc...\ndownload.readStreamOptions = {};\ndownload.headers = {'Content-Length': download.fileSize};\ndownload.statusCode = 200;\n  if (request.headers.range) {\n    download.start = request.headers.range.replace('bytes=','').split('-')[0];\n    download.readStreamOptions = {start: +download.start};\n    download.headers['Content-Range'] = \"bytes \" + download.start + \"-\" + \t\t\t\t\t\t\t\t\t\t\t     download.fileSize + \"/\" + \t\t\t\t\t\t\t\t\t\t\t\t     download.fileSize;\n    download.statusCode = 206; //partial content\n  }\n  response.writeHeader(download.statusCode, download.headers);\n  fs.createReadStream(download.file, download.readStreamOptions)\n//...rest of the code....\n\n```"]