["```js\nsudo npm -g install hotnode\nhotnode server.js\n\n```", "```js\n\tvar http = require('http');\n\thttp.createServer(function (request, response) {\n\tresponse.writeHead(200, {'Content-Type': 'text/html'});\n\tresponse.end('Woohoo!');\n\t}).listen(8080);\n\n```", "```js\n\tvar http = require('http');\n\tvar path = require('path'); \n\thttp.createServer(function (request, response) {\n\tvar lookup = path.basename(decodeURI(request.url)); \n\n```", "```js\n\tvar pages = [\n\t  {route: '', output: 'Woohoo!'},\n\t  {route: 'about', output: 'A simple routing with Node example'},\n\t  {route: 'another page', output: function() {return 'Here\\'s '+this.route;}},\n\t];\n\n```", "```js\n\thttp.createServer(function (request, response) {\n\t  var lookup=path.basename(decodeURI(request.url));\n\t  pages.forEach(function(page) {\n\t    if (page.route === lookup) {\n\t      response.writeHead(200, {'Content-Type': 'text/html'});\n\t      response.end(typeof page.output === 'function' \n\t                   ? page.output() : page.output);\n\t    }\n\t  });\n\t  if (!response.finished) {\n\t     response.writeHead(404);\n\t     response.end('Page Not Found!');\n\t  }\n\t}).listen(8080);\n\n```", "```js\n\tvar http=require('http');\n\tvar pages = [\n\t  {route: '/', output: 'Woohoo!'},\n\t  {route: '/about/this', output: 'Multilevel routing with Node'},\n\t  {route: '/about/node', output: 'Evented I/O for V8 JavaScript.'},\n\t  {route: '/another page', output: function () {return 'Here\\'s ' + this.route; }}\n\t];\n\thttp.createServer(function (request, response) {\n\t  var lookup = decodeURI(request.url);\n\n```", "```js\n\t{route: 'about', childRoutes: [\n\t  {route: 'node', output: 'Evented I/O for V8 Javascript'},\n\t  {route: 'this', output: 'Complex Multilevel Example'}\n\t]}\n\n```", "```js\n\tvar http = require('http');\n\tvar url = require('url');\n\tvar pages = [\n\t\t{id: '1', route: '', output: 'Woohoo!'},\n\t\t{id: '2', route: 'about', output: 'A simple routing with Node example'},\n\t\t{id: '3', route: 'another page', output: function () {return 'Here\\'s ' + this.route; }},\n\t];\n\thttp.createServer(function (request, response) {\n\t\tvar id = url.parse(decodeURI(request.url), true).query.id;\n\tif (id) {\n\t\tpages.forEach(function (page) {\n\t\t\tif (page.id === id) {\n\t\t\t\tresponse.writeHead(200, {'Content-Type': 'text/html'});\n\t\t\t\tresponse.end(typeof page.output === 'function'\n\t\t\t\t\t? page.output() : page.output);\n\t\t\t}\n\t\t});\n\t}\n\tif (!response.finished) {\n\t\tresponse.writeHead(404);\n\t\tresponse.end('Page Not Found');\n\t}\n}).listen(8080);\n\n```", "```js\n\t<html>\n\t<head>\n\t<title>Yay Node!</title>\n\t<link rel=stylesheet href=styles.css type=text/css>\n\t<script src=script.js type=text/javascript></script>\n\t</head>\n\t<body>\n\t<span id=yay>Yay!</span>\n\t</body>\n\t</html>\n\n```", "```js\nwindow.onload=function() {alert('Yay Node!');};\n\n```", "```js\n#yay {font-size:5em;background:blue;color:yellow;padding:0.5em}\n\n```", "```js\n\tvar http = require('http');\n\tvar path = require('path');\n\tvar fs = require('fs');\n\thttp.createServer(function (request, response) {\n\t  var lookup = path.basename(decodeURI(request.url)) || 'index.html',\n\t    f = 'content/' + lookup;\n\t  path.exists(f, function (exists) {\n\t    console.log(exists ? lookup + \" is there\" : lookup + \" doesn't exist\");\n\t  });\n\t}).listen(8080);\n\n```", "```js\n hotnode server.js \n\n```", "```js\n\tvar mimeTypes = {\n\t  '.js' : 'text/javascript',\n\t  '.html': 'text/html',\n\t  '.css' : 'text/css'\n\t};\n\n```", "```js\n\t//requires variables, mimeType object...\n\thttp.createServer(function (request, response) {\n\t\tvar lookup = path.basename(decodeURI(request.url)) || 'index.html',\n\t\t\tf = 'content/' + lookup;\n\t\tfs.exists(f, function (exists) {\n\t\t\tif (exists) {\n\t\t\t\tfs.readFile(f, function (err, data) {\n\t\t\t\t\tif (err) { response.writeHead(500);\n\t\t\t\t\t\tresponse.end('Server Error!'); return; }\n\t\t\t\t\tvar headers = {'Content-type': mimeTypes[path. extname(lookup)]};\n\t\t\t\t\tresponse.writeHead(200, headers);\n\t\t\t\t\tresponse.end(data);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresponse.writeHead(404); //no such file found!\n\t\t\tresponse.end();\n\t\t});\n}).listen(8080);\n\n```", "```js\n\t//http.createServer, inside path.exists:\n\tif (exists) {\n\t  fs.readFile(f, function(err, data) {\n\t    var headers={'Content-type': mimeTypes[path.extname(lookup)]};\n\t    response.writeHead(200, headers);\n\t    response.end(data);\n\t  });\n\t return;\n\t}\n\n```", "```js\n\t//requires variables, mimeType object...\n\t//http.createServer,  path exists, inside if(exists):  \n\tfs.readFile(f, function(err, data) {\n\t    if (err) {response.writeHead(500); response.end('Server Error!');  return; }\n\t    var headers = {'Content-type': mimeTypes[path.extname(lookup)]};\n\t    response.writeHead(200, headers);\n\t    response.end(data);            \n\t  });\n\t return;\n\t}\n\n```", "```js\nchmod -r index.html \n\n```", "```js\nchmod +r index.html \n\n```", "```js\n\tif (request.url === '/favicon.ico') {\n\t  response.end();\n\t  return;\n\t}\n\n```", "```js\n\tvar http = require('http');\n\tvar path = require('path');\n\tvar fs = require('fs');  \n\n\tvar mimeTypes = {\n\t  '.js' : 'text/javascript',\n\t  '.html': 'text/html',\n\t  '.css' : 'text/css'\n\t} ;\n\n\thttp.createServer(function (request, response) {\n\t  var lookup = path.basename(decodeURI(request.url)) || 'index.html';\n\t  var f = 'content/'+lookup;\n\t  path.exists(f, function (exists) {\n\t    if (exists) {\n\t      fs.readFile(f, function(err,data) {\n\t      if (err) {response.writeHead(500); response.end('Server Error!'); return; }\n\t      var headers = {'Content-type': mimeTypes[path.extname(lookup)]};\n\t        response.writeHead(200, headers);\n\t        response.end(data);            \n\t      });\n\t      return;\n\t    }\n\t      response.writeHead(404); //no such file found!\n\t      response.end('Page Not Found!');\n\t  });\n\n```", "```js\n\tvar cache = {};\n\tfunction cacheAndDeliver(f, cb) {\n\t  if (!cache[f]) {\n\t    fs.readFile(f, function(err, data) {\n\t      if (!err) {\n\t        cache[f] = {content: data} ;\n\t      }     \n\t      cb(err, data);\n\t    });\n\t    return;\n\t  }\n\t  console.log('loading ' + f + ' from cache');\n\t  cb(null, cache[f].content);\n\t}\n\t//http.createServer \u2026..\n\n```", "```js\n\t//...inside http.createServer:\n\tpath.exists(f, function (exists) {\n\t    if (exists) {\n\t      cacheAndDeliver(f, function(err, data) {\n\t        if (err) {response.writeHead(500); response.end('Server Error!'); return; }\n\t        var headers = {'Content-type': mimeTypes[path.extname(f)]};\n\t        response.writeHead(200, headers);\n\t        response.end(data);      \n\t      });\n\t  return;\n\t    }\n\t//rest of path exists code (404 handling)...\n\n```", "```js\n loading content/index.html from cache\n\tloading content/styles.css from cache\n\tloading content/script.js from cache\n\n```", "```js\n\tcache[f] = {content: data,\n\t                      timestamp: Date.now() //store a Unix time stamp\n\t                     };\n\n```", "```js\n\t//requires and mimeType object....\n\tvar cache = {};\n\tfunction cacheAndDeliver(f, cb) {\n\t\tfs.stat(f, function (err, stats) {\n\t\t\tvar lastChanged = Date.parse(stats.ctime),\n\t\t\t\tisUpdated = (cache[f]) && lastChanged > cache[f].timestamp;\n\t\t\tif (!cache[f] || isUpdated) {\n\t\t\t\tfs.readFile(f, function (err, data) {\n\t\t\t\t\tconsole.log('loading ' + f + ' from file');\n\t\t\t\t\t//rest of cacheAndDeliver\n\t\t}); //end of fs.stat\n\t} // end of cacheAndDeliver\n\n```", "```js\n\t//requires, mime types, createServer, lookup and f vars...\n\tpath.exists(f, function (exists) {\n\t    if (exists) {  \n\t      var headers = {'Content-type': mimeTypes[path.extname(f)]};\n\t      if (cache[f]) {\n\t        response.writeHead(200, headers);              \n\t        response.end(cache[f].content);  \n\t        return;\n\t      } //...rest of server code...\n\n```", "```js\nvar s = fs.createReadStream(f);\n\n```", "```js\nvar s = fs.createReadStream(f).on('open', function () {\n//do stuff when the readStream opens\n});\n\n```", "```js\nvar s = fs.createReadStream(f).once('open', function () {\n//do stuff when the readStream opens\n});\n\n```", "```js\n\tvar s = fs.createReadStream(f).once('open', function () {\n\t//do stuff when the readStream opens\n\t}).once('error', function (e) {\n\t    console.log(e);\n\t    response.writeHead(500);\n\t    response.end('Server Error!');\n\t});\n\n```", "```js\n\tvar s = fs.createReadStream(f).once('open', function () {\n\t    response.writeHead(200, headers);      \n\t    this.pipe(response);\n\t}).once('error', function (e) {\n\t    console.log(e);\n\t    response.writeHead(500);\n\t    response.end('Server Error!');\n\t});\n\n```", "```js\n\t fs.stat(f, function(err, stats) {\n\t\t        var bufferOffset = 0;\n\t      \t  cache[f] = {content: new Buffer(stats.size)};\n\t\t       s.on('data', function (chunk) {\n\t             chunk.copy(cache[f].content, bufferOffset);\n\t             bufferOffset += chunk.length;\n\t        });\n\t      }); \n\n```", "```js\n\tvar cache = {\n\t  store: {},\n\t  maxSize : 26214400, //(bytes) 25mb\n\t}\n\n```", "```js\n\t fs.stat(f, function (err, stats) {\n\t        if (stats.size < cache.maxSize) {\n\t          var bufferOffset = 0;\n\t          cache.store[f] = {content: new Buffer(stats.size),\n\t                                     timestamp: Date.now() };\n\t          s.on('data', function (data) {\n\t            data.copy(cache.store[f].content, bufferOffset);\n\t            bufferOffset += data.length;\n\t          });\n\t        }  \n\t      });\n\n```", "```js\n\tvar cache = {\n\t  store: {},\n\t  maxSize: 26214400, //(bytes) 25mb\n\t  maxAge: 5400 * 1000, //(ms) 1 and a half hours\n\t  clean: function(now) {\n\t      var that = this;\n\t      Object.keys(this.store).forEach(function (file) {\n\t        if (now > that.store[file].timestamp + that.maxAge) {\n\t          delete that.store[file];      \n\t        }\n\t      });\n\t  }\n\t};\n\n```", "```js\n\t//all of our code prior\n\t  cache.clean(Date.now());\n\t}).listen(8080); //end of the http.createServer\n\n```", "```js\n\tvar cache = {\n\t  store: {},\n\t  maxSize: 26214400, //(bytes) 25mb\n\t  maxAge : 5400 * 1000, //(ms) 1 and a half hours\n\t   cleanAfter: 7200 * 1000,//(ms) two hours\n\t  cleanedAt: 0, //to be set dynamically\n\t  clean: function (now) {\n\t     if (now - this.cleanAfter > this.cleanedAt) {\n\t      this.cleanedAt = now;\n\t      that = this;\n\t        Object.keys(this.store).forEach(function (file) {\n\t          if (now > that.store[file].timestamp + that.maxAge) {\n\t            delete that.store[file];      \n\t          }\n\t        });\n\t    }\n\t  }\n\t};\n\n```", "```js\n\t<link rel=stylesheet type=text/css href=subcontent/styles.css>\n\t<script src=subcontent/script.js type=text/javascript></script>\n\n```", "```js\n\tvar http = require('http'); var path = require('path'); \n\tvar url = require('url');\n\tvar fs = require('fs'); \n\thttp.createServer(function (request, response) {\n\t  var lookup = url.parse(decodeURI(request.url)).pathname;\n\t  lookup = (lookup === \"/\") ? '/index.html' : lookup;\n\t  var f = 'content' + lookup;\n\t  console.log(f);\n\t  fs.readFile(f, function (err, data) {\n\t    response.end(data);\n\t  });\n\t}).listen(8080);\n\n```", "```js\ncurl localhost:8080/../insecure_server.js \n\n```", "```js\ncurl localhost:8080/../../../../../../../etc/passwd \n\n```", "```js\n\t//requires section...\n\thttp.createServer(function (request, response) {\n\t  var lookup = url.parse(decodeURI(request.url)).pathname;\n\t  lookup = (lookup === \"/\") ? '/index.html-serve' : lookup + '-serve';\n\t  var f = 'content-pseudosafe' + lookup;\n\n```", "```js\n\t//requires, create server etc  \n\tpath.exists(f, function (exists) {\n\t    if (!exists) {  \n\t      response.writeHead(404);\n\t      response.end('Page Not Found!');\n\t      return;\n\t    }\n\t//read file etc\n\n```", "```js\ncurl -i localhost:8080/../insecure_server.js \n\n```", "```js\ncurl localhost:8080/../insecure_server.js%00/index.html \n\n```", "```js\n\thttp.createServer(function (request, response) {\n\t  var lookup = url.parse(decodeURI(request.url)).pathname;\n\t  lookup = path.normalize(lookup);\n\t  lookup = (lookup === \"/\") ? '/index.html' : lookup;\n\t  var f = 'content' + lookup\n\n```", "```js\n\tvar whitelist = [\n\t  '/index.html',\n\t  '/subcontent/styles.css',\n\t  '/subcontent/script.js'\n\t];\n\n```", "```js\n\tif (whitelist.indexOf(lookup) === -1) {\n\t  response.writeHead(404);\n\t  response.end('Page Not Found!');\n\t  return;\n\t}\n\n```", "```js\ncurl -i localhost:8080/non-whitelisted.html \n\n```", "```js\n\tvar static = require('node-static');\n\tvar fileServer = new static.Server('./content');\n\trequire('http').createServer(function (request, response) {\n\t  request.addListener('end', function () {\n\t    fileServer.serve(request, response);\n\t  });\n\t}).listen(8080);\n\n```"]