["```js\nmodule.exports = {\n  ryan : {\n           name: \"Ryan Dahl\",\n           irc:'ryah',\n           twitter:'ryah',\n           github:'ry',\n           location:'San Francisco, USA',\n           description: \"Creator of node.js\"\n          },\n  isaac : {\n            name: \"Isaac Schlueter\",\n            irc:'isaacs',\n            twitter:'izs',\n            github:'isaacs',\n            location:'San Francisco, USA',\n            description: \"Author of npm, core contributor\"\n           },\n  bert : {\n           name: \"Bert Belder\",\n           irc:'piscisaureus',\n           twitter:'piscisaureus',\n           github:'piscisaureus',\n           location:'Netherlands',\n           description: \"Windows support, overall contributor\"\n          },\n  tj : {\n          name: \"TJ Holowaychuk\",\n          irc:'tjholowaychuk',\n          twitter:'tjholowaychuk',\n          github:'visionmedia',\n          location:'Victoria, BC, Canada',\n          description: \"Author of express, jade and other popular modules\"\n          },\n  felix : {\n          name: \"Felix Geisendorfer\",\n          irc:'felixge',\n          twitter:'felixge',\n          github:'felixge',\n          location:'Berlin, Germany',\n          description: \"Author of formidable, active core developer\"\n          }\n};\n\n```", "```js\nvar profiles = require('./profiles'); // note the .js suffix is optional\n\n```", "```js\nprofiles = JSON.stringify(profiles).replace(/name/g, 'fullname');\n\n```", "```js\nprofiles = JSON.parse(profiles);\nprofiles.felix.fullname = \"Felix Geisend\u00f6rfer\";\nconsole.log(profiles.felix);\n\n```", "```js\n{ fullname: 'Felix Geisend\u00f6rfer',\n  irc: 'felixge',\n  twitter: 'felixge',\n  github: 'felixge',\n  location: 'Berlin, Germany',\n  description: 'Author of formidable, active core developer' }\n\n```", "```js\n<html>\n<head>\n<script>\n  var who = 'ryan';\n  function cb(o) {\n    alert(o.name + ' : ' + o.description);\n  }\n  var s = document.createElement('script');\n  s.src = 'http://localhost:8080/?callback=cb&who=' + who;\n  document.getElementsByTagName(\"head\")[0].appendChild(s);\n</script>\n</head>\n</html>\n\n```", "```js\nvar http = require('http');\nvar url = require('url');\nvar profiles = require('./profiles');\n\nhttp.createServer(function (request, response) {\n  var urlObj = url.parse(request.url, true), \n    cb = urlObj.query.callback, who = urlObj.query.who,\n    profile;\n\n  if (cb && who) {\n    profile = cb + \"(\" + JSON.stringify(profiles[who]) + \")\";\n    response.end(profile);\n  }\n\n}).listen(8080);\n\n```", "```js\nnpm install xml2js \n\n```", "```js\nvar profiles = require('./profiles');\nvar xml2js = new (require('xml2js')).Parser();\n\n```", "```js\nfunction buildXml(rootObj, rootName) {\n  var xml = \"<?xml version='1.0' encoding='UTF-8'?>\\n\";\n  rootName = rootName || 'xml';\n  xml += \"<\" + rootName + \">\\n\";\n  (function traverse(obj) {\n    Object.keys(obj).forEach(function (key) {\n     var open = \"<\" + key + \">\",\n        close = \"</\" + key + \">\\n\",\n        isTxt = (obj[key]\n          && {}..toString.call(obj[key]) !== \"[object Object]\");\n\n      xml += open;\n\n      if (isTxt) {\n        xml += obj[key];\n        xml += close;\n        return;\n      }\n\n      xml += \"\\n\";\n      traverse(obj[key]);\n      xml += close;\n    });\n  }(rootObj));\n\n  xml += \"</\" + rootName + \">\";\n  return xml;\n}\n\n```", "```js\nprofiles = buildXml(profiles, 'profiles').replace(/name/g, 'fullname');\nconsole.log(profiles); // <-- show me the XML!\n\n```", "```js\nxml2js.parseString(profiles, function (err, obj) {\n  profiles = obj;\n  profiles.felix.fullname = \"Felix Geisend\u00f6rfer\";\n  console.log(profiles.felix);\n});\n\n```", "```js\n<?xml version='1.0' encoding='UTF-8'?>\n<profiles>\n\t<!-- Traverse XML Output Here -->\n</profiles>\n\n```", "```js\n(function traverse(obj) {\n\t// traverse function code here...\n  }(rootObj));  // ? passing in our root object parameter\n\n```", "```js\n  (function traverse(obj) {\n    Object.keys(obj).forEach(function (key) {\n     var open = \"<\" + key + \">\",\n        close = \"</\" + key + \">\\n\",\n        nonObj = (obj[key]  \n          && {}.toString.call(obj[key]) !== \"[object Object]\"),\n        isArray = Array.isArray(obj[key]),\n        isFunc =(typeof obj[key] === \"function\");\n\n      if (isArray) {\n        obj[key].forEach(function (xmlNode) {\n          var childNode = {};\n          childNode[key] = xmlNode;\n          traverse(childNode);\n        });\n        return;\n      }\n\n      xml += open;      \n      if (nonObj) {\n        xml += (isFunc) ? obj[key]() : obj[key];\n        xml += close;\n        return;\n      }\n//rest of traverse function\n\n```", "```js\nmodule.exports = {\n  ryan : {\n           name: \"Ryan Dahl\",\n           irc:\"ryah\",\n           twitter:\"ryah\",\n           github:[\"ry\",\"joyent\"],\n           location:\"San Francisco, USA\",\n           description: \"Creator of node.js\"\n          },\n//...rest of profiles...\n\n```", "```js\nprofiles = buildXml(profiles, 'profiles');\nconsole.log(profiles); // <-- show me the XML!\n\n```", "```js\n<?xml encoding='UTF-8'?>\n<profiles>\n<ryan>\n<name>Ryan Dahl</name>\n<irc>ryah</irc>\n<twitter>ryah</twitter>\n<github>ry</github>\n<github>joyent</github>\n<location>San Francisco, USA</location>\n<description>Creator of node.js</description>\n</ryan>\n<!-- REST OF THE XML OUTPUT -->\n\n```", "```js\n//...prior profiles code.\nbert : {\n           name: \"Bert Belder\",\n           irc:function () { return this.github; },\n           twitter:function () { return this.github; },\n           github:\"piscisaureus\",\n           location:\"Netherlands\",\n           description: \"Windows support, overall contributor\"\n          },\n//..rest of profiles code...\n\n```", "```js\nxml2js.parseString(profiles, function (err, obj) {\n  profiles = obj;\n  console.log(profiles.bert);\n});\n\n```", "```js\n{ name: 'Bert Belder',\n  irc: 'piscisaureus',\n  twitter: 'piscisaureus',\n  github: 'piscisaureus',\n  location: 'Netherlands',\n  description: 'Windows support, overall contributor' }\n\n```", "```js\nmodule.exports = {\n  ryan : {\n\t\t//ryans other keys here...\n           location:{'@':{city: 'San Francisco',country: 'USA'}},\n           description: 'Creator of node.js'\n          },\n  isaac : {\n\t\t//isaacs other keys here...\n            location:{'@':{city: 'San Francisco',country: 'USA'}},\n            description: 'Author of npm, core contributor'\n           },\n  bert : {\n\t\t//berts other keys here...\n           location:{'@':{country: 'Netherlands'}},\n           description: 'Windows support, overall contributor'\n          },\n  tj: {}, //<-- TJs keys\n  felix: {}, //<-- Felix's keys\n};\n\n```", "```js\nvar profiles = require('./profiles_with_attributes');\n\n```", "```js\nfunction attributes(obj, key) {\n    if (obj[key].hasOwnProperty(\"@\")) {\n     xml = xml.substr(0, xml.length \u2013 1); //remove the \u201c>\u201d part of open tag\n\n     Object.keys(obj[key]['@']).forEach(function (attrKey) {\n        xml += ' ' + attrKey + '=\"' + obj[key]['@'][attrKey] + '\"';\n      });\n\n     xml += \">\"; // add the \u201c>\u201d back on\n\n     delete obj[key]['@']; //remove the key so it isn't traversed as an object\n    }\n  }\n\n```", "```js\n(function traverse(obj) {\n  //...prior traverse function code...\n  xml += open;\n  attributes(obj, key);\n  If (nonObj) {\n  //rest of traverse function code...\n\n```", "```js\n<@>\n<city>San Francisco</city>\n<country>USA</country>\n</@>\n\n```", "```js\nprofiles = buildXml(profiles, 'profiles').replace(/name/g, 'fullname');\nconsole.log(profiles; //show me the xml!\n\n```", "```js\n<ryan>\n<fullname>Ryan Dahl</fullname>\n<irc>ryah</irc>\n<twitter>ryah</twitter>\n<github>ry</github>\n<github>joyent</github>\n<location city=\"San Francisco\" country=\"USA\">\n</location>\n<description>Creator of node.js</description>\n</ryan>\n<!-- rest of the XML output -->\n\n```", "```js\n//previous code\n      if (key === '#') { //explicit text\n        xml += obj[key] + '\\n';\n        return;\n      }\n      xml += open;\n      attributes(obj, key);\n      if (nonObj) {\n//rest of the code\n\n```", "```js\n//prior profiles\n tj : {\n          name: \"TJ Holowaychuk\",\n          irc:\"tjholowaychuk\",\n          twitter:\"tjholowaychuk\",\n          github:\"visionmedia\",\n          location:{'@':{city: 'Victoria',country: 'Canada'},region: {'#' :'British Columbia','@':{type:'province'}}},\n          description: \"Author of express, jade and other popular modules\"\n          },\n//rest of profiles\n\n```", "```js\n<irc>tjholowaychuk</irc>\n<twitter>tjholowaychuk</twitter>\n<github>visionmedia</github>\n<github s=\"special\">\n</github>\n<location city=\"Victoria\" country=\"Canada\">\n<region type=\"province\">\nBritish Columbia\n</region>\n</location>\n<description>Author of express, jade and other popular modules</description>\n</tj>\n\n```", "```js\nmodule.exports = function buildXml(rootObj, rootName) {\n//..buildXml function code\n}\n\n```", "```js\n<!doctype html>\n<html>\n<head>\n<script src=http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js>\n</script>\n<style>\n#frm, #raw {display:block; float:left; width:210px}\n#raw {height:150px; width:310px; margin-left:0.5em}\n</style>\n</head>\n<body>\n<form id=frm>\nProfile: <select id=profiles>\n\t\t <option></option>\n\t\t </select> <br>\nFormat:<select id=formats>\n\t\t  <option value=json> JSON </option>\n\t\t  <option value=xml> XML </option>\n\t\t  </select><br> <br>\n<div id=output></div>\n</form>  \n<textarea id=raw></textarea>\n</body>\n</html>\n\n```", "```js\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar profiles = require('./profiles');\nvar buildXml = require('./buildXml');\n\nvar index = fs.readFileSync('index.html');\nvar routes,\n  mimes = {xml: \"application/xml\", json: \"application/json\"};\n\n```", "```js\nroutes = {\n  'profiles': function (format) {\n    return output(Object.keys(profiles), format);\n  },\n  '/profile': function (format, basename) {\n    return output(profiles[basename], format, basename);\n  }\n};\n\n```", "```js\nfunction output(content, format, rootNode) {\n  if (!format || format === 'json') {\n    return JSON.stringify(content);\n  }\n  if (format === 'xml') {\n    return buildXml(content, rootNode);\n  }\n}\n\n```", "```js\nhttp.createServer(function (request, response) {\n  var dirname = path.dirname(request.url), \n    extname = path.extname(request.url), \n    basename = path.basename(request.url, extname); \n    extname = extname.replace('.',''); //remove period \n\n  response.setHeader(\"Content-Type\", mimes[extname] || 'text/html');\n\n  if (routes.hasOwnProperty(dirname)) {\n    response.end(routes[dirname](extname, basename));\n    return;\n  }\n  if (routes.hasOwnProperty(basename)) {\n    response.end(routes[basename](extname));\n    return;\n  }\n  response.end(index);\n}).listen(8080);\n\n```", "```js\n<script>\n$.get('http://localhost:8080/profiles',\n  function (profile_names) {\n    $.each(profile_names, function (i, pname) {\n      $('#profiles').append('<option>' + pname + '</option>');\n    });\n  }, 'json');\n$('#formats, #profiles').change(function () {\n  var format = $('#formats').val();\n  $.get('http://localhost:8080/profile/' + $('#profiles').val() + '.' + format,\n    function (profile, stat, jqXHR) {\n      var cT = jqXHR.getResponseHeader('Content-Type');\n      $('#raw').val(profile);\n      $('#output').html('');\n      if (cT === 'application/json') {\n        $.each($.parseJSON(profile), function (k, v) {\n          $('#output').append('<b>' + k + '</b> : ' + v + '<br>');\n        });\n        return;\n      }\n\n      if (cT === 'application/xml') {\n        profile = jqXHR.responseXML.firstChild.childNodes;\n        $.each(profile,\n          function (k, v) {\n            if (v && v.nodeType === 1) {\n              $('#output').append('<b>' + v.tagName + '</b> : ' +\n\t\t   v.textContent + '<br>');\n            }\n          });\n\n      }\n    }, 'text');\n\n});\n</script>\n\n```", "```js\n<form id=add>\n<div><label>profile name</label><input name=\"profileName\"></div>\n<div><label>name</label><input name=\"name\"></div>\n<div><label>irc</label><input name=\"irc\"></div>\n<div><label>twitter</label><input name=\"twitter\"></div>\n<div><label>github</label><input name=\"github\"></div>\n<div><label>location</label><input name=\"location\"></div>\n<div><label>description</label><input name=\"description\"></div>\n<div><button>Add</button></div>\n</form>\n\n```", "```js\n<style>\n#frm, #raw {display:block; float:left; width:210px}\n#raw {height:150px; width:310px; margin-left:0.5em}\n#add {display:block; float:left; margin-left:1.5em}\n#add div {display:table-row}\n#add label {float:left; width:5.5em}\ndiv button {float:right}\n</style>\n\n```", "```js\nvar index = fs.readFileSync('add_profile_index.html');\nvar buildXmljs = buildXml.toString();\nvar routes,\n  mimes = {\n   js: \"application/JavaScript\",\n   json: \"application/json\",\n   xml: \"application/xml\"\n  };\nroutes = {\n  'profiles': function (format) {\n    return output(Object.keys(profiles), format);\n  },\n  '/profile': function (format, basename) {\n    return output(profiles[basename], format, basename);\n  },\n  'buildXml' : function(ext) {\n    if (ext === 'js') { return buildXmljs; }\n  }\n};\n\n```", "```js\n<script src=buildXml.js></script>\n\n```", "```js\nfunction load() {\n$.get('http://localhost:8080/profiles',\n  function (profile_names) {\n    $.each(profile_names, function (i, pname) {\n      $('#profiles').append('<option>' + pname + '</option>');\n    });\n\n  }, 'json');\n}\nload();\n\n```", "```js\n$('#add').submit(function(e) {\n  var output, obj = {}, format = $('#formats').val();\n  e.preventDefault();\n  $.each($(this).serializeArray(), function(i,nameValPair) {\n    obj[nameValPair.name] = nameValPair.value; //form an object\n  });  \n  output = (format === 'json') ? JSON.stringify(obj) : buildXml(obj,'xml');\n\n  $.ajax({ type: 'POST', url: '/', data: output,\n    contentrendingTopicsype: 'application/' + format, dataType: 'text',\n    success: function(response) {\n      $('#raw').val(response);\n      $('#profiles').html('<option></option>');\n      load();\n    }\n  });\n}); \n\n```", "```js\nfunction addProfile(request,cb) {\n  var newProf, profileName, pD = ''; //post data\n  request\n    .on('data', function (chunk) { pD += chunk; })\n    .on('end',function() {\n      var contentrendingTopicsype = request.headers['content-type'];\n      if (contentrendingTopicsype === 'application/json') {\n        newProf = JSON.parse(pD);\n      }\n\n      if (contentrendingTopicsype === 'application/xml') {\n        xml2js.parseString(pD, function(err,obj) {\n          newProf = obj;  \n        });\n      }\n      profileName = newProf.profileName;\n      profiles[profileName] = newProf;    \n      delete profiles[profileName].profileName;\n      cb(output(profiles[profileName],\n        contentrendingTopicsype.replace('application/', ''), profileName));\n});\n}\n\n```", "```js\nvar xml2js = new (require('xml2js')).Parser();\n\n```", "```js\nhttp.createServer(function (request, response) {\n//initial server variables...\n  if (request.method === 'POST') {\n    addProfile(request, function(output) {\n      response.end(output);\n    });\n    return;\n  }\n//..rest of the server code (GET handling..)\n\n```", "```js\nvar http = require('http');\nvar colors = require('colors');\n\n```", "```js\nfunction makeCall(urlOpts, cb) {\n  http.get(urlOpts, function (response) { //make a call to the twitter API  \n    trendingTopics.jsonHandler(response, cb);\n  }).on('error', function (e) {\n    console.log(\"Connection Error: \" + e.message);\n  });\n}\n}\n\n```", "```js\nvar trendingTopics = module.exports = {\n  trends: {\n    urlOpts: {\n      host: 'api.twitter.com',\n      path: '/1/trends/1.json', //1.json provides global trends,\n      headers: {'User-Agent': 'Node Cookbook: Twitter Trends'}\n    }\n  },\n  tweets: {\n    maxResults: 3, //twitter applies this very loosely for the \"mixed\" type\n    resultsType: 'realtime', //choice of mixed, popular or realtime\n    language: 'en', //ISO 639-1 code\n    urlOpts: {\n      host: 'search.twitter.com',\n      headers: {'User-Agent': 'Node Cookbook: Twitter Trends'}\n    }\n  },\n  jsonHandler: function (response, cb) {\n    var json = '';\n    response.setEncoding('utf8');\n    if (response.statusCode === 200) {\n      response.on('data', function (chunk) {\n        json += chunk;\n      }).on('end', function () {\n        cb(JSON.parse(json));\n      });\n    } else {\n      throw (\"Server Returned statusCode error: \" + response.statusCode);\n    }\n  },\n  tweetPath: function (q) {\n    var p = '/search.json?lang=' + this.tweets.language + '&q=' + q +\n        '&rpp=' + this.tweets.maxResults + '&include_entities=true' +\n        '&with_twitter_user_id=true&result_type=' +\n        this.tweets.resultsType;\n    this.tweets.urlOpts.path = p;\n  }\n};\n\n```", "```js\nmakeCall(trendingTopics.trends.urlOpts, function (trendsArr) {\n  trendingTopics.tweetPath(trendsArr[0].trends[0].query);\n  makeCall(trendingTopics.tweets.urlOpts, function (tweetsObj) {\n    tweetsObj.results.forEach(function (tweet) {\n      console.log(\"\\n\" + tweet.from_user.yellow.bold + ': ' + tweet.text);\n    });\n  });\n});\n\n```", "```js\nvar http = require('http');\nvar xml2js = new (require('xml2js')).Parser(); \nvar colors = require('colors'); //for prettifying the console output\nvar trendingTopics = require('./twitter_trends'); //load trendingTopics obj\n\n```", "```js\nvar hotTrends = Object.create(trendingTopics, {trends: {value: {urlOpts: {\n    host: 'www.google.com',\n    path: '/trends/hottrends/atom/hourly',\n    headers: {'User-Agent': 'Node Cookbook: Twitter Trends'}\n  }\n    }}});\n\nhotTrends.xmlHandler = function (response, cb) {\n  var hotTrendsfeed = '';\n  response.on('data', function (chunk) {\n    hotTrendsfeed += chunk;\n  }).on('end', function () {\n    xml2js.parseString(hotTrendsfeed, function (err, obj) {\n      if (err) { throw (err.message); }\n      xml2js.parseString(obj.entry.content['#'],\n\tfunction (err, obj) {\n        if (err) { throw (err.message); }\n        cb(encodeURIComponent(obj.li[0].span.a['#']));\n      });\n    });\n  });\n};\n\n```", "```js\nfunction makeCall(urlOpts, handler, cb) {\n  http.get(urlOpts, function (response) { //make a call to the twitter api  \n    handler(response, cb);\n  }).on('error', function (e) {\n    console.log(\"Connection Error: \" + e.message);\n  });\n}\n\nmakeCall(hotTrends.trends.urlOpts, hotTrends.xmlHandler, function (query) {\n  hotTrends.tweetPath(query);\n  makeCall(hotTrends.tweets.urlOpts, hotTrends.jsonHandler, function (tweetsObj) {\n    tweetsObj.results.forEach(function (tweet) {\n      console.log(\"\\n\" + tweet.from_user.yellow.bold + ': ' + tweet.text);\n    });\n  });\n});\n\n```"]