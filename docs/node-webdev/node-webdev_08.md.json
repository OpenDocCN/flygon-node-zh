["```js\\1\n\nWhat's changed is that we've added the `cols=80` parameter to set its width to be fixed at 80 columns. We want this `textarea` element to be overly large so that you can experience how a non-responsive web app appears on a mobile device. View the application on a mobile device and you'll see something like one of the screens in this screenshot:\n\n![](img/86244127-00bf-4781-bd09-b530d57ba531.png)\n\nViewing a note works well on an iPhone 6, but the screen for editing/adding a note is not good. The text entry area is so wide that it runs off the side of the screen. Even though interaction with\u00a0`FORM` elements works well, it's clumsy. In general, browsing the *Notes* application gives an acceptable mobile user experience that doesn't suck, but won't make our users leave rave reviews.\n\nIn other words, we have an example of a screen that works well on the developers' laptop but is horrid on the target platform. By following the mobile-first paradigm, the developer is expected to constantly check the behavior in a mobile web browser, or else the mobile view in the Chrome developer tool, and to design accordingly.\n\nThis gives us an idea of the sort of problem that responsive web design aims to correct. Before implementing a mobile-first design in our\u00a0*Notes* app, let's discuss some of the theory behind responsive web design.\n\n# Learning the mobile-first paradigm theory\n\nMobile devices have a smaller screen, are generally touch-oriented, and have different user experience expectations than a desktop computer.\n\nTo accommodate smaller screens, we use **responsive web design** techniques. This means designing the application to accommodate the\u00a0screen size and ensuring websites provide optimal viewing and interaction across a wide range of devices. Techniques include changing font sizes, rearranging elements on the screen, using collapsible elements that open when touched, and resizing images or videos\u00a0to fit available space. This is called **responsive** because the application responds\u00a0to device characteristics by making these changes.\n\nBy\u00a0*mobile-first*, we mean that you design the application to work well on a mobile device\u00a0first,\u00a0and then move on to devices with larger screens. It's about prioritizing mobile devices first.\n\nThe primary technique is using media queries in stylesheets to detect device characteristics. Each media query section targets a range of devices, using a CSS declaration to appropriately restyle content.\n\nLet's consult a concrete example. The **Twenty Twelve** theme for WordPress has a straightforward responsive design implementation. It's not built with any framework, so you can see clearly how the mechanism works, and the stylesheet is small enough to be easily digestible. We're not going to use this code anywhere; instead, it is intended as a useful example of implementing a responsive design.\n\nYou can refer to the source code for the Twenty Twelve theme in the WordPress repository at [https://themes.svn.wordpress.org/twentytwelve/1.9/style.css](https://themes.svn.wordpress.org/twentytwelve/1.9/style.css).\n\nThe stylesheet starts with a number of **resets**, where the stylesheet overrides some typical browser style settings with clear defaults. Then, the bulk of the stylesheet defines styling for mobile devices. Toward the bottom of the stylesheet is a section labeled Media queries where, for certain sized screens, the styles defined for mobile devices are overridden to work on devices with larger screens.\n\nIt does this with the following two media queries:\n\n```", "```js\\1\n\nAs we can see here, when we install Bootstrap, it helpfully tells us the corresponding versions of jQuery and Popper.js to use. But according to the Bootstrap website, we are to use a different version of jQuery than what's shown here. Instead, we are to use jQuery 3.5.x instead of 1.9.1, because 3.5.x has many security issues\u00a0fixed.\n\nOn the npm page for the Popper.js package ([https://www.npmjs.com/package/popper.js](https://www.npmjs.com/package/popper.js)), we are told this package is deprecated, and that Popper.js v2 is available from the\u00a0`@popperjs/core` npm package. However, the Bootstrap project tells us to use this version of Popper.js, so that's what we'll stick with.\n\nThe Bootstrap *Getting Started* documentation explicitly says to use jQuery 3.5.1 and Popper 1.16.0, as of the time time of writing, as you can see at\u00a0[https://getbootstrap.com/docs/4.5/getting-started/introduction/](https://getbootstrap.com/docs/4.5/getting-started/introduction/).\n\nWhat's most important is to see what got downloaded:\n\n```", "```js\\1\n\nThis is largely the template shown on the Bootstrap site, incorporated into the previous content of `views/layout.hbs`. Our own stylesheet is loaded following the Bootstrap stylesheet, giving us the opportunity to override anything in Bootstrap we want to change. What's different is that instead of loading Bootstrap, Popper.js, and jQuery packages from their respective CDNs, we use the path `/assets/vendor/product-name` instead.\n\nThis is the same as recommended on the Bootstrap website except the URLs point to our own site rather than relying on the public CDN. The pathname prefix,\u00a0`/assets/vendor`, is routinely used to hold code provided by a third party.\n\nThis `/assets/vendor` URL is not currently recognized by the *Notes* application. To add this support, edit `app.mjs` to add these lines:\n\n```", "```js\\1\n\nWe now have our asset files, including Bootstrap, Popper.js, and jQuery, all available to the *Notes* application under the `/assets` directory. Referring back to `views/layout.hbs`, notice that we said to change the URL for our stylesheet to\u00a0`/assets/stylesheets/style.css`, which matches this change.\n\nWe can now try this out by running the application:\n\n```", "```js\\1\n\nThis is a generic\u00a0Bootstrap layout\u00a0example, not anything we're putting into the *Notes* app. Notice how each layer of the layout relies on different class declarations. This fits Bootstrap's pattern of declaring behavior by using classes.\n\nIn this case, we're showing a typical page layout of a container, containing two rows, with two columns on the first row and three columns on the second. The outermost layer uses the `.container` or `.container-fluid` elements. Containers provide a means to center or horizontally pad the content. Containers marked as `.container-fluid` act as if they have `width: 100%`, meaning they expand to fill the horizontal space.\n\nA\u00a0`.row`\u00a0is what it sounds like, a `\"row\"`\u00a0of a structure that's somewhat like a table. Technically, a row is a wrapper for columns. Containers are wrappers for rows, and rows are wrappers for columns, and columns contain the content displayed to our users.\u00a0\n\nColumns are marked with variations of the `.col` class. With the basic column class, `.col`, the columns are divided equally into the available space. You can specify a numerical column count to assign different widths to each column. Bootstrap supports up to 12 numbered columns, hence each row in the example adds up to 12 columns.\u00a0\n\nYou can also specify a breakpoint to which the column applies:\u00a0\n\n*   Using `col-xs`\u00a0targets extra-small devices (smartphones, `<576px`).\n*   Using `col-sm`\u00a0targets small devices (`>= 576px`).\n*   Using `col-md`\u00a0targets medium devices (`>= 768px`).\n*   Using `col-lg`\u00a0targets large devices (`>= 992px`).\n*   Using `col-xl` targets extra-large devices (`>= 1200px`).\n\nSpecifying a breakpoint, for example,\u00a0`col-sm`, means that the declaration applies to devices matching that breakpoint or larger. Hence, in the example shown earlier, the column definitions were applied to `col-sm`, `col-md`, `col-lg`, and `col-xl` devices, but not to `col-xs` devices.\n\nThe column count is appended to the class name. That means using `col-#` when not targeting a breakpoint,\u00a0for example, `col-4`, or `col-{breakpoint}-#` when targeting a breakpoint,\u00a0for example, `col-md-4`, to target a space four columns wide on medium devices.\u00a0If the columns add up to more than 12, the columns beyond the twelfth\u00a0column wrap around to become a new row. The word `auto` can be used instead of a numerical column count to size the column to the natural width of its contents.\n\nIt's possible to mix and match to target multiple breakpoints:\n\n```", "```js\\1\n\nThis is the general structure of the pages in *Notes*. The page content has two visible rows: the header and the main content. At the bottom of the page are invisible things such as the JavaScript files for Bootstrap and jQuery.\n\nAs it currently stands, the header contains a title for each page as well as navigation links so the user can browse the application. The content area is what changes from page to page, and is either about viewing content or editing content. The point is that for every page we have two sections for which to handle layout.\n\nThe question is whether `views/layout.hbs` should have any visible page layout. This template is used for the layout of every page in the application. The content of those pages is different enough that it seems `layout.hbs` cannot have any visible elements.\n\nThat's the decision we'll stick with for now. The next thing to set up is an icon library we can use for graphical buttons.\n\n## Using icon libraries and improving visual appeal\n\nThe world around us isn't constructed of words, but instead things. Hence, pictorial elements and styles, such as icons, can help computer software to be more comprehensible. Creating a good user experience should make our users reward us with more\u00a0likes in the app store.\u00a0\n\nThere are several icon libraries that can be used on a website. The Bootstrap team has a curated list at\u00a0[https://getbootstrap.com/docs/4.5/extend/icons/](https://getbootstrap.com/docs/4.5/extend/icons/). For this project, we'll use Feather Icons ([https://feathericons.com/](https://feathericons.com/)). It is a conveniently available npm package at\u00a0[https://www.npmjs.com/package/feather-icons](https://www.npmjs.com/package/feather-icons).\n\nTo install the package, run this command:\n\n```", "```js\\1\n\nGoing by the documentation, we must put this at the bottom of `views/layout.hbs`\u00a0to enable `feather-icons` support:\n\n```", "```js\\1\n\nAs suggested by the icon name, this will display a circle. The Feather Icons library looks for elements with the `data-feather` attribute, which the Feather Icons library uses to identify the SVG file to use. The Feather Icons library completely replaces the element where it finds the `data-feather` attribute. Therefore, if you want the icon to be a clickable link, it's necessary to wrap the icon definition with an `<a>` tag, rather than adding `data-feather` to the `<a>` tag.\n\nLet's now redesign the page header to be a navigation bar, and use one of the Feather icons.\n\n## Responsive page header navigation bar\n\nThe header section we designed before contains a page title and a little navigation bar. Bootstrap has several ways to spiff this up, and even give us a responsive navigation bar that neatly collapses to a menu on small devices.\n\nIn `views/header.hbs`, make this change:\n\n```", "```js\\1\n\nThe first change is to switch away from using a list and to use a vertical button group. The button group is a Bootstrap component that's what it sounds like, a group of buttons. By making the text links look and behave like buttons, we're improving the UI, especially its touch-friendliness. We chose the `btn-outline-dark`\u00a0button style because it looks good in the UI. We use large buttons (`btn-lg`) that fill the width of\u00a0the\u00a0container (`btn-block`).\n\nWe eliminated showing the `notekey`\u00a0value to the user. This information doesn't add anything to the user experience. Running the application, we get the following:\n\n![](img/d6976de1-fbbc-4588-8057-682c91d67901.png)\n\nThis is beginning to take shape, with a decent-looking home page that handles resizing very nicely and is touch-friendly. The buttons have been enlarged nicely to be large enough for big fingers to easily tap.\n\nThere's still something more to do with this since the header area is taking up a fair amount of space. We should always feel\u00a0free to rethink a plan as we look at intermediate results. Earlier, we created a design for the header area, but on reflection, that design looks to be too large. The intention had been to insert a breadcrumb trail just to the right of the home icon, and to leave the `<h1>` title at the top of the header area. But this takes up too much vertical space, so we can tighten up the header and possibly improve the appearance.\n\nEdit `partials/header.hbs`\u00a0with the following line in bold:\n\n```", "```js\\1\n\nWe have declared two rows, one for the note, and another for buttons for actions related to the note. Both are declared to consume all 12 columns, and therefore take up the full available width. The buttons are again contained within a button group, but this time a horizontal group rather than vertical.\n\nRunning the application, we get the following:\n\n![](img/fb21fed5-2602-4b90-93f0-fcf99fa179e4.png)\n\nDo we really need to show the\u00a0`notekey` to the user? We'll leave it there, but that's an open question for the user experience team. Otherwise, we've improved the\u00a0note-reading experience.\n\nNext on our list is the page for adding and editing notes.\n\n## Cleaning up the add/edit note form\n\nThe next major glaring problem is the form for adding and editing notes. As we said earlier, it's easy to get the text input area to overflow a small screen. Fortunately, Bootstrap has extensive support for making nice-looking forms that work well on mobile devices.\n\nChange the `form` in `views/noteedit.hbs` to this:\n\n```", "```js\\1\n\nThe entire form is contained within a `container-fluid`, meaning that it will automatically stretch to fit the screen. The form has three of these rows with the `form-group` class.\u00a0\n\nBootstrap uses `form-group` elements to add structure to forms and to encourage proper use of `<label>` elements, along with other form elements. It's good practice to use a `<label>`\u00a0element with every `<input>`\u00a0element to improve assistive behavior in the\u00a0browser, rather\u00a0than simply leaving some dangling text.\u00a0\n\nFor horizontal layout, notice that for each `row` there is a `<label>` with a `col-1` class, and the `<input>` element is contained within a `<div>` that has a `col` class. The effect is that the `<label>` has a controlled width and that the labels all have the same width, while the `<input>` elements take up the rest of the horizontal space.\n\nEvery form element has `class=\"form-control\"`. Bootstrap uses this to identify the controls so it can add styling and behavior.\n\nThe\u00a0`placeholder='key'`\u00a0attribute puts sample text in an otherwise empty text input element. It disappears as soon as the user types something and is an excellent way to prompt the user with what's expected.\n\nFinally, we changed the Submit button to be a Bootstrap button. These look nice, and Bootstrap makes sure that they work great:\n\n![](img/960c8f4a-f135-48b4-abbf-78af679792c1.png)\n\nThe result looks good and works well on the iPhone. It automatically sizes itself to whatever screen it's on. Everything behaves nicely. In the preceding screenshot, we've resized the window small enough to cause the navbar to collapse. Clicking on the so-called hamburger icon on the right (the three horizontal lines) causes the navbar contents to pop up as a menu.\n\nWe have learned how to improve forms using Bootstrap. We have a similar task in the form to confirm deleting notes.\n\n## Cleaning up the delete-note window\n\nThe window used to verify the user's choice to delete a note doesn't look bad, but it can be improved.\n\nEdit `views/notedestroy.hbs` to contain the following:\n\n```", "```js\\1\n\nWhat we've done is to change the `title` parameter passed to the template. We'd done this in the `/notes/edit` route handler and seemingly missed doing so in this handler.\n\nThat handles rewriting the *Notes* application to use Bootstrap. Having a complete Bootstrap-based UI, let's look at what it takes to customize the Bootstrap look and feel.\n\n# Customizing a Bootstrap build\n\nOne reason to use Bootstrap is that you can easily build a customized version. The primary reason to customize a Bootstrap build is to adjust the theme from the default. While we can use `stylesheet.css` to adjust the presentation, it's much more effective to adjust theming the Bootstrap way. That means changing the SASS variables and recompiling Bootstrap to generate a new `bootstrap.css` file.\n\nBootstrap stylesheets are built using the build process described in the\u00a0`package.json` file. Therefore, customizing a Bootstrap build means first downloading the Bootstrap source tree, making modifications, then using the\u00a0`npm run dist` command to build the distribution. By the end of this section, you'll know how to do all that.\n\nThe Bootstrap uses SASS, which is one of the CSS preprocessors used to simplify CSS development. In Bootstrap's code, one file (`scss/_variables.scss`) contains variables used throughout the rest of Bootstrap's `.scss` files. Change one variable and it automatically affects the rest of Bootstrap.\n\nThe official documentation on the Bootstrap website ([https://getbootstrap.com/docs/4.5/getting-started/build-tools/](https://getbootstrap.com/docs/4.5/getting-started/build-tools/)) is useful for reference on the build process.\n\nIf you've followed the directions given earlier, you have a directory,\u00a0`chap06/notes`, containing the *Notes* application source code. Create a directory named\u00a0`chap06/notes/theme`, within which we'll set up a custom Bootstrap build process.\u00a0\n\nIn order to have a clear record of the steps involved, we'll use a\u00a0`package.json`\u00a0file in that directory to automate the build process. There isn't any Node.js code involved; npm is also a convenient tool to automate the software build processes.\n\nTo start, we need a script for downloading the Bootstrap source tree from\u00a0[https://github.com/twbs/bootstrap](https://github.com/twbs/bootstrap). While the `bootstrap` npm package includes SASS source files, it isn't sufficient to build Bootstrap, and therefore we must download the source tree. What we do is navigate to the GitHub repository, click on the Releases tab, and select the URL for the most recent release. But instead of downloading it manually, let's automate the process.\n\nWith\u00a0`theme/package.json`\u00a0can contain this `scripts` section:\n\n```", "```js\\1\n\nThis executes the steps to download and unpack the Bootstrap source tree. The scripts we gave will work for a Unix-like system, but if you are on Windows it will be easiest to run this in the Windows Subsystem for Linux.\n\nThis much only installs the tools necessary to build Bootstrap. The documentation on the Bootstrap website also discusses installing *Bundler* from the Ruby Gems repository, but that tool only seems to be required to bundle the built distribution. We do not need that tool, so skip that step.\u00a0\n\nTo build Bootstrap, let's add the following lines to the `scripts` section in our `theme/package.json`\u00a0file:\n\n```", "```js\\1\n\nThis will tell Git to not commit the Bootstrap source tree to the source repository. There's no need to commit third-party sources to your source tree since we have recorded in the\u00a0`package.json`\u00a0file the steps required to download the sources.\n\nNow run a build with this command:\n\n```", "```js\\1\n\nThese are similar to normal CSS statements. The `!default` attribute designates these values as the default. Any `!default` values can be overridden without editing `_values.scss`.\n\nTo create a custom theme we could change `_variables.scss`, then rerun the build. But what if Bootstrap makes a considerable change to `_variables.scss` that we miss? It's better to instead create a second file that overrides values in `_variables.scss`.\n\nWith that in mind, create a file,\u00a0`theme/_custom.scss`, containing the following:\n\n```", "```js\\1\n\nThis adds an `@import`\u00a0header for the `_custom.scss` file we just created. That way, Bootstrap will load our definitions during the build process.\n\nFinally, add this line to the `scripts` section of `theme/package.json`:\n\n```", "```js\\1\n\nWhile that's building, let's modify `notes/app.mjs` to mount the build directory:\n\n```", "```js\\1\n\nMake a similar change in `views/noteview.hbs`:\n\n```", "```js\\1\n\nThis will download the prebuilt CSS files for our chosen theme. In passing, notice that the Bootswatch website offers\u00a0`_variables.scss` and `_bootswatch.scss` files, which should be usable with a workflow similar to what we implemented in the previous section. The GitHub repository matching the Bootswatch website has a complete build procedure for building custom themes.\n\nPerform the download with the following command:\n\n```", "```js\\1\n\nInstead of one mount for `/vendor/bootstrap`, we now have two mounts for each of the subdirectories. While the Bootswatch team provides `bootstrap.css` and `bootstrap.min.css`, they do not provide the JavaScript source. Therefore, we use the\u00a0`/vendor/bootstrap/css` mount point to access the CSS files you downloaded from the theme provider, and the `/vendor/bootstrap/js` mount point to access the JavaScript files in the Bootstrap npm package.\n\nBecause Minty is a light-colored theme, the buttons now need to use the dark style. We had earlier changed the buttons to use a light style because of the dark background. We must now switch from `btn-outline-light` back to `btn-outline-dark`. In `partials/header.hbs`, the color scheme requires a change in the `navbar` content:\n\n```"]