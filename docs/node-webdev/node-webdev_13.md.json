["```js\\1\n\nBecause we did not supply a name for the machine, Multipass created a random name. It isn't shown in the preceding snippet, but the first command included the download and setup of a VM image. The\u00a0`shell`\u00a0command starts a login shell inside the newly created VM, where you can use tools like\u00a0`ps`\u00a0or\u00a0`htop`\u00a0to see that there is indeed a full complement of processes running\u00a0already.\n\nSince one of the first things you do with a new Ubuntu install is to update the system, let's do so the Multipass way:\n\n```", "```js\\1\n\nWe can easily delete a VM image with the\u00a0`delete`\u00a0command; it is then marked as\u00a0`Deleted`*.* To truly remove the VM, we must use the\u00a0`purge`\u00a0command.\n\nWe've learned how to create, manage, and delete VMs using Multipass. This was a lot faster than some of the alternative technologies. With VirtualBox, for example, we would have had to find and download an ISO, then boot a VirtualBox VM instance and run the Ubuntu installer, taking a lot more time.\u00a0\n\nThere might be difficulties using Multipass on Windows, so let's talk about that and how to rectify it.\n\n### Handling a failure to launch Multipass instances on Windows\n\nThe Multipass team makes their application available to on run Windows systems, but issues like the following can crop up:\n\n```", "```js\\1\n\nOn Windows, instead create a file named\u00a0`create-svc-userauth.ps1`\u00a0containing the following:\n\n```", "```js\\1\n\nOr, on Windows, run this:\n\n```", "```js\\1\n\nThis installs Node.js 14.x and sets up other packages required to run the authentication service. This includes a MySQL server instance and the MySQL client.\n\nThe\u00a0Node.js\u00a0documentation ([https://nodejs.org/en/download/package-manager/](https://nodejs.org/en/download/package-manager/)) has documentation on installing Node.js from package managers for several OSes. This script uses the recommended installation for Debian and Ubuntu systems because that's the OS used in the Multipass instance.\n\nA side effect of installing the\u00a0`mysql-server`\u00a0package is that it launches a running MySQL service with a default configuration. Customizing that configuration is up to you, but for our purposes here and now, the default configuration will work.\n\n5.  Execute this script inside the instance like so:\n\n```", "```js\\1\n\nPreviously, we had specified a hardcoded\u00a0`'localhost'`\u00a0here. The effect of this was that the user authentication service only accepted connections from the same computer. To implement our vision of *Notes* and the user authentication services running on different computers, this service must support connections from elsewhere.\n\nThis change introduces a new environment variable,\u00a0`REST_LISTEN`, where we will declare where the server should listen for connections.\n\nAs you edit the source files, notice that the changes are immediately reflected inside the Multipass machine in the\u00a0`/build-users`\u00a0directory.\n\n7.  Create a file called\u00a0`users/sequelize-mysql.yaml`\u00a0containing the following:\n\n```", "```js\\1\n\nThe\u00a0`on-server`\u00a0script contains the runtime configuration we'll use on the server.\n\n9.  Next, in the\u00a0`users`\u00a0directory, run this command:\n\n```", "```js\\1\n\nThis script is meant to execute inside the Ubuntu system managed by Multipass. The first section sets a user identity in the database. The second section copies the user authentication service code,\u00a0from\u00a0`/build-users`\u00a0to\u00a0`/userauth`, into the instance, followed by installing the required packages.\n\nSince the MySQL server is already running, the\u00a0`mysql`\u00a0command will access the running server to create the database, and create the\u00a0`userauth`\u00a0user. We will use this user ID to connect with the database from the user authentication service.\n\nBut, why are some files removed before copying them into the instance? The primary goal is to delete the\u00a0`node_modules`\u00a0directory; the other files are simply unneeded. The\u00a0`node_modules`\u00a0directory contains modules that were installed on your laptop, and surely your laptop has a different OS than the Ubuntu instance running on the server? Therefore, rerunning\u00a0`npm install`\u00a0on the Ubuntu server ensures the packages are installed correctly.\n\n11.  Run the\u00a0`configure-svc-userauth`\u00a0script like so:\n\n```", "```js\\1\n\nNotice that our notation is to use\u00a0`$`\u00a0to represent a command typed on the host computer, and\u00a0`ubuntu@svc-userauth:~$`\u00a0to represent a command typed inside the instance. This is meant to help you understand where the commands are to be executed.\n\nIn this case, we've logged into the instance, changed directory to\u00a0`/opt/userauth`, and started the server using the corresponding npm script.\n\n### Testing the deployed user authentication service\n\nOur next step at this point is to test the service. We created a script,\u00a0`cli.mjs`, for that purpose. In the past, we ran this script on the same computer where the authentication service was running. But this time, we want to ensure the ability to access the service remotely.\n\nNotice that the URL printed is\u00a0`http://[::]:5858`. This is shorthand for listening to connections from any IP address.\n\nOn our laptop, we can see the following:\n\n```", "```js\\1\n\nMake sure to specify the correct host IP address and port number.\n\nIf you remember, the script retrieves the newly created user entry and prints it out. But we need to verify this and can do so using the\u00a0`list-users`\u00a0command. But let's do something a little different, and learn how to access the database server.\n\nIn another command window on your laptop, type these commands:\n\n```", "```js\\1\n\nObviously, there are security considerations with this change, so change the execution policy back when you're done.\n\nA simpler method on Windows is to simply paste these commands into a PowerShell window.\u00a0\n\nIt was useful to discuss script execution on PowerShell. Let's return to the task at hand, which is provisioning the Notes stack on Ubuntu. Since we have a functioning user authentication service, the remaining task is the Notes service.\n\n## Provisioning a server for the Notes service\n\nSo far, we have set up the user authentication service on Multipass. Of course, to have the full Notes application stack running, the Notes service must also be running. So let's take care of that now.\n\nThe first server,\u00a0`svc-userauth`, is running the user authentication service. Of course, the second server will be called\u00a0`svc-notes`, and will run the Notes service. What we'll do is very similar to how we set up\u00a0`svc-userauth`.\n\nThere are several tasks in the\u00a0`multipass`\u00a0directory to prepare this second server. As we did with the\u00a0`svc-userauth` server, here, we set up the `svc-notes` server by installing and configuring required Ubuntu packages, then set up the Notes application:\n\n1.  Create a script\u00a0named\u00a0`multipass/create-svc-notes.sh`\u00a0containing the following:\n\n```", "```js\\1\n\nThis is the same as before, but using\u00a0`(get-location)`\u00a0this time.\n\n2.  Create the instance by running the script as follows:\n\n```", "```js\\1\n\nEither one runs the commands in the scripts that will launch the instance and mount directories from the host filesystem.\n\n3.  Install the required packages like so:\n\n```", "```js\\1\n\nThis is the database name, username, and password credentials for the database configured previously.\n\n5.  Because we are now using MySQL, run this command:\n\n```", "```js\\1\n\nThis uses the new database configuration for the MySQL server and the IP address for the user authentication service. Make sure that the IP address matches what Multipass assigned to\u00a0`svc-userauth`.\n\nYou'll, of course, get the IP address in the following way:\n\n```", "```js\\1\n\nThis is also similar to what we did for\u00a0`svc-userauth`. This also changes things to use the word\u00a0`notes`\u00a0where we used\u00a0`userauth`\u00a0before.\n\nSomething not explicitly covered here is ensuring the\u00a0`.env`\u00a0file you created to hold Twitter secrets is deployed to this server. We suggested ensuring this file is not committed to a source repository. That means you'll be handling it semi-manually perhaps, or you'll have to use some developer ingenuity to create a process for managing this file securely.\n\n8.  Run the\u00a0`configure-svc-notes`\u00a0script like so:\n\n```", "```js\\1\n\nAs with\u00a0`svc-userauth`, we shell into the server, change the directory to\u00a0`/opt/notes`, and run the\u00a0`on-server`\u00a0script. If you want Notes to be visible on port `80`, simply change the\u00a0`PORT`\u00a0environment variable. After that, the URL in the\u00a0`TWITTER_CALLBACK_HOST`\u00a0variable must contain the port number on which Notes is listening.\u00a0For that to work, the\u00a0`on-server`\u00a0script needs to run as\u00a0`root`, so therefore we will run the following:\n\n```", "```js\\1\n\nUse the actual IP address or domain name assigned to the server being used. In a real deployment, we'll have a domain name to use here.\u00a0\n\nAdditionally, to enable Twitter login support, it is required to supply Twitter authentication tokens in the environment variables:\n\n```", "```js\\1\n\nThis is still a semi-manual process of starting the server and specifying the Twitter keys, but you'll be able to log in using Twitter credentials. Keep in mind that we still need a solution for this that avoids committing these keys to a source repository.\n\nThe last thing for us to take care of is ensuring the two service processes restart when the respective servers restart. Right now, the services are running at the command line. If we ran\u00a0`multipass restart`, the service instances will reboot and the service processes won't be running.\n\nIn the next section, we'll learn one way to configure a background process that reliably starts when a computer is booted.\n\n# Setting up PM2 to manage Node.js processes\n\nWe have two servers,\u00a0`svc-notes`\u00a0and\u00a0`svc-userauth`, configured so we can run the two services making up the Notes application stack. A big task remaining is to ensure the Node.js processes are properly installed as background processes.\n\nTo see the problem, start another command window and run these commands:\n\n```", "```js\\1\n\nThe result of these commands is an npm project directory containing the PM2 program and a\u00a0`package.json`\u00a0file\u00a0that we can potentially use to record some scripts.\n\nNow let's start the user authentication server using PM2:\n\n```", "```js\\1\n\nSince we had previously launched this service and tested it, there should be user IDs already in the authentication server database. The server is running, but because it's not in the foreground, we cannot see the output. Try this command:\n\n```", "```js\\1\n\nWe have familiarized ourselves with PM2, but this setup is not quite suitable for any kind of deployment. Let's instead set up scripts that will manage the Notes services under PM2 more cleanly.\u00a0\n\n## Scripting the PM2 setup on Multipass\n\nWe have two Ubuntu systems onto which we've copied the Notes and user authentication services, and also configured a MySQL server for each machine. On these systems, we've manually run the services and know that they work, and now it's time to use PM2 to manage these services as persistent background processes.\n\nWith PM2 we can create a file,\u00a0`ecosystem.json`, to describe precisely how to launch the processes. Then, with a pair of PM2 commands, we can integrate the process setup so it automatically starts as a background process.\n\nLet's start by creating two directories,\u00a0`multipass/pm2-notes`\u00a0and\u00a0`multipass/pm2-userauth`. These will hold the scripts for the corresponding servers.\u00a0\n\nIn\u00a0`pm2-notes`, create a file,\u00a0`package.json`, containing the following:\n\n```", "```js\\1\n\nThe\u00a0`ecosystem.json`\u00a0file is how we describe a process to be monitored to PM2.\n\nIn this case, we've described a single process, called `Notes`. The\u00a0`cwd`\u00a0value declares where the code for this process lives, and the\u00a0`script`\u00a0value describes which script to run to launch the service. The\u00a0`env`\u00a0value is a list of environment variables to set.\n\nThis is where we would specify the Twitter authentication tokens. But since this file is likely to be committed to a source repository, we shouldn't do so. Instead, we'll forego Twitter login functionality for the time being.\u00a0\n\nThe `USER_SERVICE_URL` and `TWITTER_CALLBACK_HOST` variables are set according to the\u00a0`multipass list`\u00a0output we showed earlier. These values will, of course, vary based on what was selected by your host system.\n\nThese environment variables are the same as we set in\u00a0`notes/package.json`\u00a0\u2013 except, notice that we've set `PORT` to `80` so that it runs on the normal HTTP port. To successfully specify port `80`, PM2 must\u00a0execute\u00a0as root.\n\nIn\u00a0`pm2-userauth`, create a file named\u00a0`package.json`\u00a0containing the folllowing:\n\n```", "```js\\1\n\nThis describes the user authentication service. On the server, it is stored in the\u00a0`/userauth`\u00a0directory and is launched using the\u00a0`user-server.mjs`\u00a0script, with that set of environment variables.\n\nNext, on both servers create a directory called\u00a0`/opt/pm2`. Copy the files in\u00a0`pm2-notes`\u00a0to the\u00a0`/opt/pm2`\u00a0directory on\u00a0`svc-notes`, and copy the files in\u00a0`pm2-userauth`\u00a0to the\u00a0`/opt/pm2`\u00a0directory on\u00a0`svc-userauth`.\n\nOn both\u00a0`svc-notes`\u00a0and\u00a0`svc-userauth`,\u00a0you can run these commands:\n\n```", "```js\\1\n\nWith\u00a0`npm run save`,\u00a0we run the\u00a0`pm2 save`\u00a0command. This command saves the current configuration into a file in your home directory.\u00a0\n\nWith\u00a0`npm run startup`,\u00a0we run the\u00a0`pm2 startup`\u00a0command. This converts the saved current configuration into a script for the current OS that will manage the PM2 system. PM2, in turn, manages the set of processes you've configured with PM2.\n\nIn this case, it identified the presence of the\u00a0`systemd`\u00a0init system, which is the standard for Ubuntu. It generated a file,\u00a0`/etc/systemd/system/pm2-root.service`,\u00a0that tells Ubuntu about PM2\\. In amongst the output, it tells us how to use\u00a0`systemctl`\u00a0to start and stop the PM2 service.\n\nDo the same on\u00a0`svc-notes`\u00a0to implement the background service there as well.\n\nAnd now we can test restarting the two servers with the following commands:\n\n```", "```js\\1\n\nThe\u00a0`monit`\u00a0command starts a monitoring console showing some statistics including CPU and memory use, as well as logging output.\n\nWhen done, run the following command:\n\n```"]