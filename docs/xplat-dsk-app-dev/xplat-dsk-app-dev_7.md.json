["```js\nnpm i -D typescript\n\n```", "```js\n{ \n... \n\"scripts\": { \n    \"build\": \"tsc\" \n  }, \n... \n} \n\n```", "```js\n{ \n  \"compilerOptions\": { \n    \"target\": \"ES6\", \n    \"module\": \"CommonJS\", \n    \"moduleResolution\": \"node\", \n    \"sourceMap\": true, \n    \"outDir\": \"./build\" \n  }, \n\n  \"include\": [ \n    \"./**/*\" \n  ], \n  \"exclude\": [ \n    \"node_modules\" \n  ] \n} \n\n```", "```js\nlet title: string = \"RSS Aggregator\"; \n\n```", "```js\nlet title = \"RSS Aggregator\"; \n\n```", "```js\nlet title: string = \"RSS Aggregator\"; \ntitle = 1; \n\n```", "```js\nerror TS2322: Type '1' is not assignable to type 'string'. \n\n```", "```js\nfunction sum( a: number, b: number ): number { \n  return a + b; \n} \n let res = sum( 1, 1 ); \nconsole.log( res ); \n\n```", "```js\nlet arr: string[]; \n\n```", "```js\nlet arr: Array<string>; \n\n```", "```js\ninterface StringArray { \n  [ index: number ]: string; \n} \n const arr: StringArray = [ \"one\", \"two\", \"tree\" ]; \n\n```", "```js\ninterface StringArray { \n  [ index: number ]: string; \n  length: number; \n} \n\n```", "```js\ninterface MyObj {  \n  foo: string; \n  bar: number; \n} \nlet obj: MyObj; \n\n```", "```js\nlet obj: { foo: string, bar: number }; \n// or \nfunction request( options: { uri: string, method: string } ): void { \n}\n\n```", "```js\ninterface RGB { \n    readonly red: number; \n    readonly green: number; \n    readonly blue: number; \n} \n let green: RGB = { red: 0, green: 128, blue: 0 }; \n\n```", "```js\nerror TS2540: Cannot assign to 'red' because it is a constant or a read-only property. \n\n```", "```js\ninterface DataMap { \n  [ key: string ]: any; \n} \n\nconst map: DataMap = { foo: \"foo\", bar: \"bar\" }; \n\n```", "```js\nconst showModal: (toggle: boolean) => void =  \n  function( toggle )  { \n    console.log( toggle ); \n  } \n\n```", "```js\ninterface Switcher { \n  (toggle: boolean): void; \n} \n\nconst showModal:Switcher = ( toggle ) => { \n  console.log( toggle ); \n} \n\nshowModal( true ); \n\n```", "```js\nfunction addOgTags(title: string, description?: string): string { \n  return ` \n    <meta property=\"og:title\" content=\"${title}\" /> \n    <meta property=\"og:description\" content=\"${description || \"\"}\" /> \n    } \n\n```", "```js\naddOgTags( \"Title\" ); \naddOgTags( \"Title\", \"Description\" ); \n\n```", "```js\ninterface IMeta { \n  title: string; \n  description?: string; \n} \n\nfunction addOgTags( meta: IMeta ): string { \n} \n\n```", "```js\ninterface Starship { \n  speed: number;  \n  speedUp( increment: number ): void; \n} \n\nclass LightFreighter implements Starship { \n  speed: number = 0; \n  speedUp( increment: number ): void { \n    this.speed = this.speed + increment; \n  } \n} \n\nlet millenniumFalcon = new LightFreighter(); \nmillenniumFalcon.speedUp( 100 ); \n\n```", "```js\nclass LightFreighter implements Starship { \n  private speed: number = 0; \n  public speedUp( increment: number ): void { \n    this.speed = this.speed + increment; \n  } \n} \n\n```", "```js\nclass LightFreighter implements Starship { \n  constructor( private speed: number = 0 ) { \n  } \n  public speedUp( increment: number ): void { \n    this.speed = this.speed + increment; \n  } \n} \n\n```", "```js\nabstract class Starship { \n  constructor( protected speed: number = 0 ) { \n\n  } \n  abstract speedUp( increment: number ): void; \n} \n\nclass LightFreighter extends Starship { \n\n  public speedUp( increment: number ): void { \n    this.speed = this.speed + increment; \n  } \n} \n\n```", "```js\nconst enum Status { \n    NEEDS_PATCH, \n    UP_TO_DATE, \n    NOT_INSTALLED \n} \n\nfunction setStatus( status: Status ) { \n  // ... \n} \n\nsetStatus( Status.NEEDS_PATCH ); \n\n```", "```js\nsetStatus( \"READY\" ); \n//  error TS2345: Argument of type '\"READY\"' is not assignable to parameter of type 'STATUS'. \n\n```", "```js\nfunction setStatus( status: \"NEEDS_PATCH\" | \"UP_TO_DATE\" | \"NOT_INSTALLED\" ) { \n  // ... \n} \nsetStatus( \"NEEDS_PATCH\" ); \n\n```", "```js\ninterface Anakin { \n  useLightSaber: () => void; \n  useForce: () => void; \n} \ninterface Padm\u00e9 { \n  leaderSkills: string[]; \n  useGun: () => void; \n} \ntype Luke = Anakin & Padm\u00e9; \n\n```", "```js\nfunction joinRebelion( luke: Anakin & Padm\u00e9 ){   \n}\n\n```", "```js\ninterface PlainObj { \n  [ key: string ]: string; \n} \ninterface JQuery { \n} \n\nfunction jQuery( selector: string | Node | Node[] | PlainObj | JQuery ): JQuery { \n  let output: JQuery = {} \n  // ... \n  return output; \n} \n\n```", "```js\ninterface CreateButton { \n  ( tagName: \"button\" ): HTMLButtonElement; \n  ( tagName: \"a\" ): HTMLAnchorElement; \n} \n\n```", "```js\ninterface NumberDataMap { \n  [ key: string ]: number; \n} \n\n```", "```js\ninterface DataMap<T> { \n  [ key: string ]: T; \n} \n\nconst numberMap: DataMap<number> = { foo: 1, bar: 2 }, \n      stringMap: DataMap<string> = { foo: \"foo\", bar: \"bar\" }; \n\n```", "```js\nnpm i -D @types/react \nnpm i -D @types/react-dom \n\n```", "```js\nimport * as React from \"react\"; \nimport * as ReactDOM from \"react-dom\"; \n\nReactDOM.render( \n  <div></div>, \n  \"root\" \n); \n\n```", "```js\nerror TS2345: Argument of type '\"root\"' is not assignable to parameter of type 'Element'. \n\n```", "```js\ndeclare class FeedMe { \n  new ( flag?: boolean ): NodeJS.WritableStream; \n  on( event: \"title\", onTitle: ( title: string ) => void): void; \n  on( event: \"item\", onItem: ( item: any ) => void ): void; \n} \n\n```", "```js\n/// <reference path=\"./feedme\" /> \nimport http = require( \"http\" ); \nvar FeedMe = require( \"feedme\" ); \n\nhttp.get('http://feeds.feedburner.com/TechCrunch/startups', ( res ) => { \n  const parser = new FeedMe( true ); \n  parser.on( \"title\", ( title: string ) => { \n    console.log( title ); \n  }); \n  res.pipe( parser ); \n}); \n\n```", "```js\n{ \n  \"name\": \"rss-aggregator\", \n  \"title\": \"RSS Aggregator\", \n  \"version\": \"1.0.0\", \n  \"main\": \"./app/main.js\", \n  \"scripts\": { \n    \"build\": \"webpack\", \n    \"start\": \"electron .\", \n    \"dev\": \"webpack -d --watch\"  \n  } \n} \n\n```", "```js\nnpm i -D typescript \n\n```", "```js\nnpm i -D webpack \nnpm i -D ts-loader \n\n```", "```js\nnpm i -D electron \nnpm i -D electron-debug \nnpm i -D electron-devtools-installer \n\n```", "```js\nnpm i -D @types/react \nnpm i -D @types/react-dom \n\n```", "```js\nnpm i -D @types/node \n\n```", "```js\nconst path = require( \"path\" ); \nmodule.exports = { \n  entry: \"./app/ts/index.tsx\", \n  output: { \n    path: path.resolve( __dirname, \"./app/build/js/\" ), \n    filename: \"bundle.js\" \n  }, \n\n  target: \"electron-renderer\", \n  devtool: \"source-map\", // enum \n  module: { \n    rules: [ \n      { \n        test: /\\.tsx?$/, \n        use: \"ts-loader\" \n      } \n    ] \n  } \n}; \n\n```", "```js\n{ \n... \nresolve: { \n    modules: [ \n      \"node_modules\", \n      path.resolve(__dirname, \"app/ts\") \n    ], \n\n    extensions: [ \".ts\", \".tsx\", \".js\"] \n  }, \n... \n} \n\n```", "```js\nimport {member} from \"file.ts\" \n\n```", "```js\nimport {member} from \"file\" \n\n```", "```js\n{ \n  \"compilerOptions\": { \n    \"target\": \"es6\", \n    \"module\": \"commonjs\", \n    \"moduleResolution\": \"node\", \n    \"sourceMap\": false, \n    \"outDir\": \"../dist/\", \n    \"jsx\": \"react\" \n  }, \n\n  \"files\": [ \n    \"./app/ts/index.tsx\" \n  ] \n} \n\n```", "```js\nnpm i -S react-mdl \nnpm i -D @types/react-mdl \n\n```", "```js\nimport \"react-mdl/extra/material.css\"; \nimport \"react-mdl/extra/material.js\"; \n\n```", "```js\n./webpack.config.js \n{ \n... \nresolve: { \n   modules: [ \n        \"node_modules\", \n        path.resolve(__dirname, \"app/ts\") \n      ], \n      extensions: [ \".ts\", \".tsx\", \".js\", \".css\"] \n  }, \n... \n} \n\n```", "```js\n{ \n... \nmodule: { \n  rules: [ \n    ... \n    { \n      test: /\\.css$/, \n      use: [ \n          \"style-loader\", \n          \"css-loader\" \n        ] \n    } \n  ] \n}, \n\n... \n} \n\n```", "```js\n{ \n... \nmodule: { \n  rules: [ \n    ... \n    { \n       test: /\\.woff(2)?(\\?v=[0-9]\\.[0-9]\\.[0-9])?$/, \n       use: { \n         loader: \"url-loader\", \n         options: { \n           limit: 1000000, \n           mimetype: \"application/font-woff\" \n         } \n       } \n    } \n  ] \n}, \n\n... \n} \n\n```", "```js\nnpm i -D css-loader \nnpm i -D style-loader \n\n```", "```js\napp/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?\n      family=Material+Icons\">\n     <title>RSS Aggregator</title>\n </head>\n   <body>\n        <div id=\"root\"></div> \n       <script src=\"img/bundle.js\"></script>\n  </body>\n</html>\n\n```", "```js\nimport \"react-mdl/extra/material.css\"; \nimport \"react-mdl/extra/material.js\"; \n\nimport * as React from \"react\"; \nimport * as ReactDOM from \"react-dom\"; \nimport App from \"./Containers/App\"; \n\nReactDOM.render( \n  <App />, \n  document.getElementById( \"root\" ) \n); \n\n```", "```js\nimport { Layout, Content } from \"react-mdl\"; \nimport * as React from \"react\"; \n\nimport TitleBar from \"../Components/TitleBar\"; \nimport Menu from \"../Components/Menu\"; \nimport Feed from \"../Components/Feed\"; \n\nexport default class App extends React.Component<{}, {}> { \n\n  render() { \n    return ( \n      <div className=\"main-wrapper\"> \n        <Layout fixedHeader fixedDrawer> \n          <TitleBar /> \n          <Menu /> \n          <Content> \n            <Feed  /> \n          </Content> \n        </Layout> \n      </div> \n    ); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \nimport { remote } from \"electron\"; \nimport { Header, Navigation, Icon } from \"react-mdl\"; \n\nexport default class TitleBar extends React.Component<{}, {}> { \n\n  private onClose = () => { \n    remote.getCurrentWindow().close(); \n  } \n  render() { \n    return ( \n     <Header  scroll> \n        <Navigation> \n            <a href=\"#\" onClick={this.onClose}><Icon name=\"close\" />\n            </a> \n        </Navigation> \n    </Header> \n    ); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \nimport { Drawer, Navigation, Icon, FABButton } from \"react-mdl\"; \n\nexport default class Menu extends React.Component<{}, {}> { \n\n  render (){ \n\n    return ( \n     <Drawer  className=\"mdl-color--blue-grey-900 mdl-\n     color-text--blue-grey-50\"> \n        <Navigation className=\"mdl-color--blue-grey-80\"> \n          <a> \n             <Icon name=\"& #xE0E5;\" /> \n             Link title \n          </a> \n        </Navigation> \n        <div className=\"mdl-layout-spacer\"></div> \n        <div className=\"tools\"> \n          <FABButton mini> \n              <Icon name=\"add\" /> \n          </FABButton> \n\n          <FABButton mini> \n              <Icon name=\"delete\" /> \n          </FABButton> \n\n          <FABButton mini> \n              <Icon name=\"autorenew\" /> \n          </FABButton> \n        </div> \n      </Drawer> \n    ); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \nimport { Card, CardTitle, CardActions, Button, CardText } from \"react-mdl\"; \n\nexport default class Feed extends React.Component<{}, {}> { \n  render(){ \n    return ( \n      <div className=\"page-content feed-index\"> \n        <div className=\"feed-list\"> \n\n          <Card shadow={0} style={{width: \"100%\", height: \"auto\", \n          margin: \"auto\"}}> \n             <CardTitle expand style={{color: \"#fff\", backgroundColor: \n             \"#46B6AC\"}}> \n             Title \n             </CardTitle> \n             <CardText> \n                  Lorem ipsum dolor sit amet, consectetur adipiscing \n                  elit. Cras lobortis, mauris quis mollis porta \n             </CardText> \n             <CardActions border> \n                  <Button colored>Open</Button> \n             </CardActions> \n           </Card> \n\n        </div> \n\n        <div className=\"feed-contents\"></div> \n      </div> \n    ); \n  } \n} \n\n```", "```js\nnpm run build\nnpm start\n\n```", "```js\n .main-wrapper { \n  height: 100vh; \n} \n\n```", "```js\n$headrHeight: 66px; \n\n.feed-index { \n  display: flex; \n  flex-flow: row nowrap; \n  overflow-y: auto; \n  height: calc(100vh - #{$headrHeight}); \n  &.is-open { \n    overflow-y: hidden; \n    .feed-list { \n      width: 50%; \n    } \n    .feed-contents { \n      width: 50%; \n    } \n  } \n} \n.feed-list { \n  flex: 1 0 auto; \n  width: 100%; \n  transition: width 200ms ease; \n} \n.feed-contents { \n  flex: 1 0 auto; \n  width: 0; \n  transition: width 200ms ease; \n} \n\n```", "```js\n.tools { \n  height: 60px; \n  display: flex; \n  flex-flow: row nowrap; \n  justify-content: space-between; \n} \n\n```", "```js\n{ \n... \nresolve: { \n   modules: [ \n        \"node_modules\", \n        path.resolve(__dirname, \"app/ts\"), \n        path.resolve(__dirname, \"app/sass\") \n      ], \n      extensions: [ \".ts\", \".tsx\", \".js\", \".scss\", \".css\"] \n  }, \n... \n} \n\n```", "```js\n{ \n... \nmodule: { \n  rules: [ \n    ... \n    { \n      test: /\\.scss$/, \n      use: [ \n          \"style-loader\", \n          \"css-loader\", \n          \"sass-loader\" \n        ] \n    } \n  ] \n}, \n\n... \n} \n\n```", "```js\nnpm i -D sass-loader \n\n```", "```js\nnpm i -D node-sass \n\n```", "```js\nnpm run build\nnpm start\n\n```"]