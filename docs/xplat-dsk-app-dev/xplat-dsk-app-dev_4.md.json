["```js\nimport { remote } from \"electron\"; \nconst win = remote.getCurrentWindow(); \n\nexport default class \n\nHeader extends React.Component { \n//.... \n onRestore = () => { \n    win.restore(); \n  } \n\n  onMaximize = () => { \n    win.maximize(); \n  } \n\n  onClose = () => { \n    win.close(); \n\n  } \n//... \n} \n\n```", "```js\n <button className=\"btn btn-default pull-right\" onClick={this.onClose}> \n     <span className=\"icon \n\nicon-cancel\"></span> \n</button> \n\n```", "```js\n constructor( props ) { \n    super( props ); \n    this.state = { isMaximized: win.isMaximized() }; \n  } \n\n```", "```js\n..... \nrender() { \n    const { isMaximized } = this.state; \n    return ( \n      <header \n\nclassName=\"toolbar toolbar-header\"> \n          <div className=\"toolbar-actions\"> \n\n<button className=\"btn btn-default pull-right\" onClick={this.onClose}> \n                   <span \n\nclassName=\"icon icon-cancel\"></span> \n               </button> \n\n               { \n\nisMaximized ? ( \n                 <button className=\"btn btn-default pull-right\" onClick={this.onRestore}> \n                    <span className=\"icon icon-resize-small\"></span> \n                 </button> ) \n\n: ( \n                 <button className=\"btn btn-default pull-right\" onClick={this.onMaximize}> \n\n        <span className=\"icon icon-resize-full\"></span> \n                 </button>) \n\n     } \n\n          </div> \n       </header> \n    ) \n  } \n\n```", "```js\ncomponentWillMount() { \n    win.on( \"maximize\", this.updateState ); \n    win.on( \"unmaximize\", \n\nthis.updateState ); \n  } \n\n  updateState = () => { \n    this.setState({ \n      isMaximized: \n\nwin.isMaximized() \n    }); \n  } \n\n```", "```js\nnpm i -S nodejs-websocket \n\n```", "```js\nconst ws = require( \"nodejs-websocket\" ), \n      HOST = \"127.0.0.1\", \n      PORT = 8001; \n\nconst \n\nserver = ws.createServer(( conn ) => { \n\n  conn.on( \"text\", ( text ) => { \n\nserver.connections.forEach( conn => { \n      conn.sendText( text ); \n    }); \n  }); \n\nconn.on( \"error\", ( err ) => { \n    console.error( \"Server error\", err ); \n  }); \n\n}); \n\nserver.listen( PORT, HOST, () => { \n  console.info( \"Server is ready\" ); \n}); \n\n```", "```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <title>Echo</title> \n\n<meta charset=\"UTF-8\"> \n    <meta name=\"viewport\" content=\"width=device-width, initial- \n    scale=1.0\"> \n\n</head> \n  <body> \n    <form id=\"form\"> \n      <input id=\"input\" placeholder=\"Enter you \n\nmessage...\" /> \n      <button>Submit</button> \n    </form> \n    <output \n\nid=\"output\"></output> \n\n<script> \nconst HOST = \"127.0.0.1\", \n      PORT = 8001, \n\n    form = document.getElementById( \"form\" ), \n      input = document.getElementById( \"input\" ), \n      output = \n\ndocument.getElementById( \"output\" ); \n\nconst ws = new WebSocket( `ws://${HOST}:${PORT}` ); \n\nws.addEventListener( \"error\", ( e ) => { \n  console.error( \"Client's error: \", e ); \n}); \n\nws.addEventListener( \"open\", () => { \n  console.log( \"Client connected\" ); \n}); \n\nws.addEventListener( \"message\", e => { \n  output.innerHTML = e.data + \"<br \\>\" + output.innerHTML; \n}); \n\nform.addEventListener( \"submit\", ( e ) => { \n  e.preventDefault(); \n  ws.send( input.value \n\n); \n}); \n\n</script> \n  </body> \n</html> \n\n```", "```js\nnpm i -S http-server \n\n```", "```js\n{\n  \"scripts\": {\n    \"start:client\": \"http-server . -o\",\n    \"start:server\": \"node server.js\"\n  }\n\n}\n\n```", "```js\n npm run start:server \n\n```", "```js\n npm run start:client\n\n```", "```js\nclass Message { \n  static toString( event, data ){ \n    return JSON.stringify({ \n      event, data \n    }); \n  } \n  static fromString( text ){ \n    return JSON.parse( text ); \n  } \n} \n\nexports.Message = Message; \n\n```", "```js\nimport * as ws from \"nodejs-websocket\"; \nimport { Message } from \"./Message\"; \n\nexport default class \n\nServer { \n\n  constructor() { \n    this.server = ws.createServer(( conn ) => { \n\nconn.on( \"error\", ( err ) => { \n        console.error( \"Server error\", err ); \n      }); \n      conn.on( \n\n\"close\", ( code, reason ) => { \n        console.log( \"Server closes a connection\", code, reason ); \n      }); \n\n      conn.on( \"connection\", () => { \n        console.info( \"Server creates a new connection\" ); \n\n}); \n    }); \n\n  } \n\n  broadcast( event, data ){ \n    const text = Message.toString( \n\nevent, data ); \n    this.server.connections.forEach( conn => { \n      conn.sendText( text ); \n    }); \n  } \n\n  connect( host, port ) { \n     this.server.listen( port, host, () => { \n\nconsole.info( \"Server is ready\" );      }); \n  } \n} \n\n```", "```js\nconstructor() { \n\n    this.server = ws.createServer(( conn ) => { \n\n      conn.on( \"text\", \n\n( text ) => { \n        const msg = Message.fromString( text ), \n              method = `on${msg.event}`; \n        if ( !this[ method ] ) { \n          return; \n        } \n        this[ method ]( msg.data, conn ); \n\n      }); \n      //... \n    }); \n    //... \n  } \n\n```", "```js\nonjoin( name, conn ){ \n    const datetime = new Date(); \n    this.participants.set( conn, { \n\nname: name, \n      time: datetime.toString() \n    }); \n\n    this.broadcast( \"participants\", \n\nArray.from( this.participants.values() )); \n  } \n\n```", "```js\n\nconstructor() { \n    this.participants = new Map(); \n    //... \n} \n\n```", "```js\n\nontext( data, conn ){ \n    const name = this.participants.get( conn ).name; \n    this.broadcast( \n\n\"text\", { name, ...data } ); \n  } \n\n```", "```js\nconst EventEmitter = require( \"events\" ), \n          READY_STATE_OPEN = 1; \nimport { Message } from \n\n\"./Message\"; \n\nexport default class Client extends EventEmitter { \n\n  connect( host, port ){ \n\n    return new Promise(( resolve, reject ) => { \n      this.socket = new WebSocket( `ws://${host}:${port}` ); \n\n      this.socket.addEventListener( \"open\", () => { \n        resolve(); \n      }); \n\n    this.socket.addEventListener( \"error\", ( e ) => { \n        if ( e.target.readyState > READY_STATE_OPEN ) { \n\n          reject(); \n        } \n      }); \n\n      this.socket.addEventListener( \"message\", e \n\n=> { \n        const msg = Message.fromString( e.data ), \n              method = `on${msg.event}`; \n\n if ( !this[ method ] ) { \n          return; \n        } \n        this[ method ]( msg.data ); \n      }); \n\n    }); \n  } \n\n  onparticipants( data ){ \n    this.emit( \"participants\", data ); \n  } \n\n  ontext( data ){ \n    this.emit( \"text\", data ); \n  } \n\n getParticipants(){ \n\nreturn this.participants; \n  } \n\n  join( userName ) { \n    this.userName = userName; \n\nthis.send( \"join\", userName ); \n  } \n\n  message( text ) { \n    this.send( \"text\", { \n\nuserName: this.userName, \n      text, \n      dateTime: Date.now() \n    }); \n  } \n\n  send( \n\nevent, data ){ \n    this.socket.send( Message.toString( event, data ) ); \n  } \n} \n\n```", "```js\n\n  connect( host, port, client ) { \n    client.connect( host, port ).catch(() => { \n\nthis.server.listen( port, host, () => { \n        console.info( \"Server is ready\" ); \n        client.connect( \n\nhost, port ).catch(() => { \n          console.error( \"Client's error\" ); \n        }); \n      }); \n\n }); \n  } \n\n```", "```js\nimport Server from \"../Service/Server\"; \nimport Client from \"../Service/Client\"; \n\nconst HOST = \n\n\"127.0.0.1\", \n      PORT = 8001; \n\nexport default class App extends React.Component { \n\nconstructor(){ \n    super(); \n    this.client = new Client(); \n    this.server = new Server(); \n\nthis.server.connect( HOST, PORT, this.client ); \n  } \n//... \n} \n\n```", "```js\n{ name ? \n            ( <ChatPane client={client} \n                /> ) : \n            ( \n\n<Welcome  onNameChange={this.onNameChange} /> ) } \n\n```", "```js\nconstructor(){ \n    //... \n    this.state = { \n      name: \"\" \n    }; \n} \n\n```", "```js\n\nonNameChange = ( userName ) => { \n  this.setState({ name: userName }); \n  this.client.join( \n\nuserName ); \n} \n\nrender() { \n  const client = this.client, \n        name = this.state.name; \n  return ( \n    <div className=\"window\"> \n      <Header></Header> \n      <div \n\nclassName=\"window-content\"> \n        { name ? \n          ( <ChatPane client={client} \n\n/> ) : \n          ( <Welcome  onNameChange={this.onNameChange} /> ) } \n      </div> \n\n<Footer></Footer> \n    </div> \n  ); \n} \n\n```", "```js\nimport React from \"react\"; \nimport PropTypes from \"prop-types\"; \n\nexport default class Welcome extends \n\nReact.Component { \n\n  onSubmit = ( e ) => { \n    e.preventDefault(); \n    this.props.onNameChange( \n\nthis.nameEl.value || \"Jon\" ); \n  } \n\n  static defaultProps = { \n    onNameChange: () => {} \n\n} \n\n  static propTypes = { \n    onNameChange: PropTypes.func.isRequired \n  } \n\n  render() { \n\n    return ( \n      <div className=\"pane padded-more\"> \n        <form onSubmit={this.onSubmit}> \n\n          <div className=\"form-group\"> \n            <label>Tell me your name</label> \n\n        <input required className=\"form-control\" placeholder=\"Name\" \n              ref={(input) => { this.nameEl \n\n= input; }} /> \n          </div> \n          <div className=\"form-actions\"> \n\n<button className=\"btn btn-form btn-primary\">OK</button> \n          </div> \n\n</form> \n      </div> \n    ) \n  } \n} \n\n```", "```js\nexport default function ChatPane( props ){ \n  const { client } = props; \n  return ( \n    <div \n\nclassName=\"pane-group\"> \n\n      <Participants client={client} /> \n\n      <Conversation  \n\nclient={client} /> \n\n    </div> \n  ); \n\n} \n\n```", "```js\nimport React from \"react\"; \nimport TimeAgo from \"react-timeago\"; \nimport PropTypes from \"prop-types\"; \n\nexport default class Participants extends React.Component { \n\n constructor( props ){ \n    super( \n    props ); \n    this.state = { \n      participants: props.client.getParticipants() \n    } \n\nprops.client.on( \"participants\", this.onClientParticipants ); \n  } \n\n  static defaultProps = { \n    client: null \n  } \n\n  static propTypes = { \n    client: PropTypes.object.isRequired \n  } \n\nonClientParticipants = ( participants ) => { \n    this.setState({ \n      participants: \n\nparticipants \n    }) \n  } \n\n  render(){ \n    return ( \n      <div className=\"pane pane-sm \n      sidebar\"> \n        <ul className=\"list-group\"> \n          {this.state.participants.map(( user ) => ( \n\n            <li className=\"list-group-item\" key={user.name}> \n              <div className=\"media-\n              body\"> \n                <strong><span className=\"icon icon-user\"></span>&nbsp;     \n                {user.name}\n                </strong> \n                <p>Joined <TimeAgo date={user.time} /></p> \n              </div> \n            </li> \n          ))} \n        </ul> \n      </div> \n    ); \n  } \n} \n\n```", "```js\nimport React from \"react\"; \nimport PropTypes from \"prop-types\"; \n\nexport default class Conversation \n\nextends React.Component { \n\n  constructor( props ){ \n    super( props ); \n    this.messages = []; \n\n    this.state = { \n      messages: [] \n    } \n    props.client.on( \"text\",  this.onClientText ); \n  } \n\n  static defaultProps = { \n    client: null \n  } \n\n  static propTypes = { \n    client: PropTypes.object.isRequired \n  } \n\nonClientText = ( msg ) => { \n    msg.time = new \n\nDate( msg.dateTime ); \n    this.messages.unshift( msg ); \n    this.setState({ \n      messages: this.messages \n\n    }); \n  } \n\n static normalizeTime( date, now, locale ){ \n    const isToday = ( \n\nnow.toDateString() === date.toDateString() ); \n    // when local is undefined, toLocaleDateString/toLocaleTimeString \n\nuse default locale \n    return isToday ? date.toLocaleTimeString( locale ) \n      : date.toLocaleDateString( \n\nlocale ) + ` ` + date.toLocaleTimeString( locale ); \n  } \n\n  render(){ \n    const { messages } = \n\nthis.state; \n    return ( \n        <div className=\"pane padded-more l-chat\"> \n          <ul \n\nclassName=\"list-group l-chat-conversation\"> \n            {messages.map(( msg, i ) => ( \n\n<li className=\"list-group-item\" key={i}> \n                <div className=\"media-body\"> \n\n    <time className=\"media-body__time\">{Conversation.normalizeTime(  \n    msg.time, new Date() )}</time> \n\n           <strong>{msg.userName}:</strong> \n                  {msg.text.split( \"\\n\" ) .map(( line, \n                  inx ) => ( \n                    <p key={inx}>{line}</p> \n                  ))} \n              </div> \n              </li> \n            ))} \n          </ul> \n         </div> \n    ); \n  } \n} \n\n```", "```js\n  render(){ \n    const { messages } = this.state; \n    return ( \n... \n        <form onSubmit=\n\n{this.onSubmit} className=\"l-chat-form\"> \n            <div className=\"form-group\"> \n\n<textarea required placeholder=\"Say something...\" \n                onKeyDown={this.onKeydown} \n\nclassName=\"form-control\" ref={ el => { this.inputEl = el; }}></textarea> \n            </div> \n\n          <div className=\"form-actions\"> \n              <button className=\"btn btn-form btn-\n\nprimary\">OK</button> \n            </div> \n          </form> \n ); \n} \n... \n\n```", "```js\nconst ENTER_KEY = 13; \n//... \nonKeydown = ( e ) => { \n    if ( e.which === ENTER_KEY && !\n\ne.ctrlKey && !e.metaKey && !e.shiftKey ) { \n      e.preventDefault(); \n      this.submit(); \n    } \n  } \n\n  onSubmit = ( e ) => { \n    e.preventDefault(); \n    this.submit(); \n\n}  \n\n  submit() { \n    this.props.client.message( this.inputEl.value ); \n    this.inputEl.value = \"\"; \n\n  } \n\n//.. \n\n```", "```js\nnpm init -y \n\n```", "```js\nnpm i -D jest \n\n```", "```js\n \"scripts\": { \n    \"test\": \"jest\" \n  } \n\n```", "```js\nfunction double( x ){\n  return x * 2;\n}\nexports.double = double;\n\n```", "```js\nconst { double } = require( \"./unit\" );\ndescribe( \"double\", () => {\n  it( \"doubles a given number\", () => {\n    const x = 1;\n    const res = double( x );\n    expect( res ).toBe( 2 );\n  });\n});\n\n```", "```js\nnpm i -D babel-jest \n\n```", "```js\n{ \n  \"presets\": [ \n     [\"env\", { \n      \"targets\": { \"node\": 7 }, \n      \"useBuiltIns\": true \n    }], \n    \"react\" \n  ], \n\n  \"plugins\": [ \n     \"transform-es2015-modules-commonjs\", \n\n \"transform-class-properties\", \n     \"transform-object-rest-spread\" \n  ] \n} \n\n```", "```js\nnpm i -D babel-preset-env \n\n```", "```js\n{ \n ... \n  \"scripts\": { \n     ... \n    \"test\": \"jest\" \n  }, \n  \"jest\": { \n\n\"roots\": [ \n      \"<rootDir>/app/js\" \n    ] \n  }, \n ... \n} \n\n```", "```js\nnpm i -D react-test-renderer \n\n```", "```js\nimport * as React from \"react\"; \nimport Footer from \"./Footer\"; \nimport * as renderer from \"react-test-\n\nrenderer\"; \n\ndescribe( \"Footer\", () => { \n  it( \"matches previously saved snapshot\", () => { \n\n const tree = renderer.create( \n      <Footer /> \n    ); \n\n    expect( tree.toJSON() \n\n).toMatchSnapshot(); \n  }); \n}); \n\n```", "```js\nimport * as React from \"react\"; \nimport Client from \"../Service/Client\"; \nimport Participants from \n\n\"./Participants\"; \nimport * as renderer from \"react-test-renderer\"; \n\ndescribe( \"Participants\", () => { \n\n  it( \"matches previously saved snapshot\", () => { \n    const items = [{ \n            name: \"Jon\", \n            time: new Date( 2012, 2, 12, 5, 5, 5, 5 ) } \n          ], \n          client = new Client(), \n\n        component = renderer.create( <Participants client={client} /> \n        ); \n\n    component.getInstance\n\n().onClientParticipants( items ); \n    expect( component.toJSON() ).toMatchSnapshot(); \n  }); \n}); \n\n```", "```js\nimport { shallow } from \"enzyme\"; \nimport * as manifest from \"../../../package.json\"; \n\ndescribe( \n\n\"Footer\", () => { \n  //... \n  it( \"renders manifest name\", () => { \n    const tree = shallow( \n\n   <Footer /> \n    ); \n    expect ( tree.find( \"footer\" ).length ).toBe( 1 ); \n    expect( tree.find( \n\n\"footer\" ).text().indexOf( manifest.name ) ).not.toBe( -1 ); \n  }); \n}); \n\n```", "```js\nnpm i -D electron-builder \n\n```", "```js\n \"scripts\": { \n    ...  \n    \"dist\": \"build\" \n  }, \n\n```", "```js\n \"build\": { \n    \"appId\": \"com.example.chat\" \n  }, \n\n```", "```js\nmainWindow = new BrowserWindow({ \n     width: 1000, height: 600, frame: false, \n     icon: path.join( \n\n__dirname, \"icon-64x64.png \n\" ) \n});\n\n```", "```js\nnpm run dist\n\n```", "```js\nbuild -l deb \nbuild -w nsis-web \nbuild -m pkg \n\n```", "```js\nnpm i -S electron-updater \n\n```", "```js\n\"build\": { \n    \"appId\": \"com.example.chat\", \n    \"publish\": [ \n      { \n        \"provider\": \n\n\"generic\", \n        \"url\": \"http://127.0.0.1:8080/\" \n      } \n    ] \n  }, \n... \n\n```", "```js\nconst { app, BrowserWindow, ipcMain } = require( \"electron\" ), \n          { autoUpdater } = require( \"electron-\n\nupdater\" ); \n\nfunction send( event, text = \"\" ) { \n  mainWindow && mainWindow.webContents.send( \n\nevent, text ); \n} \n\nautoUpdater.on(\"checking-for-update\", () => { \n  send( \"info\", \"Checking for \n\nupdate...\" ); \n}); \nautoUpdater.on(\"update-available\", () => { \n  send( \"info\", \"Update not available\" ); \n\n}); \nautoUpdater.on(\"update-not-available\", () => { \n  send( \"info\", \"Update not available\" ); \n}); \n\nautoUpdater.on(\"error\", () => { \n  send( \"info\", \"Error in auto-updater\" ); \n}); \nautoUpdater.on\n\n(\"download-progress\", () => { \n  send( \"info\", \"Download in progress...\" ); \n}); \nautoUpdater.on\n\n(\"update-downloaded\", () => { \n  send( \"info\", \"Update downloaded\" ); \n  send( \"update-downloaded\" ); \n}); \n\nipcMain.on( \"restart\", () => { \n  autoUpdater.quitAndInstall(); \n}); \n\n```", "```js\n// require( \"electron-debug\" )(); \n\n```", "```js\n<!DOCTYPE html> \n<html> \n  <head> \n    <meta charset=\"UTF-8\"> \n\n<title>Chat</title> \n    <link href=\"./assets/css/custom.css\" rel=\"stylesheet\" type=\"text/css\"/> \n  </head> \n  <body> \n    <app></app> \n    <i id=\"statusbar\" \n\nclass=\"statusbar\"></i> \n  </body> \n  <script> \n   require( \"./build/renderer.js\" ); \n\n// Listen for messages \nconst { ipcRenderer } = require( \"electron\" ), \n      statusbar = \n\ndocument.getElementById( \"statusbar\" ); \n\nipcRenderer.on(  \"info\", ( ev, text ) => { \n\nstatusbar.innerHTML = text; \n}); \nipcRenderer.on(  \"update-downloaded\", () => { \n  const ok = confirm\n\n('The application will automatically restart to finish installing the update'); \n  ok && ipcRenderer.send( \n\n\"restart\" ); \n}); \n\n  </script> \n</html> \n\n```", "```js\n.statusbar { \n  position: absolute; \n  bottom: 1px; \n  left: 6px; \n} \n\n```", "```js\nnpm run build \nnpm run dist \n\n```", "```js\nhttp-server ./dist \n\n```", "```js\nnpm version patch \nnpm run build \nnpm run dist \n\n```"]