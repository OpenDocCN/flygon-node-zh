["```js\nnpm i -S feedme\nnpm i -S request\n\n```", "```js\nconst request = require( \"request\" ); \n\nfunction rss( feedUrl, onDone ){ \n  const feed = { \n          title: \"\", \n          items: [] \n        }, \n        parser = createFeedParserStream( feed ); \n\n  request \n    .get( feedUrl ) \n    .on( \"error\", ( err ) => { \n      onDone( err ); \n    }) \n    .on( \"end\", () => { \n      onDone( null, feed ); \n    }) \n    .pipe( parser ); \n} \n\n```", "```js\nconst FeedMe = require( \"feedme\" ); \n\nfunction createFeedParserStream( feed ) { \n  const parser = new FeedMe( true ); \n  parser.on( \"title\", ( title ) => { \n    feed.title = title; \n  }); \n  parser.on( \"item\", ( item ) => { \n    feed.items.push( item ); \n  }); \n  return parser; \n} \n\n```", "```js\nrss( \"http://feeds.feedburner.com/CssTricks\", ( err, feed ) => { \n  if ( err ) { \n    return console.log( err ); \n  } \n  console.log( feed ); \n}); \n\n```", "```js\nfunction rss( feedUrl ){ \n  return new Promise(( resolve, reject ) => { \n    const feed = { \n            title: \"\", \n            items: [] \n          }, \n          parser = createFeedParserStream( feed ); \n\n    request \n      .get( feedUrl ) \n      .on( \"error\", ( err ) => reject( err ) ) \n      .on( \"end\", () => resolve( feed ) ) \n      .pipe( parser ); \n  }); \n} \n\n```", "```js\nrss( \"http://feeds.feedburner.com/CssTricks\") \n  .then(( feed ) => console.log( feed ) ) \n  .catch( err => console.log( err ) ); \n\n```", "```js\nasync function handler() { \n  try { \n    const feed = await rss( \"http://feeds.feedburner.com/CssTricks\"); \n  } catch( e ) { \n    // handle exception \n  } \n} \n\nhandler(); \n\n```", "```js\nexport interface IRssItem { \n  description: string; \n  link: string; \n  pubdate: string; \n  title: string; \n} \n\nexport interface IFeed { \n  title: string; \n  items: IRssItem[]; \n} \n\n```", "```js\nimport { IRssItem } from \"../Interfaces/Rss\"; \nexport interface IFeedMe { \n  new ( flag?: boolean ): NodeJS.WritableStream; \n  on( event: \"title\", onTitle: ( title: string ) => void): void; \n  on( event: \"item\", onItem: ( item: IRssItem ) => void ): void; \n} \n\n```", "```js\nimport { IFeedMe } from \"./IFeedMe\"; \nconst FeedMe: IFeedMe = require( \"feedme\" ); \n\n```", "```js\nimport { IRssItem, IFeed } from \"../Interfaces/Rss\"; \nimport { IFeedMe } from \"./IFeedMe\"; \nimport * as request from \"request\"; \nconst FeedMe: IFeedMe = require( \"feedme\" ); \n\nfunction createFeedParserStream( feed: IFeed ): NodeJS.WritableStream { \n  const parser = new FeedMe( true ); \n  parser.on( \"title\", ( title: string ) => { \n    feed.title = title; \n  }); \n  parser.on( \"item\", ( item: IRssItem ) => { \n    feed.items.push( item ); \n  }); \n  return parser; \n} \n\nexport default function rss( feedUrl: string ): Promise<IFeed> { \n  const feed: IFeed = { \n          title: \"\", \n          items: [] \n        }; \n  return new Promise<IFeed>(( resolve, reject ) => { \n    request.get( feedUrl ) \n      .on( \"error\", ( err: Error ) => { \n        reject( err ); \n      }) \n      .on( \"end\", () => { \n        resolve( feed ); \n      }) \n      .pipe( createFeedParserStream( feed ) ); \n  }); \n} \n\n```", "```js\nexport interface IMenuItem { \n  url: string; \n  title: string; \n  id: string; \n} \n\n```", "```js\nimport { IMenuItem } from \"../Interfaces\"; \n\nexport interface IMenu { \n  items: IMenuItem[]; \n  clear(): void; \n  remove( url: string ): IMenuItem[]; \n  add( url: string, title: string ): IMenuItem[]; \n  load(): IMenuItem[]; \n} \n\n```", "```js\nimport sha1 = require( \"sha1\" ); \nimport { IMenu } from \"./IMenu\"; \nimport { IMenuItem } from \"../Interfaces\"; \n\nclass Menu implements IMenu { \n\n  items: IMenuItem[] = []; \n\n  constructor( private ns: string ){ \n  } \n\n  clear(): void { \n    this.items =  []; \n    this.save(); \n  } \n\n  remove( url: string ): IMenuItem[] { \n    this.items =  this.items.filter(( item ) => item.url !== url ); \n    this.save(); \n    return this.items; \n  } \n\n  add( url: string, title: string ): IMenuItem[] { \n    const id = <string> sha1( url ); \n    this.items.push({ id, url, title }); \n    this.save(); \n    return this.items; \n  } \n\n  private save(): void { \n    localStorage.setItem( this.ns, JSON.stringify( this.items ) ); \n  } \n\n  load(): IMenuItem[] { \n    this.items = JSON.parse( localStorage.getItem( this.ns ) || \"[]\" ); \n    return this.items; \n  } \n} \n\nexport default Menu; \n\n```", "```js\nexport const TOGGLE_ADD_FEED = \"TOGGLE_ADD_FEED\"; \nexport const SET_ACTIVE_FEED = \"SET_ACTIVE_FEED\"; \nexport const FETCH_MENU = \"FETCH_MENU\"; \nexport const ADD_FEED = \"ADD_FEED\"; \nexport const SET_ADD_FEED_ERROR = \"SET_ADD_FEED_ERROR\"; \nexport const SET_FEED_ERROR = \"SET_FEED_ERROR\"; \nexport const FETCH_FEED = \"FETCH_FEED\"; \nexport const REMOVE_FEED = \"REMOVE_FEED\"; \n\n```", "```js\nexport const MENU_STORAGE_NS = \"rssItems\"; \nexport const FEED_ITEM_PER_PAGE = 10; \n\n```", "```js\nimport { createAction } from \"redux-actions\"; \nconst toggleOpenAddFeed = createAction( \"TOGGLE_ADD_FEED\", ( toggle ) => toggle  ); \n\n```", "```js\nconsole.log( toggleOpenAddFeed( true ) ),\n\n```", "```js\n{ payload: \"TOGGLE_ADD_FEED\", type: true } \n\n```", "```js\nimport { handleActions } from \"redux-actions\"; \nconst app = handleActions({ \n\n  \"TOGGLE_ADD_FEED\": ( state, action ) => ({ \n    ...state, isOpenAddFeed: action.payload \n  }) \n\n}, defaultState ); \n\n```", "```js\nconst fetchFeed = createAction( \"FETCH_FEED\", async ( url: string ) => await rss( url ) ); \n\n```", "```js\nconst app = handleActions({ \n  \"FETCH_FEED\": ( state, action ) => ( \n      ...state, \n      items: action.payload.items \n  }) \n\n}, defaultState ); \n\n```", "```js\nconst app = handleActions({ \n\n  \"FETCH_FEED\": ( state, action ) => ({ \n    if ( action.error ) { \n      return { ...state, feedError: `Cannot fetch feed: ${action.payload}` }; \n    } \n     return { \n      ...state, \n      items: action.payload.items \n    }; \n  }) \n\n}, defaultState ); \n\n```", "```js\n//... \nexport interface IAppState { \n  isOpenAddFeed: boolean; \n  menu: IMenuItem[]; \n  items: IRssItem[]; \n  feedError: string; \n  activeFeedUrl: string; \n} \n\n```", "```js\nimport { Action } from \"redux-actions\"; \n\nexport interface IAppActions { \n  toggleOpenAddFeed: ( toggle: boolean ) => Action<boolean>; \n  setActiveFeed:  ( url: string ) => Action<string>; \n  setFeedError: ( msg: string ) => Action<string>; \n  fetchMenu: () => Promise<IMenuRssPayload>; \n  addFeed: ( url: string ) => Promise<IMenuItem[]>; \n  removeFeed: ( url: string ) => Promise<IMenuItem[]>; \n  fetchFeed: ( url: string ) => Promise<IFeed>; \n} \n\n```", "```js\nexport interface IMenuRssPayload { \n  menuItems: IMenuItem[]; \n  rssItems: IRssItem[]; \n} \n\n```", "```js\nimport { createAction } from \"redux-actions\"; \nimport * as vo from \"../Constants\"; \nimport { IMenuItem, IRssItem, IFeed, IMenuRssPayload } from \"../Interfaces\"; \nimport Menu from \"../Services/Menu\"; \nimport rss from \"../Services/rss\"; \nconst menu = new Menu( vo.MENU_STORAGE_NS ); \n\n```", "```js\nconst feedActions = { \n\n  toggleOpenAddFeed: createAction<boolean, boolean>( \n    vo.TOGGLE_ADD_FEED, ( toggle: boolean ) => toggle \n  ), \n\n  setActiveFeed: createAction<string, string>( \n    vo.SET_ACTIVE_FEED, ( url: string ) => url \n  ), \n\n  setFeedError: createAction<string, string>( \n    vo.SET_FEED_ERROR, ( msg: string ) => msg \n  ), \n\n  removeFeed: createAction<IMenuItem[], string>( \n    vo.REMOVE_FEED, ( url: string ) => menu.remove( url ) \n  ), \n}; \n\n```", "```js\nconst feedActions = { \n  //... \n\n  fetchFeed: createAction<Promise<IFeed>, string>( \n    vo.FETCH_FEED, async ( url: string ) => await rss( url ) \n  ), \n\n  addFeed: createAction<Promise<IMenuItem[]>, string>( \n    vo.ADD_FEED, \n    async ( url: string ) => { \n      if ( menu.items.find( item => item.url === url ) ) { \n        throw new Error( \"This feed is already in the list\" ); \n      } \n      const feed = await rss( url ); \n      if ( !feed.title ) { \n        throw new Error( \"Unsupported format\" ); \n      } \n      return menu.add( url, feed.title ); \n    } \n  ), \n\n  fetchMenu: createAction<Promise<IMenuRssPayload>>( \n    vo.FETCH_MENU, async () => { \n      menu.load(); \n      let promises = menu.items.map( item => rss( item.url ) ); \n      return Promise.all( promises ) \n        .then(( feeds: IFeed[] ) => { \n          if ( !feeds.length ) { \n            return { menuItems: [], rssItems: [] }; \n          } \n          let all = feeds \n              .map( feed => feed.items ) \n              // combine [[items],[item]] in a flat array \n              .reduce(( acc: IRssItem[], items: IRssItem[] ) => \n              acc.concat( items ) ) \n              // sort the list by publication date DESC \n              .sort(( a, b ) => { \n                let aDate = new Date( a.pubdate ), \n                    bDate = new Date( b.pubdate ); \n                return bDate.getTime() - aDate.getTime(); \n              }) \n              .slice( 0, vo.FEED_ITEM_PER_PAGE ); \n          return { menuItems: menu.items, rssItems: all }; \n        }); \n    } \n  ) \n}; \n\nexport default feedActions; \n\n```", "```js\nimport { handleActions, Action } from \"redux-actions\"; \nimport { IAppState, IMenuRssPayload } from \"../Interfaces\"; \nimport * as vo from \"../Constants\"; \n\nconst defaultState: IAppState = { \n  isOpenAddFeed: false, \n  menu: [], \n  items: [], \n  feedError: \"\", \n  activeFeedUrl: \"\" \n}; \n\n```", "```js\nconst app = handleActions<IAppState>({ \n\n  [ vo.TOGGLE_ADD_FEED ]: ( state, action ) => ({ \n    ...state, isOpenAddFeed: action.payload \n  }), \n\n  [ vo.ADD_FEED ]: ( state, action ) => { \n    if ( action.error ) { \n      return { ...state, feedError: `Cannot add feed: \n      ${action.payload}` }; \n    } \n    return { ...state, feedError: \"\", isOpenAddFeed: false, menu: \n    action.payload }; \n  }, \n\n  [ vo.SET_FEED_ERROR ]: ( state, action ) => ({ \n    ...state, feedError: action.payload \n  }), \n\n  [ vo.REMOVE_FEED ]: ( state, action ) => { \n    if ( action.error ) { \n      return { ...state, feedError: `Cannot remove feed: \n      ${action.payload}` }; \n    } \n    return { ...state, menu: action.payload }; \n  }, \n\n  [ vo.FETCH_MENU ]: ( state, action: Action<IMenuRssPayload> ) => { \n    if ( action.error ) { \n      return { ...state, feedError: `Cannot fetch menu:      \n      ${action.payload}` }; \n    } \n    return { \n      ...state, \n      menu: action.payload.menuItems, \n      items: action.payload.rssItems, \n      activeFeedUrl: \"\" \n    }; \n  }, \n\n  [ vo.FETCH_FEED ]: ( state, action ) => { \n    if ( action.error ) { \n      return { ...state, feedError: `Cannot fetch feed: \n      ${action.payload}` }; \n    } \n     return { \n      ...state, \n      items: action.payload.items \n    }; \n  }, \n\n  [ vo.SET_ACTIVE_FEED ]: ( state, action ) => ({ \n    ...state, activeFeedUrl: action.payload \n  }) \n\n}, defaultState ); \n\nexport default app; \n\n```", "```js\nimport { combineReducers } from \"redux\"; \nimport app from \"./app\"; \n\nconst reducer = combineReducers({ state: app }); \nexport default reducer; \n\n```", "```js\nexport interface IRootState { \n  state: IAppState; \n} \n\n```", "```js\nfunction fetchFeedAsync( url ) { \n  return dispatch => { \n    dispatch( fetchFeedRequest() ); \n    rss( url ) \n      .then( data => dispatch( fetchFeedSuccess( data ) )) \n      .catch( e  => dispatch( fetchFeedFailure( e ) )); \n  }; \n} \n\n```", "```js\nconst fetchFeed = createAction( \n    \"FETCH_FEED\", async ( url ) => await rss( url ) \n  ) \n\n```", "```js\nimport { Provider } from \"react-redux\"; \nimport { createStore, applyMiddleware, compose } from \"redux\"; \nimport thunkMiddleware from \"redux-thunk\"; \nimport * as promiseMiddleware from \"redux-promise\"; \n\nconst storeEnhancer = compose( \n  applyMiddleware( \n    thunkMiddleware, \n    promiseMiddleware \n  ) \n); \n\nconst store = createStore( \n  appReducers,  storeEnhancer \n); \n\nReactDOM.render( \n  <Provider store={store}> \n      <App {...this.props} /> \n  </Provider>, \n  document.getElementById( \"root\" ) \n); \n\n```", "```js\n// mapping state to the props \nconst mapStateToProps = ( state: IRootState ) => state; \n\nimport actions from \"../Actions/actions\"; \n// mapping actions to the props \nconst mapDispatchToProps = { \n  ...actions \n}; \n\n```", "```js\nexport type TStore = IRootState & IAppActions; \n\n```", "```js\nclass App extends React.Component<TStore, {}> { \n  render() { \n    return ( \n      <div className=\"main-wrapper\"> \n        <ErrorAlert store={this.props} /> \n        <Layout fixedHeader fixedDrawer> \n          <TitleBar /> \n          <Menu store={this.props} /> \n          <Content> \n            <Feed store={this.props} /> \n          </Content> \n        </Layout> \n      </div> \n    ); \n  } \n} \n\n// connect store to App \nexport default connect( \n  mapStateToProps, \n  mapDispatchToProps \n)( App ); \n\n```", "```js\n class App extends React.Component<TStore, {}> { \n\n  componentDidMount() { \n    this.props.fetchMenu(); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \nimport { Dialog, DialogTitle, \n  DialogContent, DialogActions, Button } from \"react-mdl\"; \nimport { TStore } from \"../Interfaces\"; \n\ninterface IProps { \n  store: TStore; \n} \n\nexport default class ErrorAlert extends React.Component<IProps, {}> { \n\n  private onClose = () => { \n    this.props.store.setFeedError( \"\" ); \n  } \n\n  render() { \n    const { feedError } = this.props.store.state; \n    return ( \n    <Dialog open={Boolean(feedError)}> \n          <DialogTitle>Houston, we have a problem</DialogTitle> \n          <DialogContent> \n            <p>{feedError}</p> \n          </DialogContent> \n          <DialogActions> \n            <Button type=\"button\" onClick={this.onClose}>Close</Button> \n          </DialogActions> \n        </Dialog> \n    ); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \n\nimport { Drawer, Navigation, Icon, FABButton } from \"react-mdl\"; \nimport { IMenuItem, TStore } from \"../Interfaces\"; \nimport AddFeedDialog from \"./AddFeedDialog\"; \n\ninterface IProps { \n  store: TStore; \n} \n\nexport default class Menu extends React.Component<IProps, {}> { \n\n  static makeClassName = ( toggle: boolean ) => { \n    const classList = [ \"mdl-navigation__link\" ]; \n    toggle && classList.push( \"mdl-navigation__link--current\" ); \n    return classList.join( \" \" ); \n  } \n\n  private onAddFeed = () => { \n     this.props.store.toggleOpenAddFeed( true ); \n  } \n\n  private onRemoveFeed = () => { \n    const { removeFeed, fetchMenu, state } = this.props.store; \n     removeFeed( state.activeFeedUrl ); \n     fetchMenu(); \n  } \n\n  private onRefresh = () => { \n    this.props.store.fetchMenu(); \n  } \n\n  render (){ \n    const { state } = this.props.store, \n          menu = state.menu || []; \n\n    return ( \n     <Drawer  className=\"mdl-color--blue-grey-900 mdl-\n     color-text--blue-grey-50\"> \n        <AddFeedDialog store={this.props.store} /> \n        <Navigation className=\"mdl-color--blue-grey-80\"> \n\n        { menu.map(( item: IMenuItem ) => ( \n          <a key={item.id} href={`#${item.id}`} \n          className={Menu.makeClassName( item.url === \n          state.activeFeedUrl )}> \n           <Icon name=\"& #xE0E5;\" /> \n           {item.title} \n          </a> \n        )) } \n        </Navigation> \n        <div className=\"mdl-layout-spacer\"></div> \n        <div className=\"tools\"> \n          <FABButton mini onClick={this.onAddFeed}> \n              <Icon name=\"add\" /> \n          </FABButton> \n          { state.activeFeedUrl && ( \n          <FABButton mini> \n              <Icon name=\"delete\" onClick={this.onRemoveFeed} /> \n          </FABButton> \n          )} \n          <FABButton mini onClick={this.onRefresh}> \n              <Icon name=\"autorenew\" /> \n          </FABButton> \n        </div> \n      </Drawer> \n    ); \n  } \n} \n\n```", "```js\nimport { Button, Dialog, DialogTitle, DialogContent, DialogActions, Textfield } from \"react-mdl\"; \nimport * as React from \"react\"; \nimport { TStore } from \"../Interfaces\"; \n\ninterface IProps { \n  store: TStore; \n} \nexport default class AddFeedDialog extends React.Component<IProps, {}> { \n\n  private urlEl: Textfield; \n  private formEl: HTMLFormElement; \n  private onSubmit = ( e: React.MouseEvent<HTMLFormElement>  ) => { \n    // https://github.com/react-mdl/react-mdl/issues/465 \n    const urlEl = this.urlEl as any; \n    e.preventDefault(); \n    this.save( urlEl.inputRef.value ); \n  } \n  async save( url: string ){ \n    const { addFeed, fetchMenu } = this.props.store; \n    await addFeed( url ); \n    await fetchMenu(); \n    if ( !this.props.store.state.feedError ){ \n      this.formEl.reset(); \n    } \n  } \n  private close = () => { \n     this.props.store.toggleOpenAddFeed( false ); \n     this.formEl.reset(); \n  } \n\n  render() { \n    const { isOpenAddFeed } = this.props.store.state; \n\n    return ( \n      <div> \n\n        <Dialog open={isOpenAddFeed}> \n          <DialogTitle>New Feed</DialogTitle> \n          <DialogContent> \n            <form onSubmit={this.onSubmit} ref={(el: HTMLFormElement)   \n            => { this.formEl = el; }}> \n\n            <Textfield \n                label=\"URL\" \n                required \n                floatingLabel \n                ref={(el: Textfield) => { this.urlEl = el; }} \n            /> \n\n            </form> \n          </DialogContent> \n          <DialogActions> \n            <Button type=\"button\" onClick={this.onSubmit}>Save</Button> \n            <Button type=\"button\" onClick={this.close}>Cancel</Button> \n          </DialogActions> \n        </Dialog> \n      </div> \n    ); \n  } \n} \n\n```", "```js\nimport * as React from \"react\"; \nimport { shell } from \"electron\"; \n\nimport { Card, CardTitle, CardActions, Button, CardText } from \"react-mdl\"; \nimport { IRssItem, TStore } from \"../Interfaces\"; \n\ninterface IProps { \n  store: TStore; \n} \n\nexport default class Feed extends React.Component<IProps, {}> { \n\n  private indexEl: HTMLElement; \n  private contentsEl: HTMLElement; \n  private webviewEl: Electron.WebviewTag; \n\n  // Convert HTML into plain text \n  static stripHtml( html: string ){ \n    var tmp = document.createElement( \"DIV\" ); \n    tmp.innerHTML = html; \n    return tmp.textContent || tmp.innerText || \"\"; \n  } \n\n  private onCloseLink = () => { \n    this.indexEl.classList.remove( \"is-open\" ); \n    this.webviewEl.src = \"blank\"; \n  } \n\n  private onOpenLink = ( e: React.MouseEvent<HTMLElement> ) => { \n    const btn = e.target as HTMLElement, \n          url = btn.dataset[ \"link\" ]; \n    e.preventDefault(); \n    this.indexEl.classList.add( \"is-open\" ); \n    this.webviewEl.src = url; \n  } \n\n  componentDidMount() { \n    this.webviewEl = this.contentsEl.firstChild as Electron.WebviewTag; \n    this.webviewEl.addEventListener( \"new-window\", ( e ) => { \n      e.preventDefault(); \n      shell.openExternal( e.url ); \n    }); \n  } \n\n  render(){ \n    const { items } =  this.props.store.state; \n    return ( \n      <div className=\"page-content feed-index\" ref={(el: HTMLElement) \n      => { this.indexEl = el; }}> \n        <div className=\"feed-list\"> \n\n        { items.map(( item: IRssItem, inx: number ) => ( \n          <Card key={inx} shadow={0} style={{width: \"100%\", height: \n         \"auto\", margin: \"auto\"}}> \n           <CardTitle expand style={{color: \"#fff\", backgroundColor: \n          \"#46B6AC\"}}> \n           {item.title} \n           </CardTitle> \n            <CardText onClick={this.onCloseLink}> \n                { item.description ? Feed.stripHtml( item.description ) \n            : \"\" } \n            </CardText> \n            <CardActions border> \n                <Button colored data-link={item.link} onClick=\n             {this.onOpenLink}>Open</Button> \n            </CardActions> \n         </Card> \n        )) } \n        </div> \n        <div className=\"feed-contents\" \n            ref={(el: HTMLElement) => { this.contentsEl = el; }} \n            dangerouslySetInnerHTML={{ \n            __html: `<webview class=\"feed-contents__src\"></webview>` \n          }}></div> \n      </div> \n    ); \n  } \n}\n\n```", "```js\nnpm build\n\n```", "```js\nnpm start\n\n```", "```js\nimport * as Redux from \"redux\"; \nimport { IRootState, IMenuItem } from \"../Interfaces\"; \nimport actions from \"../Actions/actions\"; \n\nexport default class Router { \n\n  constructor( private store: Redux.Store<IRootState> ) { \n  } \n\n  getFeedUrlById( id: string ): string { \n    const { state } = this.store.getState(), \n          match = state.menu.find(( item: IMenuItem ) =>  item.id === \n          id ); \n      return match ? match.url : \"\"; \n  } \n\n  register(){ \n    window.addEventListener( \"hashchange\", () => { \n      const url =  this.getFeedUrlById( window.location.hash.substr( 1 ) ); \n      this.store.dispatch( actions.setActiveFeed( url ) ); \n      url && this.store.dispatch( actions.fetchFeed( url ) ); \n    }); \n  } \n\n} \n\n```", "```js\nconst router = new Router( store ); \nrouter.register(); \n\n```"]