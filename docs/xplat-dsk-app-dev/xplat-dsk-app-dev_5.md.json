["```js\n{ \n  \"name\": \"screen-capturer\", \n  \"version\": \"1.0.0\", \n  \"description\": \"Screen Capturer\", \n  \"main\": \"index.html\",   \n  \"chromium-args\": \"--mixed-context\", \n  \"window\": { \n    \"show\": true, \n    \"frame\": false, \n    \"width\": 580, \n    \"height\": 320, \n    \"min_width\": 450, \n    \"min_height\": 320, \n    \"position\": \"center\", \n    \"resizable\": true, \n    \"icon\": \"./assets/icon-48x48.png\" \n  }   \n} \n\n```", "```js\nnpm i -S react \nnpm i -S react-dom \n\n```", "```js\nnpm -i -D nw \n\n```", "```js\nnpm -i -D webpack \nnpm -i -D babel-cli \nnpm -i -D babel-core \nnpm -i -D babel-loader \n\n```", "```js\nnpm -i -D babel-preset-es2017 \nnpm -i -D babel-preset-react \n\n```", "```js\nnpm -i -D babel-preset-stage-3 \n\n```", "```js\nnpm -i -D babel-plugin-transform-class-properties \nnpm -i -D babel-plugin-transform-decorators-legacy \n\n```", "```js\n... \n\"scripts\": { \n    \"start\": \"nw .\", \n    \"build\": \"webpack\", \n    \"dev\": \"webpack -d --watch\"     \n  } \n\n```", "```js\nconst { join } = require( \"path\" ), \n      webpack = require( \"webpack\" ); \n      BUILD_DIR = join( __dirname, \"build\" ), \n      APP_DIR = join( __dirname, \"js\" ); \n\nmodule.exports = { \n  entry: join( APP_DIR, \"app.jsx\" ), \n  target: \"node-webkit\", \n  devtool: \"source-map\", \n  output: { \n      path: BUILD_DIR, \n      filename:  \"app.js\" \n  }, \n  module: { \n    rules: [ \n      { \n        test: /.jsx?$/, \n        exclude: /node_modules/, \n        use: [{ \n          loader: \"babel-loader\", \n          options: { \n            presets: [ \"es2017\", \"react\", \"stage-3\" ], \n            plugins: [ \"transform-class-properties\", \"transform-decorators-legacy\" ] \n          } \n        }] \n      } \n    ] \n  } \n}; \n\n```", "```js\nnpm i -S material-ui \n\n```", "```js\nnpm i -S react-tap-event-plugin \n\n```", "```js\n<!doctype html> \n<html class=\"no-js\" lang=\"\"> \n\n<head> \n  <meta charset=\"utf-8\"> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"> \n  <title>Screen Capturer</title> \n  <meta \n    name=\"viewport\" \n    content=\"width=device-width, initial-scale=1, user-scalable=0, maximum-scale=1, minimum-scale=1\" \n  > \n  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" \n      rel=\"stylesheet\"> \n  <link href=\"https://fonts.googleapis.com/css?family=Roboto\" rel=\"stylesheet\"> \n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./assets/main.css\"> \n</head> \n\n<body> \n  <root></root> \n  <script src=\"img/app.js\"></script> \n</body> \n\n</html> \n\n```", "```js\nhtml { \n  font-family: 'Roboto', sans-serif; \n} \n\nbody { \n  font-size: 13px; \n  line-height: 20px; \n  margin: 0; \n} \n\n```", "```js\nimport React from \"react\"; \nimport { render } from \"react-dom\"; \nimport App from \"./Containers/App.jsx\"; \n\nrender( <App />, document.querySelector( \"root\" ) ); \n\n```", "```js\nimport React, { Component } from \"react\"; \nimport injectTapEventPlugin from \"react-tap-event-plugin\"; \nimport Main from \"../Components/Main.jsx\"; \nimport { deepOrange500 } from \"material-ui/styles/colors\"; \nimport getMuiTheme from \"material-ui/styles/getMuiTheme\"; \nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\"; \n\ninjectTapEventPlugin(); \n\nconst muiTheme = getMuiTheme({ \n  palette: { \n    accent1Color: deepOrange500 \n  } \n}); \n\nexport default class App extends Component { \n  render() { \n    return ( \n        <MuiThemeProvider muiTheme={muiTheme}> \n        <Main /> \n        </MuiThemeProvider> \n    ); \n  } \n} \n\n```", "```js\nimport React, {Component} from \"react\"; \n\nimport { Tabs, Tab } from \"material-ui/Tabs\"; \nimport FontIcon from \"material-ui/FontIcon\"; \n\nimport TitleBar from \"./TitleBar.jsx\"; \nimport ScreenshotTab from \"./ScreenshotTab.jsx\"; \nimport AnimationTab from \"./AnimationTab.jsx\"; \n\nclass Main extends Component { \n\n  render() { \n    const ScreenshotIcon = <FontIcon className=\"material-icons\">camera_alt</FontIcon>; \n    const AnimationIcon = <FontIcon className=\"material-icons\">video_call</FontIcon>; \n\n    return ( \n      <div> \n        <TitleBar /> \n        <Tabs> \n          <Tab \n            icon={ScreenshotIcon} \n            label=\"SCREENSHOT\" \n          /> \n          <Tab \n            icon={AnimationIcon} \n            label=\"ANIMATION\" \n          /> \n        </Tabs> \n        <div> \n\n        { true \n            ? <ScreenshotTab  /> \n            : <AnimationTab /> \n          } \n        </div> \n\n      </div> \n    ); \n  } \n} \n\nexport default Main; \n\n```", "```js\nimport React, { Component } from \"react\"; \nimport AppBar from 'material-ui/AppBar'; \nimport IconButton from 'material-ui/IconButton'; \nconst appWindow = nw.Window.get(); \n\nexport default function TitleBar() { \n  const iconElementLeft = <IconButton \n      onClick={() => appWindow.hide()} \n      tooltip=\"Hide window\" \n      iconClassName=\"material-icons\">arrow_drop_down_circle</IconButton>, \n        iconElementRight= <IconButton \n      onClick={() => appWindow.close()} \n      tooltip=\"Quit\" \n      iconClassName=\"material-icons\">power_settings_new</IconButton>; \n\n  return (<AppBar \n    className=\"titlebar\" \n\n    iconElementLeft={iconElementLeft} \n    iconElementRight={iconElementRight}> \n    </AppBar>); \n\n} \n\n```", "```js\n... \n.titlebar { \n  -webkit-user-select: none; \n  -webkit-app-region: drag; \n} \n\n.titlebar button { \n  -webkit-app-region: no-drag; \n} \n\n```", "```js\nimport React, { Component } from \"react\"; \n\nimport IconButton from \"material-ui/IconButton\"; \nimport TextField from \"material-ui/TextField\"; \n\nconst TAB_BUTTON_STYLE = { \n  fontSize: 90 \n}; \n\nconst SCREENSHOT_DEFAULT_FILENAME = \"screenshot{N}.png\"; \n\nexport default class ScreenshotTab extends Component { \n\n  render(){ \n    return ( \n      <div className=\"tab-layout\"> \n        <div className=\"tab-layout__item\"> \n            <TextField \n                floatingLabelText=\"File name pattern\" \n                defaultValue={SCREENSHOT_DEFAULT_FILENAME} \n              /> \n\n          </div> \n          <div className=\"tab-layout__item\"> \n\n            <IconButton \n              tooltip=\"Take screenshot\" \n              iconClassName=\"material-icons\" \n              iconStyle={TAB_BUTTON_STYLE}>add_a_photo</IconButton> \n          </div> \n        </div> \n      ) \n  } \n} \n\n```", "```js\nimport React, { Component } from \"react\"; \nimport IconButton from \"material-ui/IconButton\"; \nimport TextField from \"material-ui/TextField\"; \n\nconst TAB_BUTTON_STYLE = { \n  fontSize: 90 \n}; \nconst ANIMATION_DEFAULT_FILENAME = \"animation{N}.webm\"; \n\nexport default class AnimationTab extends Component { \n\n  render(){ \n    return ( \n      <div className=\"tab-layout\"> \n          <div className=\"tab-layout__item\"> \n              <TextField \n                  floatingLabelText=\"File name pattern\" \n                  defaultValue={ANIMATION_DEFAULT_FILENAME} \n                /> \n          </div> \n          <div className=\"tab-layout__item\"> \n\n{ true ? <IconButton \n            tooltip=\"Stop recording\" \n            iconClassName=\"material-icons\" \n            iconStyle={TAB_BUTTON_STYLE}>videocam_off</IconButton> \n            : <IconButton \n            tooltip=\"Start recording\" \n            iconClassName=\"material-icons\" \n            iconStyle={TAB_BUTTON_STYLE}>videocam</IconButton> } \n          </div> \n        </div> \n      ) \n  } \n} \n\n```", "```js\nnpm run build \n\n```", "```js\nnpm start\n\n```", "```js\nconst action = { \n  type: \"SET_ACTIVE_TAB\", \n  activeTab: \"SCREENSHOT\" \n}; \n\n```", "```js\nconst actionCreatorSetActiveTab = ( activeTab ) => { \n  return { \n    type: \"SET_ACTIVE_TAB\", \n    activeTab \n  }; \n}; \n\n```", "```js\nconst initialState = { \n  activeTab: \"\" \n}; \n\nconst reducer = ( state = initialState, action ) => { \n  switch ( action.type ) { \n    case \"SET_ACTIVE_TAB\": \n      return { ...state, activeTab: action.activeTab }; \n    default: \n      return state; \n  } \n}; \n\n```", "```js\nreturn Object.assign( {}, state, { activeTab: action.activeTab } ); \n\n```", "```js\nimport { createStore } from \"redux\"; \nconst store = createStore( reducer ); \n\n```", "```js\nstore.subscribe(() => { \n  console.log( store.getState() ); \n}); \n\n```", "```js\nstore.dispatch( actionCreatorSetActiveTab( \"SCREENSHOT\" ) ); \n\n```", "```js\n{ \n  activeTab: \"SCREENSHOT\" \n} \n\n```", "```js\nnpm i -S redux \n\n```", "```js\nnpm i -S redux-act \n\n```", "```js\nimport { createStore } from \"redux\"; \nimport { createAction } from \"redux-act\"; \n\nexport const toggleRecording = createAction( \"TOGGLE_RECORDING\",  \n  ( toggle ) => ({ toggle }) ); \nexport const setActiveTab = createAction( \"SET_ACTIVE_TAB\",  \n  ( activeTab ) => ({ activeTab }) ); \nexport const setScreenshotFilename = createAction( \"SET_SCREENSHOT_FILENAME\",  \n   ( filename ) => ({ filename }) ); \nexport const setScreenshotInputError = createAction( \"SET_SCREENSHOT_INPUT_ERROR\",  \n   ( msg ) => ({ msg }) ); \nexport const setAnimationFilename = createAction( \"SET_ANIMATION_FILENAME\",  \n   ( filename ) => ({ filename }) ); \nexport const setAnimationInputError = createAction( \"SET_ANIMATION_INPUT_ERROR\",  \n  ( msg ) => ({ msg }) ); \n\n```", "```js\nexport const setActiveTab =  ( activeTab ) => { \n  return { \n    type: \"SET_ACTIVE_TAB\", \n    activeTab \n  }; \n} \n\n```", "```js\nexport const setActiveTab = createAction( \"SET_ACTIVE_TAB\",  \n  ( activeTab ) => ({ activeTab }) ); \n\n```", "```js\nimport { createStore } from \"redux\"; \nimport { createReducer } from \"redux-act\"; \nimport * as Actions from \"../Actions\"; \nimport { TAB_SCREENSHOT, SCREENSHOT_DEFAULT_FILENAME, ANIMATION_DEFAULT_FILENAME } from \"../Constants\"; \n\nconst DEFAULT_STATE = { \n  isRecording: false, \n  activeTab: TAB_SCREENSHOT, \n  screenshotFilename: SCREENSHOT_DEFAULT_FILENAME, \n  animationFilename: ANIMATION_DEFAULT_FILENAME, \n  screenshotInputError: \"\", \n  animationInputError: \"\" \n}; \n\nexport const appReducer = createReducer({ \n  [ Actions.toggleRecording ]: ( state, action ) => ({ ...state, isRecording: action.toggle }), \n  [ Actions.setActiveTab ]: ( state, action ) => ({ ...state, activeTab: action.activeTab }), \n  [ Actions.setScreenshotFilename ]: ( state, action ) => ({ ...state, screenshotFilename: action.filename }), \n  [ Actions.setScreenshotInputError ]: ( state, action ) => ({ ...state, screenshotInputError: action.msg }), \n  [ Actions.setAnimationFilename ]: ( state, action ) => ({ ...state, animationFilename: action.filename }), \n  [ Actions.setAnimationInputError ]: ( state, action ) => ({ ...state, animationInputError: action.msg }) \n}, DEFAULT_STATE ); \n\n```", "```js\nconst reducer = ( state = initialState, action ) => { \n  switch ( action.type ) { \n    case \"SET_ACTIVE_TAB\": \n      return { ...state, activeTab: action.activeTab }; \n    default: \n      return state; \n  } \n}; \n\n```", "```js\nexport const appReducer = createReducer({ \n  [ Actions.setActiveTab ]: ( state, action ) => ({ ...state, activeTab: action.activeTab }), \n}, DEFAULT_STATE ); \n\n```", "```js\nexport const TAB_SCREENSHOT = \"TAB_SCREENSHOT\"; \nexport const TAB_ANIMATION = \"TAB_ANIMATION\"; \nexport const SCREENSHOT_DEFAULT_FILENAME = \"screenshot{N}.png\"; \nexport const ANIMATION_DEFAULT_FILENAME = \"animation{N}.webm\"; \n\n```", "```js\nimport React from \"react\"; \nimport { render } from \"react-dom\"; \nimport { createStore } from 'redux'; \nimport { Provider } from \"react-redux\"; \nimport App from \"./Containers/App.jsx\"; \nimport { appReducer } from \"./Reducers\"; \n\nconst store = createStore( appReducer ); \n\nrender(<Provider store={store}> \n  <App /> \n </Provider>, document.querySelector( \"root\" ) ); \n\n```", "```js\nnpm i -S react-redux \n\n```", "```js\n//... \nimport { connect } from \"react-redux\"; \nimport { bindActionCreators } from \"redux\"; \nimport * as Actions from \"../Actions\"; \n\nconst mapStateToProps = ( state ) => ({ states: state }); \nconst mapDispatchToProps = ( dispatch ) => ({ \n  actions: bindActionCreators( Actions, dispatch ) \n}); \n\nclass App extends Component { \n  render() { \n    return ( \n        <MuiThemeProvider muiTheme={muiTheme}> \n        <Main {...this.props} /> \n        </MuiThemeProvider>    ); \n  } \n} \n\nexport default connect( mapStateToProps, mapDispatchToProps)( App ); \n\n```", "```js\n@connect( mapStateToProps, mapDispatchToProps ) \nexport default class App extends Component { \n  render() { \n    return ( \n        <MuiThemeProvider muiTheme={muiTheme}> \n        <Main {...this.props} /> \n        </MuiThemeProvider>    ); \n  } \n} \n\n```", "```js\nimport React, {Component} from \"react\"; \nimport { Tabs, Tab } from \"material-ui/Tabs\"; \nimport FontIcon from \"material-ui/FontIcon\"; \n\nimport TitleBar from \"./TitleBar.jsx\"; \nimport ScreenshotTab from \"./ScreenshotTab.jsx\"; \nimport AnimationTab from \"./AnimationTab.jsx\"; \nimport { TAB_SCREENSHOT, TAB_ANIMATION } from \"../Constants\"; \n\nclass Main extends Component { \n\n  onTabNav = ( tab ) => { \n    const { actions } = this.props; \n    return () => { \n      actions.setActiveTab( tab ); \n    }; \n  } \n\n  render() { \n    const ScreenshotIcon = <FontIcon className=\"material-icons\">camera_alt</FontIcon>; \n    const AnimationIcon = <FontIcon className=\"material-icons\">video_call</FontIcon>; \n    const { states, actions } = this.props; \n\n    return ( \n      <div> \n        <TitleBar /> \n        <Tabs> \n          <Tab \n            onClick={this.onTabNav( TAB_SCREENSHOT )} \n            icon={ScreenshotIcon} \n            label=\"SCREENSHOT\" \n          /> \n          <Tab \n            onClick={this.onTabNav( TAB_ANIMATION )} \n            icon={AnimationIcon} \n            label=\"ANIMATION\" \n          /> \n        </Tabs> \n        <div> \n\n        { states.activeTab === TAB_SCREENSHOT \n            ? <ScreenshotTab {...this.props} /> \n            : <AnimationTab {...this.props} /> \n          } \n        </div> \n\n      </div> \n    ); \n  } \n} \n\nexport default Main; \n\n```", "```js\nimport React, { Component } from \"react\"; \nimport IconButton from \"material-ui/IconButton\"; \nimport TextField from \"material-ui/TextField\"; \nimport { TAB_BUTTON_STYLE, SCREENSHOT_DEFAULT_FILENAME } from \"../Constants\"; \n\nexport default class ScreenshotTab extends Component { \n\n  onFilenameChange = ( e ) => { \n    const { value } = e.target; \n    const { actions } = this.props; \n    if ( !value.endsWith( \".png\" ) || value.length < 6 ) { \n      actions.setScreenshotInputError( \"File name cannot be empty and must end with .png\" ); \n      return; \n    } \n    actions.setScreenshotInputError( \"\" ); \n    actions.setScreenshotFilename( value ); \n  } \n\n  render(){ \n    const { states } = this.props; \n    return ( \n      <div className=\"tab-layout\"> \n        <div className=\"tab-layout__item\"> \n            <TextField \n                onChange={this.onFilenameChange} \n                floatingLabelText=\"File name pattern\" \n                defaultValue={SCREENSHOT_DEFAULT_FILENAME} \n                errorText={states.screenshotInputError} \n              /> \n\n          </div> \n          <div className=\"tab-layout__item\"> \n\n            <IconButton \n              tooltip=\"Take screenshot\" \n              iconClassName=\"material-icons\" \n              iconStyle={TAB_BUTTON_STYLE}>add_a_photo</IconButton> \n          </div> \n        </div> \n      ) \n  } \n} \n\n```", "```js\nexport const TAB_BUTTON_STYLE = { \n  fontSize: 90 \n}; \n\n```", "```js\nimport React, { Component } from \"react\"; \nimport IconButton from \"material-ui/IconButton\"; \nimport TextField from \"material-ui/TextField\"; \nimport { TAB_BUTTON_STYLE, ANIMATION_DEFAULT_FILENAME } from \"../Constants\"; \n\nexport default class AnimationTab extends Component { \n\n  onRecord = () => { \n    const { states } = this.props; \n    this.props.actions.toggleRecording( true ); \n  } \n\n  onStop = () => { \n    this.props.actions.toggleRecording( false ); \n  } \n\n  onFilenameChange = ( e ) => { \n    const { value } = e.target; \n    const { actions } = this.props; \n    if ( !value.endsWith( \".webm\" ) || value.length < 7 ) { \n      actions.setAnimationInputError( \"File name cannot be empty and must end with .png\" ); \n      return; \n    } \n    actions.setAnimationInputError( \"\" ); \n    actions.setAnimationFilename( value ); \n  } \n\n  render(){ \n    const { states } = this.props; \n    return ( \n      <div className=\"tab-layout\"> \n          <div className=\"tab-layout__item\"> \n              <TextField \n                  onChange={this.onFilenameChange} \n                  floatingLabelText=\"File name pattern\" \n                  defaultValue={ANIMATION_DEFAULT_FILENAME} \n                  errorText={states.animationInputError} \n                /> \n          </div> \n          <div className=\"tab-layout__item\"> \n\n{ states.isRecording ? <IconButton \n            onClick={this.onStop} \n            tooltip=\"Stop recording\" \n            iconClassName=\"material-icons\" \n            iconStyle={TAB_BUTTON_STYLE}>videocam_off</IconButton> \n            : <IconButton \n            onClick={this.onRecord} \n            tooltip=\"Start recording\" \n            iconClassName=\"material-icons\" \n            iconStyle={TAB_BUTTON_STYLE}>videocam</IconButton> } \n          </div> \n        </div> \n      ) \n  } \n}\n\n```", "```js\nnpm run build \nnpm start \n\n```"]