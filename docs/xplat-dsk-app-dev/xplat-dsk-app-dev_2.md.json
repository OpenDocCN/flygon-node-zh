["```js\nconst EventEmitter = require( \"events\" ); \n\nclass I18nService extends EventEmitter { \n  constructor(){ \n\n   super(); \n   this.locale = \"en-US\"; \n  } \n  notify(){ \n   this.emit( \"update\" ); \n  } \n} \n\nexports.I18nService = I18nService;\n\n```", "```js\n//... \n  constructor(){ \n   super(); \n   this._locale = \"en-US\"; \n  } \n  get locale(){ \n\n  return this._locale; \n  } \n  set locale( locale ){ \n   // validate locale... \n   this._locale = \n\nlocale; \n  } \n  //...\n\n```", "```js\nclass LangSelectorView { \n  constructor( boundingEl, i18n ){ \n   boundingEl.addEventListener( \"change\", \n\nthis.onChanged.bind( this ), false ); \n   this.i18n = i18n; \n  } \n   onChanged( e ){ \n   const selectEl \n\n= e.target; \n   this.i18n.locale = selectEl.value; \n   this.i18n.notify(); \n  } \n} \n\nexports.LangSelectorView = LangSelectorView;\n\n```", "```js\nconst i18nService = new I18nService(), \n      { LangSelectorView } = require( \"./js/View/LangSelector\" ); \n\nnew LangSelectorView( document.querySelector( \"[data-bind=langSelector]\" ), i18nService );\n\n```", "```js\nconstructor( boundingEl, dirService, i18nService ){ \n    //... \n    this.i18n = i18nService; \n    // \n\nSubscribe on i18nService updates \n          i18nService.on( \"update\", () => this.update( dirService.getFileList() ) \n\n); \n  } \n  static formatTime( timeString, locale ){ \n   const date = new Date( Date.parse( timeString ) ), \n\n         options = { \n         year: \"numeric\", month: \"numeric\", day: \"numeric\", \n         hour: \n\n\"numeric\", minute: \"numeric\", second: \"numeric\", \n         hour12: false \n         }; \n   return \n\ndate.toLocaleString( locale, options ); \n  } \n update( collection ) { \n        //... \n\nthis.el.insertAdjacentHTML( \"beforeend\", `<li class=\"file-list__li\" data-file=\"${fInfo.fileName}\"> \n\n<span class=\"file-list__li__name\">${fInfo.fileName}</span> \n         <span class=\"file-\n\nlist__li__size\">${filesize(fInfo.stats.size)}</span> \n         <span class=\"file-list__li__time\">\n\n${FileListView.formatTime( fInfo.stats.mtime, this.i18n.locale )}</span> \n   </li>` ); \n        //... \n\n  } \n//...\n\n```", "```js\n3/17/2017, 13:42:23\n\n```", "```js\n17.3.2017, 13:42:23\n\n```", "```js\n.. \n<select class=\"footer__select\" data-bind=\"langSelector\"> \n..\n\n```", "```js\n// ... \nconst { I18nService } = require( \"./js/Service/I18n\" ), \n   { LangSelectorView } = require( \n\n\"./js/View/LangSelector\" ), \n   i18nService = new I18nService(); \n\nnew LangSelectorView( \n\ndocument.querySelector( \"[data-bind=langSelector]\" ), i18nService ); \n// ... \nnew FileListView( \n\ndocument.querySelector( \"[data-bind=fileList]\" ), dirService, i18nService );\n\n```", "```js\nexports.dictionary = { \n  \"en-US\": { \n    NAME: \"Name\", \n    SIZE: \"Size\", \n    MODIFIED: \n\n\"Modified\", \n    MINIMIZE_WIN: \"Minimize window\", \n    RESTORE_WIN: \"Restore window\", \n    MAXIMIZE_WIN: \n\n\"Maximize window\", \n    CLOSE_WIN: \"Close window\" \n  }, \n  \"de-DE\": { \n    NAME: \"Dateiname\", \n\nSIZE: \"Gr\u00f6sse\", \n    MODIFIED: \"Ge\u00e4ndert am\", \n    MINIMIZE_WIN: \"Fenster minimieren\", \n\nRESTORE_WIN: \"Fenster wiederherstellen\", \n    MAXIMIZE_WIN: \"Fenster maximieren\", \n    CLOSE_WIN: \"Fenster \n\nschliessen\" \n  } \n};\n\n```", "```js\n//... \nconstructor( dictionary ){ \n    super(); \n    this.dictionary = dictionary; \n\nthis._locale = \"en-US\"; \n } \n\ntranslate( token, defaultValue ) { \n    const dictionary = \n\nthis.dictionary[ this._locale ]; \n    return dictionary[ token ] || defaultValue; \n} \n//...\n\n```", "```js\n//... \nupdate( collection ) { \n    this.el.innerHTML = `<li class=\"file-list__li file-list__head\"> \n        <span class=\"file-list__li__name\">${this.i18n.translate( \"NAME\", \"Name\" )}</span> \n\n<span class=\"file-list__li__size\">${this.i18n.translate( \"SIZE\", \"Size\" )}</span> \n        <span \n\nclass=\"file-list__li__time\">${this.i18n.translate( \"MODIFIED\", \"Modified\" )}</span> \n      </li>`; \n//...\n\n```", "```js\nconstructor( boundingEl, i18nService ){ \n  this.i18n = i18nService; \n  //... \n  // Subscribe on \n\ni18nService updates \n  i18nService.on( \"update\", () => this.translate() ); \n} \n\ntranslate(){ \n\n this.unmaximizeEl.title = this.i18n.translate( \"RESTORE_WIN\", \"Restore window\" ); \n  this.maximizeEl.title = \n\nthis.i18n.translate( \"MAXIMIZE_WIN\", \"Maximize window\" ); \n  this.minimizeEl.title = this.i18n.translate( \n\n\"MINIMIZE_WIN\", \"Minimize window\" ); \n  this.closeEl.title = this.i18n.translate( \"CLOSE_WIN\", \"Close window\" ); \n}\n\n```", "```js\nconst menu = new nw.Menu(), \n      menutItem = new nw.MenuItem({ \n        label: \"Say hello\", \n\nclick: () => console.log( \"hello!\" ) \n      }); \n\nmenu.append( menu ); \nmenu.popup( 10, 10 );\n\n```", "```js\ndocument.addEventListener( \"contextmenu\", ( e ) => { \n   console.log( `Show menu in position ${e.x}, ${e.y}` \n);   \n});\n\n```", "```js\ndocument.addEventListener( \"contextmenu\", ( e ) => { \n   const el = e.target; \n   if ( el instanceof \n\nHTMLElement && el.parentNode.dataset.file ) { \n     console.log( `Show menu in position ${e.x}, ${e.y}` );   \n\n   } \n});\n\n```", "```js\nconst fs = require( \"fs\" ), \n      path = require( \"path\" ), \n      // Copy file helper \n      cp = ( \n\nfrom, toDir, done ) => { \n        const basename = path.basename( from ), \n              to = path.join( \n\ntoDir, basename ), \n              write = fs.createWriteStream( to ) ; \n\n        fs.createReadStream( from \n\n) \n          .pipe( write ); \n\n        write \n          .on( \"finish\",  done ); \n      }; \n\nclass FileService { \n\n  constructor( dirService ){ \n    this.dir = dirService; \n\nthis.copiedFile = null; \n  } \n\n  remove( file ){ \n    fs.unlinkSync( this.dir.getFile( file ) ); \n    this.dir.notify(); \n  } \n\n  paste(){ \n    const file = this.copiedFile; \n    if ( \n\nfs.lstatSync( file ).isFile() ){ \n      cp( file, this.dir.getDir(), () => this.dir.notify() ); \n    } \n\n} \n\n  copy( file ){ \n    this.copiedFile = this.dir.getFile( file ); \n  }  \n\n  open( file \n\n){ \n    nw.Shell.openItem( this.dir.getFile( file ) ); \n  } \n\n  showInFolder( file ){ \n\nnw.Shell.showItemInFolder( this.dir.getFile( file ) ); \n  } \n}; \n\nexports.FileService = \n\nFileService;\n\n```", "```js\nconstructor( boundingEl, dirService, i18nService, fileService ){ \n   this.file = fileService; \n   //... \n} \nbindUi(){ \n  //... \n  this.file.open( el.dataset.file ); \n  //... \n}\n\n```", "```js\nclass ConextMenuView { \n  constructor( fileService, i18nService ){ \n    this.file = fileService; \n\nthis.i18n = i18nService; \n    this.attach(); \n  } \n\n  getItems( fileName ){ \n    const file = \n\nthis.file, \n          isCopied = Boolean( file.copiedFile ); \n\n    return [ \n      { \n\nlabel: this.i18n.translate( \"SHOW_FILE_IN_FOLDER\", \"Show Item in the \n                                                          Folder\" ), \n        enabled: Boolean( fileName ), \n\n        click: () => file.showInFolder( fileName ) \n      }, \n      { \n        type: \"separator\" \n\n      }, \n      { \n        label: this.i18n.translate( \"COPY\", \"Copy\" ), \n        enabled: Boolean( \n\n              fileName ), \n        click: () => file.copy( fileName ) \n      }, \n      { \n        label: \n\nthis.i18n.translate( \"PASTE\", \"Paste\" ), \n        enabled: isCopied, \n        click: () => file.paste() \n\n     }, \n      { \n        type: \"separator\" \n      }, \n      { \n        label: \n\nthis.i18n.translate( \"DELETE\", \"Delete\" ), \n        enabled: Boolean( fileName ), \n        click: () => \n\nfile.remove( fileName ) \n      } \n    ]; \n  } \n\n  render( fileName ){ \n    const menu = new \n\nnw.Menu(); \n    this.getItems( fileName ).forEach(( item ) => menu.append( new  \n                                            nw.MenuItem( item ))); \n\nreturn menu; \n  } \n\n  attach(){ \n    document.addEventListener( \"contextmenu\", ( e ) => { \n\n  const el = e.target; \n      if ( !( el instanceof HTMLElement ) ) { \n        return; \n      } \n\n      if ( el.classList.contains( \"file-list\" ) ) { \n        e.preventDefault(); \n        this.render() \n\n        .popup( e.x, e.y ); \n      } \n      // If a child of an element matching [data-file] \n      if ( \n\nel.parentNode.dataset.file ) { \n        e.preventDefault(); \n        this.render( el.parentNode.dataset.file ) \n\n          .popup( e.x, e.y ); \n      } \n\n    }); \n  } \n} \n\nexports.ConextMenuView = ConextMenuView;\n\n```", "```js\nconst { FileService } = require( \"./js/Service/File\" ), \n      { ConextMenuView } = require( \n\n\"./js/View/ConextMenu\" ), \n      fileService = new FileService( dirService ); \n\nnew FileListView( \n\ndocument.querySelector( \"[data-bind=fileList]\" ), dirService, i18nService, fileService ); \nnew ConextMenuView( \n\nfileService, i18nService );\n\n```", "```js\ncopy( file ){ \n    this.copiedFile = this.dir.getFile( file ); \n    const clipboard = nw.Clipboard.get(); \n\n    clipboard.set( this.copiedFile, \"text\" ); \n}\n\n```", "```js\n//... \n  copyImage( file, type ){ \n    const clip = nw.Clipboard.get(), \n          // load file content \n\nas Base64 \n          data = fs.readFileSync( file ).toString( \"base64\" ), \n          // image as HTML \n\n    html = `<img src=\"img/, \"\" ) )}\">`; \n\n    // write both options \n\n(raw image and HTML) to the clipboard \n    clip.set([ \n      { type, data: data, raw: true }, \n      { type: \n\n\"html\", data: html } \n    ]); \n  } \n\n  copy( file ){ \n    this.copiedFile = this.dir.getFile( \n\nfile ); \n    const ext = path.parse( this.copiedFile ).ext.substr( 1 ); \n    switch ( ext ){ \n      case \n\n\"jpg\": \n      case \"jpeg\": \n        return this.copyImage( this.copiedFile, \"jpeg\" ); \n      case \"png\": \n        return this.copyImage( this.copiedFile, \"png\" ); \n    } \n  } \n//...\n\n```", "```js\n const clip = nw.Clipboard.get(); \nconsole.log( clip.get( \"text\" ) );\n\n```", "```js\n//... \n  hasImageInClipboard(){ \n    const clip = nw.Clipboard.get(); \n    return \n\nclip.readAvailableTypes().indexOf( \"png\" ) !== -1; \n  } \n\n  pasteFromClipboard(){ \n    const clip = \n\nnw.Clipboard.get(); \n    if ( this.hasImageInClipboard() ) { \n      const base64 = clip.get( \"png\", true ), \n            binary = Buffer.from( base64, \"base64\" ), \n            filename = Date.now() + \"--img.png\"; \n\nfs.writeFileSync( this.dir.getFile( filename ), binary ); \n      this.dir.notify(); \n    } \n  } \n//...\n\n```", "```js\ngetItems( fileName ){ \n    const file = this.file, \n          isCopied = Boolean( file.copiedFile ); \n       return [ \n     //... \n      { \n        label: this.i18n.translate( \"PASTE_FROM_CLIPBOARD\", \"Paste \n\nimage from clipboard\" ), \n        enabled: file.hasImageInClipboard(), \n        click: () => \n\nfile.pasteFromClipboard() \n      }, \n      //... \n    ]; \n  }\n\n```", "```js\nconst appWindow = nw.Window.get(); \n\nclass TrayView { \n\n  constructor( title ){ \n\nthis.tray = null; \n    this.title = title; \n    this.removeOnExit(); \n    this.render(); \n  } \n\n  render(){ \n    const icon = ( process.platform === \"linux\" ? \"icon-48x48.png\" : \"icon-32x32.png\" ); \n\n    this.tray = new nw.Tray({ \n      title: this.title, \n      icon, \n      iconsAreTemplates: false \n    }); \n\n    const menu = new nw.Menu(); \n    menu.append( new nw.MenuItem({ \n      label: \"Exit\", \n\n      click: () => appWindow.close() \n    })); \n    this.tray.menu = menu; \n  } \n\nremoveOnExit(){ \n    appWindow.on( \"close\", () => { \n      this.tray.remove(); \n      appWindow.hide(); \n\n// Pretend to be closed already \n      appWindow.close( true ); \n    }); \n    // do not spawn Tray instances \n\non page reload\n    window.addEventListener( \"beforeunload\", () => this.tray.remove(), false );\n  } \n\n} \n\nexports.TrayView = TrayView;\n\n```", "```js\nconst { TrayView } = require( \"./js/View/Tray\" ); \nnew TrayView( \"File Explorer\" );\n\n```", "```js\nclass TrayView { \n\n  constructor( title ){ \n    this.tray = null; \n    this.title = title; \n    // subscribe to window events \n    appWindow.on(\"maximize\", () => this.render( false )); \n\nappWindow.on(\"minimize\", () => this.render( false )); \n    appWindow.on(\"restore\", () => this.render( true )); \n\n    this.removeOnExit(); \n    this.render( true ); \n  } \n\n  getItems( reset ){ \n\n  return [ \n      { \n        label: \"Minimize\", \n        enabled: reset, \n        click: () => \n\nappWindow.minimize() \n      }, \n      { \n        label: \"Maximize\", \n        enabled: reset, \n\n   click: () => appWindow.maximize() \n      }, \n      { \n        label: \"Restore\", \n        enabled: \n\n!reset, \n        click: () => appWindow.restore() \n      }, \n      { \n        type: \"separator\" \n      }, \n      { \n        label: \"Exit\", \n        click: () => appWindow.close() \n      } \n\n  ]; \n  } \n\n  render( reset ){ \n    if ( this.tray ) { \n      this.tray.remove(); \n    } \n\n    const icon = ( process.platform === \"darwin\" ? \"macicon.png\" : \"icon.png\" ); \n\n    this.tray = \n\nnew nw.Tray({ \n      title: this.title, \n      icon, \n      iconsAreTemplates: true \n    }); \n\n    const menu = new nw.Menu(); \n    this.getItems( reset ).forEach(( item ) => menu.append( new nw.MenuItem( \n\nitem ))); \n\n    this.tray.menu = menu; \n  } \n\n  removeOnExit(){ \n    appWindow.on( \n\n\"close\", () => { \n      this.tray.remove(); \n      appWindow.hide(); // Pretend to be closed already \n\n  appWindow.close( true ); \n    }); \n  } \n\n} \n\nexports.TrayView = TrayView;\n\n```", "```js\nconst appWindow = nw.Window.get(); \n\nclass TitleBarActionsView { \n\n  constructor( \n\nboundingEl, i18nService ){ \n    this.i18n = i18nService; \n    this.unmaximizeEl = boundingEl.querySelector( \n\n\"[data-bind=unmaximize]\" ); \n    this.maximizeEl = boundingEl.querySelector( \"[data-bind=maximize]\" ); \n\nthis.minimizeEl = boundingEl.querySelector( \"[data-bind=minimize]\" ); \n    this.closeEl = boundingEl.querySelector( \n\n\"[data-bind=close]\" ); \n    this.bindUi(); \n    // Subscribe on i18nService updates \n    i18nService.on( \n\n\"update\", () => this.translate() ); \n\n    // subscribe to window events \n    appWindow.on(\"maximize\", () \n\n=> this.toggleButtons( false ) ); \n    appWindow.on(\"minimize\", () => this.toggleButtons( false ) ); \n\nappWindow.on(\"restore\", () => this.toggleButtons( true ) ); \n  } \n\n  translate(){ \n\nthis.unmaximizeEl.title = this.i18n.translate( \"RESTORE_WIN\", \"Restore window\" ); \n    this.maximizeEl.title = \n\nthis.i18n.translate( \"MAXIMIZE_WIN\", \"Maximize window\" ); \n    this.minimizeEl.title = this.i18n.translate( \n\n\"MINIMIZE_WIN\", \"Minimize window\" ); \n    this.closeEl.title = this.i18n.translate( \"CLOSE_WIN\", \"Close window\" ); \n  } \n\n  bindUi(){ \n    this.closeEl.addEventListener( \"click\", this.onClose.bind( this ), false ); \n    this.minimizeEl.addEventListener( \"click\", this.onMinimize.bind( this ), false ); \n\nthis.maximizeEl.addEventListener( \"click\", this.onMaximize.bind( this ), false ); \n\nthis.unmaximizeEl.addEventListener( \"click\", this.onRestore.bind( this ), false ); \n  } \n\ntoggleButtons( reset ){ \n    this.maximizeEl.classList.toggle( \"is-hidden\", !reset ); \n\nthis.unmaximizeEl.classList.toggle( \"is-hidden\", reset ); \n    this.minimizeEl.classList.toggle( \"is-hidden\", !reset \n\n); \n  } \n\n  onRestore( e ) { \n    e.preventDefault(); \n    appWindow.restore(); \n  } \n\n  onMaximize( e ) { \n    e.preventDefault(); \n    appWindow.maximize(); \n  } \n\nonMinimize( e ) { \n    e.preventDefault(); \n    appWindow.minimize(); \n  } \n\n  onClose( e ) { \n\n    e.preventDefault(); \n    appWindow.close(); \n  } \n} \n\nexports.TitleBarActionsView = \n\nTitleBarActionsView;\n\n```", "```js\nconst dirService = new DirService( nw.App.argv[ 0 ] );\n\n```", "```js\nnpm start ~/Sandbox\n\n```", "```js\nnpm start %USERPROFILE%Sandbox\n\n```", "```js\nconst argv = require( \"minimist\" )( nw.App.argv ), \n         dirService = new DirService( argv._[ 0 ] ); \n if ( argv.maximize ){ \n  nw.Window.get().maximize(); \n} \nif ( argv.minimize ){ \n  nw.Window.get().minimize(); \n}\n\n```", "```js\nnw . ~/Sandbox/ --minimize\n\n```", "```js\nnw . ~/Sandbox/ --maximize\n\n```", "```js\n... \n\"window\": { \n    \"frame\": false, \n    \"transparent\": true, \n    ... \n  }, \n...\n\n```", "```js\n:root { \n  --titlebar-bg-color: rgba(45, 45, 45, 0.7); \n  --titlebar-fg-color: #dcdcdc; \n  --dirlist-\n\nbg-color: rgba(222, 222, 222, 0.9); \n  --dirlist-fg-color: #636363; \n  --filelist-bg-color: rgba(249, 249, 249, \n\n0.9); \n  --filelist-fg-color: #333341; \n  --dirlist-w: 250px; \n  --titlebar-h: 40px; \n  --footer-h: \n\n40px; \n  --footer-bg-color: rgba(222, 222, 222, 0.9); \n  --separator-color: #2d2d2d; \n  --border-radius: \n\n1em; \n}\n\n```", "```js\n.titlebar { \n  border-radius: var(--border-radius) var(--border-radius) 0 0; \n}\n\n```", "```js\n.footer { \n  border-radius: 0 0 var(--border-radius) var(--border-radius); \n}\n\n```", "```js\n    .\n    \u251c\u2500\u2500 app\n    \u2502   \n\n\u2514\u2500\u2500 assets\n    \u2502       \u2514\u2500\u2500 css\n\n\u2502           \u251c\u2500\u2500 Base\n    \u2502           \u2514\u2500\u2500 \n\nComponent\n    \u2514\u2500\u2500 src\n        \u2514\u2500\u2500 \n\njs\n            \u251c\u2500\u2500 Data\n            \u251c\u2500\u2500 \n\nService\n            \u2514\u2500\u2500 View\n\n```", "```js\nconst { join } = require( \"path\" ), \n      webpack = require( \"webpack\" ); \n\nmodule.exports = { \n\n entry: join( __dirname, \"src/js/app.js\" ), \n  target: \"node-webkit\", \n  output: { \n      path: join( \n\n__dirname, \"/src/build\" ), \n      filename:  \"bundle.js\" \n  } \n};\n\n```", "```js\n// require( \"./js/View/LangSelector\" ) becomes \nrequire( \"./View/LangSelector\" )\n\n```", "```js\n//... \n\"scripts\": { \n    \"build:js\": \"webpack\", \n    \"protect:js\": \"node_modules/nw/nwjs/nwjc \n\nsrc/build/bundle.js app/app.bin\", \n    \"build\": \"npm run build:js && npm run protect:js\", \n    //... \n  }, \n//...\n\n```", "```js\n<script> \n      nw.Window.get().evalNWBin( null, \"./app.bin\" ); \n</script>\n\n```", "```js\n//... \n\"scripts\": { \n    \"package\": \"nwb nwbuild -v 0.21.3-sdk ./app -o ./dist  -p linux64, win32,osx64\", \n\n    //...   \n  },\n //...\n\n```", "```js\n dist \n\u251c\u2500\u2500 file-explorer-linux-x64 \n\u2502   \u2514\u2500\u2500 file-explorer \n\n\u251c\u2500\u2500 file-explorer-osx-x64 \n\u2502   \u2514\u2500\u2500 file-explorer.app \n\u2514\u2500\u2500 file-explorer-win-x64 \n    \u2514\u2500\u2500 file-explorer.exe\n\n```", "```js\nnwb nwbuild -v 0.21.3-sdk ./app -o ./dist --output-format=ZIP\n\n```", "```js\nnwb nwbuild -v 0.21.3-sdk ./app -o ./dist -r  -- --enable-transparent-visuals --disable-gpu\n\n```", "```js\n{ \n  \"name\": \"release-server\", \n  \"version\": \"1.0.0\", \n  \"packages\": { \n    \"linux64\": { \n     \"url\": \"http://localhost:8080/releases/file-explorer-linux-  \n      x64.zip\", \n      \"size\": 98451101 \n    } \n  }, \n  \"scripts\": { \n    \"start\": \"http-server .\" \n  } \n}\n\n```", "```js\nnpm i -S http-server\nnpm start\n\n```", "```js\n{ \n  \"name\": \"file-explorer\", \n   manifestUrl\": \"http://127.0.0.1:8080/package.json\", \n  \"scripts\": { \n\n    \"package\": \"nwb nwbuild -v 0.21.3-sdk . -o ../server/releases --output-format=ZIP\", \n    \"postversion\": \"npm \n\nrun package\" \n  }, \n//... \n}\n\n```", "```js\nconst AutoUpdater = require( \"nw-autoupdater\" ), \n      updater = new AutoUpdater( nw.App.manifest ); \n\nasync function start( el ){ \n  try { \n    // Update copy is running to replace app with the update \n    if \n\n( updater.isSwapRequest() ) { \n      el.innerHTML = `Swapping...`; \n      await updater.swap(); \n\nel.innerHTML = `Restarting...`; \n      await updater.restart(); \n      return; \n    } \n\n    // \n\nDownload/unpack update if any available \n    const rManifest = await updater.readRemoteManifest(); \n    const \n\nneedsUpdate = await updater.checkNewVersion( rManifest ); \n    if ( !needsUpdate ) { \n      return; \n    } \n\n    if ( !confirm( \"New release is available. Do you want to upgrade?\" ) ) { \n      return; \n    } \n\n    // Subscribe for progress events \n    updater.on( \"download\", ( downloadSize, totalSize ) => { \n\n const procent = Math.floor( downloadSize / totalSize * 100 ); \n      el.innerHTML = `Downloading - ${procent}%`; \n    }); \n    updater.on( \"install\", ( installFiles, totalFiles ) => { \n      const procent = Math.floor( \n\ninstallFiles / totalFiles * 100 ); \n      el.innerHTML = `Installing - ${procent}%`; \n    }); \n\nconst updateFile = await updater.download( rManifest ); \n    await updater.unpack( updateFile ); \n\nawait updater.restartToSwap(); \n  } catch ( e ) { \n    console.error( e ); \n  } \n} \n\nexports.start = start;\n\n```", "```js\nconst { start } = require( \"./js/Service/Autoupdate\" ), \n// start autoupdate \nsetTimeout(() => { \n\nstart( document.querySelector( \"[data-bind=path]\" ) ); \n}, 500 );\n\n```", "```js\nnpm run package\n\n```", "```js\nunzip ../server/releases/file-explorer-linux-x64.zip -d ~/sandbox/\n\n```", "```js\nnpm version patch \n\n```"]