["```js\n{{#if posting === true}}\n  <form enctype=\"multipart/form-data\" method=\"post\">\n    <h3>What is on your mind?</h3>\n    {{#if error && error != ''}}\n      <div class=\"error\">{{{error}}}</div>\n    {{/if}}\n    {{#if success && success != ''}}\n      <div class=\"success\">{{{success}}}</div>\n    {{/if}}\n    <label for=\"text\">Text</label>\n    <textarea value=\"{{text}}\"></textarea>\n    <input type=\"file\" name=\"file\" />\n    <input type=\"button\" value=\"Post\" on-click=\"post\" />\n  </form>\n{{else}}\n  <h1>Node.js by example</h1>\n{{/if}}\n```", "```js\nvar ajax = require('../lib/Ajax');\nvar Base = require('./Base');\n\nmodule.exports = Base.extend({\n  data: {\n    url: '/api/content'\n  },\n  create: function(content, callback) {\n    var self = this;\n    ajax.request({\n      url: this.get('url'),\n      method: 'POST',\n      data: {\n        text: content.text\n      },\n      json: true\n    })\n    .done(function(result) {\n      callback(null, result);\n    })\n    .fail(function(xhr) {\n      callback(JSON.parse(xhr.responseText));\n    });\n  }\n});\n```", "```js\n// controllers/Home.js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/home'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  data: {\n    posting: true\n  }\n});\n```", "```js\nonrender: function() {\n  if(userModel.isLogged()) {\n    // ...\n  } else {\n    this.set('posting', false);\n  }\n}\n```", "```js\nvar ContentModel = require('../models/Content');\nvar model = new ContentModel();\nvar self = this;\nthis.on('post', function() {\n  model.create({\n    text: this.get('text')\n  }, function(error, result) {\n    self.set('text', '');\n    if(error) {\n      self.set('error', error.error);\n    } else {\n      self.set('error', false);\n      self.set('success', 'The post is saved successfully.<br />What about adding another one?');\n    }\n  });\n});\n```", "```js\n// backend/API.js\n.add('api/content', function(req, res) {\n  var user;\n  if(req.session && req.session.user) {\n    user = req.session.user;\n  } else {\n    error('You must be logged in in order to use this method.', res);\n  }\n})\n```", "```js\nswitch(req.method) {\n  case 'POST':\n    processPOSTRequest(req, function(data) {\n      if(!data.text || data.text === '') {\n        error('Please add some text.', res);\n      } else {\n        getDatabaseConnection(function(db) {\n          getCurrentUser(function(user) {\n            var collection = db.collection('content');\n            data.userId = user._id.toString();\n            data.userName = user.firstName + ' ' + user.lastName;\n            data.date = new Date();\n            collection.insert(data, function(err, docs) {\n              response({\n                success: 'OK'\n              }, res);\n            });\n          }, req, res);\n        });\n      }\n    });\n  break;\n};\n```", "```js\ncase 'GET':\n  getCurrentUser(function(user) {\n    if(!user.friends) {\n      user.friends = [];\n    }\n    // ...\nbreak;\n```", "```js\ncase 'GET':\n  getCurrentUser(function(user) {\n    if(!user.friends) {\n      user.friends = [];\n    }\n    getDatabaseConnection(function(db) {\n      var collection = db.collection('content');\n      collection.find({ \n        $query: {\n          userId: { $in: [user._id.toString()].concat(user.friends) }\n        },\n        $orderby: {\n          date: -1\n        }\n      }).toArray(function(err, result) {\n        result.forEach(function(value, index, arr) {\n          arr[index].id = ObjectId(value.id);\n          delete arr[index].userId;\n        });\n        response({\n          posts: result\n        }, res);\n      });\n    });\n  }, req, res);\nbreak;\n```", "```js\n[user._id.toString()].concat(user.friends)\n```", "```js\nvar getPosts = function() {\n  model.fetch(function(err, result) {\n    if(!err) {\n      self.set('posts', result.posts);\n    }\n  });\n};\ngetPosts();\n```", "```js\n// frontend/js/controllers/Home.js\nmodel.create(formData, function(error, result) {\n  self.set('text', '');\n  if(error) {\n    self.set('error', error.error);\n  } else {\n    self.set('error', false);\n    self.set('success', 'The post is saved  successfully.<br />What about adding another one?');\n    getPosts();\n  }\n});\n```", "```js\n// frontend/tpl/home.html\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  {{#if posting === true}}\n    <form enctype=\"multipart/form-data\" method=\"post\">\n      ...\n    </form>\n    {{#each posts:index}}\n      <div class=\"content-item\">\n        <h2>{{posts[index].userName}}</h2>\n        {{posts[index].text}}\n      </div>\n    {{/each}}\n  {{else}}\n    <h1>Node.js by example</h1>\n  {{/if}}\n</div>\n<appfooter />\n```", "```js\nvar http = new XMLHttpRequest();\nvar url = \"/api/content\";\nvar params = \"text=message&author=name\";\nhttp.open(\"POST\", url, true);\n\nhttp.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\nhttp.setRequestHeader(\"Content-length\", params.length);\nhttp.setRequestHeader(\"Connection\", \"close\");\n\nhttp.onreadystatechange = function() {\n  if(http.readyState == 4 && http.status === 200) {\n    alert(http.responseText);\n  }\n}\n\nhttp.send(params);\n```", "```js\nvar formData = new FormData();\nvar fileInput = document.querySelector('input[type=\"file\"]');\nvar url = '/api/content';\n\nformData.append(\"username\", \"John Black\");\nformData.append(\"id\", 123456);\nformData.append(\"userfile\", fileInput.files[0]);\n\nvar request = new XMLHttpRequest();\nrequest.open(\"POST\", url);\nrequest.send(formData);\n```", "```js\n<form enctype=\"multipart/form-data\" method=\"post\">\n  <h3>What is on your mind?</h3>\n  {{#if error && error != ''}}\n    <div class=\"error\">{{error}}</div>\n  {{/if}}\n  {{#if success && success != ''}}\n    <div class=\"success\">{{{success}}}</div>\n  {{/if}}\n  <label for=\"text\">Text</label>\n  <textarea value=\"{{text}}\"></textarea>\n  <input type=\"file\" name=\"file\" />\n  <input type=\"button\" value=\"Post\" on-click=\"post\" />\n</form>\n```", "```js\nthis.on('post', function() {\n  var files = this.find('input[type=\"file\"]').files;\n  var formData = new FormData();\n  if(files.length > 0) {\n    var file = files[0];\n    if(file.type.match('image.*')) {\n      formData.append('files', file, file.name);\n    }\n  }\n  formData.append('text', this.get('text'));\n  model.create(formData, function(error, result) {\n    self.set('text', '');\n    if(error) {\n      self.set('error', error.error);\n    } else {\n      self.set('error', false);\n      self.set('success', 'The post is saved  successfully.<br />What about adding another one?');\n      getPosts();\n    }\n  });\n});\n```", "```js\n// models/Content.js\ncreate: function(formData, callback) {\n  var self = this;\n  ajax.request({\n    url: this.get('url'),\n    method: 'POST',\n    formData: formData,\n    json: true\n  })\n  .done(function(result) {\n    callback(null, result);\n  })\n  .fail(function(xhr) {\n    callback(JSON.parse(xhr.responseText));\n  });\n}\n```", "```js\ncase 'POST':\n  var formidable = require('formidable');\n  var uploadDir = __dirname + '/../static/uploads/';\n  var form = new formidable.IncomingForm();\n  form.multiples = true;\n  form.parse(req, function(err, data, files) {\n    // ...\n  });\nbreak;\n```", "```js\nvar processFiles = function(userId, callback) {\n  if(files.files) {\n    var fileName = userId + '_' + files.files.name;\n    var filePath = uploadDir + fileName;\n    fs.rename(files.files.path, filePath, function() {\n      callback(fileName);\n    });\n  } else {\n    callback();\n  }\n};\n```", "```js\ncase 'POST':\n  var uploadDir = __dirname + '/../static/uploads/';\n  var formidable = require('formidable');\n  var form = new formidable.IncomingForm();\n  form.multiples = true;\n  form.parse(req, function(err, data, files) {\n    if(!data.text || data.text === '') {\n      error('Please add some text.', res);\n    } else {\n      var processFiles = function(userId, callback) {\n        if(files.files) {\n          var fileName = userId + '_' + files.files.name;\n          var filePath = uploadDir + fileName;\n          fs.rename(files.files.path, filePath, function(err) {\n            if(err) throw err;\n            callback(fileName);\n          });\n        } else {\n          callback();\n        }\n      };\n      var done = function() {\n        response({\n          success: 'OK'\n        }, res);\n      }\n      getDatabaseConnection(function(db) {\n        getCurrentUser(function(user) {\n          var collection = db.collection('content');\n          data.userId = user._id.toString();\n          data.userName = user.firstName + ' ' + user.lastName;\n          data.date = new Date();\n          processFiles(user._id, function(file) {\n            if(file) {\n              data.file = file;\n            }\n            collection.insert(data, done);\n          });\n        }, req, res);\n      });\n    }\n  });\nbreak;\n```", "```js\n{{#each posts:index}}\n  <div class=\"content-item\">\n    <h2>{{posts[index].userName}}</h2>\n    {{posts[index].text}}\n    {{#if posts[index].file}}\n    <img src=\"img/{{posts[index].file}}\" />\n    {{/if}}\n  </div>\n{{/each}}\n```"]