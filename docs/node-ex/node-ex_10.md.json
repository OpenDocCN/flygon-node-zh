["```js\n{\n  \"name\": \"nodejs-by-example\",\n  \"version\": \"0.0.2\",\n  \"description\": \"Node.js by example\",\n  \"scripts\": {\n    \"start\": \"node server.js\"\n  },\n  \"dependencies\": {\n    \"socket.io\": \"1.3.3\"\n    ...\n    ...\n  }\n}\n```", "```js\nmodule.exports = function(app) {\n  var io = require('socket.io')(app);\n  io.on('connection', function (socket) {\n    socket.emit('news', { hello: 'world' });\n    socket.on('my other event', function (data) {\n      console.log(data);\n    });\n  });\n}\n```", "```js\nvar app = http.createServer(checkSession).listen(port, '127.0.0.1');\nconsole.log(\"Listening on 127.0.0.1:\" + port);\n\nvar Chat = require('./backend/Chat');\nChat(app);\n```", "```js\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <title>Node.js by example</title>\n  <meta http-equiv=\"Content-Type\" content=\"text/html;  charset=utf-8\" />\n  <meta name=\"description\" content=\"Node.js by examples\">\n  <meta name=\"author\" content=\"Packt\">\n  <link rel=\"stylesheet\" href=\"/static/css/styles.css\">\n</head>\n<body>\n  <div class=\"container\"></div>\n  <script src=\"img/socket.io.js\"></script>\n  <script src=\"img/ractive.js\"></script>\n  <script src=\"img/app.js\"></script>\n</body>\n</html>\n```", "```js\nwindow.onload = function() {\n\n  ...\n\n  var socket = io('http://localhost:9000');\n  socket.on('news', function (data) {\n    console.log(data);\n    socket.emit('my other event', { my: 'data' });\n  });\n\n};\n```", "```js\n<nav>\n  <ul>\n    <li><a on-click=\"goto:home\">Home</a></li>\n    {{#if !isLogged }}\n      <li><a on-click=\"goto:register\">Register</a></li>\n      <li><a on-click=\"goto:login\">Login</a></li>\n    {{else}}\n      <li class=\"right\"><a on-click=\"goto:logout\">Logout</a></li>\n      <li class=\"right\"><a  \n        on-click=\"goto:profile\">Profile</a></li>\n      <li class=\"right\"><a on-click=\"goto:find-friends\">Find  friends</a></li>\n      <li class=\"right\"><a on-click=\"goto:pages\">Pages</a></li>\n      <li class=\"right\"><a on-click=\"goto:chat\">Chat</a></li>\n    {{/if}}\n  </ul>\n</nav>\n```", "```js\nRouter\n...\n...\n.add('chat', function() {\n  if(userModel.isLogged()) {\n    var p = new Chat();\n    showPage(p);\n  } else {\n    Router.navigate('login');\n  }    \n})\n.add(function() {\n  Router.navigate('home');\n})\n.listen()\n.check();\n```", "```js\n// frontend/js/controllers/Chat.js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/chat'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  data: {\n    output: ''\n  },\n  onrender: function() {\n\n  }\n});\n```", "```js\n// front/tpl/chat.html\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  <h1>Chat</h1>\n</div>\n<form>\n  <div class=\"chat-output\">{{output}}</div>\n  <input type=\"text\" value=\"{{text}}\" />\n  <a href=\"#\" on-click=\"send\" class=\"button\">Send</a>\n</form>\n<appfooter />\n```", "```js\ndata: {\n  messages: ['Loading. Please wait.'],\n  output: '',\n  socketConnected: false\n}\n```", "```js\n// frontend/tpl/chat.html\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  <h1>Chat</h1>\n</div>\n<form>\n  <div class=\"chat-output\"  data-component=\"output\">{{{output}}}</div>\n  {{#if socketConnected}}\n    <input type=\"text\" value=\"{{text}}\" />\n    <a href=\"#\" on-click=\"send\" class=\"button\">Send</a>\n  {{/if}}\n</form>\n<appfooter />\n```", "```js\nvar self = this;\nvar socket = io('http://localhost:9000');\nsocket.on('connect', function() {\n  self.push('messages', 'Connected!');\n  self.set('socketConnected', true);\n  self.find('input[type=\"text\"]').focus();\n});\nsocket.on('disconnect', function() {\n  self.set('socketConnected', false);\n  self.push('messages', 'Disconnected!');\n});\nsocket.on('server-talking', function(data) {\n  self.push('messages', data.text);\n});\n```", "```js\nvar send = function() {\n  socket.emit('client-talking', { text: self.get('text')});\n  self.set('text', '');\n}\nthis.on('send', send);\n```", "```js\nthis.find('form').addEventListener('keypress', function(e) {\n  if(e.keyCode === 13 && e.target.nodeName === 'INPUT') {\n    e.preventDefault();\n    send();\n  }\n});\n```", "```js\nupdateOutput: function() {\n  this.set('output', this.get('messages').join('<br />'));\n  var outputEl = this.find('[data-component=\"output\"]');\n  outputEl.scrollTop = outputEl.scrollHeight;\n}\n```", "```js\nthis.observe('messages', this.updateOutput);\n```", "```js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/chat'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  data: {\n    messages: ['Loading. Please wait.'],\n    output: '',\n    socketConnected: false\n  },\n  onrender: function() {\n\n    var self = this;\n    var socket = io('http://localhost:9000');\n    socket.on('connect', function() {\n      self.push('messages', 'Connected!');\n      self.set('socketConnected', true);\n      self.find('input[type=\"text\"]').focus();\n    });\n    socket.on('disconnect', function() {\n      self.set('socketConnected', false);\n      self.push('messages', 'Disconnected!');\n    });\n    socket.on('server-talking', function(data) {\n      self.push('messages', data.text);\n    });\n\n    var send = function() {\n      socket.emit('client-talking', { text: self.get('text')});\n      self.set('text', '');\n    }\n\n    this.on('send', send);\n    this.observe('messages', this.updateOutput);\n\n    this.find('form').addEventListener('keypress', function(e) {\n      if(e.keyCode === 13 && e.target.nodeName === 'INPUT') {\n        e.preventDefault();\n        send();\n      }\n    });\n\n  },\n  updateOutput: function() {\n    this.set('output', this.get('messages').join('<br />'));\n    var outputEl = this.find('[data-component=\"output\"]');\n    outputEl.scrollTop = outputEl.scrollHeight;\n  }\n});\n```", "```js\n// backend/Code.js\nmodule.exports = function(app) {\n  var io = require('socket.io')(app);\n  io.on('connection', function (socket) {\n    socket.on('client-talking', function (data) {\n      io.sockets.emit('server-talking', { text: data.text });\n    });\n  });\n}\n```", "```js\n\"dependencies\": {\n  \"cookie\": \"0.1.2\",\n  \"socket.io\": \"1.3.3\",\n  ...\n  ...\n}\n```", "```js\nvar getCurrentUserBySessionObj = function(callback, obj) {\n  getDatabaseConnection(function(db) {\n    var collection = db.collection('users');\n    collection.find({ \n      email: obj.user.email\n    }).toArray(function(err, result) {\n      if(result.length === 0) {\n        callback({ error: 'No user found.' });\n      } else {\n        callback(null, result[0]);\n      }\n    });\n  });\n};\n```", "```js\nvar helpers = require('./api/helpers');\nvar getCurrentUserBySessionObj =  helpers.getCurrentUserBySessionObj;\nvar cookie = require('cookie');\n```", "```js\nvar decode = function(string) {\n  var body = new Buffer(string, 'base64').toString('utf8');\n  return JSON.parse(body);\n};\n```", "```js\nvar broadcastMessage = function(userId, message) {\n  var user = users[userId];\n  if(user && user.friends && user.friends.length > 0) {\n    user.socket.emit('server-talking', { text: message });\n    for(var i=0; i<user.friends.length; i++) {\n      var friend = users[user.friends[i]];\n      if(friend && friend.socket) {\n        friend.socket.emit('server-talking', { text: message });\n      }\n    }\n  }\n};\n```", "```js\nmodule.exports = function(app) {\n  var io = require('socket.io')(app);\n  io.on('connection', function (socket) {\n    var sessionData = cookie.parse(socket.request.headers.cookie);\n    sessionData = decode(sessionData['express:sess']);\n    if(sessionData && sessionData.user) {\n      getCurrentUserBySessionObj(function(err, user) {\n        var userId = user._id.toString();\n        users[userId] = {\n          socket: socket,\n          friends: user.friends\n        };\n        socket.on('client-talking', function (data) {\n          broadcastMessage(userId, data.text);\n        });\n        socket.on('disconnect', function() {\n          users[userId] = null;\n        });\n      }, sessionData);\n    }\n\n  });\n}\n```", "```js\nvar getRandomColor = function() {\n  var letters = '0123456789ABCDEF'.split('');\n  var color = '#';\n  for(var i = 0; i < 6; i++ ) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n```", "```js\n...\nvar getRandomColor = helpers.getRandomColor;\n\nmodule.exports = function(app) {\n  var io = require('socket.io')(app);\n  io.on('connection', function (socket) {\n    var sessionData = cookie.parse(socket.request.headers.cookie);\n    sessionData = decode(sessionData['express:sess']);\n    if(sessionData && sessionData.user) {\n      getCurrentUserBySessionObj(function(err, user) {\n        var userId = user._id.toString();\n        users[userId] = {\n          socket: socket,\n          friends: user.friends,\n          color: getRandomColor()\n        };\n        socket.on('client-talking', function (data) {\n          broadcastMessage(user, data.text);\n        });\n        socket.on('disconnect', function() {\n          users[userId] = null;\n        });\n      }, sessionData);\n    }\n\n  });\n}\n```", "```js\nvar broadcastMessage = function(userProfile, message) {\n  var user = users[userProfile._id.toString()];\n  var userName = userProfile.firstName + ' ' +  userProfile.lastName;\n  if(user && user.friends && user.friends.length > 0) {\n    user.socket.emit('server-talking', {\n      text: message,\n      user: userName,\n      color: user.color\n    });\n    for(var i=0; i<user.friends.length; i++) {\n      var friend = users[user.friends[i]];\n      if(friend && friend.socket) {\n        friend.socket.emit('server-talking', { \n          text: message,\n          user: userName,\n          color: user.color\n        });\n      }\n    }\n  }\n};\n```", "```js\n// frontend/js/controllers/Chat.js\nsocket.on('server-talking', function(data) {\n  var message = '<span style=\"color:' + data.color + '\">';\n  message += data.user + ': ' + data.text;\n  message += '</span>';\n  self.push('messages', message);\n});\n```"]