["```js\n<li class=\"right\"><a on-click=\"goto:logout\">Logout</a></li>\n<li class=\"right\"><a on-click=\"goto:profile\">Profile</a></li>\n<li class=\"right\"><a on-click=\"goto:find-friends\">Find  friends</a></li>\n```", "```js\nRouter\n.add('find-friends', function() {\n  if(userModel.isLogged()) {\n    var p = new FindFriends();\n    showPage(p);\n  } else {\n    Router.navigate('login');\n  }\n})\n```", "```js\n// frontend/js/controllers/FindFriends.js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/find-friends'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  data: {\n    loading: false,\n    message: '',\n    searchFor: '',\n    foundFriends: null\n  },\n  onrender: function() {\n    // ...\n  }\n});\n```", "```js\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  <h1>Find friends</h1>\n</div>\n<form onsubmit=\"return false;\">\n  {{#if loading}}\n    <p>Loading. Please wait.</p>\n  {{else}}\n    <label for=\"friend-name\">\n      Please, type the name of your friend:\n    </label>\n    <input type=\"text\" id=\"friend-name\" value=\"{{friendName}}\"/>\n    <input type=\"button\" value=\"Find\" on-click=\"find\" />\n  {{/if}}\n</form>\n{{#if foundFriends !== null}}\n  <div class=\"friends-list\">\n    {{#each foundFriends}}\n      <div class=\"friend-list-item\">\n        <h2>{{firstName}} {{lastName}}</h2>\n        <input type=\"button\" value=\"Add as a friend\"\n         on-click=\"add:{{id}}\"/>\n      </div>\n    {{/each}}\n  </div>\n{{/if}}\n{{#if message !== ''}}\n  <div class=\"friends-list\">\n    <p>{{{message}}}</p>\n  </div>\n{{/if}}\n<appfooter />\n```", "```js\nvar ajax = require('../lib/Ajax');\nvar Base = require('./Base');\n\nmodule.exports = Base.extend({\n  data: {\n    url: '/api/friends'\n  },\n  find: function(searchFor, callback) {\n    ajax.request({\n      url: this.get('url') + '/find',\n      method: 'POST',\n      data: {\n        searchFor: searchFor\n      },\n      json: true\n    })\n    .done(function(result) {\n      callback(null, result);\n    })\n    .fail(function(xhr) {\n      callback(JSON.parse(xhr.responseText));\n    });\n  }\n});\n```", "```js\nvar Friends = require('../models/Friends');\n```", "```js\nonrender: function() {\n\n  var model = new Friends();\n  var self = this;\n\n  this.on('find', function(e) {\n    self.set('loading', true);\n    self.set('message', '');\n    var searchFor = this.get('friendName');\n    model.find(searchFor, function(err, res) {\n\n      if(res.friends && res.friends.length > 0) {\n        self.set('foundFriends', res.friends);\n      } else {\n        self.set('foundFriends', null);\n        self.set('message', 'Sorry, there is no friends matching <strong>' + searchFor + '<strong>');\n      }\n      self.set('loading', false);\n    });\n  });\n\n}\n```", "```js\nvar getCurrentUser = function(callback, req, res) {\n  getDatabaseConnection(function(db) {\n    var collection = db.collection('users');\n    collection.find({ \n      email: req.session.user.email\n    }).toArray(function(err, result) {\n      if(result.length === 0) {\n        error('No such user', res);\n      } else {\n        callback(result[0]);\n      }\n    });\n  });\n};\n```", "```js\nRouter\n.add('api/friends/find', function(req, res) {\n  if(req.session && req.session.user) {\n    if(req.method === 'POST') {      \n      processPOSTRequest(req, function(data) {\n        getDatabaseConnection(function(db) {\n          getCurrentUser(function(user) {\n            findFriends(db, data.searchFor, user.friends || []);\n          }, req, res);          \n        });\n      });\n    } else {\n      error('This method accepts only POST requests.', res);\n    }\n  } else {\n    error('You must be logged in to use this method.', res);\n  }\n})\n```", "```js\nvar findFriends = function(db, searchFor, currentFriends) {\n  var collection = db.collection('users');\n  var regExp = new RegExp(searchFor, 'gi');\n  var excludeEmails = [req.session.user.email];\n  currentFriends.forEach(function(value, index, arr) {\n    arr[index] = ObjectId(value);\n  });\n  collection.find({\n    $and: [\n      {\n        $or: [\n          { firstName: regExp },\n          { lastName: regExp }\n        ]\n      },\n      { email: { $nin: excludeEmails } },\n      { _id: { $nin: currentFriends } }\n    ]\n  }).toArray(function(err, result) {\n    var foundFriends = [];\n    for(var i=0; i<result.length; i++) {\n      foundFriends.push({\n        id: result[i]._id,\n        firstName: result[i].firstName,\n        lastName: result[i].lastName\n      });\n    };\n    response({\n      friends: foundFriends\n    }, res);\n  });\n}\n```", "```js\nthis.on('add', function(e, id) {\n  this.set('loading', true);\n  model.add(id, function(err, res) {\n    self.set('foundFriends', null);\n    if(err) {\n      self.set('message', 'Operation failed.');\n    } else if(res.success === 'OK') {\n      self.set('message', 'Operation successful.');\n    }\n    self.set('loading', false);\n  });\n});\n```", "```js\nadd: function(id, callback) {\n  ajax.request({\n    url: this.get('url') + '/add',\n    method: 'POST',\n    data: {\n      id: id\n    },\n    json: true\n  })\n  .done(function(result) {\n    callback(null, result);\n  })\n  .fail(function(xhr) {\n    callback(JSON.parse(xhr.responseText));\n  });\n}\n```", "```js\n.add('api/friends/add', function(req, res) {\n  if(req.session && req.session.user) {\n    if(req.method === 'POST') {\n      var friendId;\n      var updateUserData = function(db, friendId) {\n        var collection = db.collection('users');\n        collection.update(\n          { email: req.session.user.email },\n          { $push: { friends: friendId } }, \n          done\n        );\n      };\n      var done = function(err, result) {\n        if(err) {\n          error('Error updating the data.', res);\n        } else {                \n          response({\n            success: 'OK'\n          }, res);\n        }\n      };\n      processPOSTRequest(req, function(data) {\n        getDatabaseConnection(function(db) {\n          updateUserData(db, data.id);\n        });\n      });\n    } else {\n      error('This method accepts only POST requests.', res);\n    }\n  } else {\n    error('You must be logged in to use this method.', res);\n  }\n})\n```", "```js\n{{#if friends.length > 0}}\n  <div class=\"hero\">\n    <h1>Friends</h1>\n  </div>\n  <div class=\"friends-list\">\n    {{#each friends:index}}\n      <div class=\"friend-list-item\">\n        <h2>{{friends[index].firstName}}  {{friends[index].lastName}}</h2>\n      </div>\n    {{/each}}\n  </div>\n{{/if}}\n```", "```js\n// controllers/Profile.js\nonrender: function() {\n\n  ...\n\n  var friends = new Friends();\n  friends.fetch(function(err, result) {\n    self.set('friends', result.friends);\u2029  });\n}\n```", "```js\n  data: {\n    friends: []\n  },\n  onrender: function() {\n  ...\n  }\n```", "```js\n.add('api/friends', function(req, res) {\n  if(req.session && req.session.user) {\n    getCurrentUser(function(user) {\n      if(!user.friends || user.friends.length === 0) {\n        return response({ friends: [] }, res);\n      }\n      user.friends.forEach(function(value, index, arr) {\n        arr[index] = ObjectId(value);\n      });\n      getDatabaseConnection(function(db) {\n        var collection = db.collection('users');\n        collection.find({ \n          _id: { $in: user.friends }\n        }).toArray(function(err, result) {\n          result.forEach(function(value, index, arr) {\n            arr[index].id = value.id;\n            delete arr[index].password;\n            delete arr[index].email;\n            delete arr[index]._id;\n          });\n          response({\n            friends: result\n          }, res);\n        });\n      });\n    }, req, res);\n  } else {\n    error('You must be logged in to use this method.', res);\n  }\n})\n```"]