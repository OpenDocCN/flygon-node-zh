["```js\n// backend/api/helpers.js\nvar MongoClient = require('mongodb').MongoClient;\nvar querystring = require('querystring');\nvar database;\n\nvar response = function(result, res) { ... };\nvar error = function(message, res) { ... };\nvar getDatabaseConnection = function(callback) { ... };\nvar processPOSTRequest = function(req, callback) { ... };\nvar validEmail = function(value) { ... };\nvar getCurrentUser = function(callback, req, res) { ... };\n\nmodule.exports = {\n  response: response,\n  error: error,\n  getDatabaseConnection: getDatabaseConnection,\n  processPOSTRequest: processPOSTRequest,\n  validEmail: validEmail,\n  getCurrentUser: getCurrentUser\n};\n```", "```js\nvar Router = require('../frontend/js/lib/router')();\nRouter\n.add('api/version', function(req, res) { ... })\n.add('api/user/login', function(req, res) { ... })\n```", "```js\nvar Router = require('../frontend/js/lib/router')();\nRouter\n.add('api/version', require('./api/version'))\n.add('api/user/login', require('./api/user-login'))\n.add('api/user/logout', require('./api/user-logout'))\n.add('api/user', require('./api/user'))\n.add('api/friends/find', require('./api/friends-find'))\n.add('api/friends/add', require('./api/friends-add'))\n.add('api/friends', require('./api/friends'))\n.add('api/content', require('./api/content'))\n.add('api/pages/:id', require('./api/pages'))\n.add('api/pages', require('./api/pages'))\n.add(require('./api/default'));\nmodule.exports = function(req, res) {\n  Router.check(req.url, [req, res]);\n}\n```", "```js\nvar ObjectId = require('mongodb').ObjectID;\nvar helpers = require('./helpers');\nvar response = helpers.response;\nvar error = helpers.error;\nvar getDatabaseConnection = helpers.getDatabaseConnection;\nvar getCurrentUser = helpers.getCurrentUser;\n\nmodule.exports = function(req, res) {\n  ...\n}\n```", "```js\n    .add('pages', function() {\n      if(userModel.isLogged()) {\n        var p = new Pages();\n        showPage(p);\n      } else {\n        Router.navigate('login');\n      }    \n    })\n    .add(function() {\n      Router.navigate('home');\n    })\n    ```", "```js\n    module.exports = Ractive.extend({\n      template: require('../../tpl/pages'),\n      components: {\n        navigation: require('../views/Navigation'),\n        appfooter: require('../views/Footer')\n      },\n      data: { },\n      onrender: function() { }\n    });\n    ```", "```js\n    <header>\n      <navigation></navigation>\n    </header>\n    <div class=\"hero\">\n      <form enctype=\"multipart/form-data\" method=\"post\">\n        <h3>Add a new page</h3>\n        {{#if error && error != ''}}\n          <div class=\"error\">{{error}}</div>\n        {{/if}}\n        {{#if success && success != ''}}\n          <div class=\"success\">{{{success}}}</div>\n        {{/if}}\n        <label>Title</label>\n        <textarea value=\"{{title}}\"></textarea>\n        <label>Description</label>\n        <textarea value=\"{{description}}\"></textarea>\n        <input type=\"button\" value=\"Create\" on-click=\"create\" />\n      </form>\n    </div>\n    <appfooter />\n    ```", "```js\n// frontend/js/models/Pages.js\nvar ajax = require('../lib/Ajax');\nvar Base = require('./Base');\nmodule.exports = Base.extend({\n  data: {\n    url: '/api/pages'\n  },\n  create: function(formData, callback) {\n    var self = this;\n    ajax.request({\n      url: this.get('url'),\n      method: 'POST',\n      formData: formData,\n      json: true\n    })\n    .done(function(result) {\n      callback(null, result);\n    })\n    .fail(function(xhr) {\n      callback(JSON.parse(xhr.responseText));\n    });\n  }\n});\n```", "```js\nonrender: function() {\n  var model = new PagesModel();\n  var self = this;\n  this.on('create', function() {\n    var formData = new FormData();\n    formData.append('title', this.get('title'));\n    formData.append('description', this.get('description'));\n    model.create(formData, function(error, result) {\n      if(error) {\n        self.set('error', error.error);\n      } else {\n        self.set('title', '');\n        self.set('description', '');\n        self.set('error', false);\n        self.set('success', 'The page was created successfully.\n      }\n    });\n  });\n}\n```", "```js\n// backend/API.js\n.add('api/pages', require('./api/pages'))\n.add(require('./api/default'));\n```", "```js\nvar ObjectId = require('mongodb').ObjectID;\nvar helpers = require('./helpers');\nvar response = helpers.response;\nvar error = helpers.error;\nvar getDatabaseConnection = helpers.getDatabaseConnection;\nvar getCurrentUser = helpers.getCurrentUser;\n```", "```js\nmodule.exports = function(req, res) {\n  var user;\n  if(req.session && req.session.user) {\n    user = req.session.user;\n  } else {\n    error('You must be logged in in order to use this  method.', res);\n    return;\n  }\n  switch(req.method) {\n    case 'GET': break;\n    case 'POST':\n      var formidable = require('formidable');\n      var form = new formidable.IncomingForm();\n      form.parse(req, function(err, formData, files) {\n        var data = {\n          title: formData.title,\n          description: formData.description\n        };\n        if(!data.title || data.title === '') {\n          error('Please add some title.', res);\n        } else if(!data.description || data.description === '') {\n          error('Please add some description.', res);\n        } else {\n          var done = function() {\n            response({\n              success: 'OK'\n            }, res);\n          }\n          getDatabaseConnection(function(db) {\n            getCurrentUser(function(user) {\n              var collection = db.collection('pages');\n              data.userId = user._id.toString();\n              data.userName = user.firstName + ' ' + user.lastName;\n              data.date = new Date();\n              collection.insert(data, done);\n            }, req, res);\n          });\n        }\n      });\n    break;\n  };\n}\n```", "```js\ncase 'GET':\n  getDatabaseConnection(function(db) {\n    var collection = db.collection('pages');\n    collection.find({ \n      $query: { },\n      $orderby: {\n        date: -1\n      }\n    }).toArray(function(err, result) {\n      result.forEach(function(value, index, arr) {\n        arr[index].id = value._id;\n        delete arr[index].userId;\n      });\n      response({\n        pages: result\n      }, res);\n    });\n  });\nbreak;\n```", "```js\nvar getPages = function() {\n  model.fetch(function(err, result) {\n    if(!err) {\n      self.set('pages', result.pages);\n    } else {\n      self.set('error', err.error);\n    }\n  });\n};\ngetPages();\n```", "```js\n{{#each pages:index}}\n  <div class=\"content-item\">\n    <h2>{{pages[index].title}}</h2>\n    <p><small>Created by {{pages[index].userName}}</small></p>\n    <p>{{pages[index].description}}</p>\n    <p><a href=\"/pages/{{pages[index].id}}\" class=\"button\">Visit the page</a></p>\n  </div>\n{{/each}}\n```", "```js\n.add('api/pages/:id', require('./api/pages'))\n.add('api/pages', require('./api/pages'))\n```", "```js\ncollection.find({ \n  $query: { },\n  $orderby: {\n    date: -1\n  }\n}\n```", "```js\nvar query;\nif(params && params.id) {\n  query = { _id: ObjectId(params.id) };\n} else {\n  query = {};\n}\ncollection.find({ \n  $query: query,\n  $orderby: {\n    date: -1\n  }\n}\n```", "```js\n// frontend/js/app.js\n.add('pages/:id', function(params) {\n  if(userModel.isLogged()) {\n    var p = new Pages({ \n      data: {\n        pageId: params.id\n      }\n    });\n    showPage(p);\n  } else {\n    Router.navigate('login');\n  }\n})\n```", "```js\n// controllers/Page.js\nonrender: function() {\n  var model = new PagesModel();\n  var self = this;\n\n  var pageId = this.get('pageId');\n  if(pageId) {\n    model.getPage(pageId, function(err, result) {\n      if(!err && result.pages.length > 0) {\n        var page = result.pages[0];\n        self.set('pageTitle', page.title);\n        self.set('pageDescription', page.description);\n      } else {\n        self.set('pageTitle', 'Missing page.');\n      }\n    });\n    return;\n  }\n\n  \u2026\n```", "```js\n// models/Pages.js\ngetPage: function(pageId, callback) {\n  var self = this;\n  ajax.request({\n    url: this.get('url') + '/' + pageId,\n    method: 'GET',\n    json: true\n  })\n  .done(function(result) {\n    callback(null, result);\n  })\n  .fail(function(xhr) {\n    callback(JSON.parse(xhr.responseText));\n  });\n}\n```", "```js\n{{#if pageId}}\n  <div class=\"hero\">\n    <h1>{{pageTitle}}</h1>\n    <p>{{pageDescription}}</p>\n  </div>\n  <hr />\n{{else}}\n  <div class=\"hero\">\n    <form enctype=\"multipart/form-data\" method=\"post\">\n      ...\n    </form>\n  </div>\n  {{#each pages:index}}\n    ...\n  {{/each}}\n{{/if}}\n```", "```js\n<form enctype=\"multipart/form-data\" method=\"post\">\n  <h3>Add a comment for this page</h3>\n  {{#if error && error != ''}}\n    <div class=\"error\">{{error}}</div>\n  {{/if}}\n  {{#if success && success != ''}}\n    <div class=\"success\">{{{success}}}</div>\n  {{/if}}\n  <label for=\"text\">Text</label>\n  <textarea value=\"{{text}}\"></textarea>\n  <input type=\"button\" value=\"Post\" on-click=\"add-comment\" />\n</form>\n```", "```js\n// controllers/Pages.js\nthis.on('add-comment', function() {\n  var contentModel = new ContentModel();\n  var formData = new FormData();\n  formData.append('text', this.get('text'));\n  formData.append('pageId', pageId);\n  contentModel.create(formData, function(error, result) {\n    self.set('text', '');\n    if(error) {\n      self.set('error', error.error);\n    } else {\n      self.set('error', false);\n      self.set('success', 'The post is saved successfully.');\n    }\n  });\n});\n```", "```js\nform.parse(req, function(err, formData, files) {\n  var data = {\n    text: formData.text\n  };\n  if(formData.pageId) {\n    data.pageId = formData.pageId;\n  }\n  \u2026\n```", "```js\nvar getComments = function(pageId, callback) {\n  var collection = db.collection('content');\n  collection.find({ \n    $query: {\n      pageId: pageId\n    },\n    $orderby: {\n      date: -1\n    }\n  }).toArray(function(err, result) {\n    result.forEach(function(value, index, arr) {\n      delete arr[index].userId;\n      delete arr[index]._id;\n    });\n    callback(result);\n  });\n}\n```", "```js\ngetDatabaseConnection(function(db) {\n  var query;\n  if(params && params.id) {\n    query = { _id: ObjectId(params.id) };\n  } else {\n    query = {};\n  }\n  var collection = db.collection('pages');\n  var getComments = function(pageId, callback) { ... }\n  collection.find({ \n    $query: query,\n    $orderby: {\n      date: -1\n    }\n  }).toArray(function(err, result) {\n    result.forEach(function(value, index, arr) {\n      arr[index].id = value._id;\n      delete arr[index]._id;\n      delete arr[index].userId;\n    });\n    if(params.id && result.length > 0) {\n      getComments(params.id, function(comments) {\n        result[0].comments = comments;\n        response({\n          pages: result\n        }, res);\n      });\n    } else {\n      response({\n        pages: result\n      }, res);\n    }\n  });\n});\n```", "```js\nvar showPage = function() {\n  model.getPage(pageId, function(err, result) {\n    if(!err && result.pages.length > 0) {\n      var page = result.pages[0];\n      self.set('pageTitle', page.title);\n      self.set('pageDescription', page.description);\n      self.set('comments', page.comments);\n    } else {\n      self.set('pageTitle', 'Missing page.');\n    }\n  });\n}\nshowPage();\n```", "```js\n{{#each comments:index}}\n  <div class=\"content-item\">\n    <h2>{{comments[index].userName}}</h2>\n    <p>{{comments[index].text}}</p>\n  </div>\n{{/each}}\n```", "```js\n// frontend/js/app.js\n.add('pages/:id/:events', function(params) {\n  if(userModel.isLogged()) {\n    var p = new Pages({ \n      data: {\n        pageId: params.id,\n        showEvents: true\n      }\n    });\n    showPage(p);\n  } else {\n    Router.navigate('login');\n  }\n})\n```", "```js\n// frontend/tpl/pages.html\n{{#if showEvents}}\n  <form enctype=\"multipart/form-data\" method=\"post\">\n    <a href=\"/pages/{{pageId}}\" class=\"button m-right right\">View comments</a>\n    <h3>Add new event</h3>\n    ...\n  </form>\n  {{#each events:index}} \u2026 {{/each}}\n{{else}}\n  <form enctype=\"multipart/form-data\" method=\"post\">\n    <a href=\"/pages/{{pageId}}/events\" class=\"button right\">View events</a>\n    <h3>Add a comment for this page</h3>\n    ...\n  </form>\n  {{#each comments:index}} \u2026 {{/each}}\n{{/if}}\n```", "```js\nthis.on('add-event', function() {\n  var contentModel = new ContentModel();\n  var formData = new FormData();\n  formData.append('text', this.get('text'));\n  formData.append('eventDate', this.get('date'));\n  formData.append('pageId', pageId);\n  contentModel.create(formData, function(error, result) {\n    ...\n  });\n});\n```", "```js\n// backend/api/content.js\nif(formData.pageId) {\n  data.pageId = formData.pageId;\n}\nif(formData.eventDate) {\n  data.eventDate = formData.eventDate;\n}\n```", "```js\nself.set('events', page.events);\n```", "```js\nvar getPageItems = function(pageId, callback) {\n  var collection = db.collection('content');\n  collection.find({ \n    $query: {\n      pageId: pageId\n    },\n    $orderby: {\n      date: -1\n    }\n  }).toArray(function(err, result) {\n    var comments = [];\n    var events = [];\n    result.forEach(function(value, index, arr) {\n      delete value.userId;\n      delete value._id;\n      if(value.eventDate) {\n        events.push(value);\n      } else {\n        comments.push(value);                \n      }\n    });\n    events.sort(function(a, b) {\n      return a.eventDate > b.eventDate;\n    });\n    callback(comments, events);\n  });\n}\n```", "```js\ngetPageItems(params.id, function(comments, events) {\n  result[0].comments = comments;\n  result[0].events = events;\n  \u2026\n}\n```"]