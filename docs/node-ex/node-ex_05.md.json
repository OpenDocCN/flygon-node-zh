["```js\n\"dependencies\": {\n  \"mongodb\": \"1.4.25\",\n  ..\n}\n```", "```js\nvar MongoClient = require('mongodb').MongoClient;\nMongoClient.connect('mongodb://127.0.0.1:27017/nodejs-by-example',  function(err, db) {\n  // ...\n});\n```", "```js\nvar collection = db.collection('users');\ncollection.insert({\n  name: 'John',\n  email: 'john@test.com'\n}, function(err, result) {\n  // ...\n});\n```", "```js\ncreate: function(callback) {\n  var self = this;\n  ajax.request({\n    url: self.get('url'),\n    method: 'POST',\n    data: this.get('value'),\n    json: true\n  })\n  .done(function(result) {\n    if(callback) {\n      callback(null, result);\n    }\n  })\n  .fail(function(xhr) {\n    if(callback) {\n      callback(JSON.parse(xhr.responseText));\n    }\n  });\n  return this;\n}\n```", "```js\nsave: function(callback) {\n  var self = this;\n  ajax.request({\n    url: self.get('url'),\n    method: 'PUT',\n    data: this.get('value'),\n    json: true\n  })\n  .done(function(result) { // ...  })\n  .fail(function(xhr) { // ... });\n  return this;\n},\ndel: function(callback) {\n  var self = this;\n  ajax.request({\n    url: self.get('url'),\n    method: 'DELETE',\n    json: true\n  })\n  .done(function(result) { ...  })\n  .fail(function(xhr) { ... });\n  return this;\n}\n```", "```js\n<nav>\n  <ul>\n    <li><a on-click=\"goto:home\">Home</a></li>\n    {{#if !isLogged }}\n      <li><a on-click=\"goto:register\">Register</a></li>\n      <li><a on-click=\"goto:login\">Login</a></li>\n    {{else}}\n      <li class=\"right\"><a on-click=\"goto:logout\">Logout</a></li>\n      <li class=\"right\"><a on-click=\"goto:profile\">Profile</a></li>\n    {{/if}}\n  </ul>\n</nav>\n```", "```js\nvar showPage = function(newPage) {\n  if(currentPage) currentPage.teardown();\n  currentPage = newPage;\n  body.innerHTML = '';\n  currentPage.render(body);\n  currentPage.on('navigation.goto', function(e, route) {\n    Router.navigate(route);\n  });\n}\n```", "```js\nvar Register = require('./controllers/Register');\nRouter\n.add('register', function() {\n  var p = new Register();\n  showPage(p);\n})\n```", "```js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/register'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  onrender: function() {\n    var self = this;\n    this.observe('firstName',  userModel.setter('value.firstName'));\n    this.observe('lastName', userModel.setter('value.lastName'));\n    this.observe('email', userModel.setter('value.email'));\n    this.observe('password', userModel.setter('value.password'));\n    this.on('register', function() {\n      userModel.create(function(error, result) {\n        if(error) {\n          self.set('error', error.error);\n        } else {\n          self.set('error', false);\n          self.set('success', 'Registration successful.  Click <a href=\"/login\">here</a> to login.');\n        }\n      });\n    });\n  }\n});\n```", "```js\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  <h1>Register</h1>\n</div>\n<form>\n  {{#if error && error != ''}}\n    <div class=\"error\">{{error}}</div>\n  {{/if}}\n  {{#if success && success != ''}}\n    <div class=\"success\">{{{success}}}</div>\n  {{else}}\n    <label for=\"first-name\">First name</label>\n    <input type=\"text\" id=\"first-name\" value=\"{{firstName}}\"/>\n    <label for=\"last-name\">Last name</label>\n    <input type=\"text\" id=\"last-name\" value=\"{{lastName}}\" />\n    <label for=\"email\">Email</label>\n    <input type=\"text\" id=\"email\" value=\"{{email}}\" />\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" value=\"{{password}}\" />\n    <input type=\"button\" value=\"register\" on-click=\"register\" />\n  {{/if}}\n</form>\n<appfooter />\n```", "```js\nthis.observe('firstName', function(value) {\n   userModel.set('value.firstName', value);\n});\n```", "```js\nthis.observe('firstName', userModel.setter('value.firstName'));\n```", "```js\n// frontend/js/models/Base.js\nsetter: function(key) {\n  var self = this;\n  return function(v) {\n    self.set(key, v);\n  }\n}\n```", "```js\nvar Base = require('./Base');\nmodule.exports = Base.extend({\n  data: {\n    url: '/api/user'\n  }\n});\n```", "```js\nwindow.onload = function() {\n  ...\n  userModel = new UserModel();\n  ...\n};\n```", "```js\nvar MongoClient = require('mongodb').MongoClient;\nvar database;\nvar getDatabaseConnection = function(callback) {\n  if(database) {\n    callback(database);\n    return;\n  } else {\n    MongoClient.connect('mongodb://127.0.0.1:27017/nodejs-by-example',  function(err, db) {\n      if(err) {\n        throw err;\n      };\n      database = db;\n      callback(database);\n    });\n  }\n};\n```", "```js\nvar querystring = require('querystring');\nvar processPOSTRequest = function(req, callback) {\n  var body = '';\n  req.on('data', function (data) {\n    body += data;\n  });\n  req.on('end', function () {\n    callback(querystring.parse(body));\n  });\n};\n```", "```js\nvar validEmail = function(value) {\n  var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@( (\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0- 9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(value);\n};\n```", "```js\nRouter.add('api/user', function(req, res) {\n  switch(req.method) {\n    case 'GET':\n      // ...\n    break;\n    case 'PUT':\n      // ...\n    break;\n    case 'POST':\n      processPOSTRequest(req, function(data) {\n        if(!data.firstName || data.firstName === '') {\n          error('Please fill your first name.', res);\n        } else if(!data.lastName || data.lastName === '') {\n          error('Please fill your last name.', res);\n        } else if(!data.email || data.email === '' ||  !validEmail(data.email)) {\n          error('Invalid or missing email.', res);\n        } else if(!data.password || data.password === '') {\n          error('Please fill your password.', res);\n        } else {\n          getDatabaseConnection(function(db) {\n            var collection = db.collection('users');\n            data.password = sha1(data.password);\n            collection.insert(data, function(err, docs) {\n              response({\n                success: 'OK'\n              }, res);\n            });\n          });\n        }\n      });\n    break;\n    case 'DELETE':\n      // ...\n    break;\n  };\n});\n```", "```js\nvar sha1 = require('sha1');\n```", "```js\nRouter\n.add('login', function() {\n    var p = new Login();\n    showPage(p);\n})\n```", "```js\n// frontend/tpl/login.html\n<header>\n  <navigation></navigation>\n</header>\n<div class=\"hero\">\n  <h1>Login</h1>\n</div>\n<form>\n  {{#if error && error != ''}}\n    <div class=\"error\">{{error}}</div>\n  {{/if}}\n  {{#if success && success != ''}}\n    <div class=\"success\">{{{success}}}</div>\n  {{else}}\n    <label for=\"email\">Email</label>\n    <input type=\"text\" id=\"email\" value=\"{{email}}\" />\n    <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" value=\"{{password}}\" />\n    <input type=\"button\" value=\"login\" on-click=\"login\" />\n  {{/if}}\n</form>\n<appfooter />\n```", "```js\n// frontend/js/controllers/Login.js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/login'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  onrender: function() {\n    var self = this;\n    this.observe('email', userModel.setter('email'));\n    this.observe('password', userModel.setter('password'));\n    this.on('login', function() {\n      userModel.login(function(error, result) {\n        if(error) {\n          self.set('error', error.error);\n        } else {\n          self.set('error', false);\n          // redirecting the user to the home page\n          window.location.href = '/';\n        }\n      });\n    });\n  }\n});\n```", "```js\nvar ajax = require('../lib/Ajax');\nvar Base = require('./Base');\nmodule.exports = Base.extend({\n  data: {\n    url: '/api/user'\n  },\n  login: function(callback) {\n    var self = this;\n    ajax.request({\n      url: this.get('url') + '/login',\n      method: 'POST',\n      data: {\n        email: this.get('email'),\n        password: this.get('password')\n      },\n      json: true\n    })\n    .done(function(result) {\n      callback(null, result);\n    })\n    .fail(function(xhr) {\n      callback(JSON.parse(xhr.responseText));\n    });\n  }\n});\n```", "```js\n.add('api/user/login', function(req, res) {\n  processPOSTRequest(req, function(data) {\n    if(!data.email || data.email === '' ||  !validEmail(data.email)) {\n      error('Invalid or missing email.', res);\n    } else if(!data.password || data.password === '') {\n      error('Please enter your password.', res);\n    } else {\n      getDatabaseConnection(function(db) {\n        var collection = db.collection('users');\n        collection.find({ \n          email: data.email,\n          password: sha1(data.password)\n        }).toArray(function(err, result) {\n          if(result.length === 0) {\n            error('Wrong email or password', res);\n          } else {\n            var user = result[0];\n            delete user._id;\n            delete user.password;\n            req.session.user = user;\n            response({\n              success: 'OK',\n              user: user\n            }, res);\n          }\n        });\n      });\n    }\n  });\n})\n```", "```js\nreq.session.user = user;\n```", "```js\nRouter\n.add('static', Assets)\n.add('api', API)\n.add(Default);\n\nvar session = require('cookie-session');\nvar checkSession = function(req, res) {\n  session({\n    keys: ['nodejs-by-example']\n  })(req, res, function() {\n    process(req, res);\n  });\n}\nvar process = function(req, res) {\n  Router.check(req.url, [req, res]);\n}\nvar app = http.createServer(checkSession).listen(port,  '127.0.0.1');\nconsole.log(\"Listening on 127.0.0.1:\" + port);\n```", "```js\nwindow.onload = function() {\n  userModel = new UserModel();\n  userModel.fetch(function(error, result) {\n    // ... router setting\n  });\n}\n```", "```js\n.add('api/user', function(req, res) {\n  switch(req.method) {\n    case 'GET':\n      if(req.session && req.session.user) {\n        response(req.session.user, res);\n      } else {\n        response({}, res);\n      }\n    break;\n    \u2026\n```", "```js\nisLogged: function() {\n  return this.get('value.firstName') &&  this.get('value.lastName');\n}\n```", "```js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/navigation'),\n  onconstruct: function() {\n    this.data.isLogged = userModel.isLogged();\n  }\n});\n```", "```js\nRoute\n.add('profile', function() {\n  if(userModel.isLogged()) {\n    var p = new Profile();\n    showPage(p);\n  } else {\n    Router.navigate('login');\n  }      \n})\n```", "```js\nmodule.exports = Ractive.extend({\n  template: require('../../tpl/profile'),\n  components: {\n    navigation: require('../views/Navigation'),\n    appfooter: require('../views/Footer')\n  },\n  onrender: function() {\n    var self = this;\n    this.set(userModel.get('value'));\n    this.on('updateProfile', function() {\n      userModel.set('value.firstName', this.get('firstName'));\n      userModel.set('value.lastName', this.get('lastName'));\n      if(this.get('password') != '') {\n        userModel.set('value.password', this.get('password'));\n      }\n      userModel.save(function(error, result) {\n        if(error) {\n          self.set('error', error.error);\n        } else {\n          self.set('error', false);\n          self.set('success', 'Profile updated successfully.');\n        }\n      });\n    });\n  }\n});\n```", "```js\n.add('api/user', function(req, res) {\n  switch(req.method) {\n    case 'PUT':\n      processPOSTRequest(req, function(data) {\n        if(!data.firstName || data.firstName === '') {\n          error('Please fill your first name.', res);\n        } else if(!data.lastName || data.lastName === '') {\n          error('Please fill your last name.', res);\n        } else {\n          getDatabaseConnection(function(db) {\n            var collection = db.collection('users');\n            if(data.password) {\n              data.password = sha1(data.password);\n            }\n            collection.update(\n              { email: req.session.user.email },\n              { $set: data }, \n              function(err, result) {\n                if(err) {\n                  err('Error updating the data.');\n                } else {\n                  if(data.password) delete data.password;\n                  for(var key in data) {\n                    req.session.user[key] = data[key];\n                  }\n                  response({\n                    success: 'OK'\n                  }, res);\n                }\n              }\n            );\n          });\n        }\n      });\n    break;\n```"]