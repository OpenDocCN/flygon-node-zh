["```js\nconst http = require('http');\nconst server = http.createServer((request, response) => \n{\n  console.log('request starting...');\n  // respond\n  response.write('hello world!');\n  response.end();\n});\nserver.listen(5000);\nconsole.log('Server running at http://127.0.0.1:5000');\n```", "```js\nnode simple-server.js\n```", "```js\nnpm init -y\n```", "```js\nnpm install hapi --save\n```", "```js\nconst Hapi = require('hapi');\n// create a server with a host and port\nconst server = new Hapi.Server();\nserver.connection\n({\n  host: 'localhost',\n  port: 8000,\n});\n// Start the server\nserver.start((err) => \n{\n  if (err) throw err;\n  console.log(`Server running at: ${server.info.uri}`);\n});\n```", "```js\nnode server.js\n```", "```js\nServer running at: http://localhost:8000\n```", "```js\nhandler: (request, reply) => \n{\n  return reply({ message: 'hello, world' });\n}\n```", "```js\nnode server.js\n```", "```js\n{\n  \"message\": \"hello, world\"\n}\n```", "```js\nnpm install --global nodemon\n```", "```js\nnodemon server.js\n```", "```js\n[nodemon] 1.12.1\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching: *.*\n[nodemon] starting `node server.js`\nServer running at: http://localhost:8000\n```", "```js\nnpm install --save good good-console \n```", "```js\nconst Hapi = require('hapi');\nconst good = require('good');\n```", "```js\n// set up logging\nconst options = {\n  ops: {\n    interval: 100000,\n  },\n  reporters: {\n    consoleReporters: [\n    { module: 'good-console' },\n    'stdout',\n\u2026\n});\n```", "```js\n171102/012027.934, [ops] memory: 34Mb, uptime (seconds):\n100.387, load: [1.94580078125,1.740234375,1.72021484375]\n171102/012207.935, [ops] memory: 35Mb, uptime (seconds):\n200.389, load: [2.515625,2.029296875,1.83544921875]\n...\n```", "```js\n171102/012934.889, [response] http://localhost:8000: get /{} 200 (13ms)\n```", "```js\nconst todoList = [\n  {\n    title: 'Shopping',\n    dateCreated: 'Jan 21, 2018',\n    list: [\n    { \n      text: 'Node.js Books', done: false },\n      ...\n    ]\n  },\n  {\n];\n```", "```js\nconst routes = {};\nroutes.todo = require('./routes/todo')\n// create a server with a host and port\nconst server = new Hapi.Server();\nserver.connection(\n{\n  host: 'localhost',\n  port: process.argv[2] || 8000,\n});\nserver.route(routes.todo);\n```", "```js\nmodule.exports = [\n {\n method: 'GET',\n path: '/todo',\n ...\n handler: (request, reply) => {\n const id = request.params.id - 1; \n // since array is 0-based index\n return reply(todoList[id]);\n }\n },\n];\n```", "```js\nmodule.exports = [\n  // previous code\n  {\n    method: 'POST',\n    path: '/todo',\n    handler: (request, reply) => {\n      const todo = request.payload;\n      todoList.push(todo);\n      return reply({ message: 'created' });\n    \u2026\n];\n```", "```js\n{\n  \"message\": \"created\"\n}\n```", "```js\n[\n...\n  {\n    \"title\": \"Languages to Learn\",\n    \"dateCreated\": \"Mar 2, 2018\",\n```", "```js\n    \"list\": \n     [\n       \"C++\",\n       \"JavaScript\"\n    ]\n  }\n]\n```", "```js\n{\n  method: 'PUT',\n  path: '/todo/{id}',\n  handler: (request, reply) => {\n    const index = request.params.id - 1;\n    // replace the whole resource with the new one\n    todoList[index] = request.payload;\n    return reply({ message: 'updated' });\n  }\n}\n```", "```js\n{\n  \"message\": \"updated\"\n}\n```", "```js\n{\n  method: 'PATCH',\n  handler: (request, reply) => \n  {\n    \u2026\n    Object.keys(request.payload).forEach(key => \n    {\n      if (key in todo) \n      {\n        todo[key] = request.payload[key];\n        \u2026\n    return reply({ message: 'patched' });\n    },\n}\n```", "```js\n{\n  \"message\": \"patched\"\n}\n```", "```js\n{\n  method: 'DELETE',\n  path: '/todo/{id}',\n  handler: (request, reply) => {\n    const index = request.params.id - 1;\n    delete todoList[index]; // replaces with `undefined`\n    return reply({ message: 'deleted' });\n  },\n},\n```", "```js\n{\n  method: 'GET',\n  path: '/todo/{id}',\n  handler: (request, reply) => \n  {\n    const id = request.params.id - 1;\n    // should return 404 error if item is not found\n    if (todoList[id]) return reply(todoList[id]);\n    return reply({ message: 'Not found' }).code(404);\n  }\n}\n```", "```js\n{\n  \"message\": \"Not found\"\n}\n```", "```js\nnpm install joi --save\n```", "```js\n{\n  method: 'POST',\n  path: '/todo',\n  handler: (request, reply) => \n  {\n    const todo = request.payload;\n    todoList.push(todo);\n    return reply({ message: 'created' });\n  },\n...\n},\n```"]