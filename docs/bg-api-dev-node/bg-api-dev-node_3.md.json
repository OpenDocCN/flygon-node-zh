["```js\nCREATE DATABASE todo;\n```", "```js\nnpm install mysql knex --save\n```", "```js\nconst env = process.env.NODE_ENV || 'development';\nconst configs = \n{\n  development: \n  {\n    client: 'mysql',\n    ...\n    const Knex = require('knex')(configs[env]);\n    module.exports = Knex;\n```", "```js\nconst Knex = require('./db');\nKnex.raw('select 1+1 as sum')\n.catch((err) => console.log(err.message))\n.then(([res]) => console.log('connected: ', res[0].sum));\n```", "```js\nnode test-db.js\n```", "```js\nconnected: 2\n```", "```js\nUSE todo;\nINSERT INTO 'user' ('id', 'name', 'email', 'password')\nVALUES (NULL, 'Test User', 'user@example.com',\nMD5('u53rtest'));\n```", "```js\nconst Knex = require('../db');\n```", "```js\n{\n  method: 'POST',\n  path: '/todo',\n  handler: async (request, reply) => \n  {\n    const todo = request.payload;\n    todo.user_id = 1; // hard-coded for now\n    // using array-destructuring here since the\n    // returned result is an array with 1 element\n    const [ todoId ] = await Knex('todo')\n      .returning('id')\n      .insert(todo);\n...\n  }\n},\n```", "```js\nnodemon server.js\n```", "```js\n{\n  method: 'POST',\n  path: '/todo/{id}/item',\n  handler: async (request, reply) => \n  {\n    const todoItem = request.payload;\n    todoItem.todo_id = request.params.id;\n    const [ id ] = await Knex('todo_item')\n      .insert(todoItem);\n    return reply({ message: 'created', id: id });\n...\n},\n```", "```js\n{\n  method: 'GET',\n  path: '/todo',\n  handler: async (request, reply) => \n  {\n    const userId = 1; // hard-coded\n    const todos = await Knex('todo')\n      .where('user_id', userId);\n    return reply(todos);\n  },\n},\n```", "```js\n{\n  method: 'GET',\n  path: '/todo/{id}',\n  ...\n    .where({\n    id: id,\n    user_id: userId\n    });\n  if (todo) return reply(todo);\n  return reply({ message: 'Not found' }).code(404);\n  },\n},\n```", "```js\n{\n  method: 'GET',\n  path: '/todo/{id}/item',\n  handler: async (request, reply) =>\n  {\n    const todoId = request.params.id;\n    const items = await Knex('todo_item')\n      .where('todo_id', todoId);\n    return reply(items);\n  },\n},\n```", "```js\n{\n  method: 'PATCH',\n  path: '/todo/{id}',\n  ...\n    title: Joi.string().required(),\n    }\n  }\n  }\n},\n```", "```js\n{\n  method: 'PATCH',\n  path: '/todo/{todo_id}/item/{id}',\n  handler: async (request, reply) => \n  {\n    const itemId = request.params.id;\n    ...\n    payload: \n    {\n      text: Joi.string(),\n      done: Joi.boolean(),\n    }\n  ...\n},\n```", "```js\n{\n  method: 'DELETE',\n  path: '/todo/{todoId}/item/{id}',\n  handler: async (request, reply) =>\n  {\n    const id = request.params.id;\n    const deleted = await Knex('todo_item')\n      .where('id', id)\n      .delete();\n    return reply({ message: 'deleted' });\n  },\n},\n```", "```js\nconst todoList = [\n...\n];\n```", "```js\n{\n  method: 'PUT',\n  path: '/todo/{id}',\n  handler: (request, reply) =>\n  {\n    const index = request.params.id - 1;\n    // replace the whole resource with the new one\n    todoList[index] = request.payload;\n    return reply({ message: 'updated' });\n  },\n},\n```", "```js\n{\n  method: 'DELETE',\n  path: '/todo/{id}',\n  handler: async (request, reply) =>\n  {\n    const id = request.params.id;\n    const deleted = await Knex('todo')\n      .where('id', id)\n      .delete();\n    return reply({ message: 'deleted' });\n  },\n},\n```", "```js\nnpm install hapi-auth-jwt --save\n```", "```js\nconst hapiAuthJwt = require('hapi-auth-jwt');\n```", "```js\nserver.register(hapiAuthJwt, (err) => \n{\n  server.auth.strategy('token', 'jwt', \n  {\n    key: 'secretkey-hash',\n    verifyOptions: \n    {\n      algorithms: [ 'HS256' ],\n...\n    // add auth config on all routes\n...\n});\n```", "```js\nnpm install jsonwebtoken md5 --save\n```", "```js\nconst jwt = require('jsonwebtoken');\nconst Joi = require('joi');\nconst md5 = require('md5');\nconst Knex = require('../db');\nmodule.exports =\n  {\n  method: 'POST',\n  path: '/auth',\n...\n};\n```", "```js\nroutes.auth = require('./routes/auth');\n```", "```js\nserver.route(routes.auth);\n```", "```js\nconst userId = request.auth.credentials.id;\n```", "```js\nINSERT INTO 'user' ('id', 'name', 'email', 'password')\nVALUES (NULL, 'Another User', 'another@example.com',\nMD5('12345'));\n```", "```js\n{\n  method: 'GET',\n  path: '/todo/{id}/item',\n  handler: async (request, reply) =>\n  {\n    const todoId = request.params.id;\n    ...\n    return reply(items);\n  },\n},\n```", "```js\nserver.connection(\n{\n   host: 'localhost',\n   port: process.argv[2] || 8000,\n   routes:\n   {\n     cors: true,\n   }\n});\n```", "```js\nnpm install lab --save-dev\n```", "```js\nconst assert = require('assert');\n// lab set-up\nconst Lab = require('lab');\nconst lab = exports.lab = Lab.script();\n// get our server(API)\nconst server = require('../server');\n```", "```js\nmodule.exports = server;\n```", "```js\nconfigs.test = configs.development;\n```", "```js\nserver.connection(\n{\n  host: 'localhost',\n  port: process.env.PORT || 8000,\n  routes:\n  {\n    cors: true,\n  }\n});\n```", "```js\nconst\n{\n  experiment,\n  test,\n  before,\n} = lab;\n```", "```js\nexperiment('Base API', () => \n{\n  test('GET: /', () => \n  {\n    const options =\n    {\n      ...\n      assert.equal(response.result.message, 'hello, world');\n    });\n  });\n});\n```", "```js\nPORT=8001 ./node_modules/lab/bin/lab test --leaks\n```", "```js\n\"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n```", "```js\n\"test\": \"PORT=8001 ./node_modules/lab/bin/lab test --leaks\"\n```", "```js\nnpm test\n```", "```js\nexperiment('Authentication', () =>\n{\n  test('GET: /todo without auth', () =>\n  {\n    const options =\n    {\n      method: 'GET',\n      url: '/todo'\n    };\n    server.inject(options, (response) => \n    {\n      assert.equal(response.statusCode, 401);\n    });\n  });\n});\n```", "```js\ninstall gulp gulp-shell gulp-watch --save-dev\n```", "```js\nconst gulp = require('gulp');\nconst shell = require('gulp-shell');\nconst watch = require('gulp-watch');\n...\ngulp.task('test', shell.task('npm test'));\n```", "```js\n\"scripts\": \n{\n  \"test\": \"PORT=8001 ./node_modules/lab/bin/lab test --leaks\",\n  \"test:dev\": \"./node_modules/.bin/gulp test:dev\"\n},\n```", "```js\nnpm run test:dev\n```", "```js\nexperiment('/todo/* routes', () => \n{\n  const headers = \n  {\n    Authorization: 'Bearer ',\n  };\n  before(() => \n  {\n    const options = \n    {\n      method: 'POST',\n      url: '/auth',\n      ...\n});\n```"]