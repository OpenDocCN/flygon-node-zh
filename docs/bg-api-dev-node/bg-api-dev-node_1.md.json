["```js\nmkdir -p beginning-nodejs/lesson-1/activity-a\n```", "```js\nconsole.log(add(10, 6)); // 16\nconsole.log(sum(10, 5, 6)); // 21\n```", "```js\nnode activity-a/math.js\n```", "```js\n// math.js file\nfunction add(a, b) \n{\n  return a + b;\n}\n\u2026\n\u2026\nmodule.exports = \n{\n  add,\n  mul,\n  div,\n};\n// index.js file\nconst math = require('./math');\nconsole.log(math.add(30, 20)); // 50\n```", "```js\nconst fs = require('fs');\nlet file = `${__dirname}/temp/sample.txt`;\nfs.readFile(file, 'utf8', (err, data) => \n{\n  if (err) throw err;\n  console.log(data);\n});\n```", "```js\nnpm install request\n```", "```js\nconst request = require('request');\nrequest('http://www.example.com', (error, response, body) => \n{\n  if (error) console.log('error:', error); // Print the error if one occurred\n  else console.log('body:', body); // Print the HTML for the site.\n});\n```", "```js\nconst config = require('./config/sample');\nconsole.log(config.foo); // bar\n```", "```js\nnpm init\n```", "```js\nnpm install lodash--save\n```", "```js\nconst _ = require('lodash');\n```", "```js\nfunction sumArray() \n{\n  let arr = arguments[0];\n  if (arguments.length > 1) \n  {\n    arr = _.concat(...arguments);\n  }\n  // reusing the sum function\n  // using the spread operator (...) since\n  // sum takes an argument of numbers\n  return sum(...arr);\n}\n```", "```js\n// testing\nconsole.log(math.sumArray([10, 5, 6])); // 21\nconsole.log(math.sumArray([10, 5], [5, 6], [1, 3])) // 30\n```", "```js\nnode index.js\n```", "```js\nconst fs = require('fs');\nlet file = `${__dirname}/temp/sample.txt`;\nfs.readFile(file, 'utf8', (err, data) => \n{\n  if (err) throw err;\n  console.log(data);\n});\n```", "```js\nconst fs = require('fs');\nlet file = `${__dirname}/temp/sample.txt`;\nconst callback = (err, data) => \n{\n  if (err) throw err;\n  console.log(data);\n};\nfs.readFile(file, 'utf8', callback);\n```", "```js\nconst fs = require('fs');\nlet file = `${__dirname}/temp/sample.txt`;\nconst callback = (err, data) => \n{\n  if (err) throw err;\n  console.log(data);\n};\nfs.readFile(file, 'utf8', callback);\nconsole.log('Print out last!');\n```", "```js\nPrint out last!\n hello,\n world\n```", "```js\nconst fs = require('fs');\nconst readFile = (file) => \n{\n  return new Promise((resolve, reject) => \n  {\n    fs.readFile(file, 'utf8', (err, data) => \n    {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n}\n// call the async function\nreadFile(`${__dirname}/../temp/sample.txt`)\n  .then(data => console.log(data))\n  .catch(error => console.log('err: ', error.message));\n```", "```js\nconst fs = require('fs');\nconst util = require('util');\nconst readFile = util.promisify(fs.readFile);\nreadFile(`${__dirname}/../temp/sample.txt`, 'utf8')\n  .then(data => console.log(data))\n  .catch(error => console.log('err: ', error));\n```", "```js\nconst fs = require('fs');\nconst util = require('util');\nconst readFile = util.promisify(fs.readFile);\nconst files = [\n  'temp/sample.txt',\n  'temp/sample1.txt',\n  'temp/sample2.txt',\n];\n// map the files to the readFile function, creating an\n// array of promises\nconst promises = files.map(file => readFile(`${__dirname}/../${file}`, 'utf8'));\nPromise.all(promises)\n  .then(data => \n  {\n    data.forEach(text => console.log(text));\n  })\n  .catch(error => console.log('err: ', error));\n```", "```js\nconst fs = require('fs');\nconst util = require('util');\nconst readFile = util.promisify(fs.readFile);\nasync function readFiles() \n{\n  const content1 = await readFile(`${__dirname}/../temp/sample1.txt`);\n  const content2 = await readFile(`${__dirname}/../temp/sample2.txt`);\n  return content1 + '\\n - and - \\n\\n' + content2;\n}\nreadFiles().then(result => console.log(result));\n```", "```js\nnpm init\n```"]