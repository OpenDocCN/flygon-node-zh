["```js\n// [snip]\n\n// Connect the websocket handler to our server\nvar websocket = require('socket.io')(server);\n// Create a handler for incoming websocket connections\nwebsocket.on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected\");\n  // Tell others a new user connected\n  socket.broadcast.emit('UserConnectedEvent', null);\n  // Bind event handler for incoming messages\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new chat message');\n    // By using the 'broadcast' connector, we will\n    // send the message to everyone except the sender.\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n  });\n});\n\n// Define a separate port for each server we want to start\nvar port = 8080; // get from terminal args, for example\n\nserver.listen(port);\n```", "```js\n// [snip]\n\n// Connect the websocket handler to our server\nvar websocket = require('socket.io')(server);\n// Create a handler for incoming websocket connections\nwebsocket.on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected\");\n  // Tell others a new user connected\n  socket.broadcast.emit('UserConnectedEvent', null);\n  // Bind event handler for incoming messages\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new chat message');\n    // By using the 'broadcast' connector, we will\n    // send the message to everyone except the sender.\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n  });\n});\n```", "```js\nwebsocket.on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected\");\n  // Tell others a new user connected\n  socket.broadcast.emit('UserConnectedEvent', null);\n  // Bind event handler for incoming messages\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new chat message');\n    // By using the 'broadcast' connector, we will\n    // send the message to everyone except the sender.\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n  });\n```", "```js\nvar socket = io.connect('http://localhost:8080');\n```", "```js\nwebsocket.of('/java').on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected to the Java channel\");\n  socket.broadcast.emit('UserConnectedEvent', null);\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new Java chat message');\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n});\n\nwebsocket.of('/scala').on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected to the Scala channel\");\n  socket.broadcast.emit('UserConnectedEvent', null);\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new Scala chat message');\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n});\n\nwebsocket.of('/javascript').on('UserConnectedEvent', function (socket) {\n  console.log(\"New user connected to the Java channel\");\n  socket.broadcast.emit('UserConnectedEvent', null);\n  socket.on('MessageSentEvent', function (chatData) {\n    console.log('Received new Javascript chat message');\n    socket.broadcast.emit('MessageReceivedEvent', chatData);\n});\n```", "```js\nvar javaSocket = io.connect('http://localhost:8080/java');\n\nvar scalaSocket = io.connect('http://localhost:8080/scala');\n\nvar javascriptSocket = io.connect('http://localhost:8080/javascript');\n```", "```js\njavaSocket.on('UserConnectedEvent', function (user) {\n  console.log('User connected to the Java channel:', user);\n});\n```", "```js\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width\">\n    <title></title>\n    <link href=\"lib/ionic/css/ionic.css\" rel=\"stylesheet\">\n    <link href=\"css/style.css\" rel=\"stylesheet\">\n    <!-- IF using Sass (run gulp sass first), then uncomment below and remove the CSS includes above\n    <link href=\"css/ionic.app.css\" rel=\"stylesheet\">\n    -->\n    <!-- ionic/angularjs js -->\n    <script src=\"img/ionic.bundle.js\"></script>\n    <!-- cordova script (this will be a 404 during development) -->\n    <script src=\"img/cordova.js\"></script>\n    <!-- your app's js -->\n    <script src=\"img/socket.io-1.3.5.js\"></script>\n    <script src=\"img/app.services.js\"></script>\n    <script src=\"img/app.controllers.js\"></script>\n    <script src=\"img/app.directives.js\"></script>\n    <script src=\"img/app.js\"></script>\n  </head>\n  <body ng-app=\"ionic-chat-app\">\n <ion-nav-bar class=\"bar-stable\">\n <ion-nav-back-button>\n </ion-nav-back-button>\n </ion-nav-bar>\n <ion-nav-view></ion-nav-view>\n  </body>\n</html>\n```", "```js\n<ion-tabs class=\"tabs-icon-top tabs-color-active-positive\">\n  <!-- Node chat -->\n  <ion-tab title=\"Node Chat\"\n  icon-off=\"ion-ios-chatboxes-outline\"\n  icon-on=\"ion-ios-chatboxes\"\n  href=\"#/app/node\">\n    <ion-nav-view name=\"node-view\">\n    </ion-nav-view>\n  </ion-tab>\n  <!-- Javascript chat -->\n  <ion-tab title=\"JS Chat\"\n  icon-off=\"ion-ios-chatboxes-outline\"\n  icon-on=\"ion-ios-chatboxes\"\n  href=\"#/app/javascript\">\n    <ion-nav-view name=\"javascript-view\">\n    </ion-nav-view>\n  </ion-tab>\n  <!-- Haskell chat -->\n  <ion-tab title=\"Haskell Chat\"\n  icon-off=\"ion-ios-chatboxes-outline\"\n  icon-on=\"ion-ios-chatboxes\"\n  href=\"#/app/haskell\">\n    <ion-nav-view name=\"haskell-view\">\n    </ion-nav-view>\n  </ion-tab>\n  <!-- Erlang chat -->\n  <ion-tab title=\"Erlang Chat\"\n  icon-off=\"ion-ios-chatboxes-outline\"\n  icon-on=\"ion-ios-chatboxes\"\n  href=\"#/app/erlang\">\n    <ion-nav-view name=\"erlang-view\">\n    </ion-nav-view>\n  </ion-tab>\n  <!-- Scala chat -->\n  <ion-tab title=\"Scala Chat\"\n  icon-off=\"ion-ios-chatboxes-outline\"\n  icon-on=\"ion-ios-chatboxes\"\n  href=\"#/app/scala\">\n    <ion-nav-view name=\"scala-view\">\n    </ion-nav-view>\n  </ion-tab>\n</ion-tabs>\n```", "```js\nangular.module('ionic-chat-app',\n[\n  'ionic',\n  'ionic-chat-app-services',\n  'ionic-chat-app-controllers'\n])\n.run(function ($ionicPlatform) {\n  $ionicPlatform.ready(function () {\n  if (window.cordova && window.cordova.plugins.Keyboard) {\n    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n  }\n  if (window.StatusBar) {\n    StatusBar.styleDefault();\n  }\n})\n})\n.config(function ($stateProvider, $urlRouterProvider) {\n  // Configure the routing\n  $stateProvider\n  // Each tab has its own nav history stack:\n  .state('app', {\n     url: '/app',\n     abstract: true,\n     templateUrl: \"templates/tabs.html\"\n  })\n  .state('app.node', {\n  url: '/node',\n  views: {\n    'node-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n      resolve: {\n        chatRoom: function () {\n          return 'node';\n        }\n      }\n    }\n  }\n})\n.state('app.javascript', {\n  url: '/javascript',\n  views: {\n    'javascript-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n      resolve: {\n        chatRoom: function () {\n          return 'javascript';\n        }\n      }\n    }\n  }\n})\n.state('app.haskell', {\n  url: '/haskell',\n  views: {\n    'haskell-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n      resolve: {\n        chatRoom: function () {\n          return 'haskell';\n        }\n      }\n    }\n  }\n})\n.state('app.erlang', {\n  url: '/erlang',\n  views: {\n    'erlang-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n      resolve: {\n        chatRoom: function () {\n          return 'erlang';\n        }\n      }\n    }\n  }\n})\n.state('app.scala', {\n  url: '/scala',\n  views: {\n    'scala-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n      resolve: {\n        chatRoom: function () {\n          return 'scala';\n        }\n      }\n    }\n  }\n});\n$urlRouterProvider.otherwise('/app/node');\n})\n```", "```js\n<ion-view view-title=\"chat\">\n  <ion-content>\n    <div class=\"list\">\n      <a collection-repeat=\"message in messages\"\n      class=\"item item-avatar\"\n      ng-class=\"{'other-chatbox' : message.external}\">\n        <h2>{{message.name}}</h2>\n        <p>{{message.text}}</p>\n      </a>\n    </div>\n\n  </ion-content>\n  <div class=\"bar bar-footer bar-balanced\">\n    <label class=\"item-input-wrapper\">\n      <input id=\"message-input\"\n      type=\"text\"\n      placeholder=\"Message\"\n      ng-model=\"inputMessage\">\n    </label>\n    <button class=\"button button-small\"\n    ng-click=\"onSend()\">\n      Submit\n    </button>\n  </div>\n</ion-view>\n```", "```js\n#message-input {\n  width: 100%;\n}\n\n.item-avatar {\n  padding-left: 16px;\n}\n\n.other-chatbox {\n  text-align: right;\n}\n```", "```js\nangular.module('ionic-chat-app-controllers', [])\n.controller('ChatController', function ($scope, ChatService, chatRoom) {\n  var connection = ChatService.connect(chatRoom);\n  // The chat messages\n  $scope.messages = [];\n  // Notify whenever a new user connects\n  connection.on.userConnected(function (user) {\n    $scope.messages.push({\n      name: 'Chat Bot',\n      text: 'A new user has connected!'\n    });\n    $scope.$apply();\n  });\n  // Whenever a new message appears, append it\n  connection.on.messageReceived(function (message) {\n    message.external = true;\n    $scope.messages.push(message);\n    $scope.$apply();\n  });\n  $scope.inputMessage = '';\n  $scope.onSend = function () {\n    $scope.messages.push({\n      name: 'Me',\n      text: $scope.inputMessage\n    });\n    // Send the message to the server\n    connection.emit({\n      name: 'Anonymous',\n      text: $scope.inputMessage\n    });\n    // Clear the chatbox\n    $scope.inputMessage = '';\n  }\n});\n```", "```js\n.state('app.scala', {\n  url: '/scala',\n  views: {\n    'scala-view': {\n      templateUrl: 'templates/app-chat.html',\n      controller: 'ChatController',\n resolve: {\n chatRoom: function () {\n return 'scala';\n }\n }\n    }\n  }\n});\n```", "```js\nangular.module('ionic-chat-app-services', [])\n.service('ChatService', function ChatService($rootScope) {\n  function ChatConnection(chatName) {\n    this.chatName = chatName;\n    // Init the Websocket connection\n    var socket = io.connect('http://localhost:8080/' + chatName);\n    // Bridge events from the Websocket connection to the rootScope\n    socket.on('UserConnectedEvent', function (user) {\n      console.log('User connected:', user);\n      $rootScope.$emit('UserConnectedEvent', user);\n    });\n    /*\n    * Send a message to the server.\n    * @param message\n    */\n    socket.on('MessageReceivedEvent', function (message) {\n      console.log('Chat message received:', message);\n      $rootScope.$emit('MessageReceivedEvent', message);\n    });\n    this.emit = function (message) {\n      console.log('Sending chat message:', message);\n      socket.emit('MessageSentEvent', message);\n    };\n    this.on = {\n      userConnected: function (callback) {\n        $rootScope.$on('UserConnectedEvent', function (event, user) {\n          callback(user);\n        });\n      },\n      messageReceived: function (callback) {\n        $rootScope.$on('MessageReceivedEvent', function (event, message) {\n          callback(message);\n        });\n      }\n    }\n  }\n  /**\n  * Establishes a new chat connection.\n  *\n  * @param chatName name of the chat room to connect to\n  * @returns {ChatService.ChatConnection}\n  */\n  this.connect = function (chatName) {\n    return new ChatConnection(chatName);\n  }\n});\n```", "```js\nvar http = require('http');\nvar url = require('url');\nvar fs = require('fs');\nvar server = http.createServer(function (req, res) {\n  var parsedUrl = url.parse(req.url, true);\n  switch (parsedUrl.pathname) {\n    case '/':\n    // Read the file into memory and push it to the client\n    fs.readFile('index.html', function (err, content) {\n      if (err) {\n        res.writeHead(500);\n        res.end();\n      }\n      else {\n        res.writeHead(200, {'Content-Type': 'text/html'});\n        res.end(content, 'utf-8');\n      }\n    });\n    break;\n  }\n});\nserver.listen(8080);\nserver.on('listening', function () {\n  console.log('Websocket server is listening on port', 8080);\n});\n// Connect the websocket handler to our server\nvar websocket = require('socket.io')(server);\n// Configure the chat rooms\n['node', 'javascript', 'haskell', 'erlang', 'scala'].forEach(function (chatRoom) {\n  websocket.of('/' + chatRoom).on('connection', function (socket) {\n    console.log(\"New user connected to\", chatRoom);\n    // Tell others a new user connected\n    socket.broadcast.emit('UserConnectedEvent', null);\n    // Bind event handler for incoming messages\n    socket.on('MessageSentEvent', function (chatData) {\n      console.log('Received new chat message', chatData);\n      // By using the 'broadcast' connector, we will\n      // send the message to everyone except the sender.\n      socket.broadcast.emit('MessageReceivedEvent', chatData);\n    });\n  });\n});\n```"]