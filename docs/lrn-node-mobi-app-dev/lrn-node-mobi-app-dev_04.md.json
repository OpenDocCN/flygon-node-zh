["```js\n use OrderBase;\n db.createCollection('User');\n db.createCollection('Role');\n db.createCollection('AccessToken');\n\n```", "```js\nUser:\n{\n    firstName,\n    lastName,\n    email,\n    roleID,\n    password\n}\n```", "```js\nvar db = require('./database');\n\nmodule.exports = {\n  database: 'OrderBase',\n  collection: 'AccessTokens',\n  generateToken: function (user, callback) {\n    var token = {\n      userID: user._id\n    }\n  }\n\n  // Persist and return the token\n  db.insert(this.database, this.collection, token, function (err, res) {\n    if (err) {\n      callback(err, null);\n    } else {\n      callback(null, res);\n    }\n  });\n},\nauthenticate: function (user, password, callback) {\n  if (user.password ==== password) {\n    // Create a new token for the user\n    this.generateToken(user, function (err, res) {\n      callback(null, res);\n  });});\n  } else {\n    callback({\n      error: 'Authentication error',\n      message: 'Incorrect username or password'\n    }, null);\n  }\n}\n}\n```", "```js\nvar authentication = require('./authentication');\n\n```", "```js\nvar insertUser = function (user, req, res) {\n  insertResource('OrderBase', 'User', user, function (err, result) {\n    res.writeHead(200, {\"Content-Type\": \"application/json\"});\n    res.end(JSON.stringify(result));\n  });\n};\n```", "```js\ncase 'api/users/register':\n  if (req.method === 'POST') {\n    var body = \"\";\n    req.on('data', function (dataChunk) {\n      body += dataChunk;\n    });\n    req.on('end', function () {\n\n      // Done pulling data from the POST body.\n      // Turn it into JSON and proceed to store.\n      var postJSON = JSON.parse(body);\n\n      // validate that the required fields exist\n      if (postJSON.email\n      && postJSON.password\n      && postJSON.firstName\n      && postJSON.lastName) {\n        insertUser(postJSON, req, res);\n      } else {\n        res.end('All mandatory fields must be provided');\n      }\n    });\n  }\n  break;\n```", "```js\ncase 'api/users/login':\n  if (req.method === 'POST') {\n    var body = \"\";\n    req.on('data', function (dataChunk) {\n      body += dataChunk;\n    });\n    req.on('end', function () {\n\n      var postJSON = JSON.parse(body);\n\n      // make sure that email and password have been provided\n      if (postJSON.email && postJSON.password) {\n        findUserByEmail(postJSON.email, function (err, user) {\n          if (err) {\n            res.writeHead(404, {\"Content-Type\": \"application/json\"});\n            res.end({\n              error: \"User not found\",\n              message: \"No user found for the specified email\"\n            });\n          } else {\n            // Authenticate the user\n            authenticator.authenticate(\n            user, postJSON.password, function(err, token) {\n              if(err) {\n                res.end({\n                  error: \"Authentication failure\",\n                  message: \"User email and password do not match\"\n                });\n              } else {\n                res.writeHead(200, {\"Content-Type\": \"application/json\"});\n              res.end(JSON.stringify(token));\n              }\n            });\n          }\n        });\n      });\n\n    } else {\n      res.end('All mandatory fields must be provided');\n    }\n  });\n}\n  break;\n```", "```js\nvar findUserByEmail = function (email, callback) {\n  database.find('OrderBase', 'User', {email: email}, function (err, user) {\n    if (err) {\n      callback(err, null);\n    } else {\n      callback(null, user);\n    }\n  });\n};\n```", "```js\ntokenOwnerHasRole: function (token, roleName, callback) {\n  var database = this.database;\n  db.find(database, 'User', {_id: token.userID}, function (err, user) {\n    db.find(database, 'Role', {_id: user.roleID}, function (err, role) {\n      if(err){\n        callback(err, false);\n      }\n      else if (role.name ==== roleName) {\n        callback(null, true);\n      }\n      else {\n        callback(null, false);\n      }\n    });\n  });\n}\n```", "```js\ncase '/api/products':\n  if (req.method === 'GET') {\n    // Find and return the product with the given id\n    if (parsedUrl.query.id) {\n      findProductById(id, req, res);\n    }\n    // There is no id specified, return all products\n    else {\n      findAllProducts(req, res);\n    }\n  }\n  else if (req.method === 'POST') {\n    var body = \"\";\n    req.on('data', function (dataChunk) {\n      body += dataChunk;\n    });\n    req.on('end', function () {\n      var postJSON = JSON.parse(body);\n\n      // Verify access rights\n      getTokenById(postJSON.token, function (err, token) {\n        authenticator.tokenOwnerHasRole(token, 'PRODUCER', function (err, result) {\n          if (result) {\n            insertProduct(postJSON, req, res);\n          } else {\n          res.writeHead(403, {\"Content-Type\": \"application/json\"});\n            res.end({\n              error: \"Authentication failure\",\n              message: \"You do not have permission to perform that action\"\n            });\n          }\n        });\n      });\n    });\n  }\n  break;\n```", "```js\nvar bcrypt = require('bcrypt');\n\nvar userPlaintextPassword = \"ISecretlyLoveUnicorns\";\nvar userHashedPassword = \"\";\n\n// First generate a salt value to hash the password with\nbcrypt.genSalt(10, function(err, salt) {\n  // Hash the password using the salt value\n  bcrypt.hash(userPlaintextPassword, salt,\n  function(err, hashedPassword) {\n    // We now have a fully hashed password\n    userHashedPassword = hashedPassword;\n  });\n});\n\n// Use the same module to compare the hashed password with potential\n//matches.\nbcrypt.compare(\"ISecretlyLoveUnicorns\", userHashedPassword,\n  function(err, result) {\n    // Result will simply be true if hashing succeeded.\n  });\nbcrypt.compare(\"ISecretlyHateUnicorns\", userHashedPassword,\n  function(err,  result) {\n    // result will be false if the comparison fails\n});\n```"]