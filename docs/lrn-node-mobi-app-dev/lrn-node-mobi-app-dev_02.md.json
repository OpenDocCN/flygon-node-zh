["```js\n{\n  \"_id\" : ObjectId(\"547cb6f109ce675dbffe0da5\"),\n  \"name\" : \"Fleur-De-Lys Pharmacy\",\n  \"licenseNumber\" : \"DL 133\",\n  \"address\" : \"430, Triq Fleur-de-Lys\",\n  \"geolocation\" : {\n  \"lat\" : 35.8938857,\n  \"lng\" : 14.46954679999999\n  },\n  \"postCode\" : \"BKR 9060\",\n  \"localityId\" : ObjectId(\"54c66564e11825536f510963\")\n}\n```", "```js\nmongo\n\n```", "```js\nC:\\mongodb\\bin\\mongo.exe\n\n```", "```js\n> use OrderBase\n\n```", "```js\nswitched to db OrderBase\n\n```", "```js\n    > db.createCollection('Products')\n\n    ```", "```js\n    { \"ok\" : 1 }\n\n    ```", "```js\n    > db.createCollection('Orders')\n    > db.createCollection(Customers'Customers')\n\n    ```", "```js\n    {\n      \"name\" : \"Apple\",\n      \"price\" : 2.5\n    }\n    ```", "```js\n    > db.Products.insert({\"name\" : \"Apple\", \"price\" : 2.5})\n\n    ```", "```js\n    WriteResult({ \"nInserted\" : 1 })\n\n    ```", "```js\n    > db.Products.find()\n\n    ```", "```js\n    { \"_id\" : ObjectId(\"54f8f04a598e782be72d6294\"),\n     \"name\" : \"Apple\",\n    \"price\" : 2.5 }\n    ```", "```js\n    > db.Products.insert([{\"name\" : \"Pear\", \"price\" : 3.0}, {\"name\" : \"Orange\", \"price\" : 3.0}])\n\n    ```", "```js\n    BulkWriteResult({\n        \"writeErrors\" : [ ],\n        \"writeConcernErrors\" : [ ],\n        \"nInserted\" : 2,\n        \"nUpserted\" : 0,\n        \"nMatched\" : 0,\n        \"nModified\" : 0,\n        \"nRemoved\" : 0,\n        \"upserted\" : [ ]\n    })\n    ```", "```js\n    { \"_id\" : ObjectId(\"54f8f04a598e782be72d6294\"), \"name\" : \"Apple\", \"price\" : 2.5 }\n    { \"_id\" : ObjectId(\"54f8f6b8598e782be72d6295\"), \"name\" : \"Pear\", \"price\" : 3 }\n    { \"_id\" : ObjectId(\"54f8f6b8598e782be72d6296\"), \"name\" : \"Orange\", \"price\" : 3 }\n\n    ```", "```js\n    > db.Customers.insert(\n    [\n    {\"firstName\" : \"Jane\", \"lastName\" : \"Doley\"},\n    {\"firstName\" : \"John\", \"lastName\" : \"Doley\"}\n    ])\n\n    ```", "```js\n    > db.Customers.find()\n\n    ```", "```js\n    {\n    \"_id\" : ObjectId(\"54f94003ea8d3ea069f2f652\"),\n    \"firstName\" : \"Jane\",\n    \"lastName\" : \"Doley\"\n    },\n    {\n    \"_id\" : ObjectId(\"54f94003ea8d3ea069f2f653\"),\n    \"firstName\" : \"John\",\n    \"lastName\" : \"Doley\"\n    }\n    ```", "```js\n{\n\"customer\" :\n{\n\"firstName\" : \"Jane\",\n\"lastName\" : \"Doley\"\n},\n\"product\" :\n{\n\"name\" : \"Pear\",\n\"price\" : 3\n}\n}\n```", "```js\n{\n\"customerId\" : ObjectId(\"54f94003ea8d3ea069f2f652\")\n\"productId\" : ObjectId(\"54f8f6b8598e782be72d6295\")\n}\n```", "```js\ndb.Orders.insert({\n\"customerId\" : ObjectId(\"54f94003ea8d3ea069f2f652\"),\n\"productId\" : ObjectId(\"54f8f6b8598e782be72d6295\")\n})\n```", "```js\n{\n\"_id\" : ObjectId(\"54f976ccea8d3ea069f2f654\"),\n\"customerId\" : ObjectId(\"54f94003ea8d3ea069f2f652\"),\n\"productId\" : ObjectId(\"54f8f6b8598e782be72d6295\")\n}\n```", "```js\n> use OrderBase\n\n```", "```js\n> db.Products.find(\n{\n_id: ObjectId(\"54f8f6b8598e782be72d6295\")\n})\n```", "```js\n{ \"_id\" : ObjectId(\"54f8f6b8598e782be72d6295\"), \"name\" : \"Pear\", \"price\" : 1.5 }\n```", "```js\ndb.Products.find()\n```", "```js\n{ _id: ObjectId(\"54f8f6b8598e782be72d6295\") }\n```", "```js\n> db.Products.findOne({\n_id: ObjectId(\"54f8f6b8598e782be72d6295\")\n})\n```", "```js\ndb.Products.find({\"name\" : \"Orange\"})\n```", "```js\n{ \"_id\" : ObjectId(\"54f8f6b8598e782be72d6296\"), \"name\" : \"Orange\", \"price\" : 3 }\n```", "```js\ndb.Products.find({\"price\" : 3.0})\n```", "```js\n{ \"_id\" : ObjectId(\"54f8f6b8598e782be72d6296\"), \"name\" : \"Orange\", \"price\" : 3 },\n{ \"_id\" : ObjectId(\"54f9b82caf8e5041d9e0af09\"), \"name\" : \"Pear\", \"price\" : 3 }\n```", "```js\nnpm init\n\n```", "```js\nname: (MongoNode)\nversion: (0.0.0)\ndescription: Simple project demonstrating how to interface with a MongoDB instance from Node.js\nentry point: (index.js)\ntest command:\ngit repository:\nkeywords:\nauthor: Yours Truly\nlicense: (BSD)\nAbout to write to /home/user/IdeaProjects/nodebook-ch2/MongoNode/package.json:\n\n{\n  \"name\": \"MongoNode\",\n  \"version\": \"0.0.0\",\n  \"description\": \"Simple project demonstrating how to interface with a MongoDB instance   from Node.js\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n  \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"Yours Truly\",\n  \"license\": \"BSD\"\n}\n\nIs this ok? (yes)\n```", "```js\nconsole.log('Hello World!');\n\n```", "```js\nnode index.js\n\n```", "```js\nnpm install mongodb -save\n\n```", "```js\n// Our primary interface for the MongoDB instance\nvar MongoClient = require('mongodb').MongoClient;\n\n// Used in order to verify correct return values\nvar assert = require('assert');\n\n/**\n*\n* @param databaseName - name of the database we are connecting to\n* @param callBack - callback to execute when connection finishes\n*/\nvar connect = function (databaseName, callback) {\n\n  // URL to the MongoDB instance we are connecting to\n  var url = 'mongodb://localhost:27017/' + databaseName;\n\n  // Connect to our MongoDB instance, retrieve the selected\n  // database, and execute a callback on it.\n  MongoClient.connect(url, function (error, database) {\n\n    // Make sure that no error was thrown\n    assert.equal(null, error);\n\n    console.log(\"Successfully connected to MongoDB instance!\");\n\n    callback(database);\n  });\n};\n\n/**\n* Executes the find() method of the target collection in the\n* target database, optionally with a query.\n* @param databaseName - name of the database\n* @param collectionName - name of the collection\n* @param query - optional query parameters for find()\n*/\nexports.find = function (databaseName, collectionName, query) {\n  connect(databaseName, function (database) {\n\n    // The collection we want to find documents from\n    var collection = database.collection(collectionName);\n\n    // Search the given collection in the given database for\n    // all documents which match the criteria, convert them to\n    // an array, and finally execute a callback on them.\n    collection.find(query).toArray(\n      // Callback method\n      function (err, documents) {\n\n        // Make sure nothing went wrong\n        assert.equal(err, null);\n\n        // Print all the documents that we found, if any\n        console.log(\"MongoDB returned the following documents:\");\n        console.dir(documents);\n\n        // Close the database connection to free resources\n        database.close();\n    })\n  })\n};\n```", "```js\nvar database = require('./database');\n```", "```js\ndatabase.find('OrderBase', 'Products', {});\n```", "```js\ndb.Products.find();\n```", "```js\nnode index.js\n```", "```js\n[ { _id: 54f8f04a598e782be72d6294, name: 'Apple', price: 2.5 },\n  { _id: 54f8f6b8598e782be72d6295, name: 'Pear', price: 1.5 },\n  { _id: 54f8f6b8598e782be72d6296, name: 'Orange', price: 3 },\n  { _id: 54f9b82caf8e5041d9e0af09, name: 'Banana', price: 3 } ]\n```"]